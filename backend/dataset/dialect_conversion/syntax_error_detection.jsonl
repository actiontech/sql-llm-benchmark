{"case_id": "1", "difficulty_level": "1", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT name, id FROM students WHERE age > 10;"}
{"case_id": "2", "difficulty_level": "1", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "INSERT INTO products (product_name, price) VALUES ('Laptop', 1200);"}
{"case_id": "3", "difficulty_level": "1", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "UPDATE employees SET salary = 60000 WHERE employee_id = 101;"}
{"case_id": "4", "difficulty_level": "1", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "DELETE FROM orders WHERE order_date < '2023-01-01';"}
{"case_id": "5", "difficulty_level": "1", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "CREATE TABLE users (user_id INT PRIMARY KEY AUTO_INCREMENT, username VARCHAR(50) NOT NULL);"}
{"case_id": "6", "difficulty_level": "1", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "ALTER TABLE products ADD COLUMN description TEXT;"}
{"case_id": "7", "difficulty_level": "1", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "DROP TABLE old_data;"}
{"case_id": "8", "difficulty_level": "2", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT max(weight) FROM fruits;"}
{"case_id": "9", "difficulty_level": "2", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT product_id, product_name, price FROM products ORDER BY price DESC LIMIT 10 OFFSET 5;"}
{"case_id": "10", "difficulty_level": "2", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT COUNT(DISTINCT city) FROM customers;"}
{"case_id": "11", "difficulty_level": "2", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 100;"}
{"case_id": "12", "difficulty_level": "2", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "CREATE TABLE audit_log (\n    log_id INT AUTO_INCREMENT PRIMARY KEY,\n    action_type VARCHAR(50),\n    log_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP\n);"}
{"case_id": "13", "difficulty_level": "2", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "ALTER TABLE articles MODIFY COLUMN content LONGTEXT;"}
{"case_id": "14", "difficulty_level": "2", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT IFNULL(commission, 0) FROM sales_reps WHERE rep_id = 1;"}
{"case_id": "15", "difficulty_level": "2", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT DATE_FORMAT(order_date, '%Y-%m-%d') FROM orders WHERE order_id = 1001;"}
{"case_id": "16", "difficulty_level": "2", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT CONCAT(first_name, ' ', last_name) FROM employees WHERE employee_id = 10;"}
{"case_id": "17", "difficulty_level": "3", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "DELIMITER $$\nCREATE PROCEDURE GetCustomerOrderCount(IN customer_id_param INT, OUT order_count INT)\nBEGIN\n    SELECT COUNT(*) INTO order_count FROM orders WHERE customer_id = customer_id_param;\nEND $$\nDELIMITER ;"}
{"case_id": "18", "difficulty_level": "3", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "CREATE TABLE products_with_uuid (\n    product_id BINARY(16) PRIMARY KEY DEFAULT (UUID_TO_BIN(UUID())),\n    product_name VARCHAR(255)\n);"}
{"case_id": "19", "difficulty_level": "3", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT\n    e.employee_name,\n    CASE\n        WHEN e.salary < 50000 THEN 'Junior'\n        WHEN e.salary BETWEEN 50000 AND 80000 THEN 'Mid-level'\n        ELSE 'Senior'\n    END AS salary_level\nFROM\n    employees e;"}
{"case_id": "20", "difficulty_level": "3", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "DELIMITER $$\nCREATE TRIGGER before_employee_update\nBEFORE UPDATE ON employees\nFOR EACH ROW\nBEGIN\n    IF NEW.salary < OLD.salary THEN\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot decrease employee salary!';\n    END IF;\nEND $$\nDELIMITER ;"}
{"case_id": "21", "difficulty_level": "3", "source_dialect": "Oracle", "target_dialect": "MySQL", "sql": "CREATE OR REPLACE PROCEDURE \"SP_KSH_PERSON_FEE\" (V_USER_ID IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS V_TEMP_COMPANY VARCHAR(20); BEGIN SELECT HP.COMPANY_CODE INTO V_TEMP_COMPANY FROM KSH_USER_HOME_PAGE HP WHERE HP.USER_ID =V_USER_ID; IF V_TEMP_COMPANY<>'00000000' THEN OPEN OUTCURSOR FOR SELECT SYS_GUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT FROM ( SELECT FD.INVOICE_SORT_NAME,FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE, SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT FROM KSH_CSCE_VESSEL_FEE VC INNER JOIN KSH_FEE_INVOICE_DEFINE FD ON NVL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL AND FD.COMPANY_CODE= VC.COMPANY_CODE WHERE VC.TARGET_YEAR = TO_CHAR(SYSDATE, 'YYYY') AND EXISTS (select 1 from ksh_user_manage_ship um where um.user_id = V_USER_ID and um.vessel_code = VC.vessel_code) GROUP BY FD.INVOICE_SORT_NAME,FD.COMPANY_SORT_SEQ,VC.VESSEL_CODE) TEMP GROUP BY TEMP.INVOICE_SORT_NAME; ELSE OPEN OUTCURSOR FOR SELECT SYS_GUID AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT FROM ( SELECT FD.GROUP_SORT_NAME AS INVOICE_SORT_NAME,FD.Group_Sort_Seq, VC.VESSEL_CODE, SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT FROM KSH_CSCE_VESSEL_FEE VC INNER JOIN KSH_FEE_INVOICE_DEFINE FD ON NVL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL AND FD.GROUP_SORT IS NOT NULL WHERE VC.TARGET_YEAR = TO_CHAR(SYSDATE, 'YYYY') AND EXISTS (select 1 from ksh_user_manage_ship um where um.user_id = V_USER_ID and um.vessel_code = VC.vessel_code) GROUP BY FD.GROUP_SORT_NAME,FD.Group_Sort_Seq,VC.VESSEL_CODE) TEMP GROUP BY TEMP.INVOICE_SORT_NAME, TEMP.Group_Sort_Seq ORDER BY TEMP.Group_Sort_Seq; END IF; END SP_KSH_PERSON_FEE;"}
{"case_id": "22", "difficulty_level": "3", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "CREATE OR REPLACE PROCEDURE \"SP_SYNC_R_CHECK\"( I_VESSEL_CODE VARCHAR2, I_CHECK_GRADE VARCHAR2, I_DEPT VARCHAR2, I_RESPONSIBLE_PERSON VARCHAR2, I_CHECK_NAME VARCHAR2, I_CHECK_DATE VARCHAR2 ) IS CURSOR CUR(I_BEGIN_DATE DATE, I_END_DATE DATE) IS SELECT CWBT_NAME, I.CWBT_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.CHECK_GRADE, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.CHECK_GRADE = I_CHECK_GRADE AND I.VESSEL_CODE = I_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND ( I_DEPT IS NULL OR I.DEPT = I_DEPT ) AND ( I_RESPONSIBLE_PERSON IS NULL OR I.RESPONSIBLE_PERSON = I_RESPONSIBLE_PERSON ) AND ( I_CHECK_NAME IS NULL OR ( I_CHECK_NAME IS NOT NULL AND I.CHECK_NAME LIKE '%' || I_CHECK_NAME || '%' ) ) AND I.DATA_TYPE = 'S'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR2(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO'; IF I_CHECK_DATE IS NULL THEN DAT_BEGIN: = TO_DATE( TO_CHAR(SYSDATE(), 'YYYY') || '-01-01', 'YYYY-MM-DD' ); DAT_END: = TO_DATE( TO_CHAR(SYSDATE(), 'YYYY') || '-12-31', 'YYYY-MM-DD' ); ELSIF LENGTH(I_CHECK_DATE) = 4 THEN DAT_BEGIN: = TO_DATE(I_CHECK_DATE || '-01-01' ， 'YYYY-MM-DD'); DAT_END: = TO_DATE （ I_CHECK_DATE || '-12-31', 'YYYY-MM-DD' ); ELSE DAT_BEGIN: = TO_DATE(I_CHECK_DATE || '-01', 'YYYY-MM-DD'); DAT_END: = LAST_DAY(DAT_BEGIN); END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO ( PID, CWBT_NAME, CWBT_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, CHECK_GRADE, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE ) SELECT REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.CWBT_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.CHECK_GRADE, TRUNC(REC.CHECK_DATE, 'MM'), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE FROM DUAL; END IF; SELECT CASE I_CHECK_GRADE WHEN 'A' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'DD') AS NUMBER) WHEN 'B' THEN CAST( TO_CHAR( PKG_DATE_UTIL.GET_1ST_M( REC.CHECK_DATE, DECODE(LENGTH(I_CHECK_DATE), 4, 'YY', 'MM') ), DECODE(LENGTH(I_CHECK_DATE), 4, 'WW', 'W') ) AS NUMBER ) WHEN 'C' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'MM') AS NUMBER) END INTO VAR_SUFFIX FROM DUAL; EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || VAR_SUFFIX || ' = :1 WHERE I.PID = :2' USING CASE REC.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; DBMS_OUTPUT.ENABLE(10000); DBMS_OUTPUT.PUT_LINE(SQLERRM); END SP_PMS_SYNC_ROUTINE_CHECK;"}
{"case_id": "23", "difficulty_level": "3", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "CREATE OR REPLACE PROCEDURE \"SP_FEE_CSBC_HOUR_JOB\" IS V_FLAG varchar2(50); V_HOUR VARCHAR2(50); BEGIN select open_mode into V_FLAG from v$database; SELECT TO_CHAR(SYSDATE,'HH24') INTO V_HOUR FROM DUAL; IF V_FLAG = 'READ WRITE' AND (V_HOUR ='12') then P_LOG_EXCEPTION('开始时间:' || sysdate, 'SP_FEE_CSBC_HOUR_JOB'); commit; delete from fmm_csbc_middle_esti es where es.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_esti select * from vw_csbc_middle_esti es where es.audit_date>=trunc(sysdate); delete from FMM_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=trunc(sysdate); insert into FMM_CSBC_RBT_MIDDLE_ESTI select * from VW_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=trunc(sysdate); commit; delete from FMM_CSBC_MAINTENANCE_CONSUME mc where exists (select 1 from VW_CSBC_MAINTENANCE_CONSUME mc2 where mc2.BIZ_UUID = mc.biz_uuid and mc2.update_time>=trunc(sysdate)); insert into FMM_CSBC_MAINTENANCE_CONSUME select * from VW_CSBC_MAINTENANCE_CONSUME mc where mc.update_time>=trunc(sysdate); delete from fmm_csbc_maintenance_esti_rpt es where exists (select 1 from vw_csbc_maintenance_esti_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=trunc(sysdate)); insert into fmm_csbc_maintenance_esti_rpt select * from vw_csbc_maintenance_esti_rpt es where es.update_time>=trunc(sysdate); delete from Fmm_Csbc_Maintenance_Invo_Rp5 es where exists (select 1 from vw_Csbc_Maintenance_Invo_Rp5 es2 where es2.FEE_INVOICE_ID = es.FEE_INVOICE_ID and es2.update_time>=trunc(sysdate)); insert into Fmm_Csbc_Maintenance_Invo_Rp5 select * from vw_Csbc_Maintenance_Invo_Rp5 es where es.update_time>=trunc(sysdate); delete from FMM_csbc_maintenance_expec_rpt es where exists (select 1 from vw_csbc_maintenance_expec_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=trunc(sysdate)); insert into FMM_csbc_maintenance_expec_rpt select * from vw_csbc_maintenance_expec_rpt es where es.update_time>=trunc(sysdate); commit; delete from fmm_csbc_middle_estt2 tt where tt.process_code ='INV_CX' and tt.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_estt2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN ES.BASE_AMOUNT>0 THEN -1 ELSE 1 END) *FN_GET_CSBC_FEE_CHARGE(es.rec_uuid,es.db_table,es.vessel_code), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es where process_code ='INV_CX' and es.audit_date>=trunc(sysdate); commit; delete from fmm_csbc_middle_esti es where es.process_code ='INV_CX'; insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_estt2 fc WHERE FC.process_code ='INV_CX'; commit; delete from fmm_csbc_middle_esti3 tt where tt.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, nvl(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es left join fmm_csbc_middle_esti es2 on FN_GET_CSBC_EST_CHARGE_AP(es.rec_uuid||es.apply_no)= es2.rec_uuid||es2.apply_no where es.base_amount<0 and es.process_code ='EST' and es.audit_date>=trunc(sysdate); delete from fmm_csbc_middle_esti es where base_amount<0 and es.process_code ='EST'; insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_esti3 fc; commit; EXECUTE IMMEDIATE 'truncate table fmm_csbc_rbt_middle_esti2'; insert into fmm_csbc_rbt_middle_esti2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN es.DB_TABLE ='SJ11_F' THEN -1 ELSE 1 END)* FN_GET_CSBC_FEE_CHARGE_AP(es.rec_uuid,replace(es.db_table,'_F',''),nvl(vv.corporate_code,vv.vessel_code),ES.APPLY_NO), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es inner join vop_vessel vv on es.vessel_code = vv.vessel_code where process_code ='INV_CX' and nvl(es.sap_imp_status,'T') <>'F'; commit; delete from fmm_csbc_rbt_middle_esti es where es.process_code ='INV_CX' and nvl(es.sap_imp_status,'T') <>'F'; insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti2 fc; commit; EXECUTE IMMEDIATE 'truncate table fmm_csbc_rbt_middle_esti3'; insert into fmm_csbc_rbt_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, nvl(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es left join fmm_csbc_rbt_middle_esti es2 on FN_GET_CSBC_EST_RBT_AP(ES.REC_UUID||ES.APPLY_NO||ES.BASE_AMOUNT)= es2.rec_uuid||es2.apply_no||es2.base_amount where es.base_amount<0 and es.process_code ='EST'; delete from fmm_csbc_rbt_middle_esti es where base_amount<0 and es.process_code ='EST'; insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti3 fc; commit; EXECUTE IMMEDIATE 'truncate table FMM_CSBC_MAINTENANCE_ESTI_MID'; INSERT INTO FMM_CSBC_MAINTENANCE_ESTI_MID SELECT * FROM VW_CSBC_MAINTENANCE_ESTI_MID; COMMIT; DELETE FROM FMM_CSBC_MAINTENANCE_TZ_DETAIL MD WHERE MD.UPDATE_TIME>=TRUNC(SYSDATE); INSERT INTO FMM_CSBC_MAINTENANCE_TZ_DETAIL select * from VW_CSBC_MAINTENANCE_TZ_DETAIL WHERE UPDATE_TIME>=TRUNC(SYSDATE); P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || sysdate, 'SP_FEE_CSBC_HOUR_JOB'); COMMIT; delete from fmm_maintenance_expec_rpt WHERE RELATED_ID IN (SELECT RELATED_ID FROM vw_fmm_maintenance_expec_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_expec_rpt select * from vw_fmm_maintenance_expec_rp0 where trunc(update_time) = trunc(sysdate); commit; delete FROM FMM_MAINTENANCE_ESTI_RPT WHERE RELATED_ID IN (SELECT RELATED_ID FROM VW_FMM_MAINTENANCE_ESTI_RP0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_ESTI_RPT select * from VW_FMM_MAINTENANCE_ESTI_RP0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_fee_payee pay where (order_no,payee,vessel_code) in (select order_no,payee,vessel_code from vw_fmm_maintenance_fee_payee0 where trunc(updated_dtm_loc) = trunc(sysdate)); insert into fmm_maintenance_fee_payee select * from vw_fmm_maintenance_fee_payee0 where trunc(updated_dtm_loc) = trunc(sysdate); commit; delete from fmm_maintenance_fee_payee f where (NVL(F.ORDER_NO, 'AAA'),F.VESSEL_CODE) in (select apply_no,vessel_code from VW_FMM_MAINTENANCE_NO_PAYALL) ; delete from FMM_MAINTENANCE_INVOICE_DEL where fee_invoice_id in (select fee_invoice_id from VW_FMM_MAINTENANCE_INVOICE_DE0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_INVOICE_DEL select * from VW_FMM_MAINTENANCE_INVOICE_DE0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_invoice_rpt where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_invoice_rpt select * from vw_fmm_maintenance_invoice_rp0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_invoice_rp5 where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp6 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_invoice_rp5 select * from vw_fmm_maintenance_invoice_rp6 where trunc(update_time) = trunc(sysdate); commit; delete from FMM_MAINTENANCE_ORDER_RPT where RELATED_ID in (select RELATED_ID from VW_FMM_MAINTENANCE_ORDER_RP0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_ORDER_RPT select * from VW_FMM_MAINTENANCE_ORDER_RP0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_supply_rpt where RELATED_ID in (select RELATED_ID from vw_fmm_maintenance_supply_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_supply_rpt select * from vw_fmm_maintenance_supply_rp0 where trunc(update_time) = trunc(sysdate); commit; P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间2:' || sysdate, 'SP_FEE_CSBC_HOUR_JOB'); commit; END IF; END SP_FEE_CSBC_HOUR_JOB;"}
{"case_id": "24", "difficulty_level": "3", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "CREATE OR REPLACE PROCEDURE SP_FHD_ALERT_IMT (I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR ) IS OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); I NUMBER; BEGIN I:=1; FOR M IN (SELECT VESSEL_CODE, VESSEL_NAME, SAFETY_COMPANY, FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE, FVIA.POSI_DATE, '5', '0') as SAFETY_COMPANY_CODE, MMSI, POSI_DATE, POSI_LAT, POSI_LONG, AREA_NAME FROM FHD_VESSEL_IN_AREA FVIA WHERE FVIA.SORTCODE=(SELECT MAX(SORTCODE) AS SORTCODE FROM FHD_VESSEL_IN_AREA) AND FVIA.CREATED_DTM_LOC > SYSDATE-1/24 AND (I_VESSEL_CODE IS NULL OR FVIA.VESSEL_CODE=I_VESSEL_CODE) AND (I_MANAGER IS NULL OR FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE,FVIA.CREATED_DTM_LOC,'5', '0')=I_MANAGER) ) LOOP OBJ_TAB_TYPE.EXTEND; OBJ_TAB_TYPE(I) := OBJECTTABTYPE(M.VESSEL_CODE, M.VESSEL_NAME, NULL, NULL, NULL, NULL, M.POSI_LONG, M.POSI_LAT, M.POSI_DATE, M.AREA_NAME, M.SAFETY_COMPANY, SYS_GUID, M.SAFETY_COMPANY_CODE, M.MMSI); I := I + 1; END LOOP; UPDATE imt_monitor_main IMM SET IMM.STATUS=1, IMM.MONITOR_ENDDATE=null WHERE ROUND(TO_NUMBER(SYSDATE - IMM.MONITOR_ENDDATE) * 24,2)<47 AND IMM.MONITOR_ENDDATE IS NOT NULL AND IMM.MONITOR_CONF_ID='FHD_ALERT' AND IMM.VESSEL_CODE IN ( SELECT VESSEL_CODE FROM TABLE(OBJ_TAB_TYPE) AA WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=0); insert into imt_monitor_detail（monitor_detail_id,monitor_main_id,vessel_code,feedback_mode,feedback_user,feedback_explain,feedback_date,MONITOR_DETAIL_MODE, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE) select SYS_GUID,AA.ETA_PORT_NAME,AA.VESSEL_CODE,'自动记录','系统','船舶驶入防海盗区，监控启动',sysdate,'1.1', '00000000','YLZ','00000000',SYSDATE(),0,0 FROM TABLE(OBJ_TAB_TYPE) AA WHERE AA.VESSEL_CODE IN ( SELECT IMM.VESSEL_CODE FROM imt_monitor_main IMM WHERE MONITOR_CONF_ID='FHD_ALERT' AND MONITOR_STARTDATE IS NOT NULL AND MONITOR_ENDDATE IS NULL); INSERT INTO imt_monitor_main(MONITOR_MAIN_ID,MONITOR_CONF_ID,VESSEL_CODE,Manage_Company_Code,STATUS, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE, MONITOR_STARTDATE) SELECT AA.ETA_PORT_NAME,'FHD_ALERT' AS MONITOR_CONF_ID,AA.VESSEL_CODE,ETA_TIME AS MANAGER_NAME,1, '00000000','YLZ','00000000',SYSDATE(),0,0,AA.ACTIVITY_DATE FROM TABLE(OBJ_TAB_TYPE) AA WHERE AA.VESSEL_CODE IN ( SELECT IMM.VESSEL_CODE FROM imt_monitor_main IMM WHERE MONITOR_CONF_ID='FHD_ALERT' AND MONITOR_STARTDATE IS NOT NULL AND MONITOR_ENDDATE IS NULL); OPEN OUT_CURSOR FOR SELECT VESSEL_CODE, VESSEL_NAME, AA.MANAGER_NAME AS SAFETY_COMPANY, AA.MMSI AS MMSI, AA.ACTIVITY_DATE AS POSI_DATE, AA.LATITUDE AS POSI_LAT, AA.LONGTITUDE AS POSI_LONG, AREA_NAME FROM TABLE(OBJ_TAB_TYPE) AA WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=1; EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM); END SP_FHD_ALERT_IMT;"}
{"case_id": "25", "difficulty_level": "3", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "CREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR2, V_CHARGE_DEPT IN VARCHAR2, V_FEE_TYPE IN VARCHAR2, V_DTLPROJECT IN VARCHAR2, V_APPLY_USER IN VARCHAR2, V_HOST_PERSON IN VARCHAR2, V_CLAIM_NO IN VARCHAR2, V_CLAIM_DATE_F IN VARCHAR2, V_CLAIM_DATE_T IN VARCHAR2, V_SUBMIT_IND IN VARCHAR2, V_AUDIT_PROGRESS IN VARCHAR2, V_INVOICE_TYPE IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_INVOICE_NO IN VARCHAR2, V_CURSOR_TJ OUT SYS_REFCURSOR ) AS BEGIN OPEN V_CURSOR_TJ FOR WITH LS_CURSOR AS ( SELECT REGEXP_SUBSTR (V_AUDIT_PROGRESS, '[^,]+', 1,ROWNUM) AS COLUMN_VALUE FROM DUAL CONNECT BY ROWNUM <= LENGTH (V_AUDIT_PROGRESS) - LENGTH (REPLACE (V_AUDIT_PROGRESS, ',', ''))+1), LS_CURSOR2 AS ( SELECT REGEXP_SUBSTR (V_COST_CONTROL_COMPANY, '[^,]+', 1,ROWNUM) AS COLUMN_VALUE FROM DUAL CONNECT BY ROWNUM <= LENGTH (V_COST_CONTROL_COMPANY) - LENGTH (REPLACE (V_COST_CONTROL_COMPANY, ',', ''))+1 ) SELECT * FROM ( SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID, MAX(FH.CLAIM_NO), MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY, MAX(FR.REL_OFFICE_NAME), MAX(SU1.USR_NAME) AS APPLY_USER, MAX(FU.USR_NAME) AS HOST_PERSON, MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY, MAX(OFF.OFFICE_NAME) AS HOST_DEPT, MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE, MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND, MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS, MAX(FH.AUDIT_DATE), MAX(SU2.USR_NAME), MAX(FH.APPROVE_IND2), MAX(FH.HIGHER_DEPT), LISTAGG(SU2.POSITION_DESCRIBE, ',') WITHIN GROUP(ORDER BY ROWNUM) SU_POSITION_DESCRIBE, MAX(FH.CLAIM_DATE), MAX(CC.CURRENCY_NAME) AS CURRENCY, MAX(FH.AMOUNT), MAX(FH.REAL_AMOUNT), MAX('银行转账') AS PAY_TYPE, MAX(FH.REMARK), MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE FROM FC_ORGAN_FEE_HEADER FH LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_FEE_TYPE' AND C5.CODE_VALUE = FH.Project_Code LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = 'SFC_COST_BODY' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = 'SFC_COST_BODY' AND C1.CODE_VALUE = FH.COST_BODY LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = 'SFC_AUDIT_PROGRESS' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_SUBMIT_IND' AND C4.CODE_VALUE = FH.SUBMIT_IND LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL) AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL) AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL) AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL) AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL) AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL) AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, 'YYYY-MM-DD') OR V_CLAIM_DATE_F IS NULL) AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, 'YYYY-MM-DD') OR V_CLAIM_DATE_T IS NULL) AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL) AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR)OR V_AUDIT_PROGRESS IS NULL) AND EXISTS (SELECT 1 FROM FC_ORGAN_FEE_DTL FFD WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL) AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL) AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL) AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)) GROUP BY FH.ORGAN_FEE_HEADER_ID ORDER BY MAX(FH.CLAIM_NO) DESC ) T LEFT JOIN ( SELECT FD.ORGAN_FEE_HEADER_ID, FF.FREIGHT_NAME, C3.DISPLAY_VALUE_CN AS INVOICE_TYPE, C4.DISPLAY_VALUE_CN AS FEE_PROPERTY, C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE, FD.AMOUNT, FD.AMOUNT_NO_TAX, FD.TAX_RATE, FD.TAX_AMOUNT, FD.INVOICE_NO, FD.INVOICE_CODE, FD.BILLING_DATE, FD.HOUSE_INFO, FD.CHECKCODE_6, FD.BEGIN_DATE, FD.END_DATE, FD.QTY, C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM FROM FC_ORGAN_FEE_DTL FD LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = 'SFC_INVOICE_TYPE' AND C3.CODE_VALUE = FD.INVOICE_TYPE LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_FEE_PROPERTY' AND C4.CODE_VALUE = FD.FEE_PROPERTY LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_CUST_TYPE' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = 'SFC_PURCHASE_ITEM' AND C6.CODE_VALUE = FD.PURCHASE_ITEM where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL) AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL) AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL) AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID; END SP_OFFSET_INFORMATION;"}