{"case_id": "1", "difficulty_level": "1", "sql": "SELECT product_id, product_name FROM products WHERE category = 'Electronics';", "expected": {"has_syntax_error": "no"}}
{"case_id": "2", "difficulty_level": "1", "sql": "INSERT INTO users (username, email) VALUES ('john_doe', 'john.doe@example.com');", "expected": {"has_syntax_error": "no"}}
{"case_id": "3", "difficulty_level": "1", "sql": "UPDATE orders SET status = 'Shipped' WHERE order_id = 500;", "expected": {"has_syntax_error": "no"}}
{"case_id": "4", "difficulty_level": "1", "sql": "DELETE FROM inactive_accounts WHERE last_login < '2024-01-01';", "expected": {"has_syntax_error": "no"}}
{"case_id": "5", "difficulty_level": "1", "sql": "INSERT INTO logs (event_type, event_date) VALUS ('Login', CURRENT_DATE());", "expected": {"has_syntax_error": "yes"}}
{"case_id": "6", "difficulty_level": "2", "sql": "SELECT department_id, COUNT(employee_id) AS num_employees, AVG(salary) AS avg_salary FROM employees GROUP BY department_id HAVING AVG(salary) > 60000 ORDER BY avg_salary DESC;", "expected": {"has_syntax_error": "no"}}
{"case_id": "7", "difficulty_level": "2", "sql": "SELECT customer_name, order_date FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date BETWEEN '2024-01-01' AND '2024-03-31' ORDER BY order_date ASC LIMIT 20 OFFSET 5;", "expected": {"has_syntax_error": "no"}}
{"case_id": "8", "difficulty_level": "2", "sql": "SELECT product_name, price, (price * 1.08) AS price_with_tax FROM products WHERE category IN ('Books', 'Movies') AND stock_quantity > 0;", "expected": {"has_syntax_error": "no"}}
{"case_id": "9", "difficulty_level": "2", "sql": "SELECT LEFT(product_code, 2) AS category_prefix, SUM(quantity) AS total_sold FROM sales_items GROUP BY category_prefix HAVING SUM(quantity) > 100 ORDER BY total_sold DESC;", "expected": {"has_syntax_error": "no"}}
{"case_id": "10", "difficulty_level": "2", "sql": "SELECT employee_id, CONCAT(first_name, ' ', last_name) AS full_name, DATEDIFF(CURRENT_DATE(), hire_date) AS days_employed FROM employees WHERE DATEDIFF(CURRENT_DATE(), hire_date) > 3650;", "expected": {"has_syntax_error": "no"}}
{"case_id": "11", "difficulty_level": "2", "sql": "SELECT MAX(score), MIN(score), AVG(score) FROM student_scores WHERE subject = 'Math' AND EXISTS (SELECT 1 FROM students WHERE student_id = student_scores.student_id AND grade_level = 10);", "expected": {"has_syntax_error": "no"}}
{"case_id": "12", "difficulty_level": "2", "sql": "SELECT COUNT(DISTINCT customer_id) AS unique_customers FROM orders WHERE order_date >= '2024-01-01' GROUP BY YEAR(order_date), MONTH(order_date);", "expected": {"has_syntax_error": "no"}}
{"case_id": "13", "difficulty_level": "2", "sql": "SELECT customer_name, LENGTH(customer_name) FROM customers WHERE LENGTH(customer_name) > 15 ORDER BY LENGTH(customer_name) DESC;", "expected": {"has_syntax_error": "no"}}
{"case_id": "14", "difficulty_level": "2", "sql": "SELECT employee_id, CASE WHEN salary >= 80000 THEN 'High' WHEN salary >= 50000 THEN 'Medium' ELSE 'Low' END AS salary_level FROM employees ORDER BY salary_level DESC;", "expected": {"has_syntax_error": "no"}}
{"case_id": "15", "difficulty_level": "2", "sql": "SELECT region, SUM(amount) FROM sales_data WHERE sale_date BETWEEN '2024-01-01' AND '2024-01-31' GROUP BY region ORDER BY SUM(amount) DESC HAVING SUM(amount) > 50000;", "expected": {"has_syntax_error": "yes"}}
{"case_id": "16", "difficulty_level": "3", "sql": "SELECT c.customer_name, o.order_id, p.product_name, oi.quantity FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE p.category = 'Electronics' AND o.order_date > '2024-01-01' AND oi.quantity > (SELECT AVG(quantity) FROM order_items WHERE product_id = p.product_id);", "expected": {"has_syntax_error": "no"}}
{"case_id": "17", "difficulty_level": "3", "sql": "WITH EmployeeSalaries AS (SELECT employee_id, department_id, salary FROM employees), DepartmentAvg AS (SELECT department_id, AVG(salary) AS avg_dept_salary FROM employees GROUP BY department_id) SELECT es.employee_id, es.salary, da.avg_dept_salary FROM EmployeeSalaries es JOIN DepartmentAvg da ON es.department_id = da.department_id WHERE es.salary > da.avg_dept_salary;", "expected": {"has_syntax_error": "yes"}}
{"case_id": "18", "difficulty_level": "3", "sql": "INSERT INTO sales_archive (SELECT * FROM sales WHERE sale_date < '2023-01-01' AND status = 'Completed');", "expected": {"has_syntax_error": "no"}}
{"case_id": "19", "difficulty_level": "3", "sql": "SELECT p.product_name, p.price FROM products p WHERE p.product_id IN (SELECT oi.product_id FROM order_items oi GROUP BY oi.product_id HAVING COUNT(oi.order_id) > 10) AND p.category = 'Books' OR p.product_id IN (SELECT r.product_id FROM reviews r WHERE r.rating < 3 AND r.review_date > '2024-01-01') AND p.stock > 0;", "expected": {"has_syntax_error": "no"}}
{"case_id": "20", "difficulty_level": "3", "sql": "SELECT e.first_name, e.last_name, d.department_name FROM employees e LEFT JOIN departments d ON e.department_id = d.department_id WHERE e.employee_id NOT IN (SELECT manager_id FROM projects WHERE manager_id IS NOT NULL) UNION ALL SELECT c.contact_name, NULL, 'External Partner' FROM contacts c WHERE c.company_type = 'Supplier';", "expected": {"has_syntax_error": "no"}}
{"case_id": "21", "difficulty_level": "3", "sql": "CREATE VIEW high_value_customers AS SELECT c.customer_id, c.customer_name, SUM(o.total_amount) AS lifetime_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name HAVING SUM(o.total_amount) > 1000 ORDER BY lifetime_value DESC;", "expected": {"has_syntax_error": "no"}}
{"case_id": "22", "difficulty_level": "3", "sql": "SELECT T1.colA, T1.colB FROM table1 T1 WHERE T1.colC = (SELECT MAX(T2.colD) FROM table2 T2 WHERE T2.colE = T1.colA AND T2.colF IN ('status1', 'status2'));", "expected": {"has_syntax_error": "no"}}
{"case_id": "23", "difficulty_level": "3", "sql": "BEGIN TRANSACTION; UPDATE accounts SET balance = balance - 100 WHERE account_id = 101; SAVEPOINT deduct_funds; INSERT INTO transactions (account_id, amount, type) VALUES (102, 100, 'deposit'); COMMIT;", "expected": {"has_syntax_error": "no"}}
{"case_id": "24", "difficulty_level": "3", "sql": "SELECT a.artist_name, COUNT(s.song_id) AS num_songs FROM artists a JOIN songs s ON a.artist_id = s.artist_id GROUP BY a.artist_name HAVING COUNT(s.song_id) > 5 AND a.genre = 'Rock' ORDER BY num_songs DESC LIMIT 10;", "expected": {"has_syntax_error": "no"}}
{"case_id": "25", "difficulty_level": "3", "sql": "WITH MonthlySales AS (SELECT DATE_TRUNC('month', sale_date) AS sale_month, SUM(amount) AS total_monthly_sales FROM sales GROUP BY DATE_TRUNC('month', sale_date)), AvgSales AS (SELECT AVG(total_monthly_sales) FROM MonthlySales) SELECT ms.sale_month, ms.total_monthly_sales FROM MonthlySales ms WHERE ms.total_monthly_sales > (SELECT * FROM AvgSales);", "expected": {"has_syntax_error": "yes"}}
{"case_id": "26", "difficulty_level": "3", "sql": "SELECT c.customer_name, o.order_id, p.product_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE p.category = 'Books' AND o.order_date > '2023-01-01' AND oi.quantity > (SELECT AVG(quantity) FROM order_items WHERE product_id = p.product_id AND order_date BETWEEN '2023-01-01' AND '2023-12-31';", "expected": {"has_syntax_error": "yes"}}
{"case_id": "27", "difficulty_level": "3", "sql": "UPDATE inventory SET stock = stock - 10 WHERE product_id IN (SELECT product_id FROM low_stock_alerts WHERE alert_date < CURRENT_DATE() AND alert_level = 'Critical') OR product_id IN (SELECT product_id FROM recent_sales WHERE sale_date > '2024-05-01' AND quantity_sold > 5 AND stock < 20);", "expected": {"has_syntax_error": "no"}}
{"case_id": "28", "difficulty_level": "3", "sql": "SELECT emp_id, emp_name FROM employees WHERE dept_id IN (SELECT dept_id FROM departments WHERE location = 'New York' AND dept_id NOT IN (SELECT dept_id FROM projects WHERE project_status = 'Completed' ORDER BY project_id));", "expected": {"has_syntax_error": "no"}}
{"case_id": "29", "difficulty_level": "3", "sql": "BEGIN TRANSACTION; INSERT INTO audit_log (action, timestamp) VALUES ('User login attempt', NOW()); UPDATE users SET last_login = NOW() WHERE username = 'testuser'; COMMIT TRANSACTION SELECT * FROM users WHERE username = 'testuser';", "expected": {"has_syntax_error": "yes"}}
{"case_id": "30", "difficulty_level": "3", "sql": "CREATE VIEW popular_products_view AS SELECT p.product_id, p.product_name, SUM(oi.quantity) AS total_quantity_sold FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name HAVING SUM(oi.quantity) > 50 AND p.category = 'Gadgets' AND (SELECT COUNT(review_id) FROM reviews WHERE product_id = p.product_id) > 10 ORDER BY total_quantity_sold DESC;", "expected": {"has_syntax_error": "no"}}