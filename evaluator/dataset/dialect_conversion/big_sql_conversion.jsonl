{"case_id": "1", "difficulty_level": "3", "source_dialect": "ORACLE", "target_dialect": "OceanBase的Oracle模式-4.2.5","key_info":{"sys_func":["TO_DATE","TO_CHAR","SYSDATE","LENGTH","LAST_DAY","COUNT","TRUNC","CASE","CAST","CURSOR","DECODE","SUBSTR","EXECUTE IMMEDIATE","COMMIT","ROLLBACK","DBMS_OUTPUT.ENABLE","DBMS_OUTPUT.PUT_LINE","SQLERRM"]},"sql": "DELIMITER $$ CREATE PROCEDURE \"LFBB_BVC_VHG_CHECK\"( SKI_VESSEL_CODE VARCHAR2, OPL_BCGDK_SWC VARCHAR2, MMS_DEPTH VARCHAR2, SKG_RESPONSIBLE VARCHAR2, UIS_CHECK_BC_NAME VARCHAR2, JKS_CHECK_DATE VARCHAR2 ) IS CURSOR CUR(I_BEGIN_DATE DATE,I_END_DATE DATE) IS SELECT CWBT_NAME, I.HCJI_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.BCGDK_SS2, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.BCGDK_SS2 = OPL_BCGDK_SWC AND I.VESSEL_CODE = SKI_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND (MMS_DEPTH IS NULL OR I.DEPT = MMS_DEPTH) AND (SKG_RESPONSIBLE IS NULL OR I.RESPONSIBLE_PERSON = SKG_RESPONSIBLE) AND (UIS_CHECK_BC_NAME IS NULL OR (UIS_CHECK_BC_NAME IS NOT NULL AND I.CHECK_NAME LIKE '%' || UIS_CHECK_BC_NAME || '%')) AND I.DATA_TYPE = 'S'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR2(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO'; IF JKS_CHECK_DATE IS NULL THEN DAT_BEGIN := TO_DATE(TO_CHAR(SYSDATE(), 'YYYY') || '-01-01', 'YYYY-MM-DD'); DAT_END := TO_DATE(TO_CHAR(SYSDATE(), 'YYYY') || '-12-31', 'YYYY-MM-DD'); ELSIF LENGTH(JKS_CHECK_DATE) = 4 THEN DAT_BEGIN := TO_DATE(JKS_CHECK_DATE || '-06-24', 'YYYY-MM-DD'); DAT_END := TO_DATE(JKS_CHECK_DATE || '-10-24', 'YYYY-MM-DD'); ELSE DAT_BEGIN := TO_DATE(JKS_CHECK_DATE || '-03', 'YYYY-MM-DD'); DAT_END := LAST_DAY(DAT_BEGIN); END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO (PID, CWBT_NAME, HCJI_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, BCGDK_SS2, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE) SELECT REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.HCJI_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.BCGDK_SS2, TRUNC(REC.CHECK_DATE, 'MM'), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE FROM DUAL; END IF; SELECT CASE OPL_BCGDK_SWC WHEN 'A' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'DD') AS NUMBER) WHEN 'B' THEN CAST(TO_CHAR(PKG_DATE_UTIL.GET_1ST_M(REC.CHECK_DATE, DECODE(LENGTH(JKS_CHECK_DATE), 4, 'YY', 'MM')), DECODE(LENGTH(JKS_CHECK_DATE), 4, 'WW', 'W')) AS NUMBER) WHEN 'C' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'MM') AS NUMBER) END INTO VAR_SUFFIX FROM DUAL; EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || VAR_SUFFIX || ' = :1 WHERE I.PID = :2' USING CASE REC.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; DBMS_OUTPUT.ENABLE(10000); DBMS_OUTPUT.PUT_LINE(SQLERRM); END SP_PMS_SYNC_ROUTINE_CHECK; $$"}
{"case_id": "2", "difficulty_level": "3", "source_dialect": "ORACLE", "target_dialect": "OceanBase的Oracle模式-4.2.5","key_info":{"sys_func":["CASE","LIKE","ROUND","ABS","WM_CONCAT","REPLACE","DBMS_LOB.SUBSTR","NVL","MAX","SUM","ROWNUM"]},"sql": "DELIMITER $$ CREATE OR REPLACE PROCEDURE \"SP_FMM_PAYMENT_NOTICE_RPT\"( V_PAYMENT_NOTICE_ID IN FMM_FEE_PAYMENT_NOTICE.PAYMENT_NOTICE_ID%TYPE DEFAULT NULL, V_USER IN FMM_FEE_INVOICE.INVOICE_NO%TYPE DEFAULT NULL, OUTCURSOR OUT PKG_CURSOR.T_CURSOR ) IS BEGIN OPEN OUTCURSOR FOR SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO,C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_NO(P.PAYMENT_NOTICE_ID) ELSE A.INVOICE_NO END AS INVOICE_NO,A.INVOICE_DESC, A.OCCUR_TIME_FROM,A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT,A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_TAX_AMOUNT') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT_WITHOUT_TAX') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1,'' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE=V_USER AND ROWNUM=1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL,2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL <0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL),2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT,2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, P.APPLY_PAYER, P.APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, A.BILL_NO, CASE WHEN P.PAYMENT_TYPE='FY56' THEN (SELECT GG.RD_PROJECT FROM RBT_RD_ACTIVITY GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) ELSE (SELECT GG.PROJECT_NAME FROM FMM_JG_INNER_ORDER GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) END AS PROJECT_NAME, P.DELIVERY_NO AS PPM_APPLY_NO FROM FMM_FEE_PAYMENT_NOTICE P INNER JOIN FMM_FEE_INVOICE A ON P.PAYMENT_NOTICE_ID=A.PAYMENT_NOTICE_ID LEFT JOIN CRM_CUSTOMER C ON P.PAYEE=C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAYER=C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE=V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL=F.FREIGHT_CODE AND A.INVOICE_SORT=F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT=FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY=CY.CURRENCY LEFT JOIN SYS_USER SU ON SU.USR_CODE=V_USER WHERE P.PAYMENT_NOTICE_ID=V_PAYMENT_NOTICE_ID UNION ALL SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO, C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN dbms_lob.substr(REPLACE((SELECT WM_CONCAT(DE.INVOICE_NUM) FROM (SELECT D.PAYMENT_NO,D.INVOICE_NUM FROM BFM_INVOICE_DETAIL D GROUP BY D.PAYMENT_NO,D.INVOICE_NUM) DE WHERE DE.PAYMENT_NO = P.PAYMENT_NO), ',', '\\'),4000,1) ELSE A.INVOICE_NUM END AS INVOICE_NO, '' AS INVOICE_DESC, NVL((SELECT MAX(PO.SUPPLY_DATE) FROM BFM_INVOICE_DETAIL I LEFT JOIN BFM_PURCHASE_ORDER_DETAIL OD ON I.PO_NUMBER = OD.SUB_PO_NUMBER LEFT JOIN BFM_PURCHASE_ORDER PO ON OD.PO_NUMBER = PO.PO_NUMBER WHERE I.PAYMENT_NO = P.PAYMENT_NO),P.APPLY_DATE) AS OCCUR_TIME_FROM, A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT, A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D1.DTL_AMOUNT) FROM BFM_INVOICE_DETAIL D1 WHERE D1.PAYMENT_NO = P.PAYMENT_NO AND NVL(D1.IS_DELETE,'0') <> '1') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D2.DTL_TAX_AMOUNT) FROM BFM_INVOICE_DETAIL D2 WHERE D2.PAYMENT_NO = P.PAYMENT_NO AND NVL(D2.IS_DELETE,'0') <> '1') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D3.DTL_AMOUNT_WITHOUT_TAX) FROM BFM_INVOICE_DETAIL D3 WHERE D3.PAYMENT_NO = P.PAYMENT_NO AND NVL(D3.IS_DELETE,'0') <> '1') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1, '' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE = V_USER AND ROWNUM = 1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL, 2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL < 0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL), 2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT, 2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, NVL(F1.OFFICE_NAME,P.APPLY_PAYER) AS APPLY_PAYER, NVL(S.USR_NAME,P.APPLYER_USER) AS APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, NULL AS BILL_NO, NULL AS PROJECT_NAME, NULL AS PPM_APPLY_NO FROM BFM_PAYMENT_NOTICE P INNER JOIN BFM_INVOICE_DETAIL A ON P.PAYMENT_NO = A.PAYMENT_NO LEFT JOIN CRM_CUSTOMER C ON P.PAYEE = C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAY_FEE_NAME = C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE = V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL = F.FREIGHT_CODE AND A.INVOICE_SORT = F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT = FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY = CY.CURRENCY LEFT JOIN SYS_USER S ON P.APPLYER_USER = S.USR_CODE LEFT JOIN SYS_OFFICE F1 ON P.APPLY_PAYER = F1.OFFICE_CODE LEFT JOIN SYS_USER SU ON SU.USR_CODE = V_USER WHERE P.PAYMENT_NOTICE_ID = V_PAYMENT_NOTICE_ID; END SP_FMM_PAYMENT_NOTICE_RPT; $$"}
{"case_id": "3", "difficulty_level": "1", "source_dialect": "ORACLE", "target_dialect": "OceanBase的Oracle模式-4.2.5","key_info":{"sys_func":["TO_DATE","SUBSTR"]},"sql": "DELIMITER $$ CREATE OR REPLACE PROCEDURE SP_FMM_AUTINV_CONTRAST_STATINV(V_PURCHASER_TAX_NO IN VARCHAR2, V_INVOICE_NUM IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_DEDU_PERIOD IN VARCHAR2, V_OPERATOR IN VARCHAR2, V_DEDU_DATE_FROM IN VARCHAR2, V_DEDU_DATE_TO IN VARCHAR2, V_PURCHASER_NAME IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR select FAI.authed_invoice_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, '' AS PURCHASER_TAX_NO_STAT, '' AS PURCHASER_NAME_STAT, '' AS INVOICE_CODE_STAT, NULL AS BILLING_DATE_STAT, '' AS INVOICE_NUM_STAT, NULL AS AMOUNT_TAX_STAT, NULL AS TOTAL_AMOUNT_STAT, '1' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, '' AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, '' AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, NULL AS DEDU_DATE_STAT from FMM_AUTHED_INVOICE FAI LEFT JOIN sys_user su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FAI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FAI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FAI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FAI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR SU.USR_NAME = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FAI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_STAT_INV FASI WHERE FASI.PURCHASER_TAX_NO = FAI.PURCHASER_TAX_NO AND FASI.INVOICE_NUM = FAI.INVOICE_NUM AND FASI.INVOICE_CODE = FAI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, '' AS PURCHASER_TAX_NO_AUT, '' AS PURCHASER_NAME_AUT, '' AS INVOICE_CODE_AUT, NULL AS BILLING_DATE_AUT, '' AS INVOICE_NUM_AUT, NULL AS AMOUNT_TAX_AUT, NULL AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '2' AS DIFFERENCE_CAUSE, '' AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, '' AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, NULL AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_INVOICE FAI WHERE FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO AND FAI.INVOICE_NUM = FASI.INVOICE_NUM AND FAI.INVOICE_CODE = FASI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '3' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI inner join FMM_AUTHED_INVOICE FAI on FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO and FAI.INVOICE_NUM = FASI.INVOICE_NUM and FAI.INVOICE_CODE = FASI.INVOICE_CODE LEFT JOIN Sys_User su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND (FASI.Total_Tax <> FAI.Total_Tax OR FASI.Total_Amount <> FAI.Total_Amount); END SP_FMM_AUTINV_CONTRAST_STATINV; $$"}
{"case_id": "4", "difficulty_level": "3", "source_dialect": "ORACLE", "target_dialect": "OceanBase的Oracle模式-4.2.5","key_info":{"sys_func":["NVL","TO_DATE","SUBSTR","TO_CHAR","SYSDATE","CASE","SYS_GUID","LPAD","TRUNC","ABS","TO_NUMBER","ROUND","ROWNUM","EXTEND","TABLE(","MAX","START WITH","CONNECT BY","NOCYCLE","PRIOR","DBMS_OUTPUT.PUT_LINE","SQLERRM"]},"sql": "DELIMITER $$ CREATE OR REPLACE PROCEDURE SP_TSA_WARNING3(I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, I_DURATION IN VARCHAR2, I_SOG IN VARCHAR2, I_AREA IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR) IS OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); OFFICE_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); I NUMBER; LN NUMBER; V_MANAGER VARCHAR2(50); V_SOG VARCHAR2(50); V_DURATION VARCHAR2(50); V_SORTCODE NUMBER; BEGIN I:=1; LN:=1; IF NVL(I_MANAGER,'00000000')='00000000' THEN V_MANAGER:=NULL; ELSE V_MANAGER:=I_MANAGER; FOR LS IN (select OFFICE_CODE from sys_office where nvl(is_dept,1)=0 start with OFFICE_CODE=V_MANAGER connect by NOCYCLE supperior_office_CODE=prior office_CODE) LOOP OFFICE_TAB_TYPE.EXTEND; OFFICE_TAB_TYPE(LN) := OBJECTTABTYPE(LS.OFFICE_CODE,'','','','','','', '', NULL,'','','','',''); LN:=LN+1; END LOOP; END IF; select PARA_VALUE INTO V_SOG from TSA_MONITOR_CONF WHERE PARA_TYPE='MAXSPEED'; select PARA_VALUE INTO V_DURATION from TSA_MONITOR_CONF WHERE PARA_TYPE='MONITOR_DURATION'; FOR X IN (SELECT * FROM (SELECT VW.VESSEL_MMSI, V.VESSEL_ID, TO_DATE(SUBSTR(VW.VESSEL_POSIDATE,1,19),'YYYY-MM-DD HH24:MI:SS') AS ACTIVITY_DATE, VW.VESSEL_LAT AS LAT, VW.VESSEL_LON AS LON, V.VESSEL_CODE, V.VESSEL_NAME, VW.VESSEL_SPEED, CASE WHEN VW.VESSEL_STATE IN ('0','8') THEN '1' ELSE '0' END AS SAILING_STATUS, VM.MANAGER AS OFFICE_CODE, VM.manager_dept AS OFFICE_DEPT_CODE, (SELECT AA.OFFICE_NAME FROM SYS_OFFICE AA, VOP_VESSEL_MANAGEMENT BB WHERE AA.OFFICE_CODE=BB.MANAGER AND BB.VESSEL_ID=V.VESSEL_ID AND BB.MANAGEMENT_TYPE=1 AND ((sysdate >= BB.DEFINITION_DATE AND sysdate <= BB.END_DATE) OR (sysdate >= BB.DEFINITION_DATE AND BB.END_DATE IS NULL)) AND ROWNUM=1) AS manager_name, VW.VESSEL_ETA AS ETA_TIME, VW.VESSEL_DEST AS ETA_PORT_NAME, VW.VESSEL_COURSE FROM ZDWEB.VM_ZYHY2_ALLSHIPDYNAMIC@CSBC_TO_XE1 VW, VOP_VESSEL V, VOP_VESSEL_MANAGEMENT VM WHERE NVL(to_char(VW.VESSEL_MMSI),'无')=to_char(V.MMSI) AND V.VESSEL_ID=VM.VESSEL_ID AND (v.is_delete <> '1' OR v.is_delete IS NULL) AND V.VESSEL_CODE NOT IN (SELECT VESSEL_CODE FROM TSA_VESSEL_EXCLUDE) AND NVL(VM.IS_DELETE,'0')<>'1' AND v.trade_type='0' AND v.mmsi IS NOT NULL AND NVL(V.TETIRED_FLAG,'0')='1' AND VM.MANAGEMENT_TYPE=1 AND ((sysdate >= VM.DEFINITION_DATE AND sysdate <= VM.END_DATE) OR (sysdate >= VM.DEFINITION_DATE AND VM.END_DATE IS NULL))) MM INNER JOIN SYS_OFFICE_RELATION_TREE SORT ON MM.OFFICE_CODE=SORT.CHILD_CODE AND sort.office_code=nvl(V_MANAGER,'ABC') WHERE (I_VESSEL_CODE IS NULL OR MM.VESSEL_CODE IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_VESSEL_CODE,','))))) LOOP FOR M IN (SELECT H.* FROM TSA_AREA H WHERE H.DATE_START <= SYSDATE AND AREA_NAME NOT IN ('其他海区','委内瑞拉监控区','马六甲海峡临时监控区') AND (I_AREA IS NULL OR AREA_ID IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_AREA,',')))) AND NVL(H.DATE_END, TO_DATE('2999-01-01','YYYY-MM-DD')) >= SYSDATE) LOOP IF FN_TSA_IS_IN_HD_AREA(X.LON, X.LAT, M.AREA_ID) THEN OBJ_TAB_TYPE.EXTEND; OBJ_TAB_TYPE(I) := OBJECTTABTYPE(X.VESSEL_CODE, X.VESSEL_NAME, X.VESSEL_SPEED, X.VESSEL_COURSE, X.SAILING_STATUS, X.VESSEL_ID, X.LON, X.LAT, X.ACTIVITY_DATE, M.AREA_NAME, X.MANAGER_NAME, X.ETA_PORT_NAME, X.ETA_TIME, X.VESSEL_MMSI); I := I + 1; END IF; END LOOP; END LOOP; select (select nvl(max(SORTCODE)+1,1) from TSA_VESSEL_IN_AREA) INTO V_SORTCODE from dual; OPEN OUT_CURSOR FOR SELECT * FROM (SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, AA.VESSEL_CODE \"VESSEL_CODE\", AA.VESSEL_NAME \"VESSEL_NAME\", AA.MANAGER_NAME \"MANAGER_NAME\", FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE(),1,0) AS MANAGER_CODE, FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE(),1,1) AS MANAGER_DEPT_CODE, FN_TSA_ALERT_IS_SEND(AA.VESSEL_CODE) AS IS_SEND, AA.MMSI \"MMSI\", AA.ACTIVITY_DATE \"ACTIVITY_DATE\", CASE WHEN AA.LONGTITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'E' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'W' END AS \"LONGTITUDE\", CASE WHEN AA.LATITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'N' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'S' END AS \"LATITUDE\", AA.VESSEL_SPPED \"VESSEL_SPPED\", AA.VESSEL_COURSE \"VESSEL_COURSE\", FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION) AS \"AVERAGE_SPPED\", CASE WHEN NVL(AA.SAILING_STATUS,'0')='1' THEN '在航' ELSE '非在航' END AS \"SAILING_STATUS\", AA.AREA_NAME \"AREA_NAME\", AA.ETA_PORT_NAME \"ETA_PORT_NAME\", AA.ETA_TIME \"ETA_TIME\", V_SORTCODE AS SORTCODE, 'AUTO' AS created_by_user, sysdate AS created_dtm_loc, 0 AS record_version, 0 AS principal_group_code FROM TABLE(OBJ_TAB_TYPE) AA WHERE FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION)<=TO_NUMBER(NVL(V_SOG,'10')) UNION ALL SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, 'RUN......' AS VESSEL_CODE, '仍在执行' AS VESSEL_NAME, '00000000' AS SAFETY_COMPANY, '080200000000' AS MANAGER_CODE, '00000000' AS MANAGER_DEPT_CODE, 99 AS IS_SEND, '00000000' AS MMSI, sysdate AS POSI_DATE, '' AS POSI_LONG, '' AS POSI_LAT, '' AS VESSEL_SPPED, '' AS VESSEL_COURSE, 0 AS AVERAGE_SPPED, '' AS SAILING_STATUS, '' AS AREA_NAME, '' AS ETA_PORT_NAME, '' AS ETA_TIME, V_SORTCODE AS SORTCODE, 'AUTO' AS created_by_user, sysdate AS created_dtm_loc, 0 AS record_version, 0 AS principal_group_code FROM dual); EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM); END SP_TSA_WARNING3; $$"}
{"case_id": "5", "difficulty_level": "2", "source_dialect": "ORACLE", "target_dialect": "OceanBase的Oracle模式-4.2.5","key_info":{"sys_func":["SYSDATE","NVL","SUBSTR","REPLACE","LENGTH","CASE","ROW_NUMBER","OVER","PARTITION BY","ROUND","TRIM","EXISTS","EXECUTE IMMEDIATE","COMMIT","TRUNCATE TABLE","SQLCODE","SQLERRM","ROWNUM"]},"sql": "DELIMITER $$ CREATE OR REPLACE PROCEDURE \"SP_FEE_CSC_DAILY_JOB\" /* -------------------------------------------------------------------- PROCEDURE: SP_FEE_CSC_DAILY_JOB Description: 能源每日定时任务 AUTHOR: liul(liul@cnshipping.com) 2015-09-09 9:31:00 ---------------------------------------------------------------------- */ IS V_FLAG varchar2(50); BEGIN select open_mode into V_FLAG from v$database; if V_FLAG = 'READ WRITE' then P_LOG_EXCEPTION('开始时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远业务口径船舶信息*/ /*delete from FMM_CSCL_BUSI_CALIBER where 1=1;*/ EXECUTE IMMEDIATE 'truncate table FMM_CSCL_BUSI_CALIBER'; insert into FMM_CSCL_BUSI_CALIBER select * from VOP_VESSEL_CSCL_BUSI_CALIBER; commit; P_LOG_EXCEPTION('FMM_CSCL_BUSI_CALIBER完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远预估费用*/ /*delete from fmm_csc_maintenance_esti;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_esti'; insert into fmm_csc_maintenance_esti select * from vw_csc_maintenance_esti; commit; P_LOG_EXCEPTION('fmm_csc_maintenance_esti 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新所有订单预估费用*/ /*delete from fmm_csc_maintenance_orders;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_orders'; insert into fmm_csc_maintenance_orders select * from VW_CSC_MAINTENANCE_ORDERS; commit; P_LOG_EXCEPTION('fmm_csc_maintenance_orders 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远账单费用*/ /*delete from fmm_csc_maintenance_invoice;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_invoice'; insert into fmm_csc_maintenance_invoice select * from vw_csc_maintenance_invoice; commit; INSERT INTO fmm_csc_maintenance_invoice SELECT TEMP.VESSEL_CODE, TEMP.SUPPLIER_CODE, TEMP.PAYER, NULL AS PORT_CODE, TEMP.INVOICE_STATUS, TEMP.INVOICE_SORT, TEMP.ORDER_NO, TEMP.PAYMENT_NO, TEMP.INVOICE_SORT_DETAIL, TEMP.INVOICE_DETAIL_ID, TEMP.BASE_AMOUNT_NOTAX, TEMP.INVOICE_DATE, TEMP.CURRENCY, TEMP.DTL_AMOUNT_NOTAX, TEMP.INVOICE_NUM, TEMP.PAYEE, TEMP.ACTIVITY_DATE, TEMP.FI_RECEIVEDATE, TEMP.INPUT_DATE, TEMP.UPDATE_TIME, TEMP.BASE_AMOUNT, TEMP.AMOUNT, 0 AS MISC_AMOUNT,/*运杂费*/ 0 AS BASE_MISC_AMOUNT, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'VEL_MANAGE_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'VEL_MANAGE_BODY') ) AS COMPANY_CODE, TEMP.SEND_FIN_DATE, TEMP.APPLY_TYPE, '2' AS BUSI_TYPE, TEMP.IS_ENERGY, TEMP.TYPE_NAME, TEMP.ORDER_CURRENCY, TEMP.EXCHANGE_RATE, NULL AS BILL_NO, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'COST_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'COST_BODY') ) AS OWNERSHIP_BODY, TEMP.OPRT_WAY, TEMP.USD_AMOUNT FROM (select /*已开票但未支付状态的费用明细*/ I.VESSEL_CODE, /*船舶*/ substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) AS ORDER_NO, /*定单号*/ BFM.CONFIRM_DATE AS ORDER_DATE, T.DISPLAY_VALUE_CN AS TYPE_NAME, /*定单种类*/ BFM.CURRENCY AS ORDER_CURRENCY, /*定单币种*/ BFM.AMOUNT AS TOTAL_FEE, /*定单金额*/ NVL(BFM.SUPPLIER,I.PAYEE) AS SUPPLIER_CODE, 'HY' AS APPLY_TYPE, I.PAYER, I.INVOICE_STATUS, 'FY33' AS INVOICE_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'FY33002' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'FY33003' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'FY33004' WHEN I.INVOICE_SORT_DETAIL = 'FY03004' THEN 'FY33005' WHEN I.INVOICE_SORT_DETAIL in ('FY03005', 'FY03006', 'FY03007') THEN 'FY33006' ELSE 'FY33006' END) AS INVOICE_SORT_DETAIL, 'RLF' AS GROUP_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'YZ30003' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'YZ30001' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'YZ30002' WHEN I.INVOICE_SORT_DETAIL in ('FY03004','FY03005', 'FY03006', 'FY03007') THEN 'YZ30004' ELSE 'YZ30004' END) AS GROUP_SORT_DETAIL, I.INVOICE_DETAIL_ID, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) / (1 + NVL(I.TAX_RATE,0)) AS BASE_AMOUNT_notax, I.INVOICE_DATE, I.CURRENCY, I.DTL_AMOUNT / (1 + I.TAX_RATE) AS DTL_AMOUNT_notax, I.INVOICE_NUM, I.PAYEE, /*(CASE WHEN I.COMPANY_CODE IN ('08010000', '66190000') THEN NVL(NVL(M.CREATED_DTM_LOC, BOS.ACTIVITY_DATE), I.SEND_FIN_DATE) ELSE BOS.ACTIVITY_DATE END) AS ACTIVITY_DATE,*/ (CASE WHEN I.COMPANY_CODE IN ('08020000','04000000','02000000','62000000') THEN I.CREATED_DTM_LOC WHEN I.PAYER LIKE '64%' THEN I.CREATED_DTM_LOC ELSE BFM.SUPPLY_DATE END) AS ACTIVITY_DATE, I.SEND_FIN_DATE AS FI_RECEIVEDATE, NULL AS IS_ENERGY, I.CREATED_DTM_LOC AS INPUT_DATE, NVL(NVL(I.UPDATED_DTM_LOC, I.CREATED_DTM_LOC), SYSDATE - 1) AS UPDATE_TIME, '3' as rpt_type, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) AS BASE_AMOUNT, I.DTL_AMOUNT AS AMOUNT, I.COMPANY_CODE, NVL(I.SEND_FIN_DATE, I.INVOICE_DATE) AS SEND_FIN_DATE, row_number() over(partition by I.INVOICE_DETAIL_ID order by BFM.SUPPLY_DATE desc) rn, I.PAYMENT_NO, I.RMB_EXCHANGE_RATE AS EXCHANGE_RATE, '1' AS OPRT_WAY, ROUND(I.DTL_AMOUNT*fn_get_exchange_rate(I.CURRENCY,'USD',BFM.SUPPLY_DATE),2) AS USD_AMOUNT FROM bfm_invoice_detail I LEFT JOIN BFM_PURCHASE_ORDER BFM ON substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) = BFM.PO_NUMBER LEFT JOIN BFM_OIL_STORAGE BOS ON BOS.operate = '10' AND substr(BOS.PO_NUMBER,1,replace(instr(BOS.PO_NUMBER,'-',-1)-1,-1,length(BOS.PO_NUMBER))) = BFM.PO_NUMBER AND BOS.oil_type = '002' LEFT JOIN CDM_CODEDICT T ON T.code_type = 'BFM_FILL_TYPE' AND BFM.FILL_OIL_TYPE = T.CODE_VALUE LEFT JOIN SAP_JA0012_MTR_MIDDLE M ON BOS.PO_NUMBER = M.TRD_ORDER WHERE I.INVOICE_SORT = 'FY03' AND NVL(I.IS_DELETE,'0')<>'1' AND I.PAYER LIKE '64%' ) TEMP WHERE RN = 1; P_LOG_EXCEPTION('fmm_csc_maintenance_invoice 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*根据主数据更新备件信息表是否库存标记*/ update sps_parts_info sp set sp.if_storaged = null where EXISTS(select trim(group_code) from SPS_PARTS_MASTER_DATA t where t.if_storaged is null AND trim(T.group_code)=SP.GROUP_CODE) AND (SP.VESSEL_CODE LIKE 'S%' OR SP.VESSEL_CODE LIKE 'E%'); /*更新上远虚拟预算数据*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_virtual_budget'; insert into fmm_csc_virtual_budget select * from vw_csc_virtual_budget; commit; P_LOG_EXCEPTION('fmm_csc_virtual_budget 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新集运备件申领设备ID为空的记录*/ update SPS_APPLY_main sam set (sam.equipment_info_id, sam.equipment_code) = (select sad.equipment_id, sad.equip_code from sps_apply_detail sad where sad.apply_main_id = SAM.APPLY_MAIN_ID and rownum = 1) where sam.apply_main_id IN (select SAM.apply_main_id from SPS_APPLY_main SAM where SAM.EQUIPMENT_INFO_ID is null and SAM.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0')); /*更新集运备件询价设备ID为空的记录*/ update SPS_ENQUIRE_MAIN SS set (SS.EQUIPMENT_INFO_ID, SS.EQUIPMENT_CODE) = (select SED.equipment_id, SED.EQUIP_CODE from SPS_ENQUIRE_DETAIL SED where SED.ENQUIRE_MAIN_ID = SS.ENQUIRE_MAIN_ID and rownum = 1) where SS.ENQUIRE_MAIN_ID IN (select SEM.ENQUIRE_MAIN_ID from sps_enquire_main sem where sem.equipment_info_id is null and sem.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0')); commit; P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); commit; END IF; END SP_FEE_CSC_DAILY_JOB; $$"}
{"case_id": "6", "difficulty_level": "1", "source_dialect": "ORACLE", "target_dialect": "Postgresql-9.2","key_info":{"sys_func":["PROCEDURE","DECODE","quote_ident","CASE","RAISE NOTICE","EXECUTE","SQLERRM","RAISE EXCEPTION"]},"sql": "CREATE OR REPLACE PROCEDURE \"VALIDATE_CONTEXT\" is l_type# binary_integer; l_owner# binary_integer; l_ltype varchar2(30) := 'FIRST'; l_status binary_integer; l_compile_sql varchar2(2000); l_dbo_name varchar2(32); begin select user# into l_owner# from sys.user$ where name = 'CTXSYS'; for c1 in (select dbo_name, dbo_type from ctxsys.dr$dbo where dbo_type != 'PUBLIC SYNONYM' order by dbo_type, dbo_name) loop if (c1.dbo_type != l_ltype) then select decode(c1.dbo_type, 'INDEX', 1, 'TABLE', 2, 'VIEW', 4, 'SEQUENCE', 6, 'PROCEDURE', 7, 'FUNCTION', 8, 'PACKAGE', 9, 'PACKAGE BODY', 11, 'TYPE', 13, 'TYPE BODY', 14, 'LIBRARY', 22, 'INDEXTYPE', 32, 'OPERATOR', 33, 0) into l_type# from dual; l_ltype := c1.dbo_type; end if; l_status := -1; for c2 in (select status from sys.obj$ where owner# = l_owner# and name = c1.dbo_name and type# = l_type#) loop l_status := c2.status; end loop; if (l_status != 1) then /* 3591109: Attempt to recompile invalid objects before issuing the failure notice */ l_dbo_name := dbms_assert.enquote_name(c1.dbo_name); l_compile_sql := case c1.dbo_type when 'VIEW' then 'alter view ctxsys.' || l_dbo_name || ' compile' when 'PROCEDURE' then 'alter procedure ctxsys.' || l_dbo_name || ' compile' when 'FUNCTION' then 'alter function ctxsys.' || l_dbo_name || ' compile' when 'PACKAGE' then 'alter package ctxsys.' || l_dbo_name || ' compile' when 'PACKAGE BODY' then 'alter package ctxsys.' || l_dbo_name || ' compile body' when 'TYPE' then 'alter type ctxsys.' || l_dbo_name || ' compile' when 'TYPE BODY' then 'alter type ctxsys.' || l_dbo_name || ' compile body' when 'INDEXTYPE' then 'alter indextype ctxsys.' || l_dbo_name || ' compile' when 'OPERATOR' then 'alter operator ctxsys.' || l_dbo_name || ' compile' else null end; if l_compile_sql is null then dbms_output.put_line( 'FAILED CHECK FOR '||c1.dbo_type||' '||c1.dbo_name); dbms_registry.invalid('CONTEXT'); goto endfunc; else begin execute immediate l_compile_sql; exception when others then dbms_output.put_line( 'FAILED CHECK FOR '||c1.dbo_type||' '||c1.dbo_name); dbms_registry.invalid('CONTEXT'); goto endfunc; end; end if; end if; end loop; dbms_registry.valid('CONTEXT'); <<endfunc>> null; exception when others then ctxsys.drue.text_on_stack(sqlerrm, 'validate_context'); dbms_registry.invalid('CONTEXT'); ctxsys.drue.raise; end validate_context;"}
{"case_id": "7", "difficulty_level": "3", "source_dialect": "ORACLE", "target_dialect": "Postgresql-9.2","key_info":{"sys_func":["PROCEDURE","NOW","CURRENT_TIMESTAMP","ARRAY","CURSOR","CASE","SAVEPOINT","ROLLBACK TO SAVEPOINT","COUNT","array_length","FOR LOOP","GREATEST","current_user","EXCEPTION","SQLERRM","CLOSE","COMMIT","RAISE NOTICE","RAISE EXCEPTION"]}, "sql": "CREATE OR REPLACE PROCEDURE SP_BULK_UPDATE_INVENTORY(p_warehouse_id IN NUMBER, p_adjustment_type IN VARCHAR2, p_adjustment_date IN DATE DEFAULT SYSDATE) AS TYPE t_inventory_rec IS RECORD (product_id NUMBER, current_qty NUMBER, adjustment_qty NUMBER, new_qty NUMBER); TYPE t_inventory_tab IS TABLE OF t_inventory_rec INDEX BY BINARY_INTEGER; v_inventory t_inventory_tab; v_batch_size CONSTANT NUMBER := 1000; v_total_processed NUMBER := 0; v_error_count NUMBER := 0; CURSOR c_inventory IS SELECT product_id, quantity_on_hand, CASE p_adjustment_type WHEN 'RECOUNT' THEN physical_count - quantity_on_hand WHEN 'DAMAGE' THEN -damaged_quantity WHEN 'RETURN' THEN returned_quantity ELSE 0 END AS adjustment_qty FROM inventory_staging WHERE warehouse_id = p_warehouse_id AND status = 'PENDING' ORDER BY product_id; BEGIN SAVEPOINT bulk_update_start; OPEN c_inventory; LOOP FETCH c_inventory BULK COLLECT INTO v_inventory LIMIT v_batch_size; EXIT WHEN v_inventory.COUNT = 0; FOR i IN 1..v_inventory.COUNT LOOP BEGIN MERGE INTO inventory inv USING (SELECT v_inventory(i).product_id AS product_id, p_warehouse_id AS warehouse_id, v_inventory(i).adjustment_qty AS adj_qty FROM dual) src ON (inv.product_id = src.product_id AND inv.warehouse_id = src.warehouse_id) WHEN MATCHED THEN UPDATE SET inv.quantity_on_hand = inv.quantity_on_hand + src.adj_qty, inv.last_adjustment_date = p_adjustment_date, inv.last_adjustment_type = p_adjustment_type WHEN NOT MATCHED THEN INSERT (product_id, warehouse_id, quantity_on_hand, last_adjustment_date, last_adjustment_type) VALUES (src.product_id, src.warehouse_id, GREATEST(0, src.adj_qty), p_adjustment_date, p_adjustment_type); INSERT INTO inventory_audit_log (product_id, warehouse_id, adjustment_date, adjustment_type, old_quantity, adjustment_quantity, new_quantity, created_by) VALUES (v_inventory(i).product_id, p_warehouse_id, p_adjustment_date, p_adjustment_type, v_inventory(i).current_qty, v_inventory(i).adjustment_qty, v_inventory(i).current_qty + v_inventory(i).adjustment_qty, USER); v_total_processed := v_total_processed + 1; EXCEPTION WHEN OTHERS THEN v_error_count := v_error_count + 1; INSERT INTO error_log (error_date, error_message, product_id) VALUES (SYSDATE, 'Inventory update failed: ' || SQLERRM, v_inventory(i).product_id); END; END LOOP; END LOOP; CLOSE c_inventory; UPDATE inventory_staging SET status = 'PROCESSED', processed_date = SYSDATE WHERE warehouse_id = p_warehouse_id AND status = 'PENDING'; COMMIT; DBMS_OUTPUT.PUT_LINE('Bulk inventory update completed. Processed: ' || v_total_processed || ', Errors: ' || v_error_count); EXCEPTION WHEN OTHERS THEN ROLLBACK TO bulk_update_start; RAISE_APPLICATION_ERROR(-20001, 'Bulk inventory update failed: ' || SQLERRM); END SP_BULK_UPDATE_INVENTORY;"}
{"case_id": "8", "difficulty_level": "2", "source_dialect": "ORACLE", "target_dialect": "Postgresql-9.2","key_info":{"sys_func":["PROCEDURE","TO_DATE","LPAD","DATE_TRUNC","INTERVAL","DATE","NEXTVAL","COALESCE","EXECUTE","NOW","COUNT","COMMIT","ROLLBACK","RAISE NOTICE","RAISE EXCEPTION","SQLERRM","RECORD","ARRAY","varchar","text","numeric","DATE","TIMESTAMP","USING"]}, "sql": "CREATE OR REPLACE PROCEDURE SP_GENERATE_SALES_REPORT(p_year IN NUMBER, p_quarter IN NUMBER, p_sales_rep_id IN NUMBER DEFAULT NULL) AS v_report_id NUMBER; v_total_sales NUMBER := 0; v_total_commission NUMBER := 0; v_report_sql VARCHAR2(4000); TYPE t_sales_summary IS RECORD (sales_rep_id NUMBER, sales_rep_name VARCHAR2(100), total_sales NUMBER, commission_rate NUMBER, commission_amount NUMBER); TYPE t_sales_tab IS TABLE OF t_sales_summary; v_sales_data t_sales_tab; v_start_date DATE; v_end_date DATE; BEGIN v_start_date := TO_DATE(p_year || '-' || LPAD((p_quarter - 1) * 3 + 1, 2, '0') || '-01', 'YYYY-MM-DD'); v_end_date := LAST_DAY(ADD_MONTHS(v_start_date, 2)); SELECT sales_report_seq.NEXTVAL INTO v_report_id FROM dual; v_report_sql := 'SELECT sr.sales_rep_id, sr.sales_rep_name, NVL(SUM(s.sale_amount), 0) as total_sales, sr.commission_rate, NVL(SUM(s.sale_amount), 0) * sr.commission_rate as commission_amount FROM sales_representatives sr LEFT JOIN sales s ON sr.sales_rep_id = s.sales_rep_id AND s.sale_date BETWEEN :1 AND :2 WHERE (:3 IS NULL OR sr.sales_rep_id = :3) GROUP BY sr.sales_rep_id, sr.sales_rep_name, sr.commission_rate ORDER BY total_sales DESC'; EXECUTE IMMEDIATE v_report_sql BULK COLLECT INTO v_sales_data USING v_start_date, v_end_date, p_sales_rep_id, p_sales_rep_id; INSERT INTO sales_report_header (report_id, report_year, report_quarter, created_date, total_reps) VALUES (v_report_id, p_year, p_quarter, SYSDATE, v_sales_data.COUNT); FOR i IN 1..v_sales_data.COUNT LOOP INSERT INTO sales_report_detail (report_id, sales_rep_id, sales_rep_name, total_sales, commission_rate, commission_amount) VALUES (v_report_id, v_sales_data(i).sales_rep_id, v_sales_data(i).sales_rep_name, v_sales_data(i).total_sales, v_sales_data(i).commission_rate, v_sales_data(i).commission_amount); v_total_sales := v_total_sales + v_sales_data(i).total_sales; v_total_commission := v_total_commission + v_sales_data(i).commission_amount; END LOOP; UPDATE sales_report_header SET total_sales = v_total_sales, total_commission = v_total_commission WHERE report_id = v_report_id; COMMIT; DBMS_OUTPUT.PUT_LINE('Sales report generated successfully. Report ID: ' || v_report_id); EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE_APPLICATION_ERROR(-20002, 'Sales report generation failed: ' || SQLERRM); END SP_GENERATE_SALES_REPORT;"}
{"case_id": "9", "difficulty_level": "1", "source_dialect": "ORACLE", "target_dialect": "Postgresql-9.2","key_info":{"sys_func":["PROCEDURE","ROW_NUMBER","COALESCE","NOW","TRUNC","string_agg","REFCURSOR","ROWNUM","VARCHAR","text","EXCEPTION","NOT FOUND","RAISE"]},"sql": "DELIMITER $$ CREATE OR REPLACE PROCEDURE SP_VOP_VESSEL_MANAGE_BK1(V_BUSIMAIN_CODE IN VARCHAR2, V_VES_CALIBRE IN VARCHAR2, V_VESSEL_CODE IN VARCHAR2, V_CALL_SIGN IN VARCHAR2, V_BUSI_MAINBODY IN VARCHAR2, V_BUSI_CALIBRE IN VARCHAR2, V_VESSEL_TYPE_CODE IN VARCHAR2, V_COMPANY_CALIBRE IN VARCHAR2, V_VESMAN_CODE IN VARCHAR2, V_MANAGER_CALIBRE IN VARCHAR2, V_TRADE_TYPE IN VARCHAR2, V_TETIRED_FLAG IN VARCHAR2, V_ACCMAN_CODE IN VARCHAR2, V_ACCOUNT_CALIBRE IN VARCHAR2, V_FEE_TYPE IN VARCHAR2, V_FEE_SUBJECT IN VARCHAR2, V_SAFEMAN_CODE IN VARCHAR2, V_SAFE_CALIBRE IN VARCHAR2, V_CORPORATE_CALIBRE IN VARCHAR2, V_TEST_CALIBRE IN VARCHAR2, V_COSTMAN_CODE IN VARCHAR2, V_COST_CALIBRE IN VARCHAR2, IS_CORSUR OUT SYS_REFCURSOR) IS BEGIN OPEN IS_CORSUR FOR SELECT * FROM( SELECT KK.ROW_NO, KK.VESSEL_CODE, /*船舶代码*/ KK.VESSEL_NAME, /*船舶名称（中文名）*/ KK.VESSEL_NAME_EN, /*船舶名称（英文名）*/ KK.ANOTHER_NAME, /*BMS标准船名 0*/ NVL(S1.OFFICE_NAME,KK.VESMAN_CODE)AS VES_MANAGER, /*船东*/ KK.SHIP_OWNER_FLAG_NAME, /*船舶产权性质 0*/ KK.VESSEL_TYPE, /*船型*/ KK.AREA_NAME, /*航区*/ KK.SHIPYARD, /*建造国家或地区 0*/ KK.VESSEL_NATIONALITY, /*船旗国(地区)*/ KK.TOTAL_LENGTH, /*总长*/ KK.WIDE, /*型宽*/ KK.TYPE_DEEP, /*型深*/ KK.BARE_SPACING_DRINKING, /*吃水 0*/ KK.SHIP_PORT, /*船籍港*/ KK.TONNAGE, /*总吨（吨）*/ KK.MUTETON, /*净吨（吨）*/ KK.CALCULATELIGHTTON, /*轻吨（吨） 0*/ KK.SPEED, /*航速(节)*/ KK.PANAMA_CANAL_TONNAGE, /*总载重量（吨） 0*/ KK.PANAMA_CANAL_NET_TON, /*净载重量（吨） 0*/ KK.HOST_POWER, /*功 率（千瓦）*/ KK.CONSTRUCTION_DATE, /*建造年月*/ KK.CREATE_YEAR, /*船龄(年)*/ KK.OPERATION_DATE, /*接入时间*/ KK.RETIRED_DATE, /*退租/役船时间*/ KK.CALL_SIGN, /*呼号*/ KK.IMO_NO /*IMO编号*/ FROM ( SELECT ROW_NUMBER() OVER(ORDER BY MB.VESSEL_CODE)AS ROW_NO, MB.VESSEL_CODE, MB.VESSEL_NAME, MB.VESSEL_NAME_EN, MB.ANOTHER_NAME, FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'1')AS VESMAN_CODE, NVL(mb.ship_owner_flag,(SELECT c.display_value_cn FROM cdm_codedict c WHERE c.code_type = 'CDM_SHIP_WONER_FLAG' AND c.code_value = MB.ship_owner_flag and rownum = 1))AS SHIP_OWNER_FLAG_NAME, MB.VESSEL_TYPE, NVL(MB.AREA,(SELECT C.DISPLAY_VALUE_CN FROM CDM_CODEDICT C WHERE C.CODE_TYPE = 'CDM_NAVIGATING_ZONE' AND C.CODE_VALUE = MB.AREA))AS AREA_NAME, MB.SHIPYARD, NVL(MB.VESSEL_NATIONALITY,(SELECT COUNTRY_NAME FROM CDM_COUNTRY WHERE COUNTRY_CODE= MB.VESSEL_NATIONALITY))AS VESSEL_NATIONALITY, MB.TOTAL_LENGTH, MB.WIDE, MB.TYPE_DEEP, MB.BARE_SPACING_DRINKING, NVL(MB.SHIP_PORT,(SELECT PORT_NAME from CDM_PORT WHERE PORT_CODE=MB.SHIP_PORT))AS SHIP_PORT, MB.TONNAGE, MB.MUTETON, MB.CALCULATELIGHTTON, MB.SPEED, MB.PANAMA_CANAL_TONNAGE, MB.PANAMA_CANAL_NET_TON, MB.HOST_POWER, MB.CONSTRUCTION_DATE, TRUNC(MONTHS_BETWEEN(SYSDATE, MB.CONSTRUCTION_DATE) / 12)AS CREATE_YEAR, MB.OPERATION_DATE, MB.RETIRED_DATE, MB.CALL_SIGN, MB.IMO_NO FROM VOP_VESSEL MB LEFT JOIN (SELECT LISTAGG((V.TEST_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS TEST_CALIBRE, LISTAGG((V.FEE_TYPE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS FEE_TYPE, LISTAGG((V.FEE_SUBJECT), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS FEE_SUBJECT, LISTAGG((V.CORPORATE_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS CORPORATE_CALIBRE, LISTAGG((V.COMPANY_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS COMPANY_CALIBRE, V.VESSEL_ID FROM VOP_VESSEL_STATISTICS_CALIBRE V GROUP BY V.VESSEL_ID) VV ON MB.VESSEL_ID = VV.VESSEL_ID WHERE (V_BUSIMAIN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'2') = V_BUSIMAIN_CODE) AND (V_VES_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'1') = V_VES_CALIBRE) AND (V_VESSEL_CODE IS NULL OR MB.VESSEL_CODE = V_VESSEL_CODE) AND (V_CALL_SIGN IS NULL OR MB.CALL_SIGN = V_CALL_SIGN) AND (V_BUSI_MAINBODY IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'2') = V_BUSI_MAINBODY) AND (V_BUSI_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'2') = V_BUSI_CALIBRE) AND (V_VESSEL_TYPE_CODE IS NULL OR MB.VESSEL_TYPE_CODE = VESSEL_TYPE_CODE) AND (V_COMPANY_CALIBRE IS NULL OR VV.COMPANY_CALIBRE = V_COMPANY_CALIBRE) AND (V_VESMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'1') = V_VESMAN_CODE) AND (V_MANAGER_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'3') = V_MANAGER_CALIBRE) AND (V_TRADE_TYPE IS NULL OR MB.TRADE_TYPE = V_TRADE_TYPE) AND (V_TETIRED_FLAG IS NULL OR MB.TETIRED_FLAG = V_TETIRED_FLAG) AND (V_ACCMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'4') = V_ACCMAN_CODE) AND (V_ACCOUNT_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'4') = V_ACCOUNT_CALIBRE) AND (V_FEE_TYPE IS NULL OR VV.FEE_TYPE = V_FEE_TYPE) AND (V_FEE_SUBJECT IS NULL OR VV.FEE_SUBJECT = V_FEE_SUBJECT) AND (V_SAFEMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'5') = V_SAFEMAN_CODE) AND (V_SAFE_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'5') = V_SAFE_CALIBRE) AND (V_CORPORATE_CALIBRE IS NULL OR VV.CORPORATE_CALIBRE = V_CORPORATE_CALIBRE) AND (V_TEST_CALIBRE IS NULL OR VV.TEST_CALIBRE = V_TEST_CALIBRE) AND (V_COSTMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'6') = V_COSTMAN_CODE) AND (V_COST_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'6') = V_COST_CALIBRE) )KK LEFT JOIN SYS_OFFICE S1 ON S1.OFFICE_CODE = KK.VESMAN_CODE AND NVL(S1.IS_DELETE, '0') <> '1' )A; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; WHEN OTHERS THEN RAISE; END SP_VOP_VESSEL_MANAGE_BK1; $$"}
{"case_id": "10", "difficulty_level": "2", "source_dialect": "SQLServer", "target_dialect": "GaussDB-v2.0_3.x", "key_info":{"sys_func":["TRUNCATE TABLE","CONVERT","cast","INTERVAL","NOW","CURRENT_TIMESTAMP","DATEADD","GETDATE","lastval","currval","ISNULL","COALESCE","REPLACE","NEWID()","CONCAT","LIKE","TOP","COUNT","DISTINCT","ROW_NUMBER","MAX","BEGIN"]},"sql": "CREATE PROCEDURE [dbo].[p_job_createCustRiskMsgRemind] AS BEGIN TRUNCATE TABLE zbus..t_cust_risk_event_day; INSERT INTO zbus..t_cust_risk_event_day SELECT * FROM IBGX3..t_cust_risk_event tcre WHERE tcre.occurrence_Dt BETWEEN CONVERT(VARCHAR(100), DATEADD(DAY, -1, GETDATE()), 23) + ' 00:00:00' AND CONVERT(VARCHAR(100), DATEADD(DAY, -1, GETDATE()), 23) + ' 23:59:59'; TRUNCATE TABLE zbus..t_cust_member_risk_tem; INSERT INTO zbus..t_cust_member_risk_tem (cust_id, cust_name, member_id, user_id, member_mobile, member_num, member_name, event_title, event_id, occurrence_Dt, [type], event_Level) /* 项目组成员发送待阅，短信，邮件提醒 type=1 */ SELECT tci.cust_id AS cust_id, tci.cust_name AS custName, lm.member_id AS memberId, lu.user_id AS userId, LEFT(lm.member_mobile, 11) AS memberPhone, lm.member_num AS memberNum, lm.member_name AS memberName, tcre.event_tile AS eventTitle, tcre.event_id AS eventId, CONVERT(VARCHAR(100), DATEADD(DAY, -1, GETDATE()), 23) AS occurrenceDt, tcrr.RISK_REMIND_TYPES AS [type], tsrl.event_Risk_Level AS eventLevel FROM IBGX3..T_CUST_INFO tci INNER JOIN IBGX3..T_CUST_RISK_REMIND_SET tcrr ON tci.cust_id = tcrr.cust_id INNER JOIN IBGX3..L_MEMBER lm ON tcrr.member_id = lm.member_id AND lm.member_type <> 3 AND ISNULL(lm.member_address, '') NOT IN ('yyb') INNER JOIN zbus..t_cust_risk_event_day tcre ON tci.CUST_ID = tcre.cust_id INNER JOIN IBGX3..t_cust_risk_level tsrl ON tcre.event_Code = tsrl.event_Code INNER JOIN IBGX3..L_USER lu ON lu.member_id = lm.member_id; DELETE FROM t_cust_member_risk_tem WHERE event_Level <> 3; SELECT member_id, REPLACE(NEWID(), '-', '') AS id INTO #t_member_uid FROM zbus..t_cust_member_risk_tem GROUP BY member_id; /* 按照用户维度生成一个唯一的uid */ UPDATE zbus..t_cust_member_risk_tem SET [uid] = T.id FROM #t_member_uid T WHERE zbus..t_cust_member_risk_tem.member_id = T.member_id; /* 待阅提醒 */ INSERT INTO IBGX3..lmsp_mom_msg (msg_id, rec_gen_time, rel_flag, cons_desc, cons_no, msg_cont, rel_type, msg_stat, msg_title, msg_type, flag_desc) SELECT Tem.uid, GETDATE(), -1, Tem.cons_desc, Tem.cons_no, Tem.msg_cont, Tem.rel_type, Tem.msg_stat, Tem.msg_title, Tem.msg_type, Tem.flag_desc FROM ( SELECT DISTINCT tt.uid AS uid, tt.member_name AS cons_desc, tt.user_id AS cons_no, CONCAT(tt.occurrence_Dt, '风险事项信息') AS msg_cont, 101 AS rel_type, 1 AS msg_stat, CONCAT(tt.occurrence_Dt, '风险事项信息') AS msg_title, 1 AS msg_type, CONVERT(VARCHAR(100), DATEADD(DAY, -1, GETDATE()), 23) AS flag_desc FROM zbus..t_cust_member_risk_tem tt WHERE CONCAT(';', tt.[type], ';') LIKE CONCAT('%', ';1;', '%') ) Tem; /* 短信提醒 add by sp 20220215 */ INSERT INTO zbus..t_sms (mobiles, content, priority, rec_gen_time, send_status) SELECT tem.memberPhone, CONCAT('您关注的【', ( SELECT TOP 1 tt2.cust_name FROM zbus..t_cust_member_risk_tem tt2 WHERE CONCAT(';', tt2.[type], ';') LIKE CONCAT('%', ';3;', '%') AND tt2.member_id = tem.memberId ), '】等【', ( SELECT COUNT(DISTINCT tt4.cust_id) FROM zbus..t_cust_member_risk_tem tt4 WHERE CONCAT(';', tt4.[type], ';') LIKE CONCAT('%', ';3;', '%') AND tt4.member_id = tem.memberId ), '】家客户及其关联方在【', tem.occurrenceDt, '】发生', ( SELECT COUNT(DISTINCT CONCAT(tt5.cust_id, tt5.event_id)) FROM zbus..t_cust_member_risk_tem tt5 WHERE CONCAT(';', tt5.[type], ';') LIKE CONCAT('%', ';3;', '%') AND tt5.member_id = tem.memberId ), '项高风险事项，涉及【', ( SELECT TOP 1 tt6.event_title FROM zbus..t_cust_member_risk_tem tt6 WHERE CONCAT(';', tt6.[type], ';') LIKE CONCAT('%', ';3;', '%') AND tt6.member_id = tem.memberId ), '】等，请登录投行业务管理平台首页“待阅”消息查看详情' ) AS content, 3, GETDATE(), 0 FROM ( SELECT DISTINCT tt.occurrence_Dt AS occurrenceDt, tt.member_num AS memberNum, tt.member_id AS memberId, tt.member_mobile AS memberPhone FROM zbus..t_cust_member_risk_tem tt WHERE CONCAT(';', tt.[type], ';') LIKE CONCAT('%', ';3;', '%') ) tem; /* 邮件提醒 add by sp 20220215 */ INSERT INTO IBGX3..T_EMAILINFO (REC_GEN_TIME, EMAIL_ID, EMAIL_TITLE, EMAIL_CONTENT, EMAIL_STATUS, EMAIL_MEMBER, EMAIL_TYPE_NAME) SELECT GETDATE() AS REC_GEN_TIME, (ROW_NUMBER() OVER (ORDER BY GETDATE())) + (SELECT ISNULL(MAX(te.EMAIL_ID), 500000) FROM IBGX3..T_EMAILINFO te WHERE EMAIL_ID BETWEEN 500000 AND 1000000) AS EMAIL_ID, CONCAT(tem.occurrenceDt, '风险事项信息') AS EMAIL_TITLE, CONCAT('<div style=\"width: 780px;padding: 15px;margin: 20px auto;border: 1px solid #005ba1;border-top-width: 5px;text-align:left;\"><h3 style=\"\">', tem.occurrenceDt, '，您所关注的【', ( SELECT COUNT(DISTINCT tt3.cust_id) FROM zbus..t_cust_member_risk_tem tt3 WHERE CONCAT(';', tt3.[type], ';') LIKE CONCAT('%', ';2;', '%') AND tt3.member_id = tem.memberId ), '】家客户及其关联方发生了以下高风险事项，请您关注。详情请登录投行业务管理平台首页“待阅”消息进行查看', ( SELECT TOP 1 CASE /* 判断是否为部门管理人 */ WHEN (SELECT COUNT(1) FROM zbus..t_cust_member_risk_tem WHERE member_id IN (SELECT t1.member_id FROM ibgx3..t_risk_mom_member t2 INNER JOIN ibgx3..L_MEMBER t1 ON t1.MEMBER_NUM = t2.member_num WHERE t1.MEMBER_ID = tem.memberId)) = 0 THEN CONCAT('【', (SELECT tci3.cust_name FROM ibgx3..T_CUST_INFO tci3 WHERE tci3.cust_id = tt2.cust_id), '】', '（', ( SELECT TOP 1 CONCAT(tpp.project_name, '-', ( CASE WHEN tpp.TEMP_CONTRACT IS NULL THEN ld3.dd_value ELSE ld.dd_value END ) ) FROM ibgx3..T_PJ_PROJECTINFO tpp LEFT JOIN ibgx3..LMSP_DATADICT ld ON ld.DD_TYPE = 'PjDetailStatus' AND tpp.TEMP_CONTRACT = ld.DD_KEY LEFT JOIN ibgx3..LMSP_DATADICT ld3 ON ld3.DD_TYPE = 'projectStatus' AND tpp.PROJECT_STATUS = ld3.DD_KEY INNER JOIN IBGX3..T_PJ_CUSTRELATION tpc3 ON tpp.project_id = tpc3.PJ_ID AND tpc3.CUST_ID = tt2.cust_id INNER JOIN IBGX3..T_PJ_MEMBERRELINFO tpm ON tpp.PROJECT_ID = tpm.PJ_ID AND tem.memberId = tpm.MEM_ID AND tpm.ROLE_TYPE = 1 WHERE tpp.PROJECT_STATUS = 3 /* 邮件样式调整 lxp 2023/03/29 */ ), '）', '：【事件标题（如：', MAX(tt2.event_Title), '】' ) ELSE CONCAT('【', (SELECT tci3.cust_name FROM ibgx3..T_CUST_INFO tci3 WHERE tci3.cust_id = tt2.cust_id), '】', '（', ( SELECT TOP 1 CONCAT(tpp.project_name, '-', ( CASE WHEN tpp.TEMP_CONTRACT IS NULL THEN ld3.dd_value ELSE ld.dd_value END ) ) FROM ibgx3..T_PJ_PROJECTINFO tpp LEFT JOIN ibgx3..LMSP_DATADICT ld ON ld.DD_TYPE = 'PjDetailStatus' AND tpp.TEMP_CONTRACT = ld.DD_KEY LEFT JOIN ibgx3..LMSP_DATADICT ld3 ON ld3.DD_TYPE = 'projectStatus' AND tpp.PROJECT_STATUS = ld3.DD_KEY INNER JOIN ibgx3..T_PJ_CUSTRELATION tpc3 ON tpp.project_id = tpc3.PJ_ID AND tpc3.CUST_ID = tt2.cust_id INNER JOIN ibgx3..T_ORG_ROOT_REL torr2 ON tpp.PROJECT_ORG_ID = torr2.ORG_ID INNER JOIN ibgx3..t_risk_mom_member trmm2 ON torr2.ORG_ROOT_FLAG = trmm2.org_root INNER JOIN ibgx3..L_MEMBER lm2 ON trmm2.member_num = lm2.MEMBER_NUM WHERE tpp.PROJECT_STATUS = 3 /* 邮件样式调整 lxp 2023/03/29 */ AND lm2.member_id = tem.memberId ), '）', '：【事件标题（如：', MAX(tt2.event_Title), '】' ) END AS EMAIL_CONTENT FROM zbus..t_cust_member_risk_tem tt2 WHERE CONCAT(';', tt2.[type], ';') LIKE CONCAT('%', ';2;', '%') AND tt2.member_id = tem.memberId GROUP BY tt2.cust_id ), '</h3><p style=\"font-size: 16px;word-break: break-all;\">请点击以下链接查看</p ><a style=\"text-decoration: inherit;cursor: pointer;border-radius: 4px;display: inline-block;height: 40px;line-height: 40px;padding: 0px 30px;background: #005ca1;color: #fff;font-size: 16px;\" href=\"${gxib.url.root}/ibcms/#/embed/project/riskToread?msgId=', tem.uid, '\" target=\"_blank\">查看详情</a></div><p style=\"text-align:center;font-size: 13px;color: #92989b;\">本邮件由系统自动发出，请勿直接回复。</p >' ), 0 AS EMAIL_STATUS, tem.memberId AS EMAIL_MEMBER, '客户风险信息提醒' AS EMAIL_TYPE_NAME FROM ( SELECT DISTINCT tt.uid AS uid, tt.occurrence_Dt AS occurrenceDt, tt.member_id AS memberId FROM zbus..t_cust_member_risk_tem tt WHERE CONCAT(';', tt.[type], ';') LIKE CONCAT('%', ';2;', '%') ) tem END;"}
{"case_id": "11", "difficulty_level": "3", "source_dialect": "SQLServer", "target_dialect": "GaussDB-v2.0_3.x", "key_info":{"sys_func":["CREATE PROCEDURE","CREATE FUNCTION","datetime","BEGIN","GETDATE","NOW","CURRENT_TIMESTAMP","DECLARE","CURSOR","BEGIN TRY","CURRENT_USER","SESSION_USER","ERROR_MESSAGE","CONCAT","PRINT","CAST","RAISERROR"]},"sql": "CREATE PROCEDURE SP_BulkInventoryUpdate @WarehouseID INT, @AdjustmentType NVARCHAR(50), @AdjustmentDate DATETIME = NULL AS BEGIN SET NOCOUNT ON; IF @AdjustmentDate IS NULL SET @AdjustmentDate = GETDATE(); DECLARE @ProductID INT, @CurrentQty INT, @AdjustmentQty INT, @NewQty INT; DECLARE @TotalProcessed INT = 0, @ErrorCount INT = 0; DECLARE @ErrorMessage NVARCHAR(4000); DECLARE inventory_cursor CURSOR FOR SELECT ProductID, QuantityOnHand, CASE @AdjustmentType WHEN 'RECOUNT' THEN PhysicalCount - QuantityOnHand WHEN 'DAMAGE' THEN -DamagedQuantity WHEN 'RETURN' THEN ReturnedQuantity ELSE 0 END AS AdjustmentQty FROM InventoryStaging WHERE WarehouseID = @WarehouseID AND Status = 'PENDING' ORDER BY ProductID; BEGIN TRANSACTION; BEGIN TRY OPEN inventory_cursor; FETCH NEXT FROM inventory_cursor INTO @ProductID, @CurrentQty, @AdjustmentQty; WHILE @@FETCH_STATUS = 0 BEGIN BEGIN TRY SET @NewQty = @CurrentQty + @AdjustmentQty; IF EXISTS (SELECT 1 FROM Inventory WHERE ProductID = @ProductID AND WarehouseID = @WarehouseID) UPDATE Inventory SET QuantityOnHand = @NewQty, LastAdjustmentDate = @AdjustmentDate, LastAdjustmentType = @AdjustmentType WHERE ProductID = @ProductID AND WarehouseID = @WarehouseID; ELSE INSERT INTO Inventory (ProductID, WarehouseID, QuantityOnHand, LastAdjustmentDate, LastAdjustmentType) VALUES (@ProductID, @WarehouseID, CASE WHEN @NewQty < 0 THEN 0 ELSE @NewQty END, @AdjustmentDate, @AdjustmentType); INSERT INTO InventoryAuditLog (ProductID, WarehouseID, AdjustmentDate, AdjustmentType, OldQuantity, AdjustmentQuantity, NewQuantity, CreatedBy) VALUES (@ProductID, @WarehouseID, @AdjustmentDate, @AdjustmentType, @CurrentQty, @AdjustmentQty, @NewQty, SUSER_SNAME()); SET @TotalProcessed = @TotalProcessed + 1; END TRY BEGIN CATCH SET @ErrorCount = @ErrorCount + 1; INSERT INTO ErrorLog (ErrorDate, ErrorMessage, ProductID) VALUES (GETDATE(), 'Inventory update failed: ' + ERROR_MESSAGE(), @ProductID); END CATCH; FETCH NEXT FROM inventory_cursor INTO @ProductID, @CurrentQty, @AdjustmentQty; END; CLOSE inventory_cursor; DEALLOCATE inventory_cursor; UPDATE InventoryStaging SET Status = 'PROCESSED', ProcessedDate = GETDATE() WHERE WarehouseID = @WarehouseID AND Status = 'PENDING'; COMMIT TRANSACTION; PRINT 'Bulk inventory update completed. Processed: ' + CAST(@TotalProcessed AS NVARCHAR(10)) + ', Errors: ' + CAST(@ErrorCount AS NVARCHAR(10)); END TRY BEGIN CATCH SET @ErrorMessage = ERROR_MESSAGE(); ROLLBACK TRANSACTION; IF CURSOR_STATUS('global', 'inventory_cursor') >= 0 BEGIN CLOSE inventory_cursor; DEALLOCATE inventory_cursor; END; RAISERROR('Bulk inventory update failed: %s', 16, 1, @ErrorMessage); END CATCH; END;"}
{"case_id": "12", "difficulty_level": "2", "source_dialect": "SQLServer", "target_dialect": "GaussDB-v2.0_3.x", "key_info":{"sys_func":["SET NOCOUNT ON","DECLARE","DECIMAL","NUMERIC","CURSOR","ISNULL","COALESCE","SUM","BEGIN TRY","GETDATE","NOW","CURRENT_TIMESTAMP","SCOPE_IDENTITY","OPEN","@@FETCH_STATUS","WHILE","CLOSE","DEALLOCATE","RAISE NOTICE","PRINT","CAST","NVARCHAR2","RAISERROR","ERROR_MESSAGE","RAISE EXCEPTION","BETWEEN"]},"sql": "CREATE PROCEDURE SP_ProcessPayroll @PayPeriodStart DATETIME, @PayPeriodEnd DATETIME, @DepartmentID INT = NULL AS BEGIN SET NOCOUNT ON; DECLARE @PayrollID INT; DECLARE @EmployeeID INT, @HourlyRate DECIMAL(10,2), @RegularHours DECIMAL(5,2), @OvertimeHours DECIMAL(5,2); DECLARE @GrossPay DECIMAL(10,2), @TaxDeduction DECIMAL(10,2), @NetPay DECIMAL(10,2); DECLARE @TotalGross DECIMAL(15,2) = 0, @TotalNet DECIMAL(15,2) = 0; DECLARE employee_cursor CURSOR FOR SELECT e.EmployeeID, e.HourlyRate, ISNULL(SUM(CASE WHEN t.Hours <= 8 THEN t.Hours ELSE 8 END), 0) AS RegularHours, ISNULL(SUM(CASE WHEN t.Hours > 8 THEN t.Hours - 8 ELSE 0 END), 0) AS OvertimeHours FROM Employees e LEFT JOIN Timesheet t ON e.EmployeeID = t.EmployeeID AND t.WorkDate BETWEEN @PayPeriodStart AND @PayPeriodEnd WHERE e.Status = 'ACTIVE' AND (@DepartmentID IS NULL OR e.DepartmentID = @DepartmentID) GROUP BY e.EmployeeID, e.HourlyRate ORDER BY e.EmployeeID; BEGIN TRY INSERT INTO PayrollHeader (PayPeriodStart, PayPeriodEnd, DepartmentID, CreatedDate, Status) VALUES (@PayPeriodStart, @PayPeriodEnd, @DepartmentID, GETDATE(), 'PROCESSING'); SET @PayrollID = SCOPE_IDENTITY(); OPEN employee_cursor; FETCH NEXT FROM employee_cursor INTO @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours; WHILE @@FETCH_STATUS = 0 BEGIN SET @GrossPay = (@RegularHours * @HourlyRate) + (@OvertimeHours * @HourlyRate * 1.5); SET @TaxDeduction = @GrossPay * 0.20; -- 20% tax rate SET @NetPay = @GrossPay - @TaxDeduction; INSERT INTO PayrollDetail (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay) VALUES (@PayrollID, @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours, @GrossPay, @TaxDeduction, @NetPay); SET @TotalGross = @TotalGross + @GrossPay; SET @TotalNet = @TotalNet + @NetPay; FETCH NEXT FROM employee_cursor INTO @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours; END; CLOSE employee_cursor; DEALLOCATE employee_cursor; UPDATE PayrollHeader SET TotalGrossPay = @TotalGross, TotalNetPay = @TotalNet, Status = 'COMPLETED', CompletedDate = GETDATE() WHERE PayrollID = @PayrollID; PRINT 'Payroll processing completed. Payroll ID: ' + CAST(@PayrollID AS NVARCHAR(10)); END TRY BEGIN CATCH IF CURSOR_STATUS('global', 'employee_cursor') >= 0 BEGIN CLOSE employee_cursor; DEALLOCATE employee_cursor; END; UPDATE PayrollHeader SET Status = 'FAILED', ErrorMessage = ERROR_MESSAGE() WHERE PayrollID = @PayrollID; RAISERROR('Payroll processing failed: %s', 16, 1, ERROR_MESSAGE()); END CATCH; END;"}
{"case_id": "13", "difficulty_level": "1", "source_dialect": "SQLServer", "target_dialect": "GaussDB-v2.0_3.x", "key_info":{"sys_func":["SET NOCOUNT ON","DECLARE","DATEADD","lastval","currval","GETDATE","NOW","CURRENT_TIMESTAMP","BEGIN TRY","@@ROWCOUNT","PRINT","CAST","NVARCHAR2","RAISERROR","ERROR_MESSAGE","RAISE EXCEPTION","DATETIME"]},"sql": "CREATE PROCEDURE SP_CleanupOldLogs @RetentionDays INT = 90 AS BEGIN SET NOCOUNT ON; DECLARE @CutoffDate DATETIME; DECLARE @DeletedCount INT; SET @CutoffDate = DATEADD(DAY, -@RetentionDays, GETDATE()); BEGIN TRY DELETE FROM ApplicationLogs WHERE LogDate < @CutoffDate; SET @DeletedCount = @@ROWCOUNT; DELETE FROM ErrorLogs WHERE ErrorDate < @CutoffDate; SET @DeletedCount = @DeletedCount + @@ROWCOUNT; DELETE FROM AuditLogs WHERE AuditDate < @CutoffDate; SET @DeletedCount = @DeletedCount + @@ROWCOUNT; INSERT INTO CleanupHistory (CleanupDate, TableName, RecordsDeleted, RetentionDays) VALUES (GETDATE(), 'MULTIPLE_LOG_TABLES', @DeletedCount, @RetentionDays); PRINT 'Cleanup completed. ' + CAST(@DeletedCount AS NVARCHAR(10)) + ' records deleted.'; END TRY BEGIN CATCH RAISERROR('Log cleanup failed: %s', 16, 1, ERROR_MESSAGE()); END CATCH; END;"}
{"case_id": "14", "difficulty_level": "2", "source_dialect": "SQLServer", "target_dialect": "GaussDB-v2.0_3.x", "key_info":{"sys_func":["SET NOCOUNT ON","DECLARE","NVARCHAR2","INT","BEGIN TRY","GETDATE","NOW","CURRENT_TIMESTAMP","SCOPE_IDENTITY","EXEC","@@ROWCOUNT","WHILE","CAST","TOP","PRINT","RAISERROR","ERROR_MESSAGE","RAISE EXCEPTION","BREAK","COUNT","OUTPUT","MAX"]},"sql": "CREATE PROCEDURE SP_DataMigration @SourceTable NVARCHAR(128), @TargetTable NVARCHAR(128), @BatchSize INT = 10000 AS BEGIN SET NOCOUNT ON; DECLARE @SQL NVARCHAR(MAX); DECLARE @SourceCount INT, @TargetCount INT, @BatchCount INT = 0; DECLARE @MigrationID INT; DECLARE @ErrorMessage NVARCHAR(4000); BEGIN TRY INSERT INTO MigrationLog (SourceTable, TargetTable, StartTime, Status) VALUES (@SourceTable, @TargetTable, GETDATE(), 'RUNNING'); SET @MigrationID = SCOPE_IDENTITY(); SET @SQL = 'SELECT @Count = COUNT(*) FROM ' + @SourceTable; EXEC sp_executesql @SQL, N'@Count INT OUTPUT', @Count = @SourceCount OUTPUT; UPDATE MigrationLog SET SourceCount = @SourceCount WHERE MigrationID = @MigrationID; SET @SQL = 'DELETE FROM ' + @TargetTable; EXEC sp_executesql @SQL; WHILE @BatchCount < @SourceCount BEGIN SET @SQL = 'INSERT INTO ' + @TargetTable + ' SELECT TOP ' + CAST(@BatchSize AS NVARCHAR(10)) + ' * FROM ' + @SourceTable + ' WHERE NOT EXISTS (SELECT 1 FROM ' + @TargetTable + ' t WHERE t.ID = ' + @SourceTable + '.ID)'; EXEC sp_executesql @SQL; IF @@ROWCOUNT = 0 BREAK; SET @BatchCount = @BatchCount + @@ROWCOUNT; END; SET @SQL = 'SELECT @Count = COUNT(*) FROM ' + @TargetTable; EXEC sp_executesql @SQL, N'@Count INT OUTPUT', @Count = @TargetCount OUTPUT; UPDATE MigrationLog SET EndTime = GETDATE(), TargetCount = @TargetCount, Status = CASE WHEN @SourceCount = @TargetCount THEN 'SUCCESS' ELSE 'WARNING' END WHERE MigrationID = @MigrationID; PRINT 'Migration completed for ' + @SourceTable + '. Source: ' + CAST(@SourceCount AS NVARCHAR(10)) + ', Target: ' + CAST(@TargetCount AS NVARCHAR(10)); END TRY BEGIN CATCH SET @ErrorMessage = ERROR_MESSAGE(); UPDATE MigrationLog SET EndTime = GETDATE(), Status = 'FAILED', ErrorMessage = @ErrorMessage WHERE MigrationID = @MigrationID; RAISERROR('Data migration failed: %s', 16, 1, @ErrorMessage); END CATCH; END;"}
{"case_id": "15", "difficulty_level": "2", "source_dialect": "SQLServer", "target_dialect": "GaussDB-v2.0_3.x", "key_info":{"sys_func":["SET NOCOUNT ON","GETDATE","NOW","CURRENT_TIMESTAMP","DECLARE","NVARCHAR2","CURSOR","BEGIN TRY","RAISERROR","COUNT","CAST","OPEN","FETCH NEXT","@@FETCH_STATUS","WHILE","current_user","session_user","RAISERROR","ERROR_MESSAGE","RAISE EXCEPTION","CLOSE","DEALLOCATE","PRINT","INT"]},"sql": "CREATE PROCEDURE SP_UpdateProductCategories @OldCategoryID INT, @NewCategoryID INT, @EffectiveDate DATETIME = NULL AS BEGIN SET NOCOUNT ON; IF @EffectiveDate IS NULL SET @EffectiveDate = GETDATE(); DECLARE @ProductCount INT, @UpdatedCount INT = 0; DECLARE @ProductID INT, @ProductName NVARCHAR(100); DECLARE product_cursor CURSOR FOR SELECT ProductID, ProductName FROM Products WHERE CategoryID = @OldCategoryID AND Status = 'ACTIVE'; BEGIN TRY IF @OldCategoryID = @NewCategoryID RAISERROR('Old and new category IDs cannot be the same', 16, 1); SELECT @ProductCount = COUNT(*) FROM Products WHERE CategoryID = @OldCategoryID AND Status = 'ACTIVE'; IF @ProductCount = 0 BEGIN PRINT 'No active products found in category ' + CAST(@OldCategoryID AS NVARCHAR(10)); RETURN; END; OPEN product_cursor; FETCH NEXT FROM product_cursor INTO @ProductID, @ProductName; WHILE @@FETCH_STATUS = 0 BEGIN BEGIN TRY INSERT INTO ProductCategoryHistory (ProductID, OldCategoryID, NewCategoryID, ChangeDate, ChangedBy) VALUES (@ProductID, @OldCategoryID, @NewCategoryID, @EffectiveDate, SUSER_SNAME()); UPDATE Products SET CategoryID = @NewCategoryID, LastModifiedDate = @EffectiveDate, LastModifiedBy = SUSER_SNAME() WHERE ProductID = @ProductID; SET @UpdatedCount = @UpdatedCount + 1; END TRY BEGIN CATCH INSERT INTO CategoryUpdateErrors (ProductID, ErrorMessage, ErrorDate) VALUES (@ProductID, ERROR_MESSAGE(), GETDATE()); END CATCH; FETCH NEXT FROM product_cursor INTO @ProductID, @ProductName; END; CLOSE product_cursor; DEALLOCATE product_cursor; UPDATE ProductCategories SET LastUpdateDate = @EffectiveDate WHERE CategoryID IN (@OldCategoryID, @NewCategoryID); PRINT 'Category update completed. ' + CAST(@UpdatedCount AS NVARCHAR(10)) + ' products updated out of ' + CAST(@ProductCount AS NVARCHAR(10)) + ' total.'; END TRY BEGIN CATCH IF CURSOR_STATUS('global', 'product_cursor') >= 0 BEGIN CLOSE product_cursor; DEALLOCATE product_cursor; END; RAISERROR('Category update failed: %s', 16, 1, ERROR_MESSAGE()); END CATCH; END;"}