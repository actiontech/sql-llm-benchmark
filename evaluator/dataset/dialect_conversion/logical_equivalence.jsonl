{"case_id": "1", "difficulty_level": "1", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT name, id FROM students WHERE age > 10 AND name COLLATE utf8mb4_unicode_ci = 'John Doe';", "create_table_statements": ["CREATE TABLE IF NOT EXISTS students (id INT PRIMARY KEY, name VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci, age INT);"]}
{"case_id": "2", "difficulty_level": "1", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "INSERT INTO products (product_name, price) VALUES ('Monitor', 300) ON DUPLICATE KEY UPDATE price = VALUES(price) * 1.05;", "create_table_statements": ["CREATE TABLE IF NOT EXISTS products (product_id INT PRIMARY KEY AUTO_INCREMENT, product_name VARCHAR(255) NOT NULL UNIQUE, price DECIMAL(10, 2));"]}
{"case_id": "3", "difficulty_level": "1", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "CREATE TABLE IF NOT EXISTS orders (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, order_date DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE);", "create_table_statements": ["CREATE TABLE IF NOT EXISTS customers (customer_id INT PRIMARY KEY AUTO_INCREMENT, customer_name VARCHAR(255));", "CREATE TABLE IF NOT EXISTS orders (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, order_date DATETIME DEFAULT CURRENT_TIMESTAMP);"]}
{"case_id": "4", "difficulty_level": "1", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "SELECT employee_name, hire_date, NVL(commission, 0) AS actual_commission FROM employees WHERE department_id = 5 AND TRUNC(hire_date) = TRUNC(SYSDATE);", "create_table_statements": ["CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), hire_date DATE, department_id NUMBER, commission NUMBER);"]}
{"case_id": "5", "difficulty_level": "1", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "CREATE TABLE books (book_id NUMBER PRIMARY KEY, title VARCHAR2(255) NOT NULL, published_date DATE DEFAULT SYSDATE);", "create_table_statements": ["BEGIN EXECUTE IMMEDIATE 'DROP TABLE books CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN NULL; ELSE RAISE; END IF; END;", "CREATE TABLE books (book_id NUMBER PRIMARY KEY, title VARCHAR2(255) NOT NULL, published_date DATE DEFAULT SYSDATE);"]}
{"case_id": "6", "difficulty_level": "2", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "ELECT user_id, username, DATE_FORMAT(last_login, '%Y-%m-%d %H:%i:%s') AS formatted_last_login, LEFT(user_bio, 20) AS short_bio FROM user_data;", "create_table_statements": ["CREATE TABLE `user_data` (\n  `user_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,\n  `username` VARCHAR(50) NOT NULL,\n  `last_login` DATETIME DEFAULT NULL,\n  `user_bio` TEXT,\n  PRIMARY KEY (`user_id`),\n  INDEX `idx_username` (`username`)\n) ENGINE=InnoDB\n  DEFAULT CHARSET = utf8mb4\n  COLLATE = utf8mb4_unicode_ci;"]}
{"case_id": "7", "difficulty_level": "2", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT DATE_FORMAT(registration_date, '%Y-%m-%d %H:%i:%s') AS formatted_reg_date, COUNT(DISTINCT city) AS unique_cities, NULLIF(MAX(customer_id), 0) AS max_customer_id, JSON_ARRAYAGG(JSON_OBJECT('name', customer_name, 'status', status)) AS customer_details_json FROM customers WHERE registration_date > (SELECT MIN(order_date) FROM orders WHERE order_status = 'COMPLETED') AND status = 'Active' GROUP BY formatted_reg_date ORDER BY formatted_reg_date;", "create_table_statements": ["CREATE TABLE IF NOT EXISTS customers (customer_id INT PRIMARY KEY AUTO_INCREMENT, customer_name VARCHAR(255), city VARCHAR(100), registration_date DATETIME, status VARCHAR(50));", "CREATE TABLE IF NOT EXISTS orders (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, order_date DATETIME, order_status VARCHAR(50));"]}
{"case_id": "8", "difficulty_level": "2", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT DATE_FORMAT(sale_date, '%Y-%m-%d') AS sale_day, COUNT(sale_id) AS total_sales, SUM(amount) AS total_amount\nFROM sales\nGROUP BY sale_day\nORDER BY total_amount DESC\nLIMIT 1 OFFSET 0;", "create_table_statements": ["CREATE TABLE `sales` (\n  `sale_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,\n  `sale_date` DATETIME NOT NULL,\n  `amount` DECIMAL(12, 2) NOT NULL,\n  PRIMARY KEY (`sale_id`),\n  INDEX `idx_sale_date` (`sale_date`)\n) ENGINE=InnoDB\n  DEFAULT CHARSET = utf8mb4\n  COLLATE = utf8mb4_unicode_ci;"]}
{"case_id": "9", "difficulty_level": "2", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "CREATE TABLE IF NOT EXISTS articles (article_id INT AUTO_INCREMENT PRIMARY KEY, title VARCHAR(255) UNIQUE NOT NULL, content LONGTEXT, published_on DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), views BIGINT DEFAULT 0);", "create_table_statements": ["CREATE TABLE IF NOT EXISTS articles (article_id INT AUTO_INCREMENT PRIMARY KEY, title VARCHAR(255) UNIQUE NOT NULL, content LONGTEXT, published_on DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), views BIGINT DEFAULT 0);"]}
{"case_id": "10", "difficulty_level": "2", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "SELECT employee_id, employee_name, hire_date, NVL2(commission, 'Has Commission', 'No Commission') AS commission_status, LAG(salary, 1, 0) OVER (PARTITION BY department_id ORDER BY hire_date) AS prev_employee_salary, LEAD(salary, 1, 0) OVER (PARTITION BY department_id ORDER BY hire_date) AS next_employee_salary, FIRST_VALUE(employee_name) OVER (PARTITION BY department_id ORDER BY salary DESC) AS top_earner_in_dept, TRUNC(SYSDATE, 'IW') AS start_of_week FROM employees WHERE hire_date BETWEEN TO_DATE('2020-01-01', 'YYYY-MM-DD') AND SYSDATE - INTERVAL '30' DAY ORDER BY hire_date ASC OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;", "create_table_statements": ["CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), hire_date DATE, department_id NUMBER, salary DECIMAL(10,2), commission DECIMAL(10,2));"]}
{"case_id": "11", "difficulty_level": "2", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "CREATE TABLE documents (doc_id NUMBER PRIMARY KEY, content CLOB, metadata CLOB, created_at TIMESTAMP WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, is_active NUMBER(1,0) DEFAULT 1, tags VARCHAR2(4000)); SELECT doc_id, JSON_VALUE(metadata, '$.author.name' RETURNING VARCHAR2(100) ERROR ON ERROR) AS author_name, XMLSERIALIZE(CONTENT XMLTYPE('<doc><id>' || doc_id || '</id><status>' || is_active || '</status></doc>') AS CLOB) AS doc_xml_representation FROM documents WHERE JSON_EXISTS(metadata, '$.status') AND JSON_VALUE(metadata, '$.status') = 'Published' AND SYS_CONTEXT('USERENV', 'SESSION_USER') = 'APP_USER';", "create_table_statements": ["BEGIN EXECUTE IMMEDIATE 'DROP TABLE documents CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN NULL; ELSE RAISE; END IF; END;", "CREATE TABLE documents (doc_id NUMBER PRIMARY KEY, content CLOB, metadata CLOB, created_at TIMESTAMP WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, is_active NUMBER(1,0) DEFAULT 1, tags VARCHAR2(4000));"]}
{"case_id": "12", "difficulty_level": "3", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "WITH RECURSIVE EmployeeHierarchy AS ( SELECT employee_id, employee_name, manager_id, 1 AS level, CAST(employee_id AS CHAR) AS path FROM employees WHERE manager_id IS NULL UNION ALL SELECT e.employee_id, e.employee_name, e.manager_id, eh.level + 1, CONCAT(eh.path, '->', e.employee_id) FROM employees e JOIN EmployeeHierarchy eh ON e.manager_id = eh.employee_id WHERE eh.level < 5 ), DeptEmployeeSummary AS ( SELECT d.department_id, d.department_name, COUNT(eh.employee_id) AS total_employees, SUM(CASE WHEN eh.salary > 70000 THEN 1 ELSE 0 END) AS high_salary_employees, GROUP_CONCAT(DISTINCT eh.employee_name ORDER BY eh.employee_id SEPARATOR '; ') AS employees_list FROM departments d LEFT JOIN EmployeeHierarchy eh ON d.department_id = eh.department_id GROUP BY d.department_id, d.department_name ) SELECT ds.*, (SELECT COUNT(*) FROM employee_projects ep WHERE ep.employee_id IN (SELECT eh2.employee_id FROM EmployeeHierarchy eh2 WHERE eh2.department_id = ds.department_id)) AS num_projects_in_dept FROM DeptEmployeeSummary ds WHERE ds.total_employees > 5 AND ds.high_salary_employees > 2 ORDER BY ds.department_name;", "create_table_statements": ["CREATE TABLE IF NOT EXISTS employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), manager_id INT, department_id INT, salary DECIMAL(10,2));", "CREATE TABLE IF NOT EXISTS departments (department_id INT PRIMARY KEY, department_name VARCHAR(255));", "CREATE TABLE IF NOT EXISTS employee_projects (project_id INT, employee_id INT, PRIMARY KEY (project_id, employee_id));"]}
{"case_id": "13", "difficulty_level": "3", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT order_id, customer_id, order_date, total_amount, SUM(total_amount) OVER (PARTITION BY customer_id ORDER BY order_date) AS running_total, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY total_amount DESC) AS rn_by_customer_salary FROM orders_w WHERE customer_id IN (101, 102);", "create_table_statements": ["CREATE TABLE `orders_w` (\n  `order_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,\n  `customer_id` BIGINT UNSIGNED NOT NULL,\n  `order_date` DATETIME NOT NULL,\n  `total_amount` DECIMAL(10, 2) NOT NULL,\n  PRIMARY KEY (`order_id`),\n  INDEX `idx_customer_id` (`customer_id`)\n) ENGINE=InnoDB\n  DEFAULT CHARSET = utf8mb4\n  COLLATE = utf8mb4_unicode_ci;"]}
{"case_id": "14", "difficulty_level": "3", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "DELIMITER $$ CREATE PROCEDURE ProcessPayments(IN p_batch_size INT, OUT p_processed_count INT, OUT p_error_message VARCHAR(255)) BEGIN     DECLARE v_payment_id INT;    DECLARE v_amount DECIMAL(10, 2);    DECLARE v_status VARCHAR(50);    DECLARE v_sql TEXT;    DECLARE no_more_payments BOOLEAN DEFAULT FALSE;    DECLARE payment_cursor CURSOR FOR SELECT payment_id, amount FROM payments WHERE status = 'PENDING' ORDER BY payment_id LIMIT p_batch_size;    DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_payments = TRUE;    DECLARE EXIT HANDLER FOR SQLEXCEPTION     BEGIN        ROLLBACK;        SET p_error_message = CONCAT('Unhandled error (SQLSTATE: ', SQLSTATE, ', Message: ', MESSAGE_TEXT, ')');        SET p_processed_count = 0;        INSERT INTO error_log (log_message, error_code, log_user, log_host, log_timestamp) VALUES (p_error_message, SQLCODE, CURRENT_USER(), CURRENT_HOST(), NOW());    END;     SET p_processed_count = 0;    SET p_error_message = NULL;     START TRANSACTION;    OPEN payment_cursor;    payment_loop: LOOP        FETCH payment_cursor INTO v_payment_id, v_amount;        IF no_more_payments THEN            LEAVE payment_loop;        END IF;         IF v_amount <= 0 THEN            SET v_status = 'INVALID_AMOUNT';            CALL log_audit_event(v_payment_id, 'INVALID_AMOUNT', 'Amount must be positive');        ELSEIF EXISTS (SELECT 1 FROM blacklisted_accounts ba WHERE ba.account_id = (SELECT account_id FROM payments_accounts WHERE payment_id = v_payment_id)) THEN            SET v_status = 'BLACKLISTED_ACCOUNT';            CALL log_audit_event(v_payment_id, 'BLACKLISTED', 'Account is blacklisted');        ELSE            SET v_sql = CONCAT('UPDATE payments SET status = ''PROCESSED'', processed_at = NOW() WHERE payment_id = ?');            PREPARE stmt FROM v_sql;            EXECUTE stmt USING v_payment_id;            DEALLOCATE PREPARE stmt;            SET v_status = 'PROCESSED';            SET p_processed_count = p_processed_count + 1;            CALL log_audit_event(v_payment_id, 'PROCESSED', 'Payment processed successfully');        END IF;    END LOOP;    CLOSE payment_cursor;    COMMIT;    SET p_error_message = CONCAT('Batch processing complete. Processed: ', p_processed_count, ' payments.'); END $$ DELIMITER ;", "create_table_statements": ["CREATE TABLE IF NOT EXISTS payments (payment_id INT PRIMARY KEY AUTO_INCREMENT, amount DECIMAL(10, 2), status VARCHAR(50), processed_at DATETIME);", "CREATE TABLE IF NOT EXISTS payment_log (log_id INT PRIMARY KEY AUTO_INCREMENT, payment_id INT, new_status VARCHAR(50), log_timestamp DATETIME, audit_user VARCHAR(255));", "CREATE TABLE IF NOT EXISTS payments_accounts (payment_id INT PRIMARY KEY, account_id INT);", "CREATE TABLE IF NOT EXISTS blacklisted_accounts (account_id INT PRIMARY KEY);", "DELIMITER $$ CREATE PROCEDURE log_audit_event(IN p_entity_id INT, IN p_event_type VARCHAR(50), IN p_event_details VARCHAR(255)) BEGIN INSERT INTO audit_log (entity_id, event_type, event_details, log_timestamp) VALUES (p_entity_id, p_event_type, p_event_details, NOW()); END $$ DELIMITER ; CREATE TABLE IF NOT EXISTS audit_log (log_id INT PRIMARY KEY AUTO_INCREMENT, entity_id INT, event_type VARCHAR(50), event_details VARCHAR(255), log_timestamp DATETIME);", "CREATE TABLE IF NOT EXISTS error_log (error_log_id INT PRIMARY KEY AUTO_INCREMENT, log_message VARCHAR(1000), error_code INT, log_user VARCHAR(255), log_host VARCHAR(255), log_timestamp DATETIME);"]}
{"case_id": "15", "difficulty_level": "3", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "DELETE c FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date < DATE_SUB(CURDATE(), INTERVAL 2 YEAR) AND c.status = 'Inactive' AND NOT EXISTS (SELECT 1 FROM payments p WHERE p.customer_id = c.customer_id AND p.payment_date > DATE_SUB(CURDATE(), INTERVAL 1 YEAR));", "create_table_statements": ["CREATE TABLE IF NOT EXISTS customers (customer_id INT PRIMARY KEY AUTO_INCREMENT, customer_name VARCHAR(255), registration_date DATE, last_order_date DATE, total_purchase_amount DECIMAL(10,2), status VARCHAR(50));", "CREATE TABLE IF NOT EXISTS orders (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, order_date DATE);", "CREATE TABLE IF NOT EXISTS order_items (order_item_id INT PRIMARY KEY AUTO_INCREMENT, order_id INT, product_id INT, quantity INT, price DECIMAL(10, 2));", "CREATE TABLE IF NOT EXISTS payments (payment_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, payment_date DATE, amount DECIMAL(10,2));"]}
{"case_id": "16", "difficulty_level": "3", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "CREATE TRIGGER before_employee_update BEFORE UPDATE ON employees FOR EACH ROW WHEN (NEW.salary != OLD.salary OR NEW.employee_status != OLD.employee_status) BEGIN IF NEW.salary < OLD.salary THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot decrease employee salary!'; END IF; IF NEW.employee_name IS NULL OR LENGTH(TRIM(NEW.employee_name)) = 0 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Employee name cannot be empty!'; END IF; IF NEW.employee_status = 'Terminated' AND OLD.employee_status != 'Terminated' THEN CALL audit_employee_termination(OLD.employee_id, NOW()); END IF; SET NEW.last_updated_at = NOW(); END;", "create_table_statements": ["CREATE TABLE IF NOT EXISTS employees (employee_id INT PRIMARY KEY AUTO_INCREMENT, employee_name VARCHAR(255), salary DECIMAL(10, 2), employee_status VARCHAR(50), last_updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);", "CREATE PROCEDURE audit_employee_termination(IN p_employee_id INT, IN p_timestamp DATETIME) BEGIN INSERT INTO employee_audit_log (employee_id, action, action_timestamp) VALUES (p_employee_id, 'TERMINATED', p_timestamp); END; CREATE TABLE IF NOT EXISTS employee_audit_log (log_id INT PRIMARY KEY AUTO_INCREMENT, employee_id INT, action VARCHAR(100), action_timestamp DATETIME);"]}
{"case_id": "17", "difficulty_level": "3", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "SELECT department_name, Eng_TotalSalary, DS_TotalSalary, PM_TotalSalary, HR_TotalSalary, Eng_EmployeeCount, DS_EmployeeCount, PM_EmployeeCount, HR_EmployeeCount FROM ( SELECT department_name, job_title, salary, employee_id FROM employees ) PIVOT ( SUM(salary) AS TotalSalary, COUNT(employee_id) AS EmployeeCount FOR job_title IN ('Software Engineer' AS Eng, 'Data Scientist' AS DS, 'Project Manager' AS PM, 'HR Specialist' AS HR) ) WHERE Eng_TotalSalary IS NOT NULL OR DS_TotalSalary IS NOT NULL OR PM_TotalSalary IS NOT NULL OR HR_TotalSalary IS NOT NULL;", "create_table_statements": ["CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), hire_date DATE, department_id NUMBER, department_name VARCHAR2(255), job_title VARCHAR2(100), salary DECIMAL(10,2));"]}
{"case_id": "18", "difficulty_level": "3", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "SELECT department_name, job_title, SUM(salary) AS total_salary, GROUPING_ID(department_name, job_title) AS grouping_level, DECODE(GROUPING(department_name), 1, 'Total by Job', 0, DECODE(GROUPING(job_title), 1, 'Total by Dept', 'Detail')) AS aggregation_type, SYS_CONTEXT('USERENV', 'CLIENT_IP_ADDRESS') AS client_ip, DBMS_RANDOM.VALUE(0, 1) AS random_value FROM employees WHERE status = 'Active' GROUP BY CUBE(department_name, job_title) ORDER BY grouping_level, department_name NULLS FIRST, job_title NULLS LAST;", "create_table_statements": ["CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), department_id NUMBER, department_name VARCHAR2(255), job_title VARCHAR2(100), salary DECIMAL(10,2), status VARCHAR2(50));"]}
{"case_id": "19", "difficulty_level": "3", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "CREATE OR REPLACE TYPE T_EMP_REC AS OBJECT (employee_id NUMBER, employee_name VARCHAR2(255), salary NUMBER); CREATE OR REPLACE TYPE T_EMP_TAB IS TABLE OF T_EMP_REC; CREATE OR REPLACE FUNCTION get_high_salary_employees(p_min_salary IN NUMBER) RETURN T_EMP_TAB PIPELINED IS CURSOR c_employees IS SELECT employee_id, employee_name, salary FROM employees WHERE salary >= p_min_salary; v_emp_rec T_EMP_REC := T_EMP_REC(NULL, NULL, NULL); BEGIN FOR r_emp IN c_employees LOOP v_emp_rec.employee_id := r_emp.employee_id; v_emp_rec.employee_name := r_emp.employee_name; v_emp_rec.salary := r_emp.salary; PIPE ROW (v_emp_rec); END LOOP; RETURN; END;", "create_table_statements": ["CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), salary DECIMAL(10,2));"]}
{"case_id": "20", "difficulty_level": "3", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "CREATE OR REPLACE PACKAGE BODY employee_pkg IS    PRAGMA AUTONOMOUS_TRANSACTION;    FUNCTION get_employee_salary (p_employee_id IN NUMBER) RETURN NUMBER IS        v_salary employees.salary%TYPE;    BEGIN        SELECT salary INTO v_salary FROM employees WHERE employee_id = p_employee_id;        RETURN v_salary;    EXCEPTION        WHEN NO_DATA_FOUND THEN            RETURN NULL;    END get_employee_salary;     PROCEDURE update_employee_status (p_employee_id IN NUMBER, p_status IN VARCHAR2) IS        v_log_message VARCHAR2(200);        v_audit_id NUMBER;    BEGIN        UPDATE employees SET status = p_status, last_updated_at = SYSTIMESTAMP WHERE employee_id = p_employee_id;        IF SQL%NOTFOUND THEN            v_log_message := 'Attempted to update non-existent employee ' || p_employee_id;            INSERT INTO audit_log (log_message, log_timestamp, log_type) VALUES (v_log_message, SYSTIMESTAMP, 'ERROR') RETURNING log_id INTO v_audit_id;            COMMIT;            RAISE_APPLICATION_ERROR(-20001, v_log_message || ' Audit ID: ' || v_audit_id);        END IF;        v_log_message := 'Employee ' || p_employee_id || ' status updated to ' || p_status;        INSERT INTO audit_log (log_message, log_timestamp, log_type) VALUES (v_log_message, SYSTIMESTAMP, 'INFO') RETURNING log_id INTO v_audit_id;        COMMIT;    END update_employee_status;     FUNCTION get_session_info RETURN VARCHAR2 IS        v_sid NUMBER;        v_serial NUMBER;    BEGIN        SELECT SYS_CONTEXT('USERENV', 'SID'), SYS_CONTEXT('USERENV', 'SESSION_SERIAL#') INTO v_sid, v_serial FROM DUAL;        RETURN 'Session ID: ' || v_sid || ', Serial: ' || v_serial;    END get_session_info; END employee_pkg;", "create_table_statements": ["CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), salary DECIMAL(10,2), status VARCHAR2(50), last_updated_at TIMESTAMP WITH LOCAL TIME ZONE);", "CREATE OR REPLACE PACKAGE employee_pkg IS FUNCTION get_employee_salary (p_employee_id IN NUMBER) RETURN NUMBER; PROCEDURE update_employee_status (p_employee_id IN NUMBER, p_status IN VARCHAR2); FUNCTION get_session_info RETURN VARCHAR2; END employee_pkg;", "CREATE TABLE audit_log (log_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, log_message VARCHAR2(4000), log_timestamp TIMESTAMP WITH LOCAL TIME ZONE, log_type VARCHAR2(10));"]}
{"case_id": "21", "difficulty_level": "3", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "SELECT d.doc_id, item_price, item_name, JSON_DEPTH(document_data) AS json_depth FROM documents, JSON_TABLE(document_data, '$.items[*]' COLUMNS ( item_id INT PATH '$.id', item_name VARCHAR(255) PATH '$.name', item_price DECIMAL(10,2) PATH '$.price' )) AS jt WHERE JSON_EXTRACT(document_data, '$.status') = 'Active' AND JSON_CONTAINS(document_data, '\"Laptop\"', '$.products');", "create_table_statements": ["CREATE TABLE IF NOT EXISTS documents (doc_id INT PRIMARY KEY AUTO_INCREMENT, document_data JSON);"]}
{"case_id": "22", "difficulty_level": "3", "source_dialect": "MySQL", "target_dialect": "Oracle", "sql": "DECLARE\n    v_emp_count NUMBER;\nBEGIN\n    SELECT COUNT(*) INTO v_emp_count FROM employees_temp;\n    IF v_emp_count > 0 THEN\n        DBMS_OUTPUT.PUT_LINE('Employees exist: ' || v_emp_count);\n    ELSE\n        DBMS_OUTPUT.PUT_LINE('No employees found.');\n    END IF;\nEND;", "create_table_statements": ["CREATE TABLE `employees_temp` (\n  `employee_id` INT NOT NULL AUTO_INCREMENT,\n  `first_name` VARCHAR(50),\n  `last_name` VARCHAR(50),\n  `department_id` INT,\n  `hire_date` DATE,\n  `salary` DECIMAL(10, 2),\n  PRIMARY KEY (`employee_id`),\n  INDEX `idx_department_id` (`department_id`)\n) ENGINE=InnoDB\n  DEFAULT CHARSET = utf8mb4\n  COLLATE = utf8mb4_unicode_ci;"]}
{"case_id": "23", "difficulty_level": "3", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "MERGE INTO target_products tp USING (SELECT product_id, product_name, price, stock FROM staging_products) sp ON (tp.product_id = sp.product_id) WHEN MATCHED THEN UPDATE SET tp.product_name = sp.product_name, tp.price = sp.price, tp.stock = tp.stock + sp.stock WHERE tp.status = 'Active' DELETE WHERE tp.stock <= 0 WHEN NOT MATCHED THEN INSERT (product_id, product_name, price, stock, status, last_update_date) VALUES (sp.product_id, sp.product_name, sp.price, sp.stock, 'New', SYSDATE) WHERE sp.price > 100;", "create_table_statements": ["CREATE TABLE target_products (product_id NUMBER PRIMARY KEY, product_name VARCHAR2(255), price DECIMAL(10,2), stock NUMBER, status VARCHAR2(50), last_update_date DATE DEFAULT SYSDATE);", "CREATE TABLE staging_products (product_id NUMBER PRIMARY KEY, product_name VARCHAR2(255), price DECIMAL(10,2), stock NUMBER);"]}
{"case_id": "24", "difficulty_level": "3", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "SELECT p.product_id, xt.* FROM products_xml p, XMLTABLE('/product_data/product_details/item[@category=\"Electronics\" and price > 100]' PASSING p.product_xml COLUMNS item_name VARCHAR2(255) PATH 'name', item_quantity NUMBER PATH 'quantity', item_price NUMBER PATH 'price', item_description XMLTYPE PATH 'description') xt WHERE XMLExists('/product_data/product_details/item[quantity > 10]' PASSING p.product_xml) AND XMLTRANSFORM(p.product_xml, '<?xml version=\"1.0\"?><xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"><xsl:template match=\"/\"><root><xsl:value-of select=\"/product_data/product_details/item/name\"/></root></xsl:template></xsl:stylesheet>').getClobVal() LIKE '%Laptop%';", "create_table_statements": ["CREATE TABLE products_xml (product_id NUMBER PRIMARY KEY, product_xml XMLTYPE);"]}
{"case_id": "25", "difficulty_level": "3", "source_dialect": "Oracle", "target_dialect": "PG", "sql": "CREATE OR REPLACE FUNCTION calculate_bonus (p_employee_id IN NUMBER) RETURN NUMBER IS    v_salary employees.salary%TYPE;    v_bonus_rate NUMBER;BEGIN    SELECT salary INTO v_salary FROM employees WHERE employee_id = p_employee_id;     SELECT bonus_rate INTO v_bonus_rate FROM bonus_rules WHERE v_salary BETWEEN min_salary AND max_salary;     RETURN v_salary * v_bonus_rate;EXCEPTION    WHEN NO_DATA_FOUND THEN        RAISE_APPLICATION_ERROR(-20002, 'Employee or bonus rule not found.');    WHEN OTHERS THEN        RAISE_APPLICATION_ERROR(-20003, 'An unexpected error occurred: ' || SQLERRM);END;", "create_table_statements": ["CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, salary DECIMAL(10,2));", "CREATE TABLE bonus_rules (rule_id NUMBER PRIMARY KEY, min_salary DECIMAL(10,2), max_salary DECIMAL(10,2), bonus_rate DECIMAL(5,2));"]}