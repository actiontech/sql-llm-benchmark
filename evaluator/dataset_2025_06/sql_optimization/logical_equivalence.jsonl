{"case_id": "1", "description": "一个包含多层嵌套子查询的SELECT语句，子查询中存在多余的投影列，这些列在外层查询中没有被使用。", "difficulty_level": "1", "create_table_statements": ["CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );"], "sql": "SELECT student_name FROM students WHERE student_id IN ( SELECT student_id FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM students ) AS inner_dt2 ) AS inner_dt1 ) AS outer_dt );", "explain": "{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.40\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"possible_keys\": [\"PRIMARY\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\"]}}, {\"table\": {\"table_name\": \"students\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"ref\": [\"test_db_case_1_1748591779.students.student_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"using_index\": true, \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"2.40\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\"]}}]}}"}
{"case_id": "2", "description": "一个包含多层嵌套子查询的SELECT语句，其中外部的WHERE子句条件可以下推到最内层的子查询中。", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );", "CREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );"], "sql": "SELECT s.teacher_id, dt_teacher.teacher_name FROM students s JOIN (     SELECT teacher_id, teacher_name      FROM (         SELECT teacher_id, teacher_name, department          FROM (             SELECT teacher_id, teacher_name, department              FROM (                  SELECT teacher_id, teacher_name, department                  FROM teachers             ) AS inner_dt1         ) AS inner_dt2     ) AS inner_dt3 ) AS dt_teacher ON s.teacher_id = dt_teacher.teacher_id WHERE dt_teacher.teacher_name LIKE 'Dr. %';", "explain": "{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.40\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"s\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"teacher_id\"], \"attached_condition\": \"(`test_db_case_2_1748591779`.`s`.`teacher_id` is not null)\"}}, {\"table\": {\"table_name\": \"teachers\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"teacher_id\"], \"key_length\": \"4\", \"ref\": [\"test_db_case_2_1748591779.s.teacher_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"2.40\", \"data_read_per_join\": \"208\"}, \"used_columns\": [\"teacher_id\", \"teacher_name\"], \"attached_condition\": \"(`test_db_case_2_1748591779`.`teachers`.`teacher_name` like 'Dr. %')\"}}]}}"}
{"case_id": "4", "description": "一个包含多层嵌套子查询的SELECT语句，子查询中存在多余的投影列，同时内层子查询有ORDER BY和LIMIT，但最外层查询仍可进行投影下推。", "difficulty_level": "1", "create_table_statements": ["CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );"], "sql": "SELECT s.student_id, s.student_name, s.date_of_birth FROM students s JOIN ( SELECT student_id, gender FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM students ORDER BY student_id DESC ) AS inner_dt3 ) AS inner_dt2 ORDER BY student_id DESC LIMIT 1 ) AS inner_dt1 ) dt ON s.student_id = dt.student_id WHERE dt.gender = 'MALE'", "explain": "{\"query_block\": {\"select_id\": 1, \"message\": \"no matching row in const table\", \"table\": {\"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"ordering_operation\": {\"using_filesort\": false, \"table\": {\"table_name\": \"students\", \"access_type\": \"index\", \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"gender\", \"date_of_birth\"]}}}}}}}"}
{"case_id": "5", "description": "一个包含关联子查询的SELECT语句，子查询可以被折叠。", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );", "CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );"], "sql": "SELECT student_id FROM students s WHERE s.student_id IN ( SELECT e.student_id FROM enrollments e WHERE e.student_id = s.student_id )  AND s.gender = 'Female'  AND s.date_of_birth <= '2000-01-01'  AND s.student_name != 'TestName' LIMIT 10;", "explain": "{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"4.80\"}, \"duplicates_removal\": {\"using_temporary_table\": true, \"nested_loop\": [{\"table\": {\"table_name\": \"e\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"student_id\"]}}, {\"table\": {\"table_name\": \"s\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"ref\": [\"test_db_case_5_1748591779.e.student_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"4.80\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\", \"gender\", \"date_of_birth\"], \"attached_condition\": \"((`test_db_case_5_1748591779`.`s`.`gender` = 'Female') and (`test_db_case_5_1748591779`.`s`.`date_of_birth` <= '2000-01-01') and (`test_db_case_5_1748591779`.`s`.`student_name` <> 'TestName'))\"}}]}}"}
{"case_id": "6", "description": "一个简单的SELECT语句，其中WHERE子句对字段使用了函数，导致隐式转换。", "difficulty_level": "1", "create_table_statements": ["CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );"], "sql": "SELECT student_id, CONCAT(\"id_\", student_id) as student_id2 FROM enrollments WHERE CONCAT(\"id_\", student_id) >= \"id_1000\" LIMIT 10;", "explain": "{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"enrollments\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"student_id\"], \"attached_condition\": \"(concat('id_',`test_db_case_6_1748591779`.`enrollments`.`student_id`) >= 'id_1000')\"}}}"}
{"case_id": "7", "description": "一个包含COUNT标量子查询的SELECT语句，可以将其改写为IN子查询。", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );", "CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );"], "sql": "SELECT * FROM students WHERE NOT ( SELECT count(*) FROM enrollments WHERE students.student_id = enrollments.student_id AND enrollment_id > 1000 ) > 0;", "explain": "{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\"], \"attached_condition\": \"((/* select#2 */ select count(0) from `test_db_case_7_1748591779`.`enrollments` where ((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))) <= 0)\", \"attached_subqueries\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.41\"}, \"table\": {\"table_name\": \"enrollments\", \"access_type\": \"range\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"enrollment_id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.21\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.41\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"enrollment_id\", \"student_id\"], \"attached_condition\": \"((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))\"}}}]}}"}
{"case_id": "8", "description": "一个包含HAVING子句的SELECT语句，其中HAVING条件不依赖聚合函数，可以下推到WHERE子句。", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );"], "sql": "SELECT student_id, MAX(enrollment_date) latest_date FROM enrollments WHERE enrollment_date > \"1993-11-26\" OR enrollment_date < \"1991-11-26\" GROUP BY student_id HAVING student_id = 1999", "explain": "{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.20\"}, \"grouping_operation\": {\"using_temporary_table\": true, \"using_filesort\": true, \"cost_info\": {\"sort_cost\": \"1.00\"}, \"table\": {\"table_name\": \"enrollments\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"enrollment_id\", \"student_id\", \"enrollment_date\"], \"attached_condition\": \"((`test_db_case_8_1748591779`.`enrollments`.`enrollment_date` > '1993-11-26') or (`test_db_case_8_1748591779`.`enrollments`.`enrollment_date` < '1991-11-26'))\"}}}}"}
{"case_id": "9", "description": "一个包含多层嵌套子查询的SELECT语句，最内层的GROUP BY子句是不必要的，可以被消除。", "difficulty_level": "1", "create_table_statements": ["CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), namespace VARCHAR(50) );"], "sql": "SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT * FROM students GROUP BY student_id ORDER BY COUNT(namespace) ) AS t1 ) AS t2 ) AS t3;", "explain": "{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"10.50\"}, \"table\": {\"table_name\": \"t1\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 2, \"rows_produced_per_join\": 2, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"10.10\", \"eval_cost\": \"0.40\", \"prefix_cost\": \"10.50\", \"data_read_per_join\": \"336\"}, \"used_columns\": [\"student_id\", \"student_name\", \"namespace\"], \"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 4, \"cost_info\": {\"query_cost\": \"1.20\"}, \"ordering_operation\": {\"using_temporary_table\": true, \"using_filesort\": true, \"grouping_operation\": {\"using_filesort\": false, \"table\": {\"table_name\": \"students\", \"access_type\": \"index\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"160\"}, \"used_columns\": [\"student_id\", \"student_name\", \"namespace\"]}}}}}}}}"}
{"case_id": "10", "description": "一个包含非关联子查询的SELECT语句，可以将子查询转换为关联子查询。", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );", "CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT );"], "sql": "SELECT * FROM students WHERE student_id IN ( SELECT student_id FROM enrollments AS inner_dt );", "explain": "{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"4.80\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"<subquery2>\", \"access_type\": \"ALL\", \"materialized_from_subquery\": {\"using_temporary_table\": true, \"query_block\": {\"table\": {\"table_name\": \"inner_dt\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"16\"}, \"used_columns\": [\"student_id\"]}}}}}, {\"table\": {\"table_name\": \"students\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"ref\": [\"<subquery2>.student_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"4.80\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\"]}}]}}"}
{"case_id": "11", "description": "一个包含模拟ROW_NUMBER()窗口函数和过滤条件的SELECT语句，可以推导为TopN算子。", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), date_of_birth DATE );"], "sql": "SELECT T1.student_name, T1.date_of_birth FROM students AS T1 WHERE (SELECT COUNT(*) FROM students AS T2 WHERE T2.student_name <= T1.student_name) <= 3 AND (SELECT COUNT(*) FROM students AS T3 WHERE T3.date_of_birth <= T1.date_of_birth) <= 2 ORDER BY T1.student_name, T1.date_of_birth;", "explain": "{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.20\"}, \"ordering_operation\": {\"using_filesort\": true, \"cost_info\": {\"sort_cost\": \"1.00\"}, \"table\": {\"table_name\": \"T1\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\", \"date_of_birth\"], \"attached_condition\": \"(((/* select#2 */ select count(0) from `test_db_case_11_1748591779`.`students` `T2` where (`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)) <= 3) and ((/* select#3 */ select count(0) from `test_db_case_11_1748591779`.`students` `T3` where (`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)) <= 2))\", \"attached_subqueries\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"T3\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"date_of_birth\"], \"attached_condition\": \"(`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)\"}}}, {\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"T2\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_name\"], \"attached_condition\": \"(`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)\"}}}]}}}}"}
{"case_id": "12", "description": "一个包含UNION的SELECT语句，其中WHERE子句包含LIKE前缀匹配，可以改写为范围查询。", "difficulty_level": "1", "create_table_statements": ["CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), major VARCHAR(100) );"], "sql": "SELECT * FROM students WHERE student_name LIKE 'John%' UNION SELECT * FROM students WHERE student_name LIKE 'Jane%';", "explain": "{\"query_block\": {\"union_result\": {\"using_temporary_table\": true, \"table_name\": \"<union1,2>\", \"access_type\": \"ALL\", \"query_specifications\": [{\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"208\"}, \"used_columns\": [\"student_id\", \"student_name\", \"major\"], \"attached_condition\": \"(`test_db_case_12_1748591779`.`students`.`student_name` like 'John%')\"}}}, {\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"208\"}, \"used_columns\": [\"student_id\", \"student_name\", \"major\"], \"attached_condition\": \"(`test_db_case_12_1748591779`.`students`.`student_name` like 'Jane%')\"}}}]}}}"}
{"case_id": "13", "description": "一个包含UNION的SELECT语句，外部查询包含LIMIT子句，可以下推到UNION的各个分支中。", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE users ( id INT PRIMARY KEY, name VARCHAR(100), reg_date DATE );", "CREATE TABLE articles ( id INT PRIMARY KEY, title VARCHAR(255), publish_time DATETIME );"], "sql": "SELECT * FROM (  (SELECT name FROM users ORDER BY reg_date DESC)  UNION  (SELECT title FROM articles ORDER BY publish_time DESC) ) AS mixed  ORDER BY name LIMIT 5;", "explain": "{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"15.00\"}, \"ordering_operation\": {\"using_filesort\": true, \"cost_info\": {\"sort_cost\": \"4.00\"}, \"table\": {\"table_name\": \"mixed\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 4, \"rows_produced_per_join\": 4, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"10.20\", \"eval_cost\": \"0.80\", \"prefix_cost\": \"11.00\", \"data_read_per_join\": \"1K\"}, \"used_columns\": [\"name\"], \"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"union_result\": {\"using_temporary_table\": true, \"table_name\": \"<union2,3>\", \"access_type\": \"ALL\", \"query_specifications\": [{\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"users\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"name\", \"reg_date\"]}}}, {\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"articles\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"272\"}, \"used_columns\": [\"title\", \"publish_time\"]}}}]}}}}}}"}
{"case_id": "14", "description": "一个包含IN子查询的SELECT语句，但子查询的结果行数不保证小于等于1，因此不能转换为标量子查询。", "difficulty_level": "N/A", "create_table_statements": ["CREATE TABLE students ( id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );", "CREATE TABLE A ( id INT PRIMARY KEY, value VARCHAR(100) );", "CREATE TABLE B ( id INT PRIMARY KEY, value VARCHAR(100) );"], "sql": "SELECT * FROM students WHERE id IN ( SELECT id FROM (SELECT id FROM A LIMIT 1) AS subA UNION ALL SELECT id FROM (SELECT id FROM B LIMIT 1) AS subB );", "explain": "{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"id\", \"student_name\"], \"attached_condition\": \"<in_optimizer>(`test_db_case_14_1748591779`.`students`.`id`,<exists>(/* select#2 */ select 1 from (/* select#3 */ select `test_db_case_14_1748591779`.`A`.`id` AS `id` from `test_db_case_14_1748591779`.`A` limit 1) `subA` where (<cache>(`test_db_case_14_1748591779`.`students`.`id`) = NULL) union all /* select#4 */ select 1 from (/* select#5 */ select `test_db_case_14_1748591779`.`B`.`id` AS `id` from `test_db_case_14_1748591779`.`B` limit 1) `subB` where (<cache>(`test_db_case_14_1748591779`.`students`.`id`) = NULL)))\", \"attached_subqueries\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"union_result\": {\"using_temporary_table\": false, \"query_specifications\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 2, \"message\": \"no matching row in const table\", \"table\": {\"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"A\", \"access_type\": \"index\", \"key\": \"PRIMARY\", \"used_key_parts\": [\"id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"using_index\": true, \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"id\"]}}}}}}, {\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 4, \"message\": \"no matching row in const table\", \"table\": {\"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 5, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"B\", \"access_type\": \"index\", \"key\": \"PRIMARY\", \"used_key_parts\": [\"id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"using_index\": true, \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"id\"]}}}}}}]}}}}"}