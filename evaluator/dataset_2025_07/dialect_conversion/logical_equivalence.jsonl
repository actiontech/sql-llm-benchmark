{"case_id": "1", "difficulty_level": "1", "source_dialect": "ORACLE", "target_dialect": "Postgresql-9.2", "sql": "SELECT e.ename, d.dname, e.sal FROM emp e, dept d WHERE e.deptno = d.deptno(+) AND e.sal > 2000;"}
{"case_id": "2", "difficulty_level": "3", "source_dialect": "SQLServer", "target_dialect": "GaussDB-v2.0_3.x", "sql": "CREATE proc [dbo].[p_job_create_bond_info_all] as begin truncate table tmp_bond_info_all_20010; insert into tmp_bond_info_all_20010(f_val,def_id,id) select field_value,FIELD_DEFINITION_ID,t2.ID from T_OBJECT_FIELD_DATA t1 with(nolock),T_PJ_Bond_Info t2 with(nolock) where t1.OBJECT_NO = 20010 and t1.FIELD_VALUE is not null and t1.parent_id=t2.APPLY_ID ; truncate table tmp_bond_info_all_20020; insert into tmp_bond_info_all_20020(f_val,def_id,id) select field_value,FIELD_DEFINITION_ID,t2.id as bondId from T_OBJECT_FIELD_DATA t1 with(nolock),T_PJ_Bond_Info t2 with(nolock) where t1.OBJECT_NO = 20020 and t1.FIELD_VALUE is not null and t1.PARENT_ID=t2.TEMP_BONDID; truncate table t_pj_bond_info_all; insert into t_pj_bond_info_all(id,temp_bondid,apply_id) select t1.ID,t1.TEMP_BONDID,t1.APPLY_ID from T_PJ_Bond_Info t1 with(nolock) where 1=1; declare c_names cursor for select name from syscolumns where id=object_id('t_pj_bond_info_all') and name like 'def%'; declare @colname varchar(100),@sql varchar(2000) open c_names while 1=1 begin fetch next from c_names into @colname if @@FETCH_STATUS<>0 break; select @sql = 'update a set a.'+@colname+'=b.f_val from t_pj_bond_info_all a,tmp_bond_info_all_20020 b where a.id=b.id and b.def_id=' + replace(@colname,'def_',''); exec( @sql ); select @sql = 'update a set a.'+@colname+'=b.f_val from t_pj_bond_info_all a,tmp_bond_info_all_20010 b where a.id=b.id and a.'+@colname+' is null and b.def_id=' + replace(@colname,'def_',''); exec( @sql ); end close c_names deallocate c_names end"}
{"case_id": "3", "difficulty_level": "1", "source_dialect": "ORACLE", "target_dialect": "OceanBase的Oracle模式-4.2.5", "sql": "UPDATE products SET price = price * 0.9 WHERE category_id = 101 AND NVL(stock_quantity, 0) > 0;"}
{"case_id": "4", "difficulty_level": "1", "source_dialect": "ORACLE", "target_dialect": "Postgresql-9.2", "sql": "SELECT user_id, last_login_time FROM user_accounts WHERE TRUNC(last_login_time) = TO_DATE('2025-06-25', 'YYYY-MM-DD');"}
{"case_id": "5", "difficulty_level": "1", "source_dialect": "SQLServer", "target_dialect": "GaussDB-v2.0_3.x", "sql": "SELECT ProductID, Name, ISNULL(Color, 'N/A') AS ProductColor FROM Production.Product;"}
{"case_id": "6", "difficulty_level": "2", "source_dialect": "ORACLE", "target_dialect": "Postgresql-9.2", "sql": "SELECT ename, sal, DENSE_RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) as rnk FROM emp;"}
{"case_id": "7", "difficulty_level": "1", "source_dialect": "SQLServer", "target_dialect": "GaussDB-v2.0_3.x", "sql": "WITH Sales_CTE AS (SELECT SalesPersonID, SUM(TotalDue) AS TotalSales, YEAR(OrderDate) AS SalesYear FROM Sales.SalesOrderHeader GROUP BY SalesPersonID, YEAR(OrderDate)) SELECT * FROM Sales_CTE WHERE TotalSales > 100000;"}
{"case_id": "8", "difficulty_level": "2", "source_dialect": "ORACLE", "target_dialect": "OceanBase的Oracle模式-4.2.5", "sql": "SELECT employee_id, last_name, salary FROM (SELECT employee_id, last_name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) as rn FROM employees) WHERE rn <= 5;"}
{"case_id": "9", "difficulty_level": "1", "source_dialect": "ORACLE", "target_dialect": "Postgresql-9.2", "sql": "CREATE OR REPLACE PROCEDURE bulk_delete_by_ids(p_id_list IN VARCHAR2) IS v_sql VARCHAR2(1000); BEGIN v_sql := 'DELETE FROM logs WHERE log_id IN (' || p_id_list || ')'; EXECUTE IMMEDIATE v_sql; COMMIT; END;"}
{"case_id": "10", "difficulty_level": "1", "source_dialect": "SQLServer", "target_dialect": "GaussDB-v2.0_3.x", "sql": "SELECT p.Name AS ProductName, v.Name AS VendorName FROM Purchasing.ProductVendor pv JOIN Production.Product p ON pv.ProductID = p.BusinessEntityID JOIN Purchasing.Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE pv.AverageLeadTime > 10;"}
{"case_id": "11", "difficulty_level": "2", "source_dialect": "ORACLE", "target_dialect": "OceanBase的Oracle模式-4.2.5", "sql": "DELETE FROM job_history WHERE (employee_id, start_date) IN (SELECT employee_id, MIN(start_date) FROM job_history GROUP BY employee_id HAVING COUNT(*) > 1);"}
{"case_id": "12", "difficulty_level": "2", "source_dialect": "SQLServer", "target_dialect": "GaussDB-v2.0_3.x", "sql": "UPDATE Production.Product SET ListPrice = ListPrice * 1.10 WHERE ProductSubcategoryID IN (SELECT ProductSubcategoryID FROM Production.ProductSubcategory WHERE Name LIKE 'Mountain%');"}
{"case_id": "13", "difficulty_level": "2", "source_dialect": "ORACLE", "target_dialect": "Postgresql-9.2", "sql": "SELECT LEVEL, LPAD(' ', 2 * (LEVEL - 1)) || ename as name, empno, mgr FROM emp START WITH mgr IS NULL CONNECT BY PRIOR empno = mgr;"}
{"case_id": "14", "difficulty_level": "2", "source_dialect": "ORACLE", "target_dialect": "Postgresql-9.2","sql": "CREATE OR REPLACE PROCEDURE archive_old_records(p_archive_date IN DATE) IS v_deleted_rows NUMBER; BEGIN DELETE FROM active_data WHERE record_date < p_archive_date RETURNING record_id, record_data INTO (SELECT record_id, record_data FROM DUAL); -- Simplified for example, real logic would bulk insert. INSERT INTO archive_table (record_id, record_data) SELECT record_id, record_data FROM active_data WHERE record_date < p_archive_date; GET DIAGNOSTICS v_deleted_rows = ROW_COUNT; INSERT INTO audit_log (log_message) VALUES (v_deleted_rows || ' rows archived.'); COMMIT; END;"}
{"case_id": "15", "difficulty_level": "3", "source_dialect": "SQLServer", "target_dialect": "GaussDB-v2.0_3.x", "sql": "SELECT [1] AS AvgCost_DTM_1, [2] AS AvgCost_DTM_2, [3] AS AvgCost_DTM_3, [4] AS AvgCost_DTM_4 FROM (SELECT DaysToManufacture, StandardCost FROM Production.Product WHERE DaysToManufacture > 0) AS src PIVOT (AVG(StandardCost) FOR DaysToManufacture IN ([1], [2], [3], [4])) AS PivotTable;"}
{"case_id": "16", "difficulty_level": "3", "source_dialect": "ORACLE", "target_dialect": "Postgresql-9.2", "sql": "SELECT dep_name, (SELECT MAX(salary) FROM emps e WHERE e.dep_id = d.dep_id) AS max_salary FROM departments d WHERE 3 <= (SELECT COUNT(*) FROM emps e2 WHERE e2.dep_id = d.dep_id);"}
{"case_id": "17", "difficulty_level": "1", "source_dialect": "SQLServer", "target_dialect": "GaussDB-v2.0_3.x", "sql": "SELECT c.CustomerID, c.PersonID, p.FirstName, p.LastName FROM Sales.Customer c CROSS APPLY (SELECT * FROM Person.Person p WHERE p.BusinessEntityID = c.PersonID AND p.EmailPromotion = 1) AS p;"}
{"case_id": "18", "difficulty_level": "3", "source_dialect": "ORACLE", "target_dialect": "Postgresql-9.2", "sql": "CREATE OR REPLACE PROCEDURE GETEMPLOYEESTATS(p_dept_id IN NUMBER, p_result OUT CLOB) IS TYPE stats_rec IS RECORD (total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER, active_projects NUMBER); TYPE p_result_rec IS RECORD (employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2)); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); BEGIN SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; SELECT COUNT(*) INTO v_stats.active_projects FROM PROJECTS WHERE department_id = p_dept_id AND status = 'ACTIVE'; v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; p_result := '{  \"department\": \"' || v_dept_name || '\",  \"total_employees\": ' || v_stats.total_emp || ',  \"salary_stats\": {    \"average\": ' || v_stats.avg_salary || ',    \"max\": ' || v_stats.max_salary || '  },  \"active_projects\": ' || v_stats.active_projects || ',  \"top_earners\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || '    {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || '  ]}'; CLOSE v_cursor; EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\"error\": \"Department not found\"}'; WHEN OTHERS THEN p_result := '{\"error\": \"' || SQLERRM || '\"}'; END;"}