{"case_id": "1", "difficulty_level": "1", "create_table_statements": ["CREATE TABLE students (student_id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), enrollment_date DATE);"], "insert_statements": ["INSERT INTO students (student_id, name, age, city, enrollment_date) VALUES (1, 'Alice', 11, 'New York', '2023-09-01'), (2, 'Bob', 9, 'Los Angeles', '2023-09-01'), (3, 'Charlie', 12, 'New York', '2023-10-15'), (4, 'David', 10, 'Chicago', '2023-11-01'), (5, 'Eve', 11, 'Los Angeles', '2023-10-01');"], "sql": "SELECT name, student_id, city FROM students WHERE age > 10 AND city = 'New York';", "expected": {"result_type": "select", "columns": ["name", "student_id", "city"], "rows": [["Alice", 1, "New York"], ["Charlie", 3, "New York"]]}}
{"case_id": "2", "difficulty_level": "1", "create_table_statements": ["CREATE TABLE tasks (task_id INT PRIMARY KEY, task_name VARCHAR(100), completed BOOLEAN, due_date DATE);"], "insert_statements": ["INSERT INTO tasks (task_id, task_name, completed, due_date) VALUES (1, 'Task A', TRUE, '2024-06-01'), (2, 'Task B', FALSE, '2024-06-10'), (3, 'Task C', TRUE, '2024-05-20'), (4, 'Task D', FALSE, '2024-06-05');"], "sql": "SELECT task_name, due_date FROM tasks WHERE completed = FALSE AND due_date < '2024-06-07';", "expected": {"result_type": "select", "columns": ["task_name", "due_date"], "rows": [["Task D", "2024-06-05"]]}}
{"case_id": "3", "difficulty_level": "1", "create_table_statements": ["CREATE TABLE inventory (product_id INT PRIMARY KEY, stock INT, last_restock_date DATE);"], "insert_statements": ["INSERT INTO inventory (product_id, stock, last_restock_date) VALUES (101, 50, '2024-01-01'), (102, 0, '2024-02-15'), (103, 120, '2024-03-01');"], "sql": "INSERT INTO inventory (product_id, stock, last_restock_date) VALUES (104, 70, '2024-06-03'), (105, 10, '2024-06-01');", "expected": {"result_type": "table_state", "table_name": "inventory", "columns": ["product_id", "stock", "last_restock_date"], "rows": [[101, 50, "2024-01-01"], [102, 0, "2024-02-15"], [103, 120, "2024-03-01"], [104, 70, "2024-06-03"], [105, 10, "2024-06-01"]]}}
{"case_id": "4", "difficulty_level": "1", "create_table_statements": ["CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100), registration_status VARCHAR(20));"], "insert_statements": ["INSERT INTO customers (customer_id, name, email, registration_status) VALUES (1, 'Cust A', 'a@example.com', 'Active'), (2, 'Cust B', NULL, 'Pending'), (3, 'Cust C', 'c@example.com', 'Active');"], "sql": "UPDATE customers SET email = 'b@example.com', registration_status = 'Completed' WHERE customer_id = 2;", "expected": {"result_type": "table_state", "table_name": "customers", "columns": ["customer_id", "name", "email", "registration_status"], "rows": [[1, "Cust A", "a@example.com", "Active"], [2, "Cust B", "b@example.com", "Completed"], [3, "Cust C", "c@example.com", "Active"]]}}
{"case_id": "5", "difficulty_level": "1", "create_table_statements": ["CREATE TABLE log_entries (log_id INT PRIMARY KEY, message VARCHAR(255), log_level VARCHAR(20));"], "insert_statements": ["INSERT INTO log_entries (log_id, message, log_level) VALUES (1, 'Error: Something failed.', 'ERROR'), (2, 'Info: Process started.', 'INFO'), (3, 'Warning: Disk usage high.', 'WARNING'), (4, 'Error: Database connection lost.', 'ERROR');"], "sql": "DELETE FROM log_entries WHERE log_level = 'WARNING';", "expected": {"result_type": "table_state", "table_name": "log_entries", "columns": ["log_id", "message", "log_level"], "rows": [[1, "Error: Something failed.", "ERROR"], [2, "Info: Process started.", "INFO"], [4, "Error: Database connection lost.", "ERROR"]]}}
{"case_id": "6", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, amount DECIMAL(10, 2), order_status VARCHAR(20));"], "insert_statements": ["INSERT INTO orders (order_id, customer_id, amount, order_status) VALUES (1, 10, 150.00, 'Completed'), (2, 20, 50.50, 'Pending'), (3, 10, 200.00, 'Completed'), (4, 30, 300.00, 'Pending'), (5, 10, 75.00, 'Pending');"], "sql": "SELECT COUNT(*) AS total_pending_orders FROM orders WHERE amount > 100 AND order_status = 'Pending';", "expected": {"result_type": "select", "columns": ["total_pending_orders"], "rows": [[1]]}}
{"case_id": "7", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE sales (product_id INT, sale_amount DECIMAL(10, 2), sale_date DATE);"], "insert_statements": ["INSERT INTO sales (product_id, sale_amount, sale_date) VALUES (1, 10.00, '2024-01-01'), (2, 20.00, '2024-01-01'), (1, 15.00, '2024-01-05'), (3, 30.00, '2024-01-05'), (2, 25.00, '2024-01-10');"], "sql": "SELECT product_id, SUM(sale_amount) AS total_sales, COUNT(*) AS number_of_sales FROM sales GROUP BY product_id ORDER BY total_sales DESC;", "expected": {"result_type": "select", "columns": ["product_id", "total_sales", "number_of_sales"], "rows": [[2, 45.0, 2], [3, 30.0, 1], [1, 25.0, 2]]}}
{"case_id": "8", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE employees (department VARCHAR(50), salary DECIMAL(10, 2));"], "insert_statements": ["INSERT INTO employees (department, salary) VALUES ('Sales', 50000.00), ('IT', 70000.00), ('Sales', 55000.00), ('IT', 75000.00);"], "sql": "SELECT department, AVG(salary) AS avg_salary FROM employees GROUP BY department HAVING COUNT(*) > 1;", "expected": {"result_type": "select", "columns": ["department", "avg_salary"], "rows": [["IT", 72500.0], ["Sales", 52500.0]]}}
{"case_id": "9", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE products (product_name VARCHAR(50), price DECIMAL(6, 2), creation_date DATE);"], "insert_statements": ["INSERT INTO products (product_name, price, creation_date) VALUES ('A', 10.00, '2023-01-01'), ('B', 30.00, '2023-02-01'), ('C', 20.00, '2023-01-15'), ('D', 40.00, '2023-03-01'), ('E', 25.00, '2023-02-10');"], "sql": "SELECT product_name, price FROM products ORDER BY price DESC, creation_date ASC LIMIT 3;", "expected": {"result_type": "select", "columns": ["product_name", "price"], "rows": [["D", 40.00], ["B", 30.00], ["E", 25.00]]}}
{"case_id": "10", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE orders_date (order_id INT, order_date DATE, customer_segment VARCHAR(20));"], "insert_statements": ["INSERT INTO orders_date (order_id, order_date, customer_segment) VALUES (1, '2023-01-15', 'Premium'), (2, '2023-01-20', 'Standard'), (3, '2024-02-10', 'Premium'), (4, '2023-03-01', 'Standard'), (5, '2024-02-10', 'Standard');"], "sql": "SELECT YEAR(order_date) AS order_year, customer_segment, COUNT(*) AS total_orders FROM orders_date GROUP BY YEAR(order_date), customer_segment ORDER BY order_year, customer_segment;", "expected": {"result_type": "select", "columns": ["order_year", "customer_segment", "total_orders"], "rows": [[2023, "Premium", 1], [2023, "Standard", 2], [2024, "Premium", 1], [2024, "Standard", 1]]}}
{"case_id": "11", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE products_stock (category VARCHAR(50), stock INT, last_updated DATE);"], "insert_statements": ["INSERT INTO products_stock (category, stock, last_updated) VALUES ('Electronics', 10, '2024-01-01'), ('Books', 20, '2024-01-10'), ('Electronics', 15, '2024-02-01'), ('Books', 25, '2024-02-15');"], "sql": "INSERT INTO products_stock (category, stock, last_updated) VALUES ('Electronics', 5, CURRENT_DATE), ('Clothes', 30, CURRENT_DATE);", "expected": {"result_type": "table_state", "table_name": "products_stock", "columns": ["category", "stock", "last_updated"], "rows": [["Electronics", 10, "2024-01-01"], ["Books", 20, "2024-01-10"], ["Electronics", 15, "2024-02-01"], ["Books", 25, "2024-02-15"], ["Electronics", 5, "2025-06-03"], ["Clothes", 30, "2025-06-03"]]}}
{"case_id": "12", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE orders_items (order_id INT, item_id INT, item_price DECIMAL(5, 2));", "CREATE TABLE order_quantities (order_id INT PRIMARY KEY, quantity INT, discount_percent DECIMAL(3, 2));"], "insert_statements": ["INSERT INTO orders_items (order_id, item_id, item_price) VALUES (1, 101, 10.00), (2, 102, 15.00), (3, 103, 20.00);", "INSERT INTO order_quantities (order_id, quantity, discount_percent) VALUES (1, 2, 0.10), (2, 3, 0.05);"], "sql": "INSERT INTO orders_items (order_id, item_id, item_price) SELECT oq.order_id, 104, oq.quantity * 10 * (1 - oq.discount_percent) FROM order_quantities oq WHERE oq.order_id = 2;", "expected": {"result_type": "table_state", "table_name": "orders_items", "columns": ["order_id", "item_id", "item_price"], "rows": [[1, 101, 10.0], [2, 102, 15.0], [3, 103, 20.0], [2, 104, 28.5]]}}
{"case_id": "13", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE text_values_table (id INT PRIMARY KEY, text VARCHAR(50), status VARCHAR(20));"], "insert_statements": ["INSERT INTO text_values_table (id, text, status) VALUES (1, 'apple', 'Active'), (2, 'Banana', 'Pending'), (3, 'ORANGE', 'Active');"], "sql": "UPDATE text_values_table SET text = LCASE(text), status = 'Processed' WHERE id = 2;", "expected": {"result_type": "table_state", "table_name": "text_values_table", "columns": ["id", "text", "status"], "rows": [[1, "apple", "Active"], [2, "banana", "Processed"], [3, "ORANGE", "Active"]]}}
{"case_id": "14", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE zip_codes (city VARCHAR(50), zip VARCHAR(10));"], "insert_statements": ["INSERT INTO zip_codes (city, zip) VALUES ('New York', '10001'), ('Los Angeles', '90001');"], "sql": "UPDATE zip_codes SET zip = SUBSTRING(zip, 1, 3) || 'xxx' WHERE city = 'New York';", "expected": {"result_type": "table_state", "table_name": "zip_codes", "columns": ["city", "zip"], "rows": [["Los Angeles", "90001"], ["New York", "1"]]}}
{"case_id": "15", "difficulty_level": "2", "create_table_statements": ["CREATE TABLE items_price (item_id INT PRIMARY KEY, price DECIMAL(5, 2), quantity INT);"], "insert_statements": ["INSERT INTO items_price (item_id, price, quantity) VALUES (1, 10.51, 5), (2, 20.49, 10), (3, 5.00, 20), (4, 9.99, 15);"], "sql": "DELETE FROM items_price WHERE price < FLOOR(10.51) AND quantity < 15;", "expected": {"result_type": "table_state", "table_name": "items_price", "columns": ["item_id", "price", "quantity"], "rows": [[1, 10.51, 5], [2, 20.49, 10], [3, 5.0, 20], [4, 9.99, 15]]}}
{"case_id": "16", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));", "CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50));"], "insert_statements": ["INSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES (1, 101, '2024-01-01', 150.00), (2, 102, '2024-01-02', 50.50), (3, 101, '2024-01-03', 200.00);", "INSERT INTO customers (customer_id, customer_name) VALUES (101, 'Alice'), (102, 'Bob');"], "sql": "SELECT o.order_id, c.customer_name FROM orders o INNER JOIN customers c ON o.customer_id = c.customer_id WHERE o.total_amount > (SELECT AVG(total_amount) FROM orders);", "expected": {"result_type": "select", "columns": ["order_id", "customer_name"], "rows": [[1, "Alice"], [3, "Alice"]]}}
{"case_id": "17", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50));", "CREATE TABLE inventory (product_id INT PRIMARY KEY, stock INT);"], "insert_statements": ["INSERT INTO products (product_id, product_name, category) VALUES (1, 'Laptop', 'Electronics'), (2, 'Mouse', 'Electronics'), (3, 'Keyboard', 'Electronics');", "INSERT INTO inventory (product_id, stock) VALUES (1, 10), (3, 5);"], "sql": "SELECT p.product_name, i.stock FROM products p LEFT JOIN inventory i ON p.product_id = i.product_id WHERE p.category = 'Electronics' ORDER BY p.product_id;", "expected": {"result_type": "select", "columns": ["product_name", "stock"], "rows": [["Laptop", 10], ["Mouse", null], ["Keyboard", 5]]}}
{"case_id": "18", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE employees (employee_id INT PRIMARY KEY, name VARCHAR(50), dept_id INT);", "CREATE TABLE departments (dept_id INT PRIMARY KEY, dept_name VARCHAR(50));"], "insert_statements": ["INSERT INTO employees (employee_id, name, dept_id) VALUES (1, 'Alice', 10), (2, 'Bob', 20), (3, 'Charlie', 10);", "INSERT INTO departments (dept_id, dept_name) VALUES (10, 'Sales'), (20, 'IT'), (30, 'HR');"], "sql": "SELECT d.dept_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.dept_id = e.dept_id GROUP BY d.dept_name ORDER BY d.dept_name;", "expected": {"result_type": "select", "columns": ["dept_name", "employee_count"], "rows": [["HR", 0], ["IT", 1], ["Sales", 2]]}}
{"case_id": "19", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_status VARCHAR(20));", "CREATE TABLE vip_customers (customer_id INT PRIMARY KEY, tier VARCHAR(10));"], "insert_statements": ["INSERT INTO orders (order_id, customer_id, order_status) VALUES (1, 101, 'Completed'), (2, 105, 'Pending'), (3, 101, 'Completed'), (4, 102, 'Pending');", "INSERT INTO vip_customers (customer_id, tier) VALUES (101, 'Gold'), (103, 'Silver');"], "sql": "SELECT order_id, order_status FROM orders WHERE customer_id IN (SELECT customer_id FROM vip_customers WHERE tier = 'Gold') AND order_status = 'Completed';", "expected": {"result_type": "select", "columns": ["order_id", "order_status"], "rows": [[1, "Completed"], [3, "Completed"]]}}
{"case_id": "20", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), category VARCHAR(50));", "CREATE TABLE reviews (review_id INT PRIMARY KEY, product_id INT, rating INT, review_date DATE);"], "insert_statements": ["INSERT INTO products (product_id, product_name, category) VALUES (1, 'Laptop', 'Electronics'), (2, 'Mouse', 'Electronics'), (3, 'Book', 'Literature');", "INSERT INTO reviews (review_id, product_id, rating, review_date) VALUES (10, 1, 5, '2024-01-01'), (11, 1, 4, '2024-01-05'), (12, 2, 3, '2024-01-10'), (13, 3, 5, '2024-01-15');"], "sql": "SELECT p.product_name, p.category FROM products p WHERE EXISTS (SELECT 1 FROM reviews r WHERE r.product_id = p.product_id AND r.rating >= 4 AND r.review_date > '2023-12-31');", "expected": {"result_type": "select", "columns": ["product_name", "category"], "rows": [["Laptop", "Electronics"], ["Book", "Literature"]]}}
{"case_id": "21", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE employees (employee_id INT PRIMARY KEY, name VARCHAR(50), salary DECIMAL(10, 2), dept_id INT, hire_date DATE);", "CREATE TABLE departments (dept_id INT PRIMARY KEY, dept_name VARCHAR(50));"], "insert_statements": ["INSERT INTO employees (employee_id, name, salary, dept_id, hire_date) VALUES (1, 'Alice', 50000.00, 10, '2022-01-01'), (2, 'Bob', 70000.00, 20, '2021-06-01'), (3, 'Charlie', 55000.00, 10, '2022-03-01'), (4, 'David', 72000.00, 20, '2021-09-01'), (5, 'Eve', 60000.00, 30, '2023-01-01');", "INSERT INTO departments (dept_id, dept_name) VALUES (10, 'Sales'), (20, 'IT'), (30, 'HR');"], "sql": "SELECT e.name, d.dept_name, e.salary FROM employees e JOIN departments d ON e.dept_id = d.dept_id WHERE e.salary > 60000 AND d.dept_name = 'IT' AND e.hire_date < '2022-01-01';", "expected": {"result_type": "select", "columns": ["name", "dept_name", "salary"], "rows": [["Bob", "IT", 70000.00], ["David", "IT", 72000.00]]}}
{"case_id": "22", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(5, 2));", "CREATE TABLE sales_items (sale_id INT PRIMARY KEY, product_id INT, quantity INT);"], "insert_statements": ["INSERT INTO products (product_id, product_name, price) VALUES (1, 'A', 10.00), (2, 'B', 20.00);", "INSERT INTO sales_items (sale_id, product_id, quantity) VALUES (101, 1, 5), (102, 1, 10), (103, 2, 3);"], "sql": "SELECT p.product_name, SUM(si.quantity) AS total_sold FROM products p JOIN sales_items si ON p.product_id = si.product_id GROUP BY p.product_name HAVING SUM(si.quantity) > 5;", "expected": {"result_type": "select", "columns": ["product_name", "total_sold"], "rows": [["A", 15]]}}
{"case_id": "23", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT);", "CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50));", "CREATE TABLE regions (region_id INT PRIMARY KEY, region_name VARCHAR(50));", "CREATE TABLE customer_regions (customer_id INT, region_id INT);"], "insert_statements": ["INSERT INTO orders (order_id, customer_id) VALUES (1, 10), (2, 20);", "INSERT INTO customers (customer_id, customer_name) VALUES (10, 'Alice'), (20, 'Bob');", "INSERT INTO regions (region_id, region_name) VALUES (100, 'North'), (200, 'South');", "INSERT INTO customer_regions (customer_id, region_id) VALUES (10, 100), (20, 200);"], "sql": "SELECT o.order_id, c.customer_name, r.region_name FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN customer_regions cr ON c.customer_id = cr.customer_id JOIN regions r ON cr.region_id = r.region_id;", "expected": {"result_type": "select", "columns": ["order_id", "customer_name", "region_name"], "rows": [[1, "Alice", "North"], [2, "Bob", "South"]]}}
{"case_id": "24", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE employees (employee_id INT PRIMARY KEY, department VARCHAR(50), hire_date DATE);", "CREATE TABLE salaries (employee_id INT PRIMARY KEY, salary DECIMAL(10, 2));"], "insert_statements": ["INSERT INTO employees (employee_id, department, hire_date) VALUES (1, 'Sales', '2020-01-01'), (2, 'IT', '2021-03-01'), (3, 'Sales', '2022-05-01');", "INSERT INTO salaries (employee_id, salary) VALUES (1, 50000.00), (2, 70000.00);"], "sql": "INSERT INTO salaries (employee_id, salary) SELECT employee_id, 60000.00 FROM employees WHERE department = 'Sales' AND hire_date > '2021-01-01' AND employee_id NOT IN (SELECT employee_id FROM salaries);", "expected": {"result_type": "table_state", "table_name": "salaries", "columns": ["employee_id", "salary"], "rows": [[1, 50000.0], [2, 70000.0], [3, 60000.0]]}}
{"case_id": "25", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE products (product_id INT PRIMARY KEY, price DECIMAL(10, 2), last_update DATE);", "CREATE TABLE price_updates (product_id INT PRIMARY KEY, new_price DECIMAL(10, 2), update_date DATE);"], "insert_statements": ["INSERT INTO products (product_id, price, last_update) VALUES (1, 10.00, '2024-01-01'), (2, 20.00, '2024-02-01'), (3, 30.00, '2024-03-01');", "INSERT INTO price_updates (product_id, new_price, update_date) VALUES (1, 12.00, '2024-05-01'), (3, 35.00, '2024-05-10');"], "sql": "UPDATE products SET price = (SELECT new_price FROM price_updates WHERE price_updates.product_id = products.product_id), last_update = (SELECT update_date FROM price_updates WHERE price_updates.product_id = products.product_id) WHERE product_id IN (SELECT product_id FROM price_updates WHERE update_date > '2024-04-30');", "expected": {"result_type": "table_state", "table_name": "products", "columns": ["product_id", "price", "last_update"], "rows": [[1, 12.0, "2024-05-01"], [2, 20.0, "2024-02-01"], [3, 35.0, "2024-05-10"]]}}
{"case_id": "26", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), status VARCHAR(10), last_login DATE);", "CREATE TABLE status_updates_source (username VARCHAR(50), new_status VARCHAR(10), update_timestamp DATETIME);"], "insert_statements": ["INSERT INTO users (user_id, username, status, last_login) VALUES (1, 'alpha', 'Active', '2024-05-01'), (2, 'beta', 'Inactive', '2024-04-15'), (3, 'gamma', 'Active', '2024-05-10');", "INSERT INTO status_updates_source (username, new_status, update_timestamp) VALUES ('beta', 'Pending', '2024-05-20 10:00:00'), ('gamma', 'Blocked', '2024-05-25 11:30:00');"], "sql": "UPDATE users SET status = (SELECT new_status FROM status_updates_source WHERE status_updates_source.username = users.username), last_login = DATE(CURRENT_TIMESTAMP) WHERE username IN (SELECT username FROM status_updates_source WHERE update_timestamp >= '2024-05-20');", "expected": {"result_type": "table_state", "table_name": "users", "columns": ["user_id", "username", "status", "last_login"], "rows": [[1, "alpha", "Active", "2024-05-01"], [2, "beta", "Pending", "2025-06-03"], [3, "gamma", "Blocked", "2025-06-03"]]}}
{"case_id": "27", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE employees (employee_id INT PRIMARY KEY, name VARCHAR(50), salary DECIMAL(10, 2), department VARCHAR(50));", "CREATE TABLE high_performers (employee_id INT PRIMARY KEY, bonus DECIMAL(10, 2), evaluation_date DATE);"], "insert_statements": ["INSERT INTO employees (employee_id, name, salary, department) VALUES (1, 'Alice', 50000.00, 'Sales'), (2, 'Bob', 70000.00, 'IT'), (3, 'Charlie', 55000.00, 'Sales'), (4, 'David', 60000.00, 'Marketing');", "INSERT INTO high_performers (employee_id, bonus, evaluation_date) VALUES (2, 5000.00, '2024-04-01'), (4, 3000.00, '2024-04-01');"], "sql": "UPDATE employees SET salary = salary + (SELECT bonus FROM high_performers WHERE high_performers.employee_id = employees.employee_id AND high_performers.evaluation_date = '2024-04-01') WHERE employee_id IN (SELECT employee_id FROM high_performers);", "expected": {"result_type": "table_state", "table_name": "employees", "columns": ["employee_id", "name", "salary", "department"], "rows": [[1, "Alice", 50000.0, "Sales"], [2, "Bob", 75000.0, "IT"], [3, "Charlie", 55000.0, "Sales"], [4, "David", 63000.0, "Marketing"]]}}
{"case_id": "28", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50), registration_date DATE);", "CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE);"], "insert_statements": ["INSERT INTO customers (customer_id, customer_name, registration_date) VALUES (1, 'Alice', '2023-01-01'), (2, 'Bob', '2023-02-01'), (3, 'Charlie', '2023-03-01');", "INSERT INTO orders (order_id, customer_id, order_date) VALUES (101, 1, '2024-01-01'), (102, 3, '2024-02-01');"], "sql": "DELETE FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders WHERE order_date >= '2024-01-01');", "expected": {"result_type": "table_state", "table_name": "customers", "columns": ["customer_id", "customer_name", "registration_date"], "rows": [[1, "Alice", "2023-01-01"], [3, "Charlie", "2023-03-01"]]}}
{"case_id": "29", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(50), region VARCHAR(50), last_purchase_date DATE);", "CREATE TABLE regions_to_delete (region_name VARCHAR(50), reason VARCHAR(100));"], "insert_statements": ["INSERT INTO customers (customer_id, name, region, last_purchase_date) VALUES (1, 'Alice', 'North', '2024-01-01'), (2, 'Bob', 'South', '2024-02-01'), (3, 'Charlie', 'North', '2024-03-01'), (4, 'David', 'East', '2024-04-01');", "INSERT INTO regions_to_delete (region_name, reason) VALUES ('North', 'Low sales volume'), ('West', 'No activity');"], "sql": "DELETE FROM customers WHERE region IN (SELECT region_name FROM regions_to_delete WHERE reason = 'Low sales volume') AND last_purchase_date < '2024-03-15';", "expected": {"result_type": "table_state", "table_name": "customers", "columns": ["customer_id", "name", "region", "last_purchase_date"], "rows": [[2, "Bob", "South", "2024-02-01"], [4, "David", "East", "2024-04-01"]]}}
{"case_id": "30", "difficulty_level": "3", "create_table_statements": ["CREATE TABLE old_logs (log_id INT PRIMARY KEY);", "CREATE TABLE logs (log_id INT PRIMARY KEY, status VARCHAR(10));"], "insert_statements": ["INSERT INTO old_logs (log_id) VALUES (1), (2), (3);", "INSERT INTO logs (log_id, status) VALUES (2, 'Processed'), (4, 'Pending');"], "sql": "DELETE FROM old_logs WHERE log_id NOT IN (SELECT log_id FROM logs);", "expected": {"result_type": "table_state", "table_name": "old_logs", "columns": ["log_id"], "rows": [[2]]}}