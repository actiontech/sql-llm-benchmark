
=================================================
SQL Capability Evaluation Process Report
=================================================
Run ID: 20250612_171916_439
Run Dimensions: dialect_conversion
Run Indicator: syntax_error_detection
Evaluation Timestamp: 2025-06-12T17:50:25.957575
Target LLM: Pro/deepseek-ai/DeepSeek-V3
Judge LLMs: Pro/deepseek-ai/DeepSeek-V3, o4-mini, gemini-2.0-flash
-------------------------------------------------

[2025-06-12 17:30:18.172119] Run Indicator: dialect_conversion, Parameters size: 27801B
[2025-06-12 17:30:18.196117] 
--- Capability: dialect_conversion Indicator syntax_error_detection.jsonl Evaluating Type: hybrid  ---
[2025-06-12 17:30:18.196117] 
--- Case: 1 ---
[2025-06-12 17:30:18.196117] [1] Case Run 1/1
[2025-06-12 17:30:18.196117] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
SELECT name, id FROM students WHERE age > 10;

Translated SQL (Oracle):

[2025-06-12 17:30:18.197146] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT name, id FROM students WHERE age > 10;\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:30:21.174275] [Model Answer]: SELECT name, id FROM students WHERE age > 10;
[2025-06-12 17:30:21.175280] [1] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:30:21.175280] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT name, id FROM students WHERE age > 10;

[2025-06-12 17:30:21.175280] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT name, id FROM students WHERE age > 10;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:30:23.692888] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:30:23.692888] [1] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:30:23.693893] [1] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:30:23.693893] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT name, id FROM students WHERE age > 10;

[2025-06-12 17:30:23.693893] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT name, id FROM students WHERE age > 10;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:30:28.221272] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:30:28.221272] [1] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:30:28.221272] [1] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:30:28.230466] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT name, id FROM students WHERE age > 10;

[2025-06-12 17:30:28.230466] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT name, id FROM students WHERE age > 10;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:30:30.581290] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:30:30.581290] [1] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:30:30.582299] [1] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:30:30.582299] [1] hybrid Eval Case Final Result: True
[2025-06-12 17:30:30.582299] 
--- Case: 2 ---
[2025-06-12 17:30:30.582299] [2] Case Run 1/1
[2025-06-12 17:30:30.582299] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
INSERT INTO products (product_name, price) VALUES ('Laptop', 1200);

Translated SQL (Oracle):

[2025-06-12 17:30:30.583307] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nINSERT INTO products (product_name, price) VALUES ('Laptop', 1200);\n\nTranslated SQL (Oracle):\n"}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:30:33.220512] [Model Answer]: INSERT INTO products (product_name, price) VALUES ('Laptop', 1200);
[2025-06-12 17:30:33.220512] [2] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:30:33.220512] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
INSERT INTO products (product_name, price) VALUES ('Laptop', 1200);

[2025-06-12 17:30:33.221993] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nINSERT INTO products (product_name, price) VALUES (\'Laptop\', 1200);\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:30:36.078522] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:30:36.079525] [2] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:30:36.079525] [2] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:30:36.082633] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
INSERT INTO products (product_name, price) VALUES ('Laptop', 1200);

[2025-06-12 17:30:36.082633] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nINSERT INTO products (product_name, price) VALUES (\'Laptop\', 1200);\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:30:39.869415] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:30:39.869415] [2] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:30:39.869415] [2] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:30:39.869415] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
INSERT INTO products (product_name, price) VALUES ('Laptop', 1200);

[2025-06-12 17:30:39.870420] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nINSERT INTO products (product_name, price) VALUES (\'Laptop\', 1200);\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:30:41.553191] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:30:41.553191] [2] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:30:41.553191] [2] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:30:41.554333] [2] hybrid Eval Case Final Result: True
[2025-06-12 17:30:41.554333] 
--- Case: 3 ---
[2025-06-12 17:30:41.554333] [3] Case Run 1/1
[2025-06-12 17:30:41.554333] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
UPDATE employees SET salary = 60000 WHERE employee_id = 101;

Translated SQL (Oracle):

[2025-06-12 17:30:41.554333] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nUPDATE employees SET salary = 60000 WHERE employee_id = 101;\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:30:43.937441] [Model Answer]: UPDATE employees SET salary = 60000 WHERE employee_id = 101;
[2025-06-12 17:30:43.937441] [3] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:30:43.937441] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
UPDATE employees SET salary = 60000 WHERE employee_id = 101;

[2025-06-12 17:30:43.938776] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nUPDATE employees SET salary = 60000 WHERE employee_id = 101;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:30:47.201547] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:30:47.201547] [3] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:30:47.201547] [3] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:30:47.201547] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
UPDATE employees SET salary = 60000 WHERE employee_id = 101;

[2025-06-12 17:30:47.201547] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nUPDATE employees SET salary = 60000 WHERE employee_id = 101;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:30:49.917620] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:30:49.918624] [3] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:30:49.918624] [3] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:30:49.918624] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
UPDATE employees SET salary = 60000 WHERE employee_id = 101;

[2025-06-12 17:30:49.918624] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nUPDATE employees SET salary = 60000 WHERE employee_id = 101;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:30:51.611883] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:30:51.612388] [3] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:30:51.612388] [3] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:30:51.612388] [3] hybrid Eval Case Final Result: True
[2025-06-12 17:30:51.612388] 
--- Case: 4 ---
[2025-06-12 17:30:51.612388] [4] Case Run 1/1
[2025-06-12 17:30:51.613388] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
DELETE FROM orders WHERE order_date < '2023-01-01';

Translated SQL (Oracle):

[2025-06-12 17:30:51.613388] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nDELETE FROM orders WHERE order_date < '2023-01-01';\n\nTranslated SQL (Oracle):\n"}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:30:55.154279] [Model Answer]: DELETE FROM orders WHERE order_date < TO_DATE('2023-01-01', 'YYYY-MM-DD');
[2025-06-12 17:30:55.154279] [4] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:30:55.154279] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
DELETE FROM orders WHERE order_date < TO_DATE('2023-01-01', 'YYYY-MM-DD');

[2025-06-12 17:30:55.154279] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nDELETE FROM orders WHERE order_date < TO_DATE(\'2023-01-01\', \'YYYY-MM-DD\');\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:30:58.471443] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:30:58.472446] [4] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:30:58.472446] [4] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:30:58.472446] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
DELETE FROM orders WHERE order_date < TO_DATE('2023-01-01', 'YYYY-MM-DD');

[2025-06-12 17:30:58.473449] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nDELETE FROM orders WHERE order_date < TO_DATE(\'2023-01-01\', \'YYYY-MM-DD\');\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:31:03.132647] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:31:03.132647] [4] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:31:03.132647] [4] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:31:03.132647] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
DELETE FROM orders WHERE order_date < TO_DATE('2023-01-01', 'YYYY-MM-DD');

[2025-06-12 17:31:03.134153] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nDELETE FROM orders WHERE order_date < TO_DATE(\'2023-01-01\', \'YYYY-MM-DD\');\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:31:05.589412] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:31:05.589412] [4] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:31:05.589412] [4] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:31:05.589412] [4] hybrid Eval Case Final Result: True
[2025-06-12 17:31:05.590924] 
--- Case: 5 ---
[2025-06-12 17:31:05.590924] [5] Case Run 1/1
[2025-06-12 17:31:05.590924] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
CREATE TABLE users (user_id INT PRIMARY KEY AUTO_INCREMENT, username VARCHAR(50) NOT NULL);

Translated SQL (Oracle):

[2025-06-12 17:31:05.590924] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE TABLE users (user_id INT PRIMARY KEY AUTO_INCREMENT, username VARCHAR(50) NOT NULL);\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:31:09.479542] [Model Answer]: CREATE TABLE users (user_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR2(50) NOT NULL);
[2025-06-12 17:31:09.479542] [5] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:31:09.479542] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE TABLE users (user_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR2(50) NOT NULL);

[2025-06-12 17:31:09.480543] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE TABLE users (user_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR2(50) NOT NULL);\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:31:12.775118] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:31:12.775118] [5] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:31:12.775118] [5] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:31:12.775118] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE TABLE users (user_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR2(50) NOT NULL);

[2025-06-12 17:31:12.776350] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE TABLE users (user_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR2(50) NOT NULL);\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:31:18.134487] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:31:18.134487] [5] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:31:18.135198] [5] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:31:18.135198] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE TABLE users (user_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR2(50) NOT NULL);

[2025-06-12 17:31:18.135198] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE TABLE users (user_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR2(50) NOT NULL);\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:31:20.127341] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:31:20.127341] [5] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:31:20.127341] [5] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:31:20.128835] [5] hybrid Eval Case Final Result: True
[2025-06-12 17:31:20.128835] 
--- Case: 6 ---
[2025-06-12 17:31:20.129327] [6] Case Run 1/1
[2025-06-12 17:31:20.129327] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
ALTER TABLE products ADD COLUMN description TEXT;

Translated SQL (Oracle):

[2025-06-12 17:31:20.129327] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nALTER TABLE products ADD COLUMN description TEXT;\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:31:22.694347] [Model Answer]: ALTER TABLE products ADD (description CLOB);
[2025-06-12 17:31:22.694347] [6] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:31:22.694347] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
ALTER TABLE products ADD (description CLOB);

[2025-06-12 17:31:22.695457] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nALTER TABLE products ADD (description CLOB);\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:31:25.725878] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:31:25.725878] [6] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:31:25.725878] [6] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:31:25.725878] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
ALTER TABLE products ADD (description CLOB);

[2025-06-12 17:31:25.729691] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nALTER TABLE products ADD (description CLOB);\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:31:30.148062] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:31:30.148062] [6] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:31:30.148062] [6] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:31:30.148062] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
ALTER TABLE products ADD (description CLOB);

[2025-06-12 17:31:30.149069] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nALTER TABLE products ADD (description CLOB);\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:31:32.061014] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:31:32.062028] [6] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:31:32.062028] [6] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:31:32.062028] [6] hybrid Eval Case Final Result: True
[2025-06-12 17:31:32.062028] 
--- Case: 7 ---
[2025-06-12 17:31:32.062028] [7] Case Run 1/1
[2025-06-12 17:31:32.063088] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
DROP TABLE old_data;

Translated SQL (Oracle):

[2025-06-12 17:31:32.063088] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nDROP TABLE old_data;\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:31:34.337352] [Model Answer]: DROP TABLE old_data;
[2025-06-12 17:31:34.338370] [7] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:31:34.338370] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
DROP TABLE old_data;

[2025-06-12 17:31:34.338370] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nDROP TABLE old_data;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:31:37.690378] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:31:37.690378] [7] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:31:37.691463] [7] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:31:37.691463] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
DROP TABLE old_data;

[2025-06-12 17:31:37.691463] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nDROP TABLE old_data;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:31:43.688252] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:31:43.689255] [7] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:31:43.689255] [7] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:31:43.689255] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
DROP TABLE old_data;

[2025-06-12 17:31:43.689255] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nDROP TABLE old_data;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:31:45.716307] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:31:45.716307] [7] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:31:45.716307] [7] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:31:45.716307] [7] hybrid Eval Case Final Result: True
[2025-06-12 17:31:45.717552] 
--- Case: 8 ---
[2025-06-12 17:31:45.717552] [8] Case Run 1/1
[2025-06-12 17:31:45.717552] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
SELECT max(weight) FROM fruits;

Translated SQL (Oracle):

[2025-06-12 17:31:45.717552] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT max(weight) FROM fruits;\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:31:50.205302] [Model Answer]: SELECT max(weight) FROM fruits;
[2025-06-12 17:31:50.206322] [8] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:31:50.206322] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT max(weight) FROM fruits;

[2025-06-12 17:31:50.206322] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT max(weight) FROM fruits;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:31:52.962215] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:31:52.963217] [8] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:31:52.963217] [8] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:31:52.963217] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT max(weight) FROM fruits;

[2025-06-12 17:31:52.964275] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT max(weight) FROM fruits;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:32:01.026560] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:32:01.026560] [8] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:32:01.027563] [8] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:32:01.027563] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT max(weight) FROM fruits;

[2025-06-12 17:32:01.027563] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT max(weight) FROM fruits;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:32:03.728443] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:32:03.728443] [8] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:32:03.728443] [8] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:32:03.728443] [8] hybrid Eval Case Final Result: True
[2025-06-12 17:32:03.729447] 
--- Case: 9 ---
[2025-06-12 17:32:03.729447] [9] Case Run 1/1
[2025-06-12 17:32:03.729447] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
SELECT product_id, product_name, price FROM products ORDER BY price DESC LIMIT 10 OFFSET 5;

Translated SQL (Oracle):

[2025-06-12 17:32:03.730457] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT product_id, product_name, price FROM products ORDER BY price DESC LIMIT 10 OFFSET 5;\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:32:07.226801] [Model Answer]: SELECT product_id, product_name, price FROM products ORDER BY price DESC OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;
[2025-06-12 17:32:07.226801] [9] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:32:07.226801] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT product_id, product_name, price FROM products ORDER BY price DESC OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;

[2025-06-12 17:32:07.237225] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT product_id, product_name, price FROM products ORDER BY price DESC OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:32:10.175583] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:32:10.176834] [9] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:32:10.176834] [9] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:32:10.176834] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT product_id, product_name, price FROM products ORDER BY price DESC OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;

[2025-06-12 17:32:10.178078] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT product_id, product_name, price FROM products ORDER BY price DESC OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:32:15.755774] [Model Answer]: {"answer": "yes"}
[2025-06-12 17:32:15.756787] [9] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:32:15.756787] [9] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:32:15.756787] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT product_id, product_name, price FROM products ORDER BY price DESC OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;

[2025-06-12 17:32:15.757794] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT product_id, product_name, price FROM products ORDER BY price DESC OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:32:18.593681] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:32:18.593681] [9] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:32:18.593681] [9] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:32:18.593681] [9] hybrid Eval Case Final Result: True
[2025-06-12 17:32:18.593681] 
--- Case: 10 ---
[2025-06-12 17:32:18.593681] [10] Case Run 1/1
[2025-06-12 17:32:18.594685] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
SELECT COUNT(DISTINCT city) FROM customers;

Translated SQL (Oracle):

[2025-06-12 17:32:18.594685] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT COUNT(DISTINCT city) FROM customers;\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:32:21.610983] [Model Answer]: SELECT COUNT(DISTINCT city) FROM customers;
[2025-06-12 17:32:21.610983] [10] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:32:21.610983] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT COUNT(DISTINCT city) FROM customers;

[2025-06-12 17:32:21.612295] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT COUNT(DISTINCT city) FROM customers;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:32:24.189983] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:32:24.190488] [10] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:32:24.190488] [10] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:32:24.190810] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT COUNT(DISTINCT city) FROM customers;

[2025-06-12 17:32:24.190810] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT COUNT(DISTINCT city) FROM customers;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:32:27.899697] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:32:27.901149] [10] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:32:27.901149] [10] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:32:27.901149] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT COUNT(DISTINCT city) FROM customers;

[2025-06-12 17:32:27.902150] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT COUNT(DISTINCT city) FROM customers;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:32:30.000659] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:32:30.001672] [10] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:32:30.002194] [10] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:32:30.002194] [10] hybrid Eval Case Final Result: True
[2025-06-12 17:32:30.002194] 
--- Case: 11 ---
[2025-06-12 17:32:30.003201] [11] Case Run 1/1
[2025-06-12 17:32:30.003201] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
SELECT SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 100;

Translated SQL (Oracle):

[2025-06-12 17:32:30.003201] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 100;\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:32:34.745059] [Model Answer]: SELECT SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 100;
[2025-06-12 17:32:34.746571] [11] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:32:34.746571] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 100;

[2025-06-12 17:32:34.747153] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 100;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:32:38.012516] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:32:38.012516] [11] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:32:38.012516] [11] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:32:38.012516] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 100;

[2025-06-12 17:32:38.013519] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 100;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:32:45.396156] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:32:45.396156] [11] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:32:45.396156] [11] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:32:45.397299] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 100;

[2025-06-12 17:32:45.397299] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 100;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:32:48.493763] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:32:48.495053] [11] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:32:48.495053] [11] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:32:48.495053] [11] hybrid Eval Case Final Result: True
[2025-06-12 17:32:48.495053] 
--- Case: 12 ---
[2025-06-12 17:32:48.496149] [12] Case Run 1/1
[2025-06-12 17:32:48.496149] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
CREATE TABLE audit_log (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    action_type VARCHAR(50),
    log_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);

Translated SQL (Oracle):

[2025-06-12 17:32:48.496149] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE TABLE audit_log (\n    log_id INT AUTO_INCREMENT PRIMARY KEY,\n    action_type VARCHAR(50),\n    log_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:32:52.833018] [Model Answer]: CREATE TABLE audit_log (
    log_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    action_type VARCHAR2(50),
    log_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
[2025-06-12 17:32:52.834022] [12] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:32:52.834022] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE TABLE audit_log (
    log_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    action_type VARCHAR2(50),
    log_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

[2025-06-12 17:32:52.834022] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE TABLE audit_log (\n    log_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n    action_type VARCHAR2(50),\n    log_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:32:56.073421] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:32:56.073421] [12] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:32:56.073421] [12] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:32:56.074538] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE TABLE audit_log (
    log_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    action_type VARCHAR2(50),
    log_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

[2025-06-12 17:32:56.074538] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE TABLE audit_log (\n    log_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n    action_type VARCHAR2(50),\n    log_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:33:08.147854] [Model Answer]: {"answer": "yes"}
[2025-06-12 17:33:08.147854] [12] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:33:08.147854] [12] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:33:08.147854] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE TABLE audit_log (
    log_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    action_type VARCHAR2(50),
    log_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

[2025-06-12 17:33:08.148855] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE TABLE audit_log (\n    log_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n    action_type VARCHAR2(50),\n    log_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:33:10.797865] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:33:10.798873] [12] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:33:10.798873] [12] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:33:10.799874] [12] hybrid Eval Case Final Result: True
[2025-06-12 17:33:10.799874] 
--- Case: 13 ---
[2025-06-12 17:33:10.799874] [13] Case Run 1/1
[2025-06-12 17:33:10.799874] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
ALTER TABLE articles MODIFY COLUMN content LONGTEXT;

Translated SQL (Oracle):

[2025-06-12 17:33:10.799874] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nALTER TABLE articles MODIFY COLUMN content LONGTEXT;\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:33:14.135710] [Model Answer]: ALTER TABLE articles MODIFY content CLOB;
[2025-06-12 17:33:14.135710] [13] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:33:14.136713] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
ALTER TABLE articles MODIFY content CLOB;

[2025-06-12 17:33:14.136713] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nALTER TABLE articles MODIFY content CLOB;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:33:18.399867] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:33:18.400869] [13] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:33:18.400869] [13] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:33:18.400869] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
ALTER TABLE articles MODIFY content CLOB;

[2025-06-12 17:33:18.400869] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nALTER TABLE articles MODIFY content CLOB;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:33:38.499456] [Model Answer]: {"answer":"no"}
[2025-06-12 17:33:38.499456] [13] Hybrid Eval Case Judge o4-mini Results: False
[2025-06-12 17:33:38.499456] [13] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:33:38.499456] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
ALTER TABLE articles MODIFY content CLOB;

[2025-06-12 17:33:38.500565] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nALTER TABLE articles MODIFY content CLOB;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:33:40.686511] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:33:40.687516] [13] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:33:40.687516] [13] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:33:40.687516] [13] hybrid Eval Case Final Result: True
[2025-06-12 17:33:40.687516] 
--- Case: 14 ---
[2025-06-12 17:33:40.687516] [14] Case Run 1/1
[2025-06-12 17:33:40.688523] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
SELECT IFNULL(commission, 0) FROM sales_reps WHERE rep_id = 1;

Translated SQL (Oracle):

[2025-06-12 17:33:40.688523] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT IFNULL(commission, 0) FROM sales_reps WHERE rep_id = 1;\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:33:44.337089] [Model Answer]: SELECT NVL(commission, 0) FROM sales_reps WHERE rep_id = 1;
[2025-06-12 17:33:44.338094] [14] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:33:44.338094] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT NVL(commission, 0) FROM sales_reps WHERE rep_id = 1;

[2025-06-12 17:33:44.338094] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT NVL(commission, 0) FROM sales_reps WHERE rep_id = 1;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:33:47.564282] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:33:47.565283] [14] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:33:47.565283] [14] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:33:47.565283] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT NVL(commission, 0) FROM sales_reps WHERE rep_id = 1;

[2025-06-12 17:33:47.566299] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT NVL(commission, 0) FROM sales_reps WHERE rep_id = 1;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:33:51.752604] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:33:51.753606] [14] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:33:51.753606] [14] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:33:51.753606] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT NVL(commission, 0) FROM sales_reps WHERE rep_id = 1;

[2025-06-12 17:33:51.753606] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT NVL(commission, 0) FROM sales_reps WHERE rep_id = 1;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:33:54.130667] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:33:54.131671] [14] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:33:54.131671] [14] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:33:54.131671] [14] hybrid Eval Case Final Result: True
[2025-06-12 17:33:54.131671] 
--- Case: 15 ---
[2025-06-12 17:33:54.131671] [15] Case Run 1/1
[2025-06-12 17:33:54.132840] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
SELECT DATE_FORMAT(order_date, '%Y-%m-%d') FROM orders WHERE order_id = 1001;

Translated SQL (Oracle):

[2025-06-12 17:33:54.132840] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT DATE_FORMAT(order_date, '%Y-%m-%d') FROM orders WHERE order_id = 1001;\n\nTranslated SQL (Oracle):\n"}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:33:57.677226] [Model Answer]: SELECT TO_CHAR(order_date, 'YYYY-MM-DD') FROM orders WHERE order_id = 1001;
[2025-06-12 17:33:57.677226] [15] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:33:57.678230] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT TO_CHAR(order_date, 'YYYY-MM-DD') FROM orders WHERE order_id = 1001;

[2025-06-12 17:33:57.678230] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT TO_CHAR(order_date, \'YYYY-MM-DD\') FROM orders WHERE order_id = 1001;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:34:00.939630] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:34:00.939630] [15] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:34:00.940632] [15] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:34:00.940632] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT TO_CHAR(order_date, 'YYYY-MM-DD') FROM orders WHERE order_id = 1001;

[2025-06-12 17:34:00.940632] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT TO_CHAR(order_date, \'YYYY-MM-DD\') FROM orders WHERE order_id = 1001;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:34:04.789036] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:34:04.789036] [15] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:34:04.789036] [15] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:34:04.789036] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT TO_CHAR(order_date, 'YYYY-MM-DD') FROM orders WHERE order_id = 1001;

[2025-06-12 17:34:04.789036] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT TO_CHAR(order_date, \'YYYY-MM-DD\') FROM orders WHERE order_id = 1001;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:34:07.362793] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:34:07.362793] [15] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:34:07.362793] [15] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:34:07.362793] [15] hybrid Eval Case Final Result: True
[2025-06-12 17:34:07.362793] 
--- Case: 16 ---
[2025-06-12 17:34:07.364259] [16] Case Run 1/1
[2025-06-12 17:34:07.364259] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
SELECT CONCAT(first_name, ' ', last_name) FROM employees WHERE employee_id = 10;

Translated SQL (Oracle):

[2025-06-12 17:34:07.364259] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT CONCAT(first_name, ' ', last_name) FROM employees WHERE employee_id = 10;\n\nTranslated SQL (Oracle):\n"}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:34:10.040637] [Model Answer]: SELECT first_name || ' ' || last_name FROM employees WHERE employee_id = 10;
[2025-06-12 17:34:10.040637] [16] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:34:10.041923] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT first_name || ' ' || last_name FROM employees WHERE employee_id = 10;

[2025-06-12 17:34:10.041923] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT first_name || \' \' || last_name FROM employees WHERE employee_id = 10;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:34:13.055272] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:34:13.056578] [16] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:34:13.056578] [16] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:34:13.056578] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT first_name || ' ' || last_name FROM employees WHERE employee_id = 10;

[2025-06-12 17:34:13.056578] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT first_name || \' \' || last_name FROM employees WHERE employee_id = 10;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:34:17.841084] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:34:17.841084] [16] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:34:17.841084] [16] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:34:17.841084] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT first_name || ' ' || last_name FROM employees WHERE employee_id = 10;

[2025-06-12 17:34:17.842116] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT first_name || \' \' || last_name FROM employees WHERE employee_id = 10;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:34:19.845831] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:34:19.845831] [16] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:34:19.847059] [16] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:34:19.847059] [16] hybrid Eval Case Final Result: True
[2025-06-12 17:34:19.847059] 
--- Case: 17 ---
[2025-06-12 17:34:19.847059] [17] Case Run 1/1
[2025-06-12 17:34:19.847059] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
DELIMITER $$
CREATE PROCEDURE GetCustomerOrderCount(IN customer_id_param INT, OUT order_count INT)
BEGIN
    SELECT COUNT(*) INTO order_count FROM orders WHERE customer_id = customer_id_param;
END $$
DELIMITER ;

Translated SQL (Oracle):

[2025-06-12 17:34:19.847059] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$\nCREATE PROCEDURE GetCustomerOrderCount(IN customer_id_param INT, OUT order_count INT)\nBEGIN\n    SELECT COUNT(*) INTO order_count FROM orders WHERE customer_id = customer_id_param;\nEND $$\nDELIMITER ;\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:34:24.437172] [Model Answer]: CREATE OR REPLACE PROCEDURE GetCustomerOrderCount(customer_id_param IN NUMBER, order_count OUT NUMBER) AS
BEGIN
    SELECT COUNT(*) INTO order_count FROM orders WHERE customer_id = customer_id_param;
END;
[2025-06-12 17:34:24.438326] [17] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:34:24.438326] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE GetCustomerOrderCount(customer_id_param IN NUMBER, order_count OUT NUMBER) AS
BEGIN
    SELECT COUNT(*) INTO order_count FROM orders WHERE customer_id = customer_id_param;
END;

[2025-06-12 17:34:24.438326] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE GetCustomerOrderCount(customer_id_param IN NUMBER, order_count OUT NUMBER) AS\nBEGIN\n    SELECT COUNT(*) INTO order_count FROM orders WHERE customer_id = customer_id_param;\nEND;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:34:27.001412] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:34:27.001412] [17] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:34:27.001412] [17] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:34:27.001412] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE GetCustomerOrderCount(customer_id_param IN NUMBER, order_count OUT NUMBER) AS
BEGIN
    SELECT COUNT(*) INTO order_count FROM orders WHERE customer_id = customer_id_param;
END;

[2025-06-12 17:34:27.002555] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE GetCustomerOrderCount(customer_id_param IN NUMBER, order_count OUT NUMBER) AS\nBEGIN\n    SELECT COUNT(*) INTO order_count FROM orders WHERE customer_id = customer_id_param;\nEND;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:34:32.663737] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:34:32.663737] [17] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:34:32.663737] [17] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:34:32.663737] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE GetCustomerOrderCount(customer_id_param IN NUMBER, order_count OUT NUMBER) AS
BEGIN
    SELECT COUNT(*) INTO order_count FROM orders WHERE customer_id = customer_id_param;
END;

[2025-06-12 17:34:32.664741] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE GetCustomerOrderCount(customer_id_param IN NUMBER, order_count OUT NUMBER) AS\nBEGIN\n    SELECT COUNT(*) INTO order_count FROM orders WHERE customer_id = customer_id_param;\nEND;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:34:34.422921] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:34:34.422921] [17] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:34:34.422921] [17] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:34:34.422921] [17] hybrid Eval Case Final Result: True
[2025-06-12 17:34:34.422921] 
--- Case: 18 ---
[2025-06-12 17:34:34.422921] [18] Case Run 1/1
[2025-06-12 17:34:34.422921] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
CREATE TABLE products_with_uuid (
    product_id BINARY(16) PRIMARY KEY DEFAULT (UUID_TO_BIN(UUID())),
    product_name VARCHAR(255)
);

Translated SQL (Oracle):

[2025-06-12 17:34:34.424409] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE TABLE products_with_uuid (\n    product_id BINARY(16) PRIMARY KEY DEFAULT (UUID_TO_BIN(UUID())),\n    product_name VARCHAR(255)\n);\n\nTranslated SQL (Oracle):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:34:38.395179] [Model Answer]: CREATE TABLE products_with_uuid (
    product_id RAW(16) PRIMARY KEY DEFAULT SYS_GUID(),
    product_name VARCHAR2(255)
);
[2025-06-12 17:34:38.395179] [18] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:34:38.395179] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE TABLE products_with_uuid (
    product_id RAW(16) PRIMARY KEY DEFAULT SYS_GUID(),
    product_name VARCHAR2(255)
);

[2025-06-12 17:34:38.396182] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE TABLE products_with_uuid (\n    product_id RAW(16) PRIMARY KEY DEFAULT SYS_GUID(),\n    product_name VARCHAR2(255)\n);\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:34:41.439303] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:34:41.439303] [18] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:34:41.439303] [18] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:34:41.439303] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE TABLE products_with_uuid (
    product_id RAW(16) PRIMARY KEY DEFAULT SYS_GUID(),
    product_name VARCHAR2(255)
);

[2025-06-12 17:34:41.440555] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE TABLE products_with_uuid (\n    product_id RAW(16) PRIMARY KEY DEFAULT SYS_GUID(),\n    product_name VARCHAR2(255)\n);\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:34:51.986677] [Model Answer]: {
  "answer": "no"
}
[2025-06-12 17:34:51.986677] [18] Hybrid Eval Case Judge o4-mini Results: False
[2025-06-12 17:34:51.986677] [18] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:34:51.986677] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE TABLE products_with_uuid (
    product_id RAW(16) PRIMARY KEY DEFAULT SYS_GUID(),
    product_name VARCHAR2(255)
);

[2025-06-12 17:34:51.987694] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE TABLE products_with_uuid (\n    product_id RAW(16) PRIMARY KEY DEFAULT SYS_GUID(),\n    product_name VARCHAR2(255)\n);\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:34:53.772629] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:34:53.773747] [18] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:34:53.773747] [18] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:34:53.773747] [18] hybrid Eval Case Final Result: True
[2025-06-12 17:34:53.773747] 
--- Case: 19 ---
[2025-06-12 17:34:53.773747] [19] Case Run 1/1
[2025-06-12 17:34:53.773747] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
SELECT
    e.employee_name,
    CASE
        WHEN e.salary < 50000 THEN 'Junior'
        WHEN e.salary BETWEEN 50000 AND 80000 THEN 'Mid-level'
        ELSE 'Senior'
    END AS salary_level
FROM
    employees e;

Translated SQL (Oracle):

[2025-06-12 17:34:53.775010] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT\n    e.employee_name,\n    CASE\n        WHEN e.salary < 50000 THEN 'Junior'\n        WHEN e.salary BETWEEN 50000 AND 80000 THEN 'Mid-level'\n        ELSE 'Senior'\n    END AS salary_level\nFROM\n    employees e;\n\nTranslated SQL (Oracle):\n"}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:34:58.412424] [Model Answer]: SELECT
    e.employee_name,
    CASE
        WHEN e.salary < 50000 THEN 'Junior'
        WHEN e.salary BETWEEN 50000 AND 80000 THEN 'Mid-level'
        ELSE 'Senior'
    END AS salary_level
FROM
    employees e;
[2025-06-12 17:34:58.412424] [19] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:34:58.412424] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT
    e.employee_name,
    CASE
        WHEN e.salary < 50000 THEN 'Junior'
        WHEN e.salary BETWEEN 50000 AND 80000 THEN 'Mid-level'
        ELSE 'Senior'
    END AS salary_level
FROM
    employees e;

[2025-06-12 17:34:58.412424] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT\n    e.employee_name,\n    CASE\n        WHEN e.salary < 50000 THEN \'Junior\'\n        WHEN e.salary BETWEEN 50000 AND 80000 THEN \'Mid-level\'\n        ELSE \'Senior\'\n    END AS salary_level\nFROM\n    employees e;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:35:01.703275] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:35:01.704419] [19] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:35:01.704419] [19] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:35:01.704419] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT
    e.employee_name,
    CASE
        WHEN e.salary < 50000 THEN 'Junior'
        WHEN e.salary BETWEEN 50000 AND 80000 THEN 'Mid-level'
        ELSE 'Senior'
    END AS salary_level
FROM
    employees e;

[2025-06-12 17:35:01.705423] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT\n    e.employee_name,\n    CASE\n        WHEN e.salary < 50000 THEN \'Junior\'\n        WHEN e.salary BETWEEN 50000 AND 80000 THEN \'Mid-level\'\n        ELSE \'Senior\'\n    END AS salary_level\nFROM\n    employees e;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:35:08.004555] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:35:08.004555] [19] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:35:08.004555] [19] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:35:08.004555] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
SELECT
    e.employee_name,
    CASE
        WHEN e.salary < 50000 THEN 'Junior'
        WHEN e.salary BETWEEN 50000 AND 80000 THEN 'Mid-level'
        ELSE 'Senior'
    END AS salary_level
FROM
    employees e;

[2025-06-12 17:35:08.006001] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nSELECT\n    e.employee_name,\n    CASE\n        WHEN e.salary < 50000 THEN \'Junior\'\n        WHEN e.salary BETWEEN 50000 AND 80000 THEN \'Mid-level\'\n        ELSE \'Senior\'\n    END AS salary_level\nFROM\n    employees e;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:35:10.028224] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:35:10.028224] [19] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:35:10.028224] [19] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:35:10.028224] [19] hybrid Eval Case Final Result: True
[2025-06-12 17:35:10.028224] 
--- Case: 20 ---
[2025-06-12 17:35:10.028224] [20] Case Run 1/1
[2025-06-12 17:35:10.029701] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from MySQL syntax to Oracle syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
DELIMITER $$
CREATE TRIGGER before_employee_update
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN
    IF NEW.salary < OLD.salary THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot decrease employee salary!';
    END IF;
END $$
DELIMITER ;

Translated SQL (Oracle):

[2025-06-12 17:35:10.030205] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$\nCREATE TRIGGER before_employee_update\nBEFORE UPDATE ON employees\nFOR EACH ROW\nBEGIN\n    IF NEW.salary < OLD.salary THEN\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot decrease employee salary!';\n    END IF;\nEND $$\nDELIMITER ;\n\nTranslated SQL (Oracle):\n"}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:35:14.935122] [Model Answer]: CREATE OR REPLACE TRIGGER before_employee_update
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN
    IF :NEW.salary < :OLD.salary THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cannot decrease employee salary!');
    END IF;
END;
[2025-06-12 17:35:14.935122] [20] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:35:14.935122] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE TRIGGER before_employee_update
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN
    IF :NEW.salary < :OLD.salary THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cannot decrease employee salary!');
    END IF;
END;

[2025-06-12 17:35:14.936413] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE TRIGGER before_employee_update\nBEFORE UPDATE ON employees\nFOR EACH ROW\nBEGIN\n    IF :NEW.salary < :OLD.salary THEN\n        RAISE_APPLICATION_ERROR(-20001, \'Cannot decrease employee salary!\');\n    END IF;\nEND;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:35:18.523151] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:35:18.524156] [20] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:35:18.524156] [20] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:35:18.524156] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE TRIGGER before_employee_update
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN
    IF :NEW.salary < :OLD.salary THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cannot decrease employee salary!');
    END IF;
END;

[2025-06-12 17:35:18.525169] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE TRIGGER before_employee_update\nBEFORE UPDATE ON employees\nFOR EACH ROW\nBEGIN\n    IF :NEW.salary < :OLD.salary THEN\n        RAISE_APPLICATION_ERROR(-20001, \'Cannot decrease employee salary!\');\n    END IF;\nEND;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:35:26.382920] [Model Answer]: {"answer":"yes"}
[2025-06-12 17:35:26.382920] [20] Hybrid Eval Case Judge o4-mini Results: True
[2025-06-12 17:35:26.382920] [20] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:35:26.382920] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a Oracle database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE TRIGGER before_employee_update
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN
    IF :NEW.salary < :OLD.salary THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cannot decrease employee salary!');
    END IF;
END;

[2025-06-12 17:35:26.383924] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a Oracle database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE TRIGGER before_employee_update\nBEFORE UPDATE ON employees\nFOR EACH ROW\nBEGIN\n    IF :NEW.salary < :OLD.salary THEN\n        RAISE_APPLICATION_ERROR(-20001, \'Cannot decrease employee salary!\');\n    END IF;\nEND;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:35:28.675356] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:35:28.675356] [20] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:35:28.676569] [20] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:35:28.676569] [20] hybrid Eval Case Final Result: True
[2025-06-12 17:35:28.677671] 
--- Case: 21 ---
[2025-06-12 17:35:28.677671] [21] Case Run 1/1
[2025-06-12 17:35:28.677671] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from Oracle syntax to MySQL syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
CREATE OR REPLACE PROCEDURE "SP_KSH_PERSON_FEE" (V_USER_ID IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS V_TEMP_COMPANY VARCHAR(20); BEGIN SELECT HP.COMPANY_CODE INTO V_TEMP_COMPANY FROM KSH_USER_HOME_PAGE HP WHERE HP.USER_ID =V_USER_ID; IF V_TEMP_COMPANY<>'00000000' THEN OPEN OUTCURSOR FOR SELECT SYS_GUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT FROM ( SELECT FD.INVOICE_SORT_NAME,FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE, SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT FROM KSH_CSCE_VESSEL_FEE VC INNER JOIN KSH_FEE_INVOICE_DEFINE FD ON NVL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL AND FD.COMPANY_CODE= VC.COMPANY_CODE WHERE VC.TARGET_YEAR = TO_CHAR(SYSDATE, 'YYYY') AND EXISTS (select 1 from ksh_user_manage_ship um where um.user_id = V_USER_ID and um.vessel_code = VC.vessel_code) GROUP BY FD.INVOICE_SORT_NAME,FD.COMPANY_SORT_SEQ,VC.VESSEL_CODE) TEMP GROUP BY TEMP.INVOICE_SORT_NAME; ELSE OPEN OUTCURSOR FOR SELECT SYS_GUID AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT FROM ( SELECT FD.GROUP_SORT_NAME AS INVOICE_SORT_NAME,FD.Group_Sort_Seq, VC.VESSEL_CODE, SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT FROM KSH_CSCE_VESSEL_FEE VC INNER JOIN KSH_FEE_INVOICE_DEFINE FD ON NVL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL AND FD.GROUP_SORT IS NOT NULL WHERE VC.TARGET_YEAR = TO_CHAR(SYSDATE, 'YYYY') AND EXISTS (select 1 from ksh_user_manage_ship um where um.user_id = V_USER_ID and um.vessel_code = VC.vessel_code) GROUP BY FD.GROUP_SORT_NAME,FD.Group_Sort_Seq,VC.VESSEL_CODE) TEMP GROUP BY TEMP.INVOICE_SORT_NAME, TEMP.Group_Sort_Seq ORDER BY TEMP.Group_Sort_Seq; END IF; END SP_KSH_PERSON_FEE;

Translated SQL (MySQL):

[2025-06-12 17:35:28.678683] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to MySQL syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE "SP_KSH_PERSON_FEE" (V_USER_ID IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS V_TEMP_COMPANY VARCHAR(20); BEGIN SELECT HP.COMPANY_CODE INTO V_TEMP_COMPANY FROM KSH_USER_HOME_PAGE HP WHERE HP.USER_ID =V_USER_ID; IF V_TEMP_COMPANY<>\'00000000\' THEN OPEN OUTCURSOR FOR SELECT SYS_GUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT FROM ( SELECT FD.INVOICE_SORT_NAME,FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE, SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT FROM KSH_CSCE_VESSEL_FEE VC INNER JOIN KSH_FEE_INVOICE_DEFINE FD ON NVL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL AND FD.COMPANY_CODE= VC.COMPANY_CODE WHERE VC.TARGET_YEAR = TO_CHAR(SYSDATE, \'YYYY\') AND EXISTS (select 1 from ksh_user_manage_ship um where um.user_id = V_USER_ID and um.vessel_code = VC.vessel_code) GROUP BY FD.INVOICE_SORT_NAME,FD.COMPANY_SORT_SEQ,VC.VESSEL_CODE) TEMP GROUP BY TEMP.INVOICE_SORT_NAME; ELSE OPEN OUTCURSOR FOR SELECT SYS_GUID AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT FROM ( SELECT FD.GROUP_SORT_NAME AS INVOICE_SORT_NAME,FD.Group_Sort_Seq, VC.VESSEL_CODE, SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT FROM KSH_CSCE_VESSEL_FEE VC INNER JOIN KSH_FEE_INVOICE_DEFINE FD ON NVL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL AND FD.GROUP_SORT IS NOT NULL WHERE VC.TARGET_YEAR = TO_CHAR(SYSDATE, \'YYYY\') AND EXISTS (select 1 from ksh_user_manage_ship um where um.user_id = V_USER_ID and um.vessel_code = VC.vessel_code) GROUP BY FD.GROUP_SORT_NAME,FD.Group_Sort_Seq,VC.VESSEL_CODE) TEMP GROUP BY TEMP.INVOICE_SORT_NAME, TEMP.Group_Sort_Seq ORDER BY TEMP.Group_Sort_Seq; END IF; END SP_KSH_PERSON_FEE;\n\nTranslated SQL (MySQL):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:36:15.344148] [Model Answer]: DELIMITER //
CREATE PROCEDURE SP_KSH_PERSON_FEE (IN V_USER_ID VARCHAR(255), OUT OUTCURSOR TEXT)
BEGIN
    DECLARE V_TEMP_COMPANY VARCHAR(20);
    SELECT HP.COMPANY_CODE INTO V_TEMP_COMPANY FROM KSH_USER_HOME_PAGE HP WHERE HP.USER_ID = V_USER_ID;
    IF V_TEMP_COMPANY <> '00000000' THEN
        SET @sql = CONCAT('
            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, 
            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, 
            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT 
            FROM (
                SELECT FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE, 
                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, 
                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT 
                FROM KSH_CSCE_VESSEL_FEE VC 
                INNER JOIN KSH_FEE_INVOICE_DEFINE FD 
                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL 
                AND FD.COMPANY_CODE = VC.COMPANY_CODE 
                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), ''%Y'') 
                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = ''', V_USER_ID, ''' AND um.vessel_code = VC.vessel_code) 
                GROUP BY FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE
            ) TEMP 
            GROUP BY TEMP.INVOICE_SORT_NAME
        ');
    ELSE
        SET @sql = CONCAT('
            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, 
            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, 
            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT 
            FROM (
                SELECT FD.GROUP_SORT_NAME AS INVOICE_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE, 
                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, 
                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT 
                FROM KSH_CSCE_VESSEL_FEE VC 
                INNER JOIN KSH_FEE_INVOICE_DEFINE FD 
                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL 
                AND FD.GROUP_SORT IS NOT NULL 
                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), ''%Y'') 
                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = ''', V_USER_ID, ''' AND um.vessel_code = VC.vessel_code) 
                GROUP BY FD.GROUP_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE
            ) TEMP 
            GROUP BY TEMP.INVOICE_SORT_NAME, TEMP.Group_Sort_Seq 
            ORDER BY TEMP.Group_Sort_Seq
        ');
    END IF;
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //
DELIMITER ;
[2025-06-12 17:36:15.345157] [21] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:36:15.345157] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a MySQL database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
DELIMITER //
CREATE PROCEDURE SP_KSH_PERSON_FEE (IN V_USER_ID VARCHAR(255), OUT OUTCURSOR TEXT)
BEGIN
    DECLARE V_TEMP_COMPANY VARCHAR(20);
    SELECT HP.COMPANY_CODE INTO V_TEMP_COMPANY FROM KSH_USER_HOME_PAGE HP WHERE HP.USER_ID = V_USER_ID;
    IF V_TEMP_COMPANY <> '00000000' THEN
        SET @sql = CONCAT('
            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, 
            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, 
            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT 
            FROM (
                SELECT FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE, 
                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, 
                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT 
                FROM KSH_CSCE_VESSEL_FEE VC 
                INNER JOIN KSH_FEE_INVOICE_DEFINE FD 
                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL 
                AND FD.COMPANY_CODE = VC.COMPANY_CODE 
                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), ''%Y'') 
                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = ''', V_USER_ID, ''' AND um.vessel_code = VC.vessel_code) 
                GROUP BY FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE
            ) TEMP 
            GROUP BY TEMP.INVOICE_SORT_NAME
        ');
    ELSE
        SET @sql = CONCAT('
            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, 
            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, 
            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT 
            FROM (
                SELECT FD.GROUP_SORT_NAME AS INVOICE_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE, 
                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, 
                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT 
                FROM KSH_CSCE_VESSEL_FEE VC 
                INNER JOIN KSH_FEE_INVOICE_DEFINE FD 
                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL 
                AND FD.GROUP_SORT IS NOT NULL 
                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), ''%Y'') 
                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = ''', V_USER_ID, ''' AND um.vessel_code = VC.vessel_code) 
                GROUP BY FD.GROUP_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE
            ) TEMP 
            GROUP BY TEMP.INVOICE_SORT_NAME, TEMP.Group_Sort_Seq 
            ORDER BY TEMP.Group_Sort_Seq
        ');
    END IF;
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //
DELIMITER ;

[2025-06-12 17:36:15.347286] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a MySQL database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nDELIMITER //\nCREATE PROCEDURE SP_KSH_PERSON_FEE (IN V_USER_ID VARCHAR(255), OUT OUTCURSOR TEXT)\nBEGIN\n    DECLARE V_TEMP_COMPANY VARCHAR(20);\n    SELECT HP.COMPANY_CODE INTO V_TEMP_COMPANY FROM KSH_USER_HOME_PAGE HP WHERE HP.USER_ID = V_USER_ID;\n    IF V_TEMP_COMPANY <> \'00000000\' THEN\n        SET @sql = CONCAT(\'\n            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, \n            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, \n            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT \n            FROM (\n                SELECT FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE, \n                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, \n                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT \n                FROM KSH_CSCE_VESSEL_FEE VC \n                INNER JOIN KSH_FEE_INVOICE_DEFINE FD \n                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL \n                AND FD.COMPANY_CODE = VC.COMPANY_CODE \n                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), \'\'%Y\'\') \n                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = \'\'\', V_USER_ID, \'\'\' AND um.vessel_code = VC.vessel_code) \n                GROUP BY FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE\n            ) TEMP \n            GROUP BY TEMP.INVOICE_SORT_NAME\n        \');\n    ELSE\n        SET @sql = CONCAT(\'\n            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, \n            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, \n            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT \n            FROM (\n                SELECT FD.GROUP_SORT_NAME AS INVOICE_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE, \n                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, \n                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT \n                FROM KSH_CSCE_VESSEL_FEE VC \n                INNER JOIN KSH_FEE_INVOICE_DEFINE FD \n                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL \n                AND FD.GROUP_SORT IS NOT NULL \n                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), \'\'%Y\'\') \n                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = \'\'\', V_USER_ID, \'\'\' AND um.vessel_code = VC.vessel_code) \n                GROUP BY FD.GROUP_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE\n            ) TEMP \n            GROUP BY TEMP.INVOICE_SORT_NAME, TEMP.Group_Sort_Seq \n            ORDER BY TEMP.Group_Sort_Seq\n        \');\n    END IF;\n    PREPARE stmt FROM @sql;\n    EXECUTE stmt;\n    DEALLOCATE PREPARE stmt;\nEND //\nDELIMITER ;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:36:18.497490] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:36:18.498494] [21] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:36:18.498494] [21] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:36:18.498494] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a MySQL database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
DELIMITER //
CREATE PROCEDURE SP_KSH_PERSON_FEE (IN V_USER_ID VARCHAR(255), OUT OUTCURSOR TEXT)
BEGIN
    DECLARE V_TEMP_COMPANY VARCHAR(20);
    SELECT HP.COMPANY_CODE INTO V_TEMP_COMPANY FROM KSH_USER_HOME_PAGE HP WHERE HP.USER_ID = V_USER_ID;
    IF V_TEMP_COMPANY <> '00000000' THEN
        SET @sql = CONCAT('
            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, 
            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, 
            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT 
            FROM (
                SELECT FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE, 
                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, 
                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT 
                FROM KSH_CSCE_VESSEL_FEE VC 
                INNER JOIN KSH_FEE_INVOICE_DEFINE FD 
                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL 
                AND FD.COMPANY_CODE = VC.COMPANY_CODE 
                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), ''%Y'') 
                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = ''', V_USER_ID, ''' AND um.vessel_code = VC.vessel_code) 
                GROUP BY FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE
            ) TEMP 
            GROUP BY TEMP.INVOICE_SORT_NAME
        ');
    ELSE
        SET @sql = CONCAT('
            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, 
            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, 
            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT 
            FROM (
                SELECT FD.GROUP_SORT_NAME AS INVOICE_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE, 
                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, 
                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT 
                FROM KSH_CSCE_VESSEL_FEE VC 
                INNER JOIN KSH_FEE_INVOICE_DEFINE FD 
                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL 
                AND FD.GROUP_SORT IS NOT NULL 
                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), ''%Y'') 
                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = ''', V_USER_ID, ''' AND um.vessel_code = VC.vessel_code) 
                GROUP BY FD.GROUP_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE
            ) TEMP 
            GROUP BY TEMP.INVOICE_SORT_NAME, TEMP.Group_Sort_Seq 
            ORDER BY TEMP.Group_Sort_Seq
        ');
    END IF;
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //
DELIMITER ;

[2025-06-12 17:36:18.500502] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a MySQL database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nDELIMITER //\nCREATE PROCEDURE SP_KSH_PERSON_FEE (IN V_USER_ID VARCHAR(255), OUT OUTCURSOR TEXT)\nBEGIN\n    DECLARE V_TEMP_COMPANY VARCHAR(20);\n    SELECT HP.COMPANY_CODE INTO V_TEMP_COMPANY FROM KSH_USER_HOME_PAGE HP WHERE HP.USER_ID = V_USER_ID;\n    IF V_TEMP_COMPANY <> \'00000000\' THEN\n        SET @sql = CONCAT(\'\n            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, \n            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, \n            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT \n            FROM (\n                SELECT FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE, \n                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, \n                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT \n                FROM KSH_CSCE_VESSEL_FEE VC \n                INNER JOIN KSH_FEE_INVOICE_DEFINE FD \n                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL \n                AND FD.COMPANY_CODE = VC.COMPANY_CODE \n                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), \'\'%Y\'\') \n                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = \'\'\', V_USER_ID, \'\'\' AND um.vessel_code = VC.vessel_code) \n                GROUP BY FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE\n            ) TEMP \n            GROUP BY TEMP.INVOICE_SORT_NAME\n        \');\n    ELSE\n        SET @sql = CONCAT(\'\n            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, \n            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, \n            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT \n            FROM (\n                SELECT FD.GROUP_SORT_NAME AS INVOICE_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE, \n                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, \n                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT \n                FROM KSH_CSCE_VESSEL_FEE VC \n                INNER JOIN KSH_FEE_INVOICE_DEFINE FD \n                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL \n                AND FD.GROUP_SORT IS NOT NULL \n                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), \'\'%Y\'\') \n                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = \'\'\', V_USER_ID, \'\'\' AND um.vessel_code = VC.vessel_code) \n                GROUP BY FD.GROUP_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE\n            ) TEMP \n            GROUP BY TEMP.INVOICE_SORT_NAME, TEMP.Group_Sort_Seq \n            ORDER BY TEMP.Group_Sort_Seq\n        \');\n    END IF;\n    PREPARE stmt FROM @sql;\n    EXECUTE stmt;\n    DEALLOCATE PREPARE stmt;\nEND //\nDELIMITER ;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:36:52.815618] [Model Answer]: {"answer":"no"}
[2025-06-12 17:36:52.816947] [21] Hybrid Eval Case Judge o4-mini Results: False
[2025-06-12 17:36:52.816947] [21] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:36:52.816947] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a MySQL database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
DELIMITER //
CREATE PROCEDURE SP_KSH_PERSON_FEE (IN V_USER_ID VARCHAR(255), OUT OUTCURSOR TEXT)
BEGIN
    DECLARE V_TEMP_COMPANY VARCHAR(20);
    SELECT HP.COMPANY_CODE INTO V_TEMP_COMPANY FROM KSH_USER_HOME_PAGE HP WHERE HP.USER_ID = V_USER_ID;
    IF V_TEMP_COMPANY <> '00000000' THEN
        SET @sql = CONCAT('
            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, 
            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, 
            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT 
            FROM (
                SELECT FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE, 
                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, 
                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT 
                FROM KSH_CSCE_VESSEL_FEE VC 
                INNER JOIN KSH_FEE_INVOICE_DEFINE FD 
                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL 
                AND FD.COMPANY_CODE = VC.COMPANY_CODE 
                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), ''%Y'') 
                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = ''', V_USER_ID, ''' AND um.vessel_code = VC.vessel_code) 
                GROUP BY FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE
            ) TEMP 
            GROUP BY TEMP.INVOICE_SORT_NAME
        ');
    ELSE
        SET @sql = CONCAT('
            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, 
            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, 
            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT 
            FROM (
                SELECT FD.GROUP_SORT_NAME AS INVOICE_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE, 
                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, 
                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT 
                FROM KSH_CSCE_VESSEL_FEE VC 
                INNER JOIN KSH_FEE_INVOICE_DEFINE FD 
                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL 
                AND FD.GROUP_SORT IS NOT NULL 
                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), ''%Y'') 
                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = ''', V_USER_ID, ''' AND um.vessel_code = VC.vessel_code) 
                GROUP BY FD.GROUP_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE
            ) TEMP 
            GROUP BY TEMP.INVOICE_SORT_NAME, TEMP.Group_Sort_Seq 
            ORDER BY TEMP.Group_Sort_Seq
        ');
    END IF;
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //
DELIMITER ;

[2025-06-12 17:36:52.818572] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a MySQL database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nDELIMITER //\nCREATE PROCEDURE SP_KSH_PERSON_FEE (IN V_USER_ID VARCHAR(255), OUT OUTCURSOR TEXT)\nBEGIN\n    DECLARE V_TEMP_COMPANY VARCHAR(20);\n    SELECT HP.COMPANY_CODE INTO V_TEMP_COMPANY FROM KSH_USER_HOME_PAGE HP WHERE HP.USER_ID = V_USER_ID;\n    IF V_TEMP_COMPANY <> \'00000000\' THEN\n        SET @sql = CONCAT(\'\n            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, \n            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, \n            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT \n            FROM (\n                SELECT FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE, \n                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, \n                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT \n                FROM KSH_CSCE_VESSEL_FEE VC \n                INNER JOIN KSH_FEE_INVOICE_DEFINE FD \n                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL \n                AND FD.COMPANY_CODE = VC.COMPANY_CODE \n                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), \'\'%Y\'\') \n                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = \'\'\', V_USER_ID, \'\'\' AND um.vessel_code = VC.vessel_code) \n                GROUP BY FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE\n            ) TEMP \n            GROUP BY TEMP.INVOICE_SORT_NAME\n        \');\n    ELSE\n        SET @sql = CONCAT(\'\n            SELECT UUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, \n            (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, \n            SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT \n            FROM (\n                SELECT FD.GROUP_SORT_NAME AS INVOICE_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE, \n                SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, \n                (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT \n                FROM KSH_CSCE_VESSEL_FEE VC \n                INNER JOIN KSH_FEE_INVOICE_DEFINE FD \n                ON IFNULL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL \n                AND FD.GROUP_SORT IS NOT NULL \n                WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), \'\'%Y\'\') \n                AND EXISTS (SELECT 1 FROM ksh_user_manage_ship um WHERE um.user_id = \'\'\', V_USER_ID, \'\'\' AND um.vessel_code = VC.vessel_code) \n                GROUP BY FD.GROUP_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE\n            ) TEMP \n            GROUP BY TEMP.INVOICE_SORT_NAME, TEMP.Group_Sort_Seq \n            ORDER BY TEMP.Group_Sort_Seq\n        \');\n    END IF;\n    PREPARE stmt FROM @sql;\n    EXECUTE stmt;\n    DEALLOCATE PREPARE stmt;\nEND //\nDELIMITER ;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:36:54.883553] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:36:54.884555] [21] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:36:54.884555] [21] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:36:54.884555] [21] hybrid Eval Case Final Result: True
[2025-06-12 17:36:54.884555] 
--- Case: 22 ---
[2025-06-12 17:36:54.884555] [22] Case Run 1/1
[2025-06-12 17:36:54.885757] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from Oracle syntax to PG syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
CREATE OR REPLACE PROCEDURE "SP_SYNC_R_CHECK"( I_VESSEL_CODE VARCHAR2, I_CHECK_GRADE VARCHAR2, I_DEPT VARCHAR2, I_RESPONSIBLE_PERSON VARCHAR2, I_CHECK_NAME VARCHAR2, I_CHECK_DATE VARCHAR2 ) IS CURSOR CUR(I_BEGIN_DATE DATE, I_END_DATE DATE) IS SELECT CWBT_NAME, I.CWBT_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.CHECK_GRADE, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.CHECK_GRADE = I_CHECK_GRADE AND I.VESSEL_CODE = I_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND ( I_DEPT IS NULL OR I.DEPT = I_DEPT ) AND ( I_RESPONSIBLE_PERSON IS NULL OR I.RESPONSIBLE_PERSON = I_RESPONSIBLE_PERSON ) AND ( I_CHECK_NAME IS NULL OR ( I_CHECK_NAME IS NOT NULL AND I.CHECK_NAME LIKE '%' || I_CHECK_NAME || '%' ) ) AND I.DATA_TYPE = 'S'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR2(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO'; IF I_CHECK_DATE IS NULL THEN DAT_BEGIN: = TO_DATE( TO_CHAR(SYSDATE(), 'YYYY') || '-01-01', 'YYYY-MM-DD' ); DAT_END: = TO_DATE( TO_CHAR(SYSDATE(), 'YYYY') || '-12-31', 'YYYY-MM-DD' ); ELSIF LENGTH(I_CHECK_DATE) = 4 THEN DAT_BEGIN: = TO_DATE(I_CHECK_DATE || '-01-01' ， 'YYYY-MM-DD'); DAT_END: = TO_DATE （ I_CHECK_DATE || '-12-31', 'YYYY-MM-DD' ); ELSE DAT_BEGIN: = TO_DATE(I_CHECK_DATE || '-01', 'YYYY-MM-DD'); DAT_END: = LAST_DAY(DAT_BEGIN); END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO ( PID, CWBT_NAME, CWBT_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, CHECK_GRADE, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE ) SELECT REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.CWBT_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.CHECK_GRADE, TRUNC(REC.CHECK_DATE, 'MM'), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE FROM DUAL; END IF; SELECT CASE I_CHECK_GRADE WHEN 'A' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'DD') AS NUMBER) WHEN 'B' THEN CAST( TO_CHAR( PKG_DATE_UTIL.GET_1ST_M( REC.CHECK_DATE, DECODE(LENGTH(I_CHECK_DATE), 4, 'YY', 'MM') ), DECODE(LENGTH(I_CHECK_DATE), 4, 'WW', 'W') ) AS NUMBER ) WHEN 'C' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'MM') AS NUMBER) END INTO VAR_SUFFIX FROM DUAL; EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || VAR_SUFFIX || ' = :1 WHERE I.PID = :2' USING CASE REC.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; DBMS_OUTPUT.ENABLE(10000); DBMS_OUTPUT.PUT_LINE(SQLERRM); END SP_PMS_SYNC_ROUTINE_CHECK;

Translated SQL (PG):

[2025-06-12 17:36:54.886761] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE "SP_SYNC_R_CHECK"( I_VESSEL_CODE VARCHAR2, I_CHECK_GRADE VARCHAR2, I_DEPT VARCHAR2, I_RESPONSIBLE_PERSON VARCHAR2, I_CHECK_NAME VARCHAR2, I_CHECK_DATE VARCHAR2 ) IS CURSOR CUR(I_BEGIN_DATE DATE, I_END_DATE DATE) IS SELECT CWBT_NAME, I.CWBT_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.CHECK_GRADE, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.CHECK_GRADE = I_CHECK_GRADE AND I.VESSEL_CODE = I_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND ( I_DEPT IS NULL OR I.DEPT = I_DEPT ) AND ( I_RESPONSIBLE_PERSON IS NULL OR I.RESPONSIBLE_PERSON = I_RESPONSIBLE_PERSON ) AND ( I_CHECK_NAME IS NULL OR ( I_CHECK_NAME IS NOT NULL AND I.CHECK_NAME LIKE \'%\' || I_CHECK_NAME || \'%\' ) ) AND I.DATA_TYPE = \'S\'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR2(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE IMMEDIATE \'TRUNCATE TABLE G_R_CHECK_INFO\'; IF I_CHECK_DATE IS NULL THEN DAT_BEGIN: = TO_DATE( TO_CHAR(SYSDATE(), \'YYYY\') || \'-01-01\', \'YYYY-MM-DD\' ); DAT_END: = TO_DATE( TO_CHAR(SYSDATE(), \'YYYY\') || \'-12-31\', \'YYYY-MM-DD\' ); ELSIF LENGTH(I_CHECK_DATE) = 4 THEN DAT_BEGIN: = TO_DATE(I_CHECK_DATE || \'-01-01\' ， \'YYYY-MM-DD\'); DAT_END: = TO_DATE （ I_CHECK_DATE || \'-12-31\', \'YYYY-MM-DD\' ); ELSE DAT_BEGIN: = TO_DATE(I_CHECK_DATE || \'-01\', \'YYYY-MM-DD\'); DAT_END: = LAST_DAY(DAT_BEGIN); END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO ( PID, CWBT_NAME, CWBT_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, CHECK_GRADE, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE ) SELECT REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.CWBT_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.CHECK_GRADE, TRUNC(REC.CHECK_DATE, \'MM\'), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE FROM DUAL; END IF; SELECT CASE I_CHECK_GRADE WHEN \'A\' THEN CAST(TO_CHAR(REC.CHECK_DATE, \'DD\') AS NUMBER) WHEN \'B\' THEN CAST( TO_CHAR( PKG_DATE_UTIL.GET_1ST_M( REC.CHECK_DATE, DECODE(LENGTH(I_CHECK_DATE), 4, \'YY\', \'MM\') ), DECODE(LENGTH(I_CHECK_DATE), 4, \'WW\', \'W\') ) AS NUMBER ) WHEN \'C\' THEN CAST(TO_CHAR(REC.CHECK_DATE, \'MM\') AS NUMBER) END INTO VAR_SUFFIX FROM DUAL; EXECUTE IMMEDIATE \'UPDATE G_R_CHECK_INFO I SET N\' || VAR_SUFFIX || \' = :1 WHERE I.PID = :2\' USING CASE REC.CHECK_RESULT WHEN \'0\' THEN \'√\' WHEN \'1\' THEN \'×\' WHEN \'2\' THEN \'O\' WHEN \'3\' THEN \'—\' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = \'0336\'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; DBMS_OUTPUT.ENABLE(10000); DBMS_OUTPUT.PUT_LINE(SQLERRM); END SP_PMS_SYNC_ROUTINE_CHECK;\n\nTranslated SQL (PG):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:37:50.760637] [Model Answer]: CREATE OR REPLACE PROCEDURE "SP_SYNC_R_CHECK"( I_VESSEL_CODE VARCHAR, I_CHECK_GRADE VARCHAR, I_DEPT VARCHAR, I_RESPONSIBLE_PERSON VARCHAR, I_CHECK_NAME VARCHAR, I_CHECK_DATE VARCHAR ) AS $BODY$ DECLARE CURSOR CUR(I_BEGIN_DATE DATE, I_END_DATE DATE) IS SELECT CWBT_NAME, I.CWBT_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.CHECK_GRADE, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.CHECK_GRADE = I_CHECK_GRADE AND I.VESSEL_CODE = I_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND ( I_DEPT IS NULL OR I.DEPT = I_DEPT ) AND ( I_RESPONSIBLE_PERSON IS NULL OR I.RESPONSIBLE_PERSON = I_RESPONSIBLE_PERSON ) AND ( I_CHECK_NAME IS NULL OR ( I_CHECK_NAME IS NOT NULL AND I.CHECK_NAME LIKE '%' || I_CHECK_NAME || '%' ) ) AND I.DATA_TYPE = 'S'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE 'TRUNCATE TABLE G_R_CHECK_INFO'; IF I_CHECK_DATE IS NULL THEN DAT_BEGIN := TO_DATE( TO_CHAR(CURRENT_DATE, 'YYYY') || '-01-01', 'YYYY-MM-DD' ); DAT_END := TO_DATE( TO_CHAR(CURRENT_DATE, 'YYYY') || '-12-31', 'YYYY-MM-DD' ); ELSIF LENGTH(I_CHECK_DATE) = 4 THEN DAT_BEGIN := TO_DATE(I_CHECK_DATE || '-01-01', 'YYYY-MM-DD'); DAT_END := TO_DATE(I_CHECK_DATE || '-12-31', 'YYYY-MM-DD'); ELSE DAT_BEGIN := TO_DATE(I_CHECK_DATE || '-01', 'YYYY-MM-DD'); DAT_END := (DATE_TRUNC('MONTH', DAT_BEGIN) + INTERVAL '1 MONTH - 1 day')::DATE; END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO ( PID, CWBT_NAME, CWBT_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, CHECK_GRADE, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE ) VALUES ( REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.CWBT_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.CHECK_GRADE, DATE_TRUNC('MONTH', REC.CHECK_DATE), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE ); END IF; SELECT CASE I_CHECK_GRADE WHEN 'A' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'DD') AS INTEGER) WHEN 'B' THEN CAST( TO_CHAR( GET_1ST_M( REC.CHECK_DATE, CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN 'YY' ELSE 'MM' END ), CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN 'WW' ELSE 'W' END ) AS INTEGER ) WHEN 'C' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'MM') AS INTEGER) END INTO VAR_SUFFIX; EXECUTE 'UPDATE G_R_CHECK_INFO I SET N' || VAR_SUFFIX || ' = $1 WHERE I.PID = $2' USING CASE REC.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE NOTICE '%', SQLERRM; END; $BODY$ LANGUAGE plpgsql;
[2025-06-12 17:37:50.761756] [22] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:37:50.761756] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a PG database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE "SP_SYNC_R_CHECK"( I_VESSEL_CODE VARCHAR, I_CHECK_GRADE VARCHAR, I_DEPT VARCHAR, I_RESPONSIBLE_PERSON VARCHAR, I_CHECK_NAME VARCHAR, I_CHECK_DATE VARCHAR ) AS $BODY$ DECLARE CURSOR CUR(I_BEGIN_DATE DATE, I_END_DATE DATE) IS SELECT CWBT_NAME, I.CWBT_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.CHECK_GRADE, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.CHECK_GRADE = I_CHECK_GRADE AND I.VESSEL_CODE = I_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND ( I_DEPT IS NULL OR I.DEPT = I_DEPT ) AND ( I_RESPONSIBLE_PERSON IS NULL OR I.RESPONSIBLE_PERSON = I_RESPONSIBLE_PERSON ) AND ( I_CHECK_NAME IS NULL OR ( I_CHECK_NAME IS NOT NULL AND I.CHECK_NAME LIKE '%' || I_CHECK_NAME || '%' ) ) AND I.DATA_TYPE = 'S'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE 'TRUNCATE TABLE G_R_CHECK_INFO'; IF I_CHECK_DATE IS NULL THEN DAT_BEGIN := TO_DATE( TO_CHAR(CURRENT_DATE, 'YYYY') || '-01-01', 'YYYY-MM-DD' ); DAT_END := TO_DATE( TO_CHAR(CURRENT_DATE, 'YYYY') || '-12-31', 'YYYY-MM-DD' ); ELSIF LENGTH(I_CHECK_DATE) = 4 THEN DAT_BEGIN := TO_DATE(I_CHECK_DATE || '-01-01', 'YYYY-MM-DD'); DAT_END := TO_DATE(I_CHECK_DATE || '-12-31', 'YYYY-MM-DD'); ELSE DAT_BEGIN := TO_DATE(I_CHECK_DATE || '-01', 'YYYY-MM-DD'); DAT_END := (DATE_TRUNC('MONTH', DAT_BEGIN) + INTERVAL '1 MONTH - 1 day')::DATE; END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO ( PID, CWBT_NAME, CWBT_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, CHECK_GRADE, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE ) VALUES ( REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.CWBT_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.CHECK_GRADE, DATE_TRUNC('MONTH', REC.CHECK_DATE), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE ); END IF; SELECT CASE I_CHECK_GRADE WHEN 'A' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'DD') AS INTEGER) WHEN 'B' THEN CAST( TO_CHAR( GET_1ST_M( REC.CHECK_DATE, CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN 'YY' ELSE 'MM' END ), CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN 'WW' ELSE 'W' END ) AS INTEGER ) WHEN 'C' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'MM') AS INTEGER) END INTO VAR_SUFFIX; EXECUTE 'UPDATE G_R_CHECK_INFO I SET N' || VAR_SUFFIX || ' = $1 WHERE I.PID = $2' USING CASE REC.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE NOTICE '%', SQLERRM; END; $BODY$ LANGUAGE plpgsql;

[2025-06-12 17:37:50.762773] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE "SP_SYNC_R_CHECK"( I_VESSEL_CODE VARCHAR, I_CHECK_GRADE VARCHAR, I_DEPT VARCHAR, I_RESPONSIBLE_PERSON VARCHAR, I_CHECK_NAME VARCHAR, I_CHECK_DATE VARCHAR ) AS $BODY$ DECLARE CURSOR CUR(I_BEGIN_DATE DATE, I_END_DATE DATE) IS SELECT CWBT_NAME, I.CWBT_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.CHECK_GRADE, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.CHECK_GRADE = I_CHECK_GRADE AND I.VESSEL_CODE = I_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND ( I_DEPT IS NULL OR I.DEPT = I_DEPT ) AND ( I_RESPONSIBLE_PERSON IS NULL OR I.RESPONSIBLE_PERSON = I_RESPONSIBLE_PERSON ) AND ( I_CHECK_NAME IS NULL OR ( I_CHECK_NAME IS NOT NULL AND I.CHECK_NAME LIKE \'%\' || I_CHECK_NAME || \'%\' ) ) AND I.DATA_TYPE = \'S\'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE \'TRUNCATE TABLE G_R_CHECK_INFO\'; IF I_CHECK_DATE IS NULL THEN DAT_BEGIN := TO_DATE( TO_CHAR(CURRENT_DATE, \'YYYY\') || \'-01-01\', \'YYYY-MM-DD\' ); DAT_END := TO_DATE( TO_CHAR(CURRENT_DATE, \'YYYY\') || \'-12-31\', \'YYYY-MM-DD\' ); ELSIF LENGTH(I_CHECK_DATE) = 4 THEN DAT_BEGIN := TO_DATE(I_CHECK_DATE || \'-01-01\', \'YYYY-MM-DD\'); DAT_END := TO_DATE(I_CHECK_DATE || \'-12-31\', \'YYYY-MM-DD\'); ELSE DAT_BEGIN := TO_DATE(I_CHECK_DATE || \'-01\', \'YYYY-MM-DD\'); DAT_END := (DATE_TRUNC(\'MONTH\', DAT_BEGIN) + INTERVAL \'1 MONTH - 1 day\')::DATE; END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO ( PID, CWBT_NAME, CWBT_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, CHECK_GRADE, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE ) VALUES ( REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.CWBT_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.CHECK_GRADE, DATE_TRUNC(\'MONTH\', REC.CHECK_DATE), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE ); END IF; SELECT CASE I_CHECK_GRADE WHEN \'A\' THEN CAST(TO_CHAR(REC.CHECK_DATE, \'DD\') AS INTEGER) WHEN \'B\' THEN CAST( TO_CHAR( GET_1ST_M( REC.CHECK_DATE, CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN \'YY\' ELSE \'MM\' END ), CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN \'WW\' ELSE \'W\' END ) AS INTEGER ) WHEN \'C\' THEN CAST(TO_CHAR(REC.CHECK_DATE, \'MM\') AS INTEGER) END INTO VAR_SUFFIX; EXECUTE \'UPDATE G_R_CHECK_INFO I SET N\' || VAR_SUFFIX || \' = $1 WHERE I.PID = $2\' USING CASE REC.CHECK_RESULT WHEN \'0\' THEN \'√\' WHEN \'1\' THEN \'×\' WHEN \'2\' THEN \'O\' WHEN \'3\' THEN \'—\' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = \'0336\'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE NOTICE \'%\', SQLERRM; END; $BODY$ LANGUAGE plpgsql;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:37:53.678219] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:37:53.678219] [22] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:37:53.678219] [22] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:37:53.678219] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a PG database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE "SP_SYNC_R_CHECK"( I_VESSEL_CODE VARCHAR, I_CHECK_GRADE VARCHAR, I_DEPT VARCHAR, I_RESPONSIBLE_PERSON VARCHAR, I_CHECK_NAME VARCHAR, I_CHECK_DATE VARCHAR ) AS $BODY$ DECLARE CURSOR CUR(I_BEGIN_DATE DATE, I_END_DATE DATE) IS SELECT CWBT_NAME, I.CWBT_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.CHECK_GRADE, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.CHECK_GRADE = I_CHECK_GRADE AND I.VESSEL_CODE = I_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND ( I_DEPT IS NULL OR I.DEPT = I_DEPT ) AND ( I_RESPONSIBLE_PERSON IS NULL OR I.RESPONSIBLE_PERSON = I_RESPONSIBLE_PERSON ) AND ( I_CHECK_NAME IS NULL OR ( I_CHECK_NAME IS NOT NULL AND I.CHECK_NAME LIKE '%' || I_CHECK_NAME || '%' ) ) AND I.DATA_TYPE = 'S'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE 'TRUNCATE TABLE G_R_CHECK_INFO'; IF I_CHECK_DATE IS NULL THEN DAT_BEGIN := TO_DATE( TO_CHAR(CURRENT_DATE, 'YYYY') || '-01-01', 'YYYY-MM-DD' ); DAT_END := TO_DATE( TO_CHAR(CURRENT_DATE, 'YYYY') || '-12-31', 'YYYY-MM-DD' ); ELSIF LENGTH(I_CHECK_DATE) = 4 THEN DAT_BEGIN := TO_DATE(I_CHECK_DATE || '-01-01', 'YYYY-MM-DD'); DAT_END := TO_DATE(I_CHECK_DATE || '-12-31', 'YYYY-MM-DD'); ELSE DAT_BEGIN := TO_DATE(I_CHECK_DATE || '-01', 'YYYY-MM-DD'); DAT_END := (DATE_TRUNC('MONTH', DAT_BEGIN) + INTERVAL '1 MONTH - 1 day')::DATE; END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO ( PID, CWBT_NAME, CWBT_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, CHECK_GRADE, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE ) VALUES ( REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.CWBT_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.CHECK_GRADE, DATE_TRUNC('MONTH', REC.CHECK_DATE), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE ); END IF; SELECT CASE I_CHECK_GRADE WHEN 'A' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'DD') AS INTEGER) WHEN 'B' THEN CAST( TO_CHAR( GET_1ST_M( REC.CHECK_DATE, CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN 'YY' ELSE 'MM' END ), CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN 'WW' ELSE 'W' END ) AS INTEGER ) WHEN 'C' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'MM') AS INTEGER) END INTO VAR_SUFFIX; EXECUTE 'UPDATE G_R_CHECK_INFO I SET N' || VAR_SUFFIX || ' = $1 WHERE I.PID = $2' USING CASE REC.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE NOTICE '%', SQLERRM; END; $BODY$ LANGUAGE plpgsql;

[2025-06-12 17:37:53.679231] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE "SP_SYNC_R_CHECK"( I_VESSEL_CODE VARCHAR, I_CHECK_GRADE VARCHAR, I_DEPT VARCHAR, I_RESPONSIBLE_PERSON VARCHAR, I_CHECK_NAME VARCHAR, I_CHECK_DATE VARCHAR ) AS $BODY$ DECLARE CURSOR CUR(I_BEGIN_DATE DATE, I_END_DATE DATE) IS SELECT CWBT_NAME, I.CWBT_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.CHECK_GRADE, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.CHECK_GRADE = I_CHECK_GRADE AND I.VESSEL_CODE = I_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND ( I_DEPT IS NULL OR I.DEPT = I_DEPT ) AND ( I_RESPONSIBLE_PERSON IS NULL OR I.RESPONSIBLE_PERSON = I_RESPONSIBLE_PERSON ) AND ( I_CHECK_NAME IS NULL OR ( I_CHECK_NAME IS NOT NULL AND I.CHECK_NAME LIKE \'%\' || I_CHECK_NAME || \'%\' ) ) AND I.DATA_TYPE = \'S\'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE \'TRUNCATE TABLE G_R_CHECK_INFO\'; IF I_CHECK_DATE IS NULL THEN DAT_BEGIN := TO_DATE( TO_CHAR(CURRENT_DATE, \'YYYY\') || \'-01-01\', \'YYYY-MM-DD\' ); DAT_END := TO_DATE( TO_CHAR(CURRENT_DATE, \'YYYY\') || \'-12-31\', \'YYYY-MM-DD\' ); ELSIF LENGTH(I_CHECK_DATE) = 4 THEN DAT_BEGIN := TO_DATE(I_CHECK_DATE || \'-01-01\', \'YYYY-MM-DD\'); DAT_END := TO_DATE(I_CHECK_DATE || \'-12-31\', \'YYYY-MM-DD\'); ELSE DAT_BEGIN := TO_DATE(I_CHECK_DATE || \'-01\', \'YYYY-MM-DD\'); DAT_END := (DATE_TRUNC(\'MONTH\', DAT_BEGIN) + INTERVAL \'1 MONTH - 1 day\')::DATE; END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO ( PID, CWBT_NAME, CWBT_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, CHECK_GRADE, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE ) VALUES ( REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.CWBT_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.CHECK_GRADE, DATE_TRUNC(\'MONTH\', REC.CHECK_DATE), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE ); END IF; SELECT CASE I_CHECK_GRADE WHEN \'A\' THEN CAST(TO_CHAR(REC.CHECK_DATE, \'DD\') AS INTEGER) WHEN \'B\' THEN CAST( TO_CHAR( GET_1ST_M( REC.CHECK_DATE, CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN \'YY\' ELSE \'MM\' END ), CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN \'WW\' ELSE \'W\' END ) AS INTEGER ) WHEN \'C\' THEN CAST(TO_CHAR(REC.CHECK_DATE, \'MM\') AS INTEGER) END INTO VAR_SUFFIX; EXECUTE \'UPDATE G_R_CHECK_INFO I SET N\' || VAR_SUFFIX || \' = $1 WHERE I.PID = $2\' USING CASE REC.CHECK_RESULT WHEN \'0\' THEN \'√\' WHEN \'1\' THEN \'×\' WHEN \'2\' THEN \'O\' WHEN \'3\' THEN \'—\' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = \'0336\'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE NOTICE \'%\', SQLERRM; END; $BODY$ LANGUAGE plpgsql;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:38:44.541586] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE "SP_SYNC_R_CHECK"( I_VESSEL_CODE VARCHAR, I_CHECK_GRADE VARCHAR, I_DEPT VARCHAR, I_RESPONSIBLE_PERSON VARCHAR, I_CHECK_NAME VARCHAR, I_CHECK_DATE VARCHAR ) AS $BODY$ DECLARE CURSOR CUR(I_BEGIN_DATE DATE, I_END_DATE DATE) IS SELECT CWBT_NAME, I.CWBT_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.CHECK_GRADE, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.CHECK_GRADE = I_CHECK_GRADE AND I.VESSEL_CODE = I_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND ( I_DEPT IS NULL OR I.DEPT = I_DEPT ) AND ( I_RESPONSIBLE_PERSON IS NULL OR I.RESPONSIBLE_PERSON = I_RESPONSIBLE_PERSON ) AND ( I_CHECK_NAME IS NULL OR ( I_CHECK_NAME IS NOT NULL AND I.CHECK_NAME LIKE \'%\' || I_CHECK_NAME || \'%\' ) ) AND I.DATA_TYPE = \'S\'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE \'TRUNCATE TABLE G_R_CHECK_INFO\'; IF I_CHECK_DATE IS NULL THEN DAT_BEGIN := TO_DATE( TO_CHAR(CURRENT_DATE, \'YYYY\') || \'-01-01\', \'YYYY-MM-DD\' ); DAT_END := TO_DATE( TO_CHAR(CURRENT_DATE, \'YYYY\') || \'-12-31\', \'YYYY-MM-DD\' ); ELSIF LENGTH(I_CHECK_DATE) = 4 THEN DAT_BEGIN := TO_DATE(I_CHECK_DATE || \'-01-01\', \'YYYY-MM-DD\'); DAT_END := TO_DATE(I_CHECK_DATE || \'-12-31\', \'YYYY-MM-DD\'); ELSE DAT_BEGIN := TO_DATE(I_CHECK_DATE || \'-01\', \'YYYY-MM-DD\'); DAT_END := (DATE_TRUNC(\'MONTH\', DAT_BEGIN) + INTERVAL \'1 MONTH - 1 day\')::DATE; END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO ( PID, CWBT_NAME, CWBT_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, CHECK_GRADE, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE ) VALUES ( REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.CWBT_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.CHECK_GRADE, DATE_TRUNC(\'MONTH\', REC.CHECK_DATE), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE ); END IF; SELECT CASE I_CHECK_GRADE WHEN \'A\' THEN CAST(TO_CHAR(REC.CHECK_DATE, \'DD\') AS INTEGER) WHEN \'B\' THEN CAST( TO_CHAR( GET_1ST_M( REC.CHECK_DATE, CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN \'YY\' ELSE \'MM\' END ), CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN \'WW\' ELSE \'W\' END ) AS INTEGER ) WHEN \'C\' THEN CAST(TO_CHAR(REC.CHECK_DATE, \'MM\') AS INTEGER) END INTO VAR_SUFFIX; EXECUTE \'UPDATE G_R_CHECK_INFO I SET N\' || VAR_SUFFIX || \' = $1 WHERE I.PID = $2\' USING CASE REC.CHECK_RESULT WHEN \'0\' THEN \'√\' WHEN \'1\' THEN \'×\' WHEN \'2\' THEN \'O\' WHEN \'3\' THEN \'—\' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = \'0336\'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE NOTICE \'%\', SQLERRM; END; $BODY$ LANGUAGE plpgsql;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:38:57.619037] [Model Answer]: {"answer":"no"}
[2025-06-12 17:38:57.638660] [22] Hybrid Eval Case Judge o4-mini Results: False
[2025-06-12 17:38:57.638660] [22] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:38:57.652010] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a PG database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE "SP_SYNC_R_CHECK"( I_VESSEL_CODE VARCHAR, I_CHECK_GRADE VARCHAR, I_DEPT VARCHAR, I_RESPONSIBLE_PERSON VARCHAR, I_CHECK_NAME VARCHAR, I_CHECK_DATE VARCHAR ) AS $BODY$ DECLARE CURSOR CUR(I_BEGIN_DATE DATE, I_END_DATE DATE) IS SELECT CWBT_NAME, I.CWBT_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.CHECK_GRADE, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.CHECK_GRADE = I_CHECK_GRADE AND I.VESSEL_CODE = I_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND ( I_DEPT IS NULL OR I.DEPT = I_DEPT ) AND ( I_RESPONSIBLE_PERSON IS NULL OR I.RESPONSIBLE_PERSON = I_RESPONSIBLE_PERSON ) AND ( I_CHECK_NAME IS NULL OR ( I_CHECK_NAME IS NOT NULL AND I.CHECK_NAME LIKE '%' || I_CHECK_NAME || '%' ) ) AND I.DATA_TYPE = 'S'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE 'TRUNCATE TABLE G_R_CHECK_INFO'; IF I_CHECK_DATE IS NULL THEN DAT_BEGIN := TO_DATE( TO_CHAR(CURRENT_DATE, 'YYYY') || '-01-01', 'YYYY-MM-DD' ); DAT_END := TO_DATE( TO_CHAR(CURRENT_DATE, 'YYYY') || '-12-31', 'YYYY-MM-DD' ); ELSIF LENGTH(I_CHECK_DATE) = 4 THEN DAT_BEGIN := TO_DATE(I_CHECK_DATE || '-01-01', 'YYYY-MM-DD'); DAT_END := TO_DATE(I_CHECK_DATE || '-12-31', 'YYYY-MM-DD'); ELSE DAT_BEGIN := TO_DATE(I_CHECK_DATE || '-01', 'YYYY-MM-DD'); DAT_END := (DATE_TRUNC('MONTH', DAT_BEGIN) + INTERVAL '1 MONTH - 1 day')::DATE; END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO ( PID, CWBT_NAME, CWBT_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, CHECK_GRADE, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE ) VALUES ( REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.CWBT_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.CHECK_GRADE, DATE_TRUNC('MONTH', REC.CHECK_DATE), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE ); END IF; SELECT CASE I_CHECK_GRADE WHEN 'A' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'DD') AS INTEGER) WHEN 'B' THEN CAST( TO_CHAR( GET_1ST_M( REC.CHECK_DATE, CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN 'YY' ELSE 'MM' END ), CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN 'WW' ELSE 'W' END ) AS INTEGER ) WHEN 'C' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'MM') AS INTEGER) END INTO VAR_SUFFIX; EXECUTE 'UPDATE G_R_CHECK_INFO I SET N' || VAR_SUFFIX || ' = $1 WHERE I.PID = $2' USING CASE REC.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE NOTICE '%', SQLERRM; END; $BODY$ LANGUAGE plpgsql;

[2025-06-12 17:38:57.660743] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE "SP_SYNC_R_CHECK"( I_VESSEL_CODE VARCHAR, I_CHECK_GRADE VARCHAR, I_DEPT VARCHAR, I_RESPONSIBLE_PERSON VARCHAR, I_CHECK_NAME VARCHAR, I_CHECK_DATE VARCHAR ) AS $BODY$ DECLARE CURSOR CUR(I_BEGIN_DATE DATE, I_END_DATE DATE) IS SELECT CWBT_NAME, I.CWBT_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.CHECK_GRADE, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.CHECK_GRADE = I_CHECK_GRADE AND I.VESSEL_CODE = I_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND ( I_DEPT IS NULL OR I.DEPT = I_DEPT ) AND ( I_RESPONSIBLE_PERSON IS NULL OR I.RESPONSIBLE_PERSON = I_RESPONSIBLE_PERSON ) AND ( I_CHECK_NAME IS NULL OR ( I_CHECK_NAME IS NOT NULL AND I.CHECK_NAME LIKE \'%\' || I_CHECK_NAME || \'%\' ) ) AND I.DATA_TYPE = \'S\'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE \'TRUNCATE TABLE G_R_CHECK_INFO\'; IF I_CHECK_DATE IS NULL THEN DAT_BEGIN := TO_DATE( TO_CHAR(CURRENT_DATE, \'YYYY\') || \'-01-01\', \'YYYY-MM-DD\' ); DAT_END := TO_DATE( TO_CHAR(CURRENT_DATE, \'YYYY\') || \'-12-31\', \'YYYY-MM-DD\' ); ELSIF LENGTH(I_CHECK_DATE) = 4 THEN DAT_BEGIN := TO_DATE(I_CHECK_DATE || \'-01-01\', \'YYYY-MM-DD\'); DAT_END := TO_DATE(I_CHECK_DATE || \'-12-31\', \'YYYY-MM-DD\'); ELSE DAT_BEGIN := TO_DATE(I_CHECK_DATE || \'-01\', \'YYYY-MM-DD\'); DAT_END := (DATE_TRUNC(\'MONTH\', DAT_BEGIN) + INTERVAL \'1 MONTH - 1 day\')::DATE; END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO ( PID, CWBT_NAME, CWBT_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, CHECK_GRADE, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE ) VALUES ( REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.CWBT_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.CHECK_GRADE, DATE_TRUNC(\'MONTH\', REC.CHECK_DATE), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE ); END IF; SELECT CASE I_CHECK_GRADE WHEN \'A\' THEN CAST(TO_CHAR(REC.CHECK_DATE, \'DD\') AS INTEGER) WHEN \'B\' THEN CAST( TO_CHAR( GET_1ST_M( REC.CHECK_DATE, CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN \'YY\' ELSE \'MM\' END ), CASE WHEN LENGTH(I_CHECK_DATE) = 4 THEN \'WW\' ELSE \'W\' END ) AS INTEGER ) WHEN \'C\' THEN CAST(TO_CHAR(REC.CHECK_DATE, \'MM\') AS INTEGER) END INTO VAR_SUFFIX; EXECUTE \'UPDATE G_R_CHECK_INFO I SET N\' || VAR_SUFFIX || \' = $1 WHERE I.PID = $2\' USING CASE REC.CHECK_RESULT WHEN \'0\' THEN \'√\' WHEN \'1\' THEN \'×\' WHEN \'2\' THEN \'O\' WHEN \'3\' THEN \'—\' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = \'0336\'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE NOTICE \'%\', SQLERRM; END; $BODY$ LANGUAGE plpgsql;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:39:00.372400] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:39:00.372400] [22] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:39:00.372400] [22] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:39:00.372400] [22] hybrid Eval Case Final Result: True
[2025-06-12 17:39:00.373920] 
--- Case: 23 ---
[2025-06-12 17:39:00.375438] [23] Case Run 1/1
[2025-06-12 17:39:00.376574] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from Oracle syntax to PG syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
CREATE OR REPLACE PROCEDURE "SP_FEE_CSBC_HOUR_JOB" IS V_FLAG varchar2(50); V_HOUR VARCHAR2(50); BEGIN select open_mode into V_FLAG from v$database; SELECT TO_CHAR(SYSDATE,'HH24') INTO V_HOUR FROM DUAL; IF V_FLAG = 'READ WRITE' AND (V_HOUR ='12') then P_LOG_EXCEPTION('开始时间:' || sysdate, 'SP_FEE_CSBC_HOUR_JOB'); commit; delete from fmm_csbc_middle_esti es where es.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_esti select * from vw_csbc_middle_esti es where es.audit_date>=trunc(sysdate); delete from FMM_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=trunc(sysdate); insert into FMM_CSBC_RBT_MIDDLE_ESTI select * from VW_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=trunc(sysdate); commit; delete from FMM_CSBC_MAINTENANCE_CONSUME mc where exists (select 1 from VW_CSBC_MAINTENANCE_CONSUME mc2 where mc2.BIZ_UUID = mc.biz_uuid and mc2.update_time>=trunc(sysdate)); insert into FMM_CSBC_MAINTENANCE_CONSUME select * from VW_CSBC_MAINTENANCE_CONSUME mc where mc.update_time>=trunc(sysdate); delete from fmm_csbc_maintenance_esti_rpt es where exists (select 1 from vw_csbc_maintenance_esti_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=trunc(sysdate)); insert into fmm_csbc_maintenance_esti_rpt select * from vw_csbc_maintenance_esti_rpt es where es.update_time>=trunc(sysdate); delete from Fmm_Csbc_Maintenance_Invo_Rp5 es where exists (select 1 from vw_Csbc_Maintenance_Invo_Rp5 es2 where es2.FEE_INVOICE_ID = es.FEE_INVOICE_ID and es2.update_time>=trunc(sysdate)); insert into Fmm_Csbc_Maintenance_Invo_Rp5 select * from vw_Csbc_Maintenance_Invo_Rp5 es where es.update_time>=trunc(sysdate); delete from FMM_csbc_maintenance_expec_rpt es where exists (select 1 from vw_csbc_maintenance_expec_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=trunc(sysdate)); insert into FMM_csbc_maintenance_expec_rpt select * from vw_csbc_maintenance_expec_rpt es where es.update_time>=trunc(sysdate); commit; delete from fmm_csbc_middle_estt2 tt where tt.process_code ='INV_CX' and tt.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_estt2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN ES.BASE_AMOUNT>0 THEN -1 ELSE 1 END) *FN_GET_CSBC_FEE_CHARGE(es.rec_uuid,es.db_table,es.vessel_code), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es where process_code ='INV_CX' and es.audit_date>=trunc(sysdate); commit; delete from fmm_csbc_middle_esti es where es.process_code ='INV_CX'; insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_estt2 fc WHERE FC.process_code ='INV_CX'; commit; delete from fmm_csbc_middle_esti3 tt where tt.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, nvl(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es left join fmm_csbc_middle_esti es2 on FN_GET_CSBC_EST_CHARGE_AP(es.rec_uuid||es.apply_no)= es2.rec_uuid||es2.apply_no where es.base_amount<0 and es.process_code ='EST' and es.audit_date>=trunc(sysdate); delete from fmm_csbc_middle_esti es where base_amount<0 and es.process_code ='EST'; insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_esti3 fc; commit; EXECUTE IMMEDIATE 'truncate table fmm_csbc_rbt_middle_esti2'; insert into fmm_csbc_rbt_middle_esti2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN es.DB_TABLE ='SJ11_F' THEN -1 ELSE 1 END)* FN_GET_CSBC_FEE_CHARGE_AP(es.rec_uuid,replace(es.db_table,'_F',''),nvl(vv.corporate_code,vv.vessel_code),ES.APPLY_NO), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es inner join vop_vessel vv on es.vessel_code = vv.vessel_code where process_code ='INV_CX' and nvl(es.sap_imp_status,'T') <>'F'; commit; delete from fmm_csbc_rbt_middle_esti es where es.process_code ='INV_CX' and nvl(es.sap_imp_status,'T') <>'F'; insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti2 fc; commit; EXECUTE IMMEDIATE 'truncate table fmm_csbc_rbt_middle_esti3'; insert into fmm_csbc_rbt_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, nvl(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es left join fmm_csbc_rbt_middle_esti es2 on FN_GET_CSBC_EST_RBT_AP(ES.REC_UUID||ES.APPLY_NO||ES.BASE_AMOUNT)= es2.rec_uuid||es2.apply_no||es2.base_amount where es.base_amount<0 and es.process_code ='EST'; delete from fmm_csbc_rbt_middle_esti es where base_amount<0 and es.process_code ='EST'; insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti3 fc; commit; EXECUTE IMMEDIATE 'truncate table FMM_CSBC_MAINTENANCE_ESTI_MID'; INSERT INTO FMM_CSBC_MAINTENANCE_ESTI_MID SELECT * FROM VW_CSBC_MAINTENANCE_ESTI_MID; COMMIT; DELETE FROM FMM_CSBC_MAINTENANCE_TZ_DETAIL MD WHERE MD.UPDATE_TIME>=TRUNC(SYSDATE); INSERT INTO FMM_CSBC_MAINTENANCE_TZ_DETAIL select * from VW_CSBC_MAINTENANCE_TZ_DETAIL WHERE UPDATE_TIME>=TRUNC(SYSDATE); P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || sysdate, 'SP_FEE_CSBC_HOUR_JOB'); COMMIT; delete from fmm_maintenance_expec_rpt WHERE RELATED_ID IN (SELECT RELATED_ID FROM vw_fmm_maintenance_expec_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_expec_rpt select * from vw_fmm_maintenance_expec_rp0 where trunc(update_time) = trunc(sysdate); commit; delete FROM FMM_MAINTENANCE_ESTI_RPT WHERE RELATED_ID IN (SELECT RELATED_ID FROM VW_FMM_MAINTENANCE_ESTI_RP0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_ESTI_RPT select * from VW_FMM_MAINTENANCE_ESTI_RP0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_fee_payee pay where (order_no,payee,vessel_code) in (select order_no,payee,vessel_code from vw_fmm_maintenance_fee_payee0 where trunc(updated_dtm_loc) = trunc(sysdate)); insert into fmm_maintenance_fee_payee select * from vw_fmm_maintenance_fee_payee0 where trunc(updated_dtm_loc) = trunc(sysdate); commit; delete from fmm_maintenance_fee_payee f where (NVL(F.ORDER_NO, 'AAA'),F.VESSEL_CODE) in (select apply_no,vessel_code from VW_FMM_MAINTENANCE_NO_PAYALL) ; delete from FMM_MAINTENANCE_INVOICE_DEL where fee_invoice_id in (select fee_invoice_id from VW_FMM_MAINTENANCE_INVOICE_DE0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_INVOICE_DEL select * from VW_FMM_MAINTENANCE_INVOICE_DE0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_invoice_rpt where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_invoice_rpt select * from vw_fmm_maintenance_invoice_rp0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_invoice_rp5 where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp6 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_invoice_rp5 select * from vw_fmm_maintenance_invoice_rp6 where trunc(update_time) = trunc(sysdate); commit; delete from FMM_MAINTENANCE_ORDER_RPT where RELATED_ID in (select RELATED_ID from VW_FMM_MAINTENANCE_ORDER_RP0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_ORDER_RPT select * from VW_FMM_MAINTENANCE_ORDER_RP0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_supply_rpt where RELATED_ID in (select RELATED_ID from vw_fmm_maintenance_supply_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_supply_rpt select * from vw_fmm_maintenance_supply_rp0 where trunc(update_time) = trunc(sysdate); commit; P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间2:' || sysdate, 'SP_FEE_CSBC_HOUR_JOB'); commit; END IF; END SP_FEE_CSBC_HOUR_JOB;

Translated SQL (PG):

[2025-06-12 17:39:00.379148] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE "SP_FEE_CSBC_HOUR_JOB" IS V_FLAG varchar2(50); V_HOUR VARCHAR2(50); BEGIN select open_mode into V_FLAG from v$database; SELECT TO_CHAR(SYSDATE,\'HH24\') INTO V_HOUR FROM DUAL; IF V_FLAG = \'READ WRITE\' AND (V_HOUR =\'12\') then P_LOG_EXCEPTION(\'开始时间:\' || sysdate, \'SP_FEE_CSBC_HOUR_JOB\'); commit; delete from fmm_csbc_middle_esti es where es.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_esti select * from vw_csbc_middle_esti es where es.audit_date>=trunc(sysdate); delete from FMM_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=trunc(sysdate); insert into FMM_CSBC_RBT_MIDDLE_ESTI select * from VW_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=trunc(sysdate); commit; delete from FMM_CSBC_MAINTENANCE_CONSUME mc where exists (select 1 from VW_CSBC_MAINTENANCE_CONSUME mc2 where mc2.BIZ_UUID = mc.biz_uuid and mc2.update_time>=trunc(sysdate)); insert into FMM_CSBC_MAINTENANCE_CONSUME select * from VW_CSBC_MAINTENANCE_CONSUME mc where mc.update_time>=trunc(sysdate); delete from fmm_csbc_maintenance_esti_rpt es where exists (select 1 from vw_csbc_maintenance_esti_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=trunc(sysdate)); insert into fmm_csbc_maintenance_esti_rpt select * from vw_csbc_maintenance_esti_rpt es where es.update_time>=trunc(sysdate); delete from Fmm_Csbc_Maintenance_Invo_Rp5 es where exists (select 1 from vw_Csbc_Maintenance_Invo_Rp5 es2 where es2.FEE_INVOICE_ID = es.FEE_INVOICE_ID and es2.update_time>=trunc(sysdate)); insert into Fmm_Csbc_Maintenance_Invo_Rp5 select * from vw_Csbc_Maintenance_Invo_Rp5 es where es.update_time>=trunc(sysdate); delete from FMM_csbc_maintenance_expec_rpt es where exists (select 1 from vw_csbc_maintenance_expec_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=trunc(sysdate)); insert into FMM_csbc_maintenance_expec_rpt select * from vw_csbc_maintenance_expec_rpt es where es.update_time>=trunc(sysdate); commit; delete from fmm_csbc_middle_estt2 tt where tt.process_code =\'INV_CX\' and tt.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_estt2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN ES.BASE_AMOUNT>0 THEN -1 ELSE 1 END) *FN_GET_CSBC_FEE_CHARGE(es.rec_uuid,es.db_table,es.vessel_code), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es where process_code =\'INV_CX\' and es.audit_date>=trunc(sysdate); commit; delete from fmm_csbc_middle_esti es where es.process_code =\'INV_CX\'; insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_estt2 fc WHERE FC.process_code =\'INV_CX\'; commit; delete from fmm_csbc_middle_esti3 tt where tt.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, nvl(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es left join fmm_csbc_middle_esti es2 on FN_GET_CSBC_EST_CHARGE_AP(es.rec_uuid||es.apply_no)= es2.rec_uuid||es2.apply_no where es.base_amount<0 and es.process_code =\'EST\' and es.audit_date>=trunc(sysdate); delete from fmm_csbc_middle_esti es where base_amount<0 and es.process_code =\'EST\'; insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_esti3 fc; commit; EXECUTE IMMEDIATE \'truncate table fmm_csbc_rbt_middle_esti2\'; insert into fmm_csbc_rbt_middle_esti2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN es.DB_TABLE =\'SJ11_F\' THEN -1 ELSE 1 END)* FN_GET_CSBC_FEE_CHARGE_AP(es.rec_uuid,replace(es.db_table,\'_F\',\'\'),nvl(vv.corporate_code,vv.vessel_code),ES.APPLY_NO), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es inner join vop_vessel vv on es.vessel_code = vv.vessel_code where process_code =\'INV_CX\' and nvl(es.sap_imp_status,\'T\') <>\'F\'; commit; delete from fmm_csbc_rbt_middle_esti es where es.process_code =\'INV_CX\' and nvl(es.sap_imp_status,\'T\') <>\'F\'; insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti2 fc; commit; EXECUTE IMMEDIATE \'truncate table fmm_csbc_rbt_middle_esti3\'; insert into fmm_csbc_rbt_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, nvl(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es left join fmm_csbc_rbt_middle_esti es2 on FN_GET_CSBC_EST_RBT_AP(ES.REC_UUID||ES.APPLY_NO||ES.BASE_AMOUNT)= es2.rec_uuid||es2.apply_no||es2.base_amount where es.base_amount<0 and es.process_code =\'EST\'; delete from fmm_csbc_rbt_middle_esti es where base_amount<0 and es.process_code =\'EST\'; insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti3 fc; commit; EXECUTE IMMEDIATE \'truncate table FMM_CSBC_MAINTENANCE_ESTI_MID\'; INSERT INTO FMM_CSBC_MAINTENANCE_ESTI_MID SELECT * FROM VW_CSBC_MAINTENANCE_ESTI_MID; COMMIT; DELETE FROM FMM_CSBC_MAINTENANCE_TZ_DETAIL MD WHERE MD.UPDATE_TIME>=TRUNC(SYSDATE); INSERT INTO FMM_CSBC_MAINTENANCE_TZ_DETAIL select * from VW_CSBC_MAINTENANCE_TZ_DETAIL WHERE UPDATE_TIME>=TRUNC(SYSDATE); P_LOG_EXCEPTION(SQLCODE || SQLERRM || \'insert 结束时间:\' || sysdate, \'SP_FEE_CSBC_HOUR_JOB\'); COMMIT; delete from fmm_maintenance_expec_rpt WHERE RELATED_ID IN (SELECT RELATED_ID FROM vw_fmm_maintenance_expec_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_expec_rpt select * from vw_fmm_maintenance_expec_rp0 where trunc(update_time) = trunc(sysdate); commit; delete FROM FMM_MAINTENANCE_ESTI_RPT WHERE RELATED_ID IN (SELECT RELATED_ID FROM VW_FMM_MAINTENANCE_ESTI_RP0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_ESTI_RPT select * from VW_FMM_MAINTENANCE_ESTI_RP0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_fee_payee pay where (order_no,payee,vessel_code) in (select order_no,payee,vessel_code from vw_fmm_maintenance_fee_payee0 where trunc(updated_dtm_loc) = trunc(sysdate)); insert into fmm_maintenance_fee_payee select * from vw_fmm_maintenance_fee_payee0 where trunc(updated_dtm_loc) = trunc(sysdate); commit; delete from fmm_maintenance_fee_payee f where (NVL(F.ORDER_NO, \'AAA\'),F.VESSEL_CODE) in (select apply_no,vessel_code from VW_FMM_MAINTENANCE_NO_PAYALL) ; delete from FMM_MAINTENANCE_INVOICE_DEL where fee_invoice_id in (select fee_invoice_id from VW_FMM_MAINTENANCE_INVOICE_DE0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_INVOICE_DEL select * from VW_FMM_MAINTENANCE_INVOICE_DE0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_invoice_rpt where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_invoice_rpt select * from vw_fmm_maintenance_invoice_rp0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_invoice_rp5 where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp6 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_invoice_rp5 select * from vw_fmm_maintenance_invoice_rp6 where trunc(update_time) = trunc(sysdate); commit; delete from FMM_MAINTENANCE_ORDER_RPT where RELATED_ID in (select RELATED_ID from VW_FMM_MAINTENANCE_ORDER_RP0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_ORDER_RPT select * from VW_FMM_MAINTENANCE_ORDER_RP0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_supply_rpt where RELATED_ID in (select RELATED_ID from vw_fmm_maintenance_supply_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_supply_rpt select * from vw_fmm_maintenance_supply_rp0 where trunc(update_time) = trunc(sysdate); commit; P_LOG_EXCEPTION(SQLCODE || SQLERRM || \'insert 结束时间2:\' || sysdate, \'SP_FEE_CSBC_HOUR_JOB\'); commit; END IF; END SP_FEE_CSBC_HOUR_JOB;\n\nTranslated SQL (PG):\n'}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:41:31.368824] [Model Answer]: CREATE OR REPLACE PROCEDURE "SP_FEE_CSBC_HOUR_JOB"() AS $$
DECLARE 
    V_FLAG varchar(50); 
    V_HOUR VARCHAR(50); 
BEGIN 
    select open_mode into V_FLAG from pg_database where datname = current_database(); 
    SELECT TO_CHAR(CURRENT_TIMESTAMP,'HH24') INTO V_HOUR; 
    IF V_FLAG = 'READ WRITE' AND (V_HOUR ='12') then 
        PERFORM P_LOG_EXCEPTION('开始时间:' || CURRENT_TIMESTAMP, 'SP_FEE_CSBC_HOUR_JOB'); 
        commit; 
        delete from fmm_csbc_middle_esti es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into fmm_csbc_middle_esti select * from vw_csbc_middle_esti es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from FMM_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into FMM_CSBC_RBT_MIDDLE_ESTI select * from VW_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from FMM_CSBC_MAINTENANCE_CONSUME mc where exists (select 1 from VW_CSBC_MAINTENANCE_CONSUME mc2 where mc2.BIZ_UUID = mc.biz_uuid and mc2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_CSBC_MAINTENANCE_CONSUME select * from VW_CSBC_MAINTENANCE_CONSUME mc where mc.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from fmm_csbc_maintenance_esti_rpt es where exists (select 1 from vw_csbc_maintenance_esti_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_csbc_maintenance_esti_rpt select * from vw_csbc_maintenance_esti_rpt es where es.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from Fmm_Csbc_Maintenance_Invo_Rp5 es where exists (select 1 from vw_Csbc_Maintenance_Invo_Rp5 es2 where es2.FEE_INVOICE_ID = es.FEE_INVOICE_ID and es2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into Fmm_Csbc_Maintenance_Invo_Rp5 select * from vw_Csbc_Maintenance_Invo_Rp5 es where es.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from FMM_csbc_maintenance_expec_rpt es where exists (select 1 from vw_csbc_maintenance_expec_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_csbc_maintenance_expec_rpt select * from vw_csbc_maintenance_expec_rpt es where es.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_csbc_middle_estt2 tt where tt.process_code ='INV_CX' and tt.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into fmm_csbc_middle_estt2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN ES.BASE_AMOUNT>0 THEN -1 ELSE 1 END) *FN_GET_CSBC_FEE_CHARGE(es.rec_uuid,es.db_table,es.vessel_code), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es where process_code ='INV_CX' and es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_csbc_middle_esti es where es.process_code ='INV_CX'; 
        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_estt2 fc WHERE FC.process_code ='INV_CX'; 
        commit; 
        delete from fmm_csbc_middle_esti3 tt where tt.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into fmm_csbc_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es left join fmm_csbc_middle_esti es2 on FN_GET_CSBC_EST_CHARGE_AP(es.rec_uuid||es.apply_no)= es2.rec_uuid||es2.apply_no where es.base_amount<0 and es.process_code ='EST' and es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from fmm_csbc_middle_esti es where base_amount<0 and es.process_code ='EST'; 
        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_esti3 fc; 
        commit; 
        EXECUTE 'truncate table fmm_csbc_rbt_middle_esti2'; 
        insert into fmm_csbc_rbt_middle_esti2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN es.DB_TABLE ='SJ11_F' THEN -1 ELSE 1 END)* FN_GET_CSBC_FEE_CHARGE_AP(es.rec_uuid,replace(es.db_table,'_F',''),COALESCE(vv.corporate_code,vv.vessel_code),ES.APPLY_NO), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es inner join vop_vessel vv on es.vessel_code = vv.vessel_code where process_code ='INV_CX' and COALESCE(es.sap_imp_status,'T') <>'F'; 
        commit; 
        delete from fmm_csbc_rbt_middle_esti es where es.process_code ='INV_CX' and COALESCE(es.sap_imp_status,'T') <>'F'; 
        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti2 fc; 
        commit; 
        EXECUTE 'truncate table fmm_csbc_rbt_middle_esti3'; 
        insert into fmm_csbc_rbt_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es left join fmm_csbc_rbt_middle_esti es2 on FN_GET_CSBC_EST_RBT_AP(ES.REC_UUID||ES.APPLY_NO||ES.BASE_AMOUNT)= es2.rec_uuid||es2.apply_no||es2.base_amount where es.base_amount<0 and es.process_code ='EST'; 
        delete from fmm_csbc_rbt_middle_esti es where base_amount<0 and es.process_code ='EST'; 
        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti3 fc; 
        commit; 
        EXECUTE 'truncate table FMM_CSBC_MAINTENANCE_ESTI_MID'; 
        INSERT INTO FMM_CSBC_MAINTENANCE_ESTI_MID SELECT * FROM VW_CSBC_MAINTENANCE_ESTI_MID; 
        COMMIT; 
        DELETE FROM FMM_CSBC_MAINTENANCE_TZ_DETAIL MD WHERE MD.UPDATE_TIME>=date_trunc('day', CURRENT_TIMESTAMP); 
        INSERT INTO FMM_CSBC_MAINTENANCE_TZ_DETAIL select * from VW_CSBC_MAINTENANCE_TZ_DETAIL WHERE UPDATE_TIME>=date_trunc('day', CURRENT_TIMESTAMP); 
        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || 'insert 结束时间:' || CURRENT_TIMESTAMP, 'SP_FEE_CSBC_HOUR_JOB'); 
        COMMIT; 
        delete from fmm_maintenance_expec_rpt WHERE RELATED_ID IN (SELECT RELATED_ID FROM vw_fmm_maintenance_expec_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_expec_rpt select * from vw_fmm_maintenance_expec_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete FROM FMM_MAINTENANCE_ESTI_RPT WHERE RELATED_ID IN (SELECT RELATED_ID FROM VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_MAINTENANCE_ESTI_RPT select * from VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_fee_payee pay where (order_no,payee,vessel_code) in (select order_no,payee,vessel_code from vw_fmm_maintenance_fee_payee0 where date_trunc('day', updated_dtm_loc) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_fee_payee select * from vw_fmm_maintenance_fee_payee0 where date_trunc('day', updated_dtm_loc) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_fee_payee f where (COALESCE(F.ORDER_NO, 'AAA'),F.VESSEL_CODE) in (select apply_no,vessel_code from VW_FMM_MAINTENANCE_NO_PAYALL) ; 
        delete from FMM_MAINTENANCE_INVOICE_DEL where fee_invoice_id in (select fee_invoice_id from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_MAINTENANCE_INVOICE_DEL select * from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_invoice_rpt where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_invoice_rpt select * from vw_fmm_maintenance_invoice_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_invoice_rp5 where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp6 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_invoice_rp5 select * from vw_fmm_maintenance_invoice_rp6 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from FMM_MAINTENANCE_ORDER_RPT where RELATED_ID in (select RELATED_ID from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_MAINTENANCE_ORDER_RPT select * from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_supply_rpt where RELATED_ID in (select RELATED_ID from vw_fmm_maintenance_supply_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_supply_rpt select * from vw_fmm_maintenance_supply_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || 'insert 结束时间2:' || CURRENT_TIMESTAMP, 'SP_FEE_CSBC_HOUR_JOB'); 
        commit; 
    END IF; 
END;
$$ LANGUAGE plpgsql;
[2025-06-12 17:41:31.375006] [23] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:41:31.375006] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a PG database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE "SP_FEE_CSBC_HOUR_JOB"() AS $$
DECLARE 
    V_FLAG varchar(50); 
    V_HOUR VARCHAR(50); 
BEGIN 
    select open_mode into V_FLAG from pg_database where datname = current_database(); 
    SELECT TO_CHAR(CURRENT_TIMESTAMP,'HH24') INTO V_HOUR; 
    IF V_FLAG = 'READ WRITE' AND (V_HOUR ='12') then 
        PERFORM P_LOG_EXCEPTION('开始时间:' || CURRENT_TIMESTAMP, 'SP_FEE_CSBC_HOUR_JOB'); 
        commit; 
        delete from fmm_csbc_middle_esti es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into fmm_csbc_middle_esti select * from vw_csbc_middle_esti es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from FMM_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into FMM_CSBC_RBT_MIDDLE_ESTI select * from VW_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from FMM_CSBC_MAINTENANCE_CONSUME mc where exists (select 1 from VW_CSBC_MAINTENANCE_CONSUME mc2 where mc2.BIZ_UUID = mc.biz_uuid and mc2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_CSBC_MAINTENANCE_CONSUME select * from VW_CSBC_MAINTENANCE_CONSUME mc where mc.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from fmm_csbc_maintenance_esti_rpt es where exists (select 1 from vw_csbc_maintenance_esti_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_csbc_maintenance_esti_rpt select * from vw_csbc_maintenance_esti_rpt es where es.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from Fmm_Csbc_Maintenance_Invo_Rp5 es where exists (select 1 from vw_Csbc_Maintenance_Invo_Rp5 es2 where es2.FEE_INVOICE_ID = es.FEE_INVOICE_ID and es2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into Fmm_Csbc_Maintenance_Invo_Rp5 select * from vw_Csbc_Maintenance_Invo_Rp5 es where es.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from FMM_csbc_maintenance_expec_rpt es where exists (select 1 from vw_csbc_maintenance_expec_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_csbc_maintenance_expec_rpt select * from vw_csbc_maintenance_expec_rpt es where es.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_csbc_middle_estt2 tt where tt.process_code ='INV_CX' and tt.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into fmm_csbc_middle_estt2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN ES.BASE_AMOUNT>0 THEN -1 ELSE 1 END) *FN_GET_CSBC_FEE_CHARGE(es.rec_uuid,es.db_table,es.vessel_code), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es where process_code ='INV_CX' and es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_csbc_middle_esti es where es.process_code ='INV_CX'; 
        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_estt2 fc WHERE FC.process_code ='INV_CX'; 
        commit; 
        delete from fmm_csbc_middle_esti3 tt where tt.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into fmm_csbc_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es left join fmm_csbc_middle_esti es2 on FN_GET_CSBC_EST_CHARGE_AP(es.rec_uuid||es.apply_no)= es2.rec_uuid||es2.apply_no where es.base_amount<0 and es.process_code ='EST' and es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from fmm_csbc_middle_esti es where base_amount<0 and es.process_code ='EST'; 
        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_esti3 fc; 
        commit; 
        EXECUTE 'truncate table fmm_csbc_rbt_middle_esti2'; 
        insert into fmm_csbc_rbt_middle_esti2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN es.DB_TABLE ='SJ11_F' THEN -1 ELSE 1 END)* FN_GET_CSBC_FEE_CHARGE_AP(es.rec_uuid,replace(es.db_table,'_F',''),COALESCE(vv.corporate_code,vv.vessel_code),ES.APPLY_NO), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es inner join vop_vessel vv on es.vessel_code = vv.vessel_code where process_code ='INV_CX' and COALESCE(es.sap_imp_status,'T') <>'F'; 
        commit; 
        delete from fmm_csbc_rbt_middle_esti es where es.process_code ='INV_CX' and COALESCE(es.sap_imp_status,'T') <>'F'; 
        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti2 fc; 
        commit; 
        EXECUTE 'truncate table fmm_csbc_rbt_middle_esti3'; 
        insert into fmm_csbc_rbt_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es left join fmm_csbc_rbt_middle_esti es2 on FN_GET_CSBC_EST_RBT_AP(ES.REC_UUID||ES.APPLY_NO||ES.BASE_AMOUNT)= es2.rec_uuid||es2.apply_no||es2.base_amount where es.base_amount<0 and es.process_code ='EST'; 
        delete from fmm_csbc_rbt_middle_esti es where base_amount<0 and es.process_code ='EST'; 
        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti3 fc; 
        commit; 
        EXECUTE 'truncate table FMM_CSBC_MAINTENANCE_ESTI_MID'; 
        INSERT INTO FMM_CSBC_MAINTENANCE_ESTI_MID SELECT * FROM VW_CSBC_MAINTENANCE_ESTI_MID; 
        COMMIT; 
        DELETE FROM FMM_CSBC_MAINTENANCE_TZ_DETAIL MD WHERE MD.UPDATE_TIME>=date_trunc('day', CURRENT_TIMESTAMP); 
        INSERT INTO FMM_CSBC_MAINTENANCE_TZ_DETAIL select * from VW_CSBC_MAINTENANCE_TZ_DETAIL WHERE UPDATE_TIME>=date_trunc('day', CURRENT_TIMESTAMP); 
        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || 'insert 结束时间:' || CURRENT_TIMESTAMP, 'SP_FEE_CSBC_HOUR_JOB'); 
        COMMIT; 
        delete from fmm_maintenance_expec_rpt WHERE RELATED_ID IN (SELECT RELATED_ID FROM vw_fmm_maintenance_expec_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_expec_rpt select * from vw_fmm_maintenance_expec_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete FROM FMM_MAINTENANCE_ESTI_RPT WHERE RELATED_ID IN (SELECT RELATED_ID FROM VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_MAINTENANCE_ESTI_RPT select * from VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_fee_payee pay where (order_no,payee,vessel_code) in (select order_no,payee,vessel_code from vw_fmm_maintenance_fee_payee0 where date_trunc('day', updated_dtm_loc) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_fee_payee select * from vw_fmm_maintenance_fee_payee0 where date_trunc('day', updated_dtm_loc) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_fee_payee f where (COALESCE(F.ORDER_NO, 'AAA'),F.VESSEL_CODE) in (select apply_no,vessel_code from VW_FMM_MAINTENANCE_NO_PAYALL) ; 
        delete from FMM_MAINTENANCE_INVOICE_DEL where fee_invoice_id in (select fee_invoice_id from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_MAINTENANCE_INVOICE_DEL select * from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_invoice_rpt where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_invoice_rpt select * from vw_fmm_maintenance_invoice_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_invoice_rp5 where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp6 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_invoice_rp5 select * from vw_fmm_maintenance_invoice_rp6 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from FMM_MAINTENANCE_ORDER_RPT where RELATED_ID in (select RELATED_ID from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_MAINTENANCE_ORDER_RPT select * from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_supply_rpt where RELATED_ID in (select RELATED_ID from vw_fmm_maintenance_supply_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_supply_rpt select * from vw_fmm_maintenance_supply_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || 'insert 结束时间2:' || CURRENT_TIMESTAMP, 'SP_FEE_CSBC_HOUR_JOB'); 
        commit; 
    END IF; 
END;
$$ LANGUAGE plpgsql;

[2025-06-12 17:41:31.379156] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE "SP_FEE_CSBC_HOUR_JOB"() AS $$\nDECLARE \n    V_FLAG varchar(50); \n    V_HOUR VARCHAR(50); \nBEGIN \n    select open_mode into V_FLAG from pg_database where datname = current_database(); \n    SELECT TO_CHAR(CURRENT_TIMESTAMP,\'HH24\') INTO V_HOUR; \n    IF V_FLAG = \'READ WRITE\' AND (V_HOUR =\'12\') then \n        PERFORM P_LOG_EXCEPTION(\'开始时间:\' || CURRENT_TIMESTAMP, \'SP_FEE_CSBC_HOUR_JOB\'); \n        commit; \n        delete from fmm_csbc_middle_esti es where es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        insert into fmm_csbc_middle_esti select * from vw_csbc_middle_esti es where es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from FMM_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        insert into FMM_CSBC_RBT_MIDDLE_ESTI select * from VW_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from FMM_CSBC_MAINTENANCE_CONSUME mc where exists (select 1 from VW_CSBC_MAINTENANCE_CONSUME mc2 where mc2.BIZ_UUID = mc.biz_uuid and mc2.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_CSBC_MAINTENANCE_CONSUME select * from VW_CSBC_MAINTENANCE_CONSUME mc where mc.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from fmm_csbc_maintenance_esti_rpt es where exists (select 1 from vw_csbc_maintenance_esti_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_csbc_maintenance_esti_rpt select * from vw_csbc_maintenance_esti_rpt es where es.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from Fmm_Csbc_Maintenance_Invo_Rp5 es where exists (select 1 from vw_Csbc_Maintenance_Invo_Rp5 es2 where es2.FEE_INVOICE_ID = es.FEE_INVOICE_ID and es2.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into Fmm_Csbc_Maintenance_Invo_Rp5 select * from vw_Csbc_Maintenance_Invo_Rp5 es where es.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from FMM_csbc_maintenance_expec_rpt es where exists (select 1 from vw_csbc_maintenance_expec_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_csbc_maintenance_expec_rpt select * from vw_csbc_maintenance_expec_rpt es where es.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_csbc_middle_estt2 tt where tt.process_code =\'INV_CX\' and tt.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        insert into fmm_csbc_middle_estt2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN ES.BASE_AMOUNT>0 THEN -1 ELSE 1 END) *FN_GET_CSBC_FEE_CHARGE(es.rec_uuid,es.db_table,es.vessel_code), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es where process_code =\'INV_CX\' and es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_csbc_middle_esti es where es.process_code =\'INV_CX\'; \n        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_estt2 fc WHERE FC.process_code =\'INV_CX\'; \n        commit; \n        delete from fmm_csbc_middle_esti3 tt where tt.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        insert into fmm_csbc_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es left join fmm_csbc_middle_esti es2 on FN_GET_CSBC_EST_CHARGE_AP(es.rec_uuid||es.apply_no)= es2.rec_uuid||es2.apply_no where es.base_amount<0 and es.process_code =\'EST\' and es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from fmm_csbc_middle_esti es where base_amount<0 and es.process_code =\'EST\'; \n        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_esti3 fc; \n        commit; \n        EXECUTE \'truncate table fmm_csbc_rbt_middle_esti2\'; \n        insert into fmm_csbc_rbt_middle_esti2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN es.DB_TABLE =\'SJ11_F\' THEN -1 ELSE 1 END)* FN_GET_CSBC_FEE_CHARGE_AP(es.rec_uuid,replace(es.db_table,\'_F\',\'\'),COALESCE(vv.corporate_code,vv.vessel_code),ES.APPLY_NO), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es inner join vop_vessel vv on es.vessel_code = vv.vessel_code where process_code =\'INV_CX\' and COALESCE(es.sap_imp_status,\'T\') <>\'F\'; \n        commit; \n        delete from fmm_csbc_rbt_middle_esti es where es.process_code =\'INV_CX\' and COALESCE(es.sap_imp_status,\'T\') <>\'F\'; \n        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti2 fc; \n        commit; \n        EXECUTE \'truncate table fmm_csbc_rbt_middle_esti3\'; \n        insert into fmm_csbc_rbt_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es left join fmm_csbc_rbt_middle_esti es2 on FN_GET_CSBC_EST_RBT_AP(ES.REC_UUID||ES.APPLY_NO||ES.BASE_AMOUNT)= es2.rec_uuid||es2.apply_no||es2.base_amount where es.base_amount<0 and es.process_code =\'EST\'; \n        delete from fmm_csbc_rbt_middle_esti es where base_amount<0 and es.process_code =\'EST\'; \n        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti3 fc; \n        commit; \n        EXECUTE \'truncate table FMM_CSBC_MAINTENANCE_ESTI_MID\'; \n        INSERT INTO FMM_CSBC_MAINTENANCE_ESTI_MID SELECT * FROM VW_CSBC_MAINTENANCE_ESTI_MID; \n        COMMIT; \n        DELETE FROM FMM_CSBC_MAINTENANCE_TZ_DETAIL MD WHERE MD.UPDATE_TIME>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        INSERT INTO FMM_CSBC_MAINTENANCE_TZ_DETAIL select * from VW_CSBC_MAINTENANCE_TZ_DETAIL WHERE UPDATE_TIME>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || \'insert 结束时间:\' || CURRENT_TIMESTAMP, \'SP_FEE_CSBC_HOUR_JOB\'); \n        COMMIT; \n        delete from fmm_maintenance_expec_rpt WHERE RELATED_ID IN (SELECT RELATED_ID FROM vw_fmm_maintenance_expec_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_expec_rpt select * from vw_fmm_maintenance_expec_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete FROM FMM_MAINTENANCE_ESTI_RPT WHERE RELATED_ID IN (SELECT RELATED_ID FROM VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_MAINTENANCE_ESTI_RPT select * from VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_fee_payee pay where (order_no,payee,vessel_code) in (select order_no,payee,vessel_code from vw_fmm_maintenance_fee_payee0 where date_trunc(\'day\', updated_dtm_loc) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_fee_payee select * from vw_fmm_maintenance_fee_payee0 where date_trunc(\'day\', updated_dtm_loc) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_fee_payee f where (COALESCE(F.ORDER_NO, \'AAA\'),F.VESSEL_CODE) in (select apply_no,vessel_code from VW_FMM_MAINTENANCE_NO_PAYALL) ; \n        delete from FMM_MAINTENANCE_INVOICE_DEL where fee_invoice_id in (select fee_invoice_id from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_MAINTENANCE_INVOICE_DEL select * from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_invoice_rpt where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_invoice_rpt select * from vw_fmm_maintenance_invoice_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_invoice_rp5 where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp6 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_invoice_rp5 select * from vw_fmm_maintenance_invoice_rp6 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from FMM_MAINTENANCE_ORDER_RPT where RELATED_ID in (select RELATED_ID from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_MAINTENANCE_ORDER_RPT select * from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_supply_rpt where RELATED_ID in (select RELATED_ID from vw_fmm_maintenance_supply_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_supply_rpt select * from vw_fmm_maintenance_supply_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || \'insert 结束时间2:\' || CURRENT_TIMESTAMP, \'SP_FEE_CSBC_HOUR_JOB\'); \n        commit; \n    END IF; \nEND;\n$$ LANGUAGE plpgsql;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:41:35.938519] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:41:35.943716] [23] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:41:35.943716] [23] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:41:35.943716] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a PG database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE "SP_FEE_CSBC_HOUR_JOB"() AS $$
DECLARE 
    V_FLAG varchar(50); 
    V_HOUR VARCHAR(50); 
BEGIN 
    select open_mode into V_FLAG from pg_database where datname = current_database(); 
    SELECT TO_CHAR(CURRENT_TIMESTAMP,'HH24') INTO V_HOUR; 
    IF V_FLAG = 'READ WRITE' AND (V_HOUR ='12') then 
        PERFORM P_LOG_EXCEPTION('开始时间:' || CURRENT_TIMESTAMP, 'SP_FEE_CSBC_HOUR_JOB'); 
        commit; 
        delete from fmm_csbc_middle_esti es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into fmm_csbc_middle_esti select * from vw_csbc_middle_esti es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from FMM_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into FMM_CSBC_RBT_MIDDLE_ESTI select * from VW_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from FMM_CSBC_MAINTENANCE_CONSUME mc where exists (select 1 from VW_CSBC_MAINTENANCE_CONSUME mc2 where mc2.BIZ_UUID = mc.biz_uuid and mc2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_CSBC_MAINTENANCE_CONSUME select * from VW_CSBC_MAINTENANCE_CONSUME mc where mc.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from fmm_csbc_maintenance_esti_rpt es where exists (select 1 from vw_csbc_maintenance_esti_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_csbc_maintenance_esti_rpt select * from vw_csbc_maintenance_esti_rpt es where es.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from Fmm_Csbc_Maintenance_Invo_Rp5 es where exists (select 1 from vw_Csbc_Maintenance_Invo_Rp5 es2 where es2.FEE_INVOICE_ID = es.FEE_INVOICE_ID and es2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into Fmm_Csbc_Maintenance_Invo_Rp5 select * from vw_Csbc_Maintenance_Invo_Rp5 es where es.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from FMM_csbc_maintenance_expec_rpt es where exists (select 1 from vw_csbc_maintenance_expec_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_csbc_maintenance_expec_rpt select * from vw_csbc_maintenance_expec_rpt es where es.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_csbc_middle_estt2 tt where tt.process_code ='INV_CX' and tt.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into fmm_csbc_middle_estt2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN ES.BASE_AMOUNT>0 THEN -1 ELSE 1 END) *FN_GET_CSBC_FEE_CHARGE(es.rec_uuid,es.db_table,es.vessel_code), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es where process_code ='INV_CX' and es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_csbc_middle_esti es where es.process_code ='INV_CX'; 
        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_estt2 fc WHERE FC.process_code ='INV_CX'; 
        commit; 
        delete from fmm_csbc_middle_esti3 tt where tt.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into fmm_csbc_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es left join fmm_csbc_middle_esti es2 on FN_GET_CSBC_EST_CHARGE_AP(es.rec_uuid||es.apply_no)= es2.rec_uuid||es2.apply_no where es.base_amount<0 and es.process_code ='EST' and es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from fmm_csbc_middle_esti es where base_amount<0 and es.process_code ='EST'; 
        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_esti3 fc; 
        commit; 
        EXECUTE 'truncate table fmm_csbc_rbt_middle_esti2'; 
        insert into fmm_csbc_rbt_middle_esti2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN es.DB_TABLE ='SJ11_F' THEN -1 ELSE 1 END)* FN_GET_CSBC_FEE_CHARGE_AP(es.rec_uuid,replace(es.db_table,'_F',''),COALESCE(vv.corporate_code,vv.vessel_code),ES.APPLY_NO), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es inner join vop_vessel vv on es.vessel_code = vv.vessel_code where process_code ='INV_CX' and COALESCE(es.sap_imp_status,'T') <>'F'; 
        commit; 
        delete from fmm_csbc_rbt_middle_esti es where es.process_code ='INV_CX' and COALESCE(es.sap_imp_status,'T') <>'F'; 
        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti2 fc; 
        commit; 
        EXECUTE 'truncate table fmm_csbc_rbt_middle_esti3'; 
        insert into fmm_csbc_rbt_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es left join fmm_csbc_rbt_middle_esti es2 on FN_GET_CSBC_EST_RBT_AP(ES.REC_UUID||ES.APPLY_NO||ES.BASE_AMOUNT)= es2.rec_uuid||es2.apply_no||es2.base_amount where es.base_amount<0 and es.process_code ='EST'; 
        delete from fmm_csbc_rbt_middle_esti es where base_amount<0 and es.process_code ='EST'; 
        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti3 fc; 
        commit; 
        EXECUTE 'truncate table FMM_CSBC_MAINTENANCE_ESTI_MID'; 
        INSERT INTO FMM_CSBC_MAINTENANCE_ESTI_MID SELECT * FROM VW_CSBC_MAINTENANCE_ESTI_MID; 
        COMMIT; 
        DELETE FROM FMM_CSBC_MAINTENANCE_TZ_DETAIL MD WHERE MD.UPDATE_TIME>=date_trunc('day', CURRENT_TIMESTAMP); 
        INSERT INTO FMM_CSBC_MAINTENANCE_TZ_DETAIL select * from VW_CSBC_MAINTENANCE_TZ_DETAIL WHERE UPDATE_TIME>=date_trunc('day', CURRENT_TIMESTAMP); 
        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || 'insert 结束时间:' || CURRENT_TIMESTAMP, 'SP_FEE_CSBC_HOUR_JOB'); 
        COMMIT; 
        delete from fmm_maintenance_expec_rpt WHERE RELATED_ID IN (SELECT RELATED_ID FROM vw_fmm_maintenance_expec_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_expec_rpt select * from vw_fmm_maintenance_expec_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete FROM FMM_MAINTENANCE_ESTI_RPT WHERE RELATED_ID IN (SELECT RELATED_ID FROM VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_MAINTENANCE_ESTI_RPT select * from VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_fee_payee pay where (order_no,payee,vessel_code) in (select order_no,payee,vessel_code from vw_fmm_maintenance_fee_payee0 where date_trunc('day', updated_dtm_loc) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_fee_payee select * from vw_fmm_maintenance_fee_payee0 where date_trunc('day', updated_dtm_loc) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_fee_payee f where (COALESCE(F.ORDER_NO, 'AAA'),F.VESSEL_CODE) in (select apply_no,vessel_code from VW_FMM_MAINTENANCE_NO_PAYALL) ; 
        delete from FMM_MAINTENANCE_INVOICE_DEL where fee_invoice_id in (select fee_invoice_id from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_MAINTENANCE_INVOICE_DEL select * from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_invoice_rpt where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_invoice_rpt select * from vw_fmm_maintenance_invoice_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_invoice_rp5 where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp6 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_invoice_rp5 select * from vw_fmm_maintenance_invoice_rp6 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from FMM_MAINTENANCE_ORDER_RPT where RELATED_ID in (select RELATED_ID from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_MAINTENANCE_ORDER_RPT select * from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_supply_rpt where RELATED_ID in (select RELATED_ID from vw_fmm_maintenance_supply_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_supply_rpt select * from vw_fmm_maintenance_supply_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || 'insert 结束时间2:' || CURRENT_TIMESTAMP, 'SP_FEE_CSBC_HOUR_JOB'); 
        commit; 
    END IF; 
END;
$$ LANGUAGE plpgsql;

[2025-06-12 17:41:35.946723] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE "SP_FEE_CSBC_HOUR_JOB"() AS $$\nDECLARE \n    V_FLAG varchar(50); \n    V_HOUR VARCHAR(50); \nBEGIN \n    select open_mode into V_FLAG from pg_database where datname = current_database(); \n    SELECT TO_CHAR(CURRENT_TIMESTAMP,\'HH24\') INTO V_HOUR; \n    IF V_FLAG = \'READ WRITE\' AND (V_HOUR =\'12\') then \n        PERFORM P_LOG_EXCEPTION(\'开始时间:\' || CURRENT_TIMESTAMP, \'SP_FEE_CSBC_HOUR_JOB\'); \n        commit; \n        delete from fmm_csbc_middle_esti es where es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        insert into fmm_csbc_middle_esti select * from vw_csbc_middle_esti es where es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from FMM_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        insert into FMM_CSBC_RBT_MIDDLE_ESTI select * from VW_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from FMM_CSBC_MAINTENANCE_CONSUME mc where exists (select 1 from VW_CSBC_MAINTENANCE_CONSUME mc2 where mc2.BIZ_UUID = mc.biz_uuid and mc2.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_CSBC_MAINTENANCE_CONSUME select * from VW_CSBC_MAINTENANCE_CONSUME mc where mc.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from fmm_csbc_maintenance_esti_rpt es where exists (select 1 from vw_csbc_maintenance_esti_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_csbc_maintenance_esti_rpt select * from vw_csbc_maintenance_esti_rpt es where es.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from Fmm_Csbc_Maintenance_Invo_Rp5 es where exists (select 1 from vw_Csbc_Maintenance_Invo_Rp5 es2 where es2.FEE_INVOICE_ID = es.FEE_INVOICE_ID and es2.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into Fmm_Csbc_Maintenance_Invo_Rp5 select * from vw_Csbc_Maintenance_Invo_Rp5 es where es.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from FMM_csbc_maintenance_expec_rpt es where exists (select 1 from vw_csbc_maintenance_expec_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_csbc_maintenance_expec_rpt select * from vw_csbc_maintenance_expec_rpt es where es.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_csbc_middle_estt2 tt where tt.process_code =\'INV_CX\' and tt.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        insert into fmm_csbc_middle_estt2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN ES.BASE_AMOUNT>0 THEN -1 ELSE 1 END) *FN_GET_CSBC_FEE_CHARGE(es.rec_uuid,es.db_table,es.vessel_code), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es where process_code =\'INV_CX\' and es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_csbc_middle_esti es where es.process_code =\'INV_CX\'; \n        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_estt2 fc WHERE FC.process_code =\'INV_CX\'; \n        commit; \n        delete from fmm_csbc_middle_esti3 tt where tt.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        insert into fmm_csbc_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es left join fmm_csbc_middle_esti es2 on FN_GET_CSBC_EST_CHARGE_AP(es.rec_uuid||es.apply_no)= es2.rec_uuid||es2.apply_no where es.base_amount<0 and es.process_code =\'EST\' and es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from fmm_csbc_middle_esti es where base_amount<0 and es.process_code =\'EST\'; \n        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_esti3 fc; \n        commit; \n        EXECUTE \'truncate table fmm_csbc_rbt_middle_esti2\'; \n        insert into fmm_csbc_rbt_middle_esti2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN es.DB_TABLE =\'SJ11_F\' THEN -1 ELSE 1 END)* FN_GET_CSBC_FEE_CHARGE_AP(es.rec_uuid,replace(es.db_table,\'_F\',\'\'),COALESCE(vv.corporate_code,vv.vessel_code),ES.APPLY_NO), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es inner join vop_vessel vv on es.vessel_code = vv.vessel_code where process_code =\'INV_CX\' and COALESCE(es.sap_imp_status,\'T\') <>\'F\'; \n        commit; \n        delete from fmm_csbc_rbt_middle_esti es where es.process_code =\'INV_CX\' and COALESCE(es.sap_imp_status,\'T\') <>\'F\'; \n        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti2 fc; \n        commit; \n        EXECUTE \'truncate table fmm_csbc_rbt_middle_esti3\'; \n        insert into fmm_csbc_rbt_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es left join fmm_csbc_rbt_middle_esti es2 on FN_GET_CSBC_EST_RBT_AP(ES.REC_UUID||ES.APPLY_NO||ES.BASE_AMOUNT)= es2.rec_uuid||es2.apply_no||es2.base_amount where es.base_amount<0 and es.process_code =\'EST\'; \n        delete from fmm_csbc_rbt_middle_esti es where base_amount<0 and es.process_code =\'EST\'; \n        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti3 fc; \n        commit; \n        EXECUTE \'truncate table FMM_CSBC_MAINTENANCE_ESTI_MID\'; \n        INSERT INTO FMM_CSBC_MAINTENANCE_ESTI_MID SELECT * FROM VW_CSBC_MAINTENANCE_ESTI_MID; \n        COMMIT; \n        DELETE FROM FMM_CSBC_MAINTENANCE_TZ_DETAIL MD WHERE MD.UPDATE_TIME>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        INSERT INTO FMM_CSBC_MAINTENANCE_TZ_DETAIL select * from VW_CSBC_MAINTENANCE_TZ_DETAIL WHERE UPDATE_TIME>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || \'insert 结束时间:\' || CURRENT_TIMESTAMP, \'SP_FEE_CSBC_HOUR_JOB\'); \n        COMMIT; \n        delete from fmm_maintenance_expec_rpt WHERE RELATED_ID IN (SELECT RELATED_ID FROM vw_fmm_maintenance_expec_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_expec_rpt select * from vw_fmm_maintenance_expec_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete FROM FMM_MAINTENANCE_ESTI_RPT WHERE RELATED_ID IN (SELECT RELATED_ID FROM VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_MAINTENANCE_ESTI_RPT select * from VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_fee_payee pay where (order_no,payee,vessel_code) in (select order_no,payee,vessel_code from vw_fmm_maintenance_fee_payee0 where date_trunc(\'day\', updated_dtm_loc) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_fee_payee select * from vw_fmm_maintenance_fee_payee0 where date_trunc(\'day\', updated_dtm_loc) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_fee_payee f where (COALESCE(F.ORDER_NO, \'AAA\'),F.VESSEL_CODE) in (select apply_no,vessel_code from VW_FMM_MAINTENANCE_NO_PAYALL) ; \n        delete from FMM_MAINTENANCE_INVOICE_DEL where fee_invoice_id in (select fee_invoice_id from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_MAINTENANCE_INVOICE_DEL select * from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_invoice_rpt where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_invoice_rpt select * from vw_fmm_maintenance_invoice_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_invoice_rp5 where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp6 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_invoice_rp5 select * from vw_fmm_maintenance_invoice_rp6 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from FMM_MAINTENANCE_ORDER_RPT where RELATED_ID in (select RELATED_ID from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_MAINTENANCE_ORDER_RPT select * from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_supply_rpt where RELATED_ID in (select RELATED_ID from vw_fmm_maintenance_supply_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_supply_rpt select * from vw_fmm_maintenance_supply_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || \'insert 结束时间2:\' || CURRENT_TIMESTAMP, \'SP_FEE_CSBC_HOUR_JOB\'); \n        commit; \n    END IF; \nEND;\n$$ LANGUAGE plpgsql;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:41:44.223096] [Model Answer]: {"answer":"no"}
[2025-06-12 17:41:44.224285] [23] Hybrid Eval Case Judge o4-mini Results: False
[2025-06-12 17:41:44.224285] [23] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:41:44.224285] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a PG database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE "SP_FEE_CSBC_HOUR_JOB"() AS $$
DECLARE 
    V_FLAG varchar(50); 
    V_HOUR VARCHAR(50); 
BEGIN 
    select open_mode into V_FLAG from pg_database where datname = current_database(); 
    SELECT TO_CHAR(CURRENT_TIMESTAMP,'HH24') INTO V_HOUR; 
    IF V_FLAG = 'READ WRITE' AND (V_HOUR ='12') then 
        PERFORM P_LOG_EXCEPTION('开始时间:' || CURRENT_TIMESTAMP, 'SP_FEE_CSBC_HOUR_JOB'); 
        commit; 
        delete from fmm_csbc_middle_esti es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into fmm_csbc_middle_esti select * from vw_csbc_middle_esti es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from FMM_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into FMM_CSBC_RBT_MIDDLE_ESTI select * from VW_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from FMM_CSBC_MAINTENANCE_CONSUME mc where exists (select 1 from VW_CSBC_MAINTENANCE_CONSUME mc2 where mc2.BIZ_UUID = mc.biz_uuid and mc2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_CSBC_MAINTENANCE_CONSUME select * from VW_CSBC_MAINTENANCE_CONSUME mc where mc.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from fmm_csbc_maintenance_esti_rpt es where exists (select 1 from vw_csbc_maintenance_esti_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_csbc_maintenance_esti_rpt select * from vw_csbc_maintenance_esti_rpt es where es.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from Fmm_Csbc_Maintenance_Invo_Rp5 es where exists (select 1 from vw_Csbc_Maintenance_Invo_Rp5 es2 where es2.FEE_INVOICE_ID = es.FEE_INVOICE_ID and es2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into Fmm_Csbc_Maintenance_Invo_Rp5 select * from vw_Csbc_Maintenance_Invo_Rp5 es where es.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from FMM_csbc_maintenance_expec_rpt es where exists (select 1 from vw_csbc_maintenance_expec_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_csbc_maintenance_expec_rpt select * from vw_csbc_maintenance_expec_rpt es where es.update_time>=date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_csbc_middle_estt2 tt where tt.process_code ='INV_CX' and tt.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into fmm_csbc_middle_estt2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN ES.BASE_AMOUNT>0 THEN -1 ELSE 1 END) *FN_GET_CSBC_FEE_CHARGE(es.rec_uuid,es.db_table,es.vessel_code), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es where process_code ='INV_CX' and es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_csbc_middle_esti es where es.process_code ='INV_CX'; 
        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_estt2 fc WHERE FC.process_code ='INV_CX'; 
        commit; 
        delete from fmm_csbc_middle_esti3 tt where tt.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        insert into fmm_csbc_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es left join fmm_csbc_middle_esti es2 on FN_GET_CSBC_EST_CHARGE_AP(es.rec_uuid||es.apply_no)= es2.rec_uuid||es2.apply_no where es.base_amount<0 and es.process_code ='EST' and es.audit_date>=date_trunc('day', CURRENT_TIMESTAMP); 
        delete from fmm_csbc_middle_esti es where base_amount<0 and es.process_code ='EST'; 
        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_esti3 fc; 
        commit; 
        EXECUTE 'truncate table fmm_csbc_rbt_middle_esti2'; 
        insert into fmm_csbc_rbt_middle_esti2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN es.DB_TABLE ='SJ11_F' THEN -1 ELSE 1 END)* FN_GET_CSBC_FEE_CHARGE_AP(es.rec_uuid,replace(es.db_table,'_F',''),COALESCE(vv.corporate_code,vv.vessel_code),ES.APPLY_NO), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es inner join vop_vessel vv on es.vessel_code = vv.vessel_code where process_code ='INV_CX' and COALESCE(es.sap_imp_status,'T') <>'F'; 
        commit; 
        delete from fmm_csbc_rbt_middle_esti es where es.process_code ='INV_CX' and COALESCE(es.sap_imp_status,'T') <>'F'; 
        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti2 fc; 
        commit; 
        EXECUTE 'truncate table fmm_csbc_rbt_middle_esti3'; 
        insert into fmm_csbc_rbt_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es left join fmm_csbc_rbt_middle_esti es2 on FN_GET_CSBC_EST_RBT_AP(ES.REC_UUID||ES.APPLY_NO||ES.BASE_AMOUNT)= es2.rec_uuid||es2.apply_no||es2.base_amount where es.base_amount<0 and es.process_code ='EST'; 
        delete from fmm_csbc_rbt_middle_esti es where base_amount<0 and es.process_code ='EST'; 
        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti3 fc; 
        commit; 
        EXECUTE 'truncate table FMM_CSBC_MAINTENANCE_ESTI_MID'; 
        INSERT INTO FMM_CSBC_MAINTENANCE_ESTI_MID SELECT * FROM VW_CSBC_MAINTENANCE_ESTI_MID; 
        COMMIT; 
        DELETE FROM FMM_CSBC_MAINTENANCE_TZ_DETAIL MD WHERE MD.UPDATE_TIME>=date_trunc('day', CURRENT_TIMESTAMP); 
        INSERT INTO FMM_CSBC_MAINTENANCE_TZ_DETAIL select * from VW_CSBC_MAINTENANCE_TZ_DETAIL WHERE UPDATE_TIME>=date_trunc('day', CURRENT_TIMESTAMP); 
        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || 'insert 结束时间:' || CURRENT_TIMESTAMP, 'SP_FEE_CSBC_HOUR_JOB'); 
        COMMIT; 
        delete from fmm_maintenance_expec_rpt WHERE RELATED_ID IN (SELECT RELATED_ID FROM vw_fmm_maintenance_expec_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_expec_rpt select * from vw_fmm_maintenance_expec_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete FROM FMM_MAINTENANCE_ESTI_RPT WHERE RELATED_ID IN (SELECT RELATED_ID FROM VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_MAINTENANCE_ESTI_RPT select * from VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_fee_payee pay where (order_no,payee,vessel_code) in (select order_no,payee,vessel_code from vw_fmm_maintenance_fee_payee0 where date_trunc('day', updated_dtm_loc) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_fee_payee select * from vw_fmm_maintenance_fee_payee0 where date_trunc('day', updated_dtm_loc) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_fee_payee f where (COALESCE(F.ORDER_NO, 'AAA'),F.VESSEL_CODE) in (select apply_no,vessel_code from VW_FMM_MAINTENANCE_NO_PAYALL) ; 
        delete from FMM_MAINTENANCE_INVOICE_DEL where fee_invoice_id in (select fee_invoice_id from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_MAINTENANCE_INVOICE_DEL select * from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_invoice_rpt where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_invoice_rpt select * from vw_fmm_maintenance_invoice_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_invoice_rp5 where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp6 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_invoice_rp5 select * from vw_fmm_maintenance_invoice_rp6 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from FMM_MAINTENANCE_ORDER_RPT where RELATED_ID in (select RELATED_ID from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into FMM_MAINTENANCE_ORDER_RPT select * from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        delete from fmm_maintenance_supply_rpt where RELATED_ID in (select RELATED_ID from vw_fmm_maintenance_supply_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP)); 
        insert into fmm_maintenance_supply_rpt select * from vw_fmm_maintenance_supply_rp0 where date_trunc('day', update_time) = date_trunc('day', CURRENT_TIMESTAMP); 
        commit; 
        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || 'insert 结束时间2:' || CURRENT_TIMESTAMP, 'SP_FEE_CSBC_HOUR_JOB'); 
        commit; 
    END IF; 
END;
$$ LANGUAGE plpgsql;

[2025-06-12 17:41:44.230911] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE "SP_FEE_CSBC_HOUR_JOB"() AS $$\nDECLARE \n    V_FLAG varchar(50); \n    V_HOUR VARCHAR(50); \nBEGIN \n    select open_mode into V_FLAG from pg_database where datname = current_database(); \n    SELECT TO_CHAR(CURRENT_TIMESTAMP,\'HH24\') INTO V_HOUR; \n    IF V_FLAG = \'READ WRITE\' AND (V_HOUR =\'12\') then \n        PERFORM P_LOG_EXCEPTION(\'开始时间:\' || CURRENT_TIMESTAMP, \'SP_FEE_CSBC_HOUR_JOB\'); \n        commit; \n        delete from fmm_csbc_middle_esti es where es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        insert into fmm_csbc_middle_esti select * from vw_csbc_middle_esti es where es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from FMM_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        insert into FMM_CSBC_RBT_MIDDLE_ESTI select * from VW_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from FMM_CSBC_MAINTENANCE_CONSUME mc where exists (select 1 from VW_CSBC_MAINTENANCE_CONSUME mc2 where mc2.BIZ_UUID = mc.biz_uuid and mc2.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_CSBC_MAINTENANCE_CONSUME select * from VW_CSBC_MAINTENANCE_CONSUME mc where mc.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from fmm_csbc_maintenance_esti_rpt es where exists (select 1 from vw_csbc_maintenance_esti_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_csbc_maintenance_esti_rpt select * from vw_csbc_maintenance_esti_rpt es where es.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from Fmm_Csbc_Maintenance_Invo_Rp5 es where exists (select 1 from vw_Csbc_Maintenance_Invo_Rp5 es2 where es2.FEE_INVOICE_ID = es.FEE_INVOICE_ID and es2.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into Fmm_Csbc_Maintenance_Invo_Rp5 select * from vw_Csbc_Maintenance_Invo_Rp5 es where es.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from FMM_csbc_maintenance_expec_rpt es where exists (select 1 from vw_csbc_maintenance_expec_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_csbc_maintenance_expec_rpt select * from vw_csbc_maintenance_expec_rpt es where es.update_time>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_csbc_middle_estt2 tt where tt.process_code =\'INV_CX\' and tt.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        insert into fmm_csbc_middle_estt2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN ES.BASE_AMOUNT>0 THEN -1 ELSE 1 END) *FN_GET_CSBC_FEE_CHARGE(es.rec_uuid,es.db_table,es.vessel_code), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es where process_code =\'INV_CX\' and es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_csbc_middle_esti es where es.process_code =\'INV_CX\'; \n        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_estt2 fc WHERE FC.process_code =\'INV_CX\'; \n        commit; \n        delete from fmm_csbc_middle_esti3 tt where tt.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        insert into fmm_csbc_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es left join fmm_csbc_middle_esti es2 on FN_GET_CSBC_EST_CHARGE_AP(es.rec_uuid||es.apply_no)= es2.rec_uuid||es2.apply_no where es.base_amount<0 and es.process_code =\'EST\' and es.audit_date>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        delete from fmm_csbc_middle_esti es where base_amount<0 and es.process_code =\'EST\'; \n        insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_esti3 fc; \n        commit; \n        EXECUTE \'truncate table fmm_csbc_rbt_middle_esti2\'; \n        insert into fmm_csbc_rbt_middle_esti2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN es.DB_TABLE =\'SJ11_F\' THEN -1 ELSE 1 END)* FN_GET_CSBC_FEE_CHARGE_AP(es.rec_uuid,replace(es.db_table,\'_F\',\'\'),COALESCE(vv.corporate_code,vv.vessel_code),ES.APPLY_NO), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es inner join vop_vessel vv on es.vessel_code = vv.vessel_code where process_code =\'INV_CX\' and COALESCE(es.sap_imp_status,\'T\') <>\'F\'; \n        commit; \n        delete from fmm_csbc_rbt_middle_esti es where es.process_code =\'INV_CX\' and COALESCE(es.sap_imp_status,\'T\') <>\'F\'; \n        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti2 fc; \n        commit; \n        EXECUTE \'truncate table fmm_csbc_rbt_middle_esti3\'; \n        insert into fmm_csbc_rbt_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, COALESCE(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es left join fmm_csbc_rbt_middle_esti es2 on FN_GET_CSBC_EST_RBT_AP(ES.REC_UUID||ES.APPLY_NO||ES.BASE_AMOUNT)= es2.rec_uuid||es2.apply_no||es2.base_amount where es.base_amount<0 and es.process_code =\'EST\'; \n        delete from fmm_csbc_rbt_middle_esti es where base_amount<0 and es.process_code =\'EST\'; \n        insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti3 fc; \n        commit; \n        EXECUTE \'truncate table FMM_CSBC_MAINTENANCE_ESTI_MID\'; \n        INSERT INTO FMM_CSBC_MAINTENANCE_ESTI_MID SELECT * FROM VW_CSBC_MAINTENANCE_ESTI_MID; \n        COMMIT; \n        DELETE FROM FMM_CSBC_MAINTENANCE_TZ_DETAIL MD WHERE MD.UPDATE_TIME>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        INSERT INTO FMM_CSBC_MAINTENANCE_TZ_DETAIL select * from VW_CSBC_MAINTENANCE_TZ_DETAIL WHERE UPDATE_TIME>=date_trunc(\'day\', CURRENT_TIMESTAMP); \n        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || \'insert 结束时间:\' || CURRENT_TIMESTAMP, \'SP_FEE_CSBC_HOUR_JOB\'); \n        COMMIT; \n        delete from fmm_maintenance_expec_rpt WHERE RELATED_ID IN (SELECT RELATED_ID FROM vw_fmm_maintenance_expec_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_expec_rpt select * from vw_fmm_maintenance_expec_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete FROM FMM_MAINTENANCE_ESTI_RPT WHERE RELATED_ID IN (SELECT RELATED_ID FROM VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_MAINTENANCE_ESTI_RPT select * from VW_FMM_MAINTENANCE_ESTI_RP0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_fee_payee pay where (order_no,payee,vessel_code) in (select order_no,payee,vessel_code from vw_fmm_maintenance_fee_payee0 where date_trunc(\'day\', updated_dtm_loc) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_fee_payee select * from vw_fmm_maintenance_fee_payee0 where date_trunc(\'day\', updated_dtm_loc) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_fee_payee f where (COALESCE(F.ORDER_NO, \'AAA\'),F.VESSEL_CODE) in (select apply_no,vessel_code from VW_FMM_MAINTENANCE_NO_PAYALL) ; \n        delete from FMM_MAINTENANCE_INVOICE_DEL where fee_invoice_id in (select fee_invoice_id from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_MAINTENANCE_INVOICE_DEL select * from VW_FMM_MAINTENANCE_INVOICE_DE0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_invoice_rpt where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_invoice_rpt select * from vw_fmm_maintenance_invoice_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_invoice_rp5 where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp6 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_invoice_rp5 select * from vw_fmm_maintenance_invoice_rp6 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from FMM_MAINTENANCE_ORDER_RPT where RELATED_ID in (select RELATED_ID from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into FMM_MAINTENANCE_ORDER_RPT select * from VW_FMM_MAINTENANCE_ORDER_RP0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        delete from fmm_maintenance_supply_rpt where RELATED_ID in (select RELATED_ID from vw_fmm_maintenance_supply_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP)); \n        insert into fmm_maintenance_supply_rpt select * from vw_fmm_maintenance_supply_rp0 where date_trunc(\'day\', update_time) = date_trunc(\'day\', CURRENT_TIMESTAMP); \n        commit; \n        PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || \'insert 结束时间2:\' || CURRENT_TIMESTAMP, \'SP_FEE_CSBC_HOUR_JOB\'); \n        commit; \n    END IF; \nEND;\n$$ LANGUAGE plpgsql;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:41:47.227725] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:41:47.228727] [23] Hybrid Eval Case Judge gemini-2.0-flash Results: True
[2025-06-12 17:41:47.228727] [23] Hybrid Eval Case Judge Final Results: True
[2025-06-12 17:41:47.228727] [23] hybrid Eval Case Final Result: True
[2025-06-12 17:41:47.228727] 
--- Case: 24 ---
[2025-06-12 17:41:47.229733] [24] Case Run 1/1
[2025-06-12 17:41:47.229733] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from Oracle syntax to PG syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
CREATE OR REPLACE PROCEDURE SP_FHD_ALERT_IMT (I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR ) IS OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); I NUMBER; BEGIN I:=1; FOR M IN (SELECT VESSEL_CODE, VESSEL_NAME, SAFETY_COMPANY, FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE, FVIA.POSI_DATE, '5', '0') as SAFETY_COMPANY_CODE, MMSI, POSI_DATE, POSI_LAT, POSI_LONG, AREA_NAME FROM FHD_VESSEL_IN_AREA FVIA WHERE FVIA.SORTCODE=(SELECT MAX(SORTCODE) AS SORTCODE FROM FHD_VESSEL_IN_AREA) AND FVIA.CREATED_DTM_LOC > SYSDATE-1/24 AND (I_VESSEL_CODE IS NULL OR FVIA.VESSEL_CODE=I_VESSEL_CODE) AND (I_MANAGER IS NULL OR FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE,FVIA.CREATED_DTM_LOC,'5', '0')=I_MANAGER) ) LOOP OBJ_TAB_TYPE.EXTEND; OBJ_TAB_TYPE(I) := OBJECTTABTYPE(M.VESSEL_CODE, M.VESSEL_NAME, NULL, NULL, NULL, NULL, M.POSI_LONG, M.POSI_LAT, M.POSI_DATE, M.AREA_NAME, M.SAFETY_COMPANY, SYS_GUID, M.SAFETY_COMPANY_CODE, M.MMSI); I := I + 1; END LOOP; UPDATE imt_monitor_main IMM SET IMM.STATUS=1, IMM.MONITOR_ENDDATE=null WHERE ROUND(TO_NUMBER(SYSDATE - IMM.MONITOR_ENDDATE) * 24,2)<47 AND IMM.MONITOR_ENDDATE IS NOT NULL AND IMM.MONITOR_CONF_ID='FHD_ALERT' AND IMM.VESSEL_CODE IN ( SELECT VESSEL_CODE FROM TABLE(OBJ_TAB_TYPE) AA WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=0); insert into imt_monitor_detail（monitor_detail_id,monitor_main_id,vessel_code,feedback_mode,feedback_user,feedback_explain,feedback_date,MONITOR_DETAIL_MODE, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE) select SYS_GUID,AA.ETA_PORT_NAME,AA.VESSEL_CODE,'自动记录','系统','船舶驶入防海盗区，监控启动',sysdate,'1.1', '00000000','YLZ','00000000',SYSDATE(),0,0 FROM TABLE(OBJ_TAB_TYPE) AA WHERE AA.VESSEL_CODE IN ( SELECT IMM.VESSEL_CODE FROM imt_monitor_main IMM WHERE MONITOR_CONF_ID='FHD_ALERT' AND MONITOR_STARTDATE IS NOT NULL AND MONITOR_ENDDATE IS NULL); INSERT INTO imt_monitor_main(MONITOR_MAIN_ID,MONITOR_CONF_ID,VESSEL_CODE,Manage_Company_Code,STATUS, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE, MONITOR_STARTDATE) SELECT AA.ETA_PORT_NAME,'FHD_ALERT' AS MONITOR_CONF_ID,AA.VESSEL_CODE,ETA_TIME AS MANAGER_NAME,1, '00000000','YLZ','00000000',SYSDATE(),0,0,AA.ACTIVITY_DATE FROM TABLE(OBJ_TAB_TYPE) AA WHERE AA.VESSEL_CODE IN ( SELECT IMM.VESSEL_CODE FROM imt_monitor_main IMM WHERE MONITOR_CONF_ID='FHD_ALERT' AND MONITOR_STARTDATE IS NOT NULL AND MONITOR_ENDDATE IS NULL); OPEN OUT_CURSOR FOR SELECT VESSEL_CODE, VESSEL_NAME, AA.MANAGER_NAME AS SAFETY_COMPANY, AA.MMSI AS MMSI, AA.ACTIVITY_DATE AS POSI_DATE, AA.LATITUDE AS POSI_LAT, AA.LONGTITUDE AS POSI_LONG, AREA_NAME FROM TABLE(OBJ_TAB_TYPE) AA WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=1; EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM); END SP_FHD_ALERT_IMT;

Translated SQL (PG):

[2025-06-12 17:41:47.231210] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE SP_FHD_ALERT_IMT (I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR ) IS OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); I NUMBER; BEGIN I:=1; FOR M IN (SELECT VESSEL_CODE, VESSEL_NAME, SAFETY_COMPANY, FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE, FVIA.POSI_DATE, '5', '0') as SAFETY_COMPANY_CODE, MMSI, POSI_DATE, POSI_LAT, POSI_LONG, AREA_NAME FROM FHD_VESSEL_IN_AREA FVIA WHERE FVIA.SORTCODE=(SELECT MAX(SORTCODE) AS SORTCODE FROM FHD_VESSEL_IN_AREA) AND FVIA.CREATED_DTM_LOC > SYSDATE-1/24 AND (I_VESSEL_CODE IS NULL OR FVIA.VESSEL_CODE=I_VESSEL_CODE) AND (I_MANAGER IS NULL OR FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE,FVIA.CREATED_DTM_LOC,'5', '0')=I_MANAGER) ) LOOP OBJ_TAB_TYPE.EXTEND; OBJ_TAB_TYPE(I) := OBJECTTABTYPE(M.VESSEL_CODE, M.VESSEL_NAME, NULL, NULL, NULL, NULL, M.POSI_LONG, M.POSI_LAT, M.POSI_DATE, M.AREA_NAME, M.SAFETY_COMPANY, SYS_GUID, M.SAFETY_COMPANY_CODE, M.MMSI); I := I + 1; END LOOP; UPDATE imt_monitor_main IMM SET IMM.STATUS=1, IMM.MONITOR_ENDDATE=null WHERE ROUND(TO_NUMBER(SYSDATE - IMM.MONITOR_ENDDATE) * 24,2)<47 AND IMM.MONITOR_ENDDATE IS NOT NULL AND IMM.MONITOR_CONF_ID='FHD_ALERT' AND IMM.VESSEL_CODE IN ( SELECT VESSEL_CODE FROM TABLE(OBJ_TAB_TYPE) AA WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=0); insert into imt_monitor_detail（monitor_detail_id,monitor_main_id,vessel_code,feedback_mode,feedback_user,feedback_explain,feedback_date,MONITOR_DETAIL_MODE, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE) select SYS_GUID,AA.ETA_PORT_NAME,AA.VESSEL_CODE,'自动记录','系统','船舶驶入防海盗区，监控启动',sysdate,'1.1', '00000000','YLZ','00000000',SYSDATE(),0,0 FROM TABLE(OBJ_TAB_TYPE) AA WHERE AA.VESSEL_CODE IN ( SELECT IMM.VESSEL_CODE FROM imt_monitor_main IMM WHERE MONITOR_CONF_ID='FHD_ALERT' AND MONITOR_STARTDATE IS NOT NULL AND MONITOR_ENDDATE IS NULL); INSERT INTO imt_monitor_main(MONITOR_MAIN_ID,MONITOR_CONF_ID,VESSEL_CODE,Manage_Company_Code,STATUS, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE, MONITOR_STARTDATE) SELECT AA.ETA_PORT_NAME,'FHD_ALERT' AS MONITOR_CONF_ID,AA.VESSEL_CODE,ETA_TIME AS MANAGER_NAME,1, '00000000','YLZ','00000000',SYSDATE(),0,0,AA.ACTIVITY_DATE FROM TABLE(OBJ_TAB_TYPE) AA WHERE AA.VESSEL_CODE IN ( SELECT IMM.VESSEL_CODE FROM imt_monitor_main IMM WHERE MONITOR_CONF_ID='FHD_ALERT' AND MONITOR_STARTDATE IS NOT NULL AND MONITOR_ENDDATE IS NULL); OPEN OUT_CURSOR FOR SELECT VESSEL_CODE, VESSEL_NAME, AA.MANAGER_NAME AS SAFETY_COMPANY, AA.MMSI AS MMSI, AA.ACTIVITY_DATE AS POSI_DATE, AA.LATITUDE AS POSI_LAT, AA.LONGTITUDE AS POSI_LONG, AREA_NAME FROM TABLE(OBJ_TAB_TYPE) AA WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=1; EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM); END SP_FHD_ALERT_IMT;\n\nTranslated SQL (PG):\n"}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:42:37.042402] [Model Answer]: CREATE OR REPLACE PROCEDURE SP_FHD_ALERT_IMT (I_VESSEL_CODE IN VARCHAR, I_MANAGER IN VARCHAR, OUT_CURSOR OUT REFCURSOR) AS $$
DECLARE
    OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();
    I INTEGER;
BEGIN
    I:=1;
    FOR M IN (
        SELECT VESSEL_CODE, VESSEL_NAME, SAFETY_COMPANY, FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE, FVIA.POSI_DATE, '5', '0') as SAFETY_COMPANY_CODE, MMSI, POSI_DATE, POSI_LAT, POSI_LONG, AREA_NAME 
        FROM FHD_VESSEL_IN_AREA FVIA 
        WHERE FVIA.SORTCODE=(SELECT MAX(SORTCODE) AS SORTCODE FROM FHD_VESSEL_IN_AREA) 
        AND FVIA.CREATED_DTM_LOC > CURRENT_TIMESTAMP - INTERVAL '1 hour' 
        AND (I_VESSEL_CODE IS NULL OR FVIA.VESSEL_CODE=I_VESSEL_CODE) 
        AND (I_MANAGER IS NULL OR FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE,FVIA.CREATED_DTM_LOC,'5', '0')=I_MANAGER)
    ) LOOP
        OBJ_TAB_TYPE.EXTEND;
        OBJ_TAB_TYPE(I) := OBJECTTABTYPE(M.VESSEL_CODE, M.VESSEL_NAME, NULL, NULL, NULL, NULL, M.POSI_LONG, M.POSI_LAT, M.POSI_DATE, M.AREA_NAME, M.SAFETY_COMPANY, GEN_RANDOM_UUID(), M.SAFETY_COMPANY_CODE, M.MMSI);
        I := I + 1;
    END LOOP;
    
    UPDATE imt_monitor_main IMM 
    SET IMM.STATUS=1, IMM.MONITOR_ENDDATE=null 
    WHERE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - IMM.MONITOR_ENDDATE))/3600,2)<47 
    AND IMM.MONITOR_ENDDATE IS NOT NULL 
    AND IMM.MONITOR_CONF_ID='FHD_ALERT' 
    AND IMM.VESSEL_CODE IN (
        SELECT VESSEL_CODE 
        FROM OBJ_TAB_TYPE AA 
        WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=0
    );
    
    INSERT INTO imt_monitor_detail(monitor_detail_id,monitor_main_id,vessel_code,feedback_mode,feedback_user,feedback_explain,feedback_date,MONITOR_DETAIL_MODE, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE) 
    SELECT GEN_RANDOM_UUID(),AA.ETA_PORT_NAME,AA.VESSEL_CODE,'自动记录','系统','船舶驶入防海盗区，监控启动',CURRENT_TIMESTAMP,'1.1', '00000000','YLZ','00000000',CURRENT_TIMESTAMP,0,0 
    FROM OBJ_TAB_TYPE AA 
    WHERE AA.VESSEL_CODE IN (
        SELECT IMM.VESSEL_CODE 
        FROM imt_monitor_main IMM 
        WHERE MONITOR_CONF_ID='FHD_ALERT' 
        AND MONITOR_STARTDATE IS NOT NULL 
        AND MONITOR_ENDDATE IS NULL
    );
    
    INSERT INTO imt_monitor_main(MONITOR_MAIN_ID,MONITOR_CONF_ID,VESSEL_CODE,Manage_Company_Code,STATUS, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE, MONITOR_STARTDATE) 
    SELECT AA.ETA_PORT_NAME,'FHD_ALERT' AS MONITOR_CONF_ID,AA.VESSEL_CODE,ETA_TIME AS MANAGER_NAME,1, '00000000','YLZ','00000000',CURRENT_TIMESTAMP,0,0,AA.ACTIVITY_DATE 
    FROM OBJ_TAB_TYPE AA 
    WHERE AA.VESSEL_CODE IN (
        SELECT IMM.VESSEL_CODE 
        FROM imt_monitor_main IMM 
        WHERE MONITOR_CONF_ID='FHD_ALERT' 
        AND MONITOR_STARTDATE IS NOT NULL 
        AND MONITOR_ENDDATE IS NULL
    );
    
    OPEN OUT_CURSOR FOR 
    SELECT VESSEL_CODE, VESSEL_NAME, AA.MANAGER_NAME AS SAFETY_COMPANY, AA.MMSI AS MMSI, AA.ACTIVITY_DATE AS POSI_DATE, AA.LATITUDE AS POSI_LAT, AA.LONGTITUDE AS POSI_LONG, AREA_NAME 
    FROM OBJ_TAB_TYPE AA 
    WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=1;
    
EXCEPTION 
    WHEN OTHERS THEN 
        RAISE NOTICE '错误: %', SQLERRM;
END;
$$ LANGUAGE plpgsql;
[2025-06-12 17:42:37.045408] [24] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:42:37.045408] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a PG database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE SP_FHD_ALERT_IMT (I_VESSEL_CODE IN VARCHAR, I_MANAGER IN VARCHAR, OUT_CURSOR OUT REFCURSOR) AS $$
DECLARE
    OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();
    I INTEGER;
BEGIN
    I:=1;
    FOR M IN (
        SELECT VESSEL_CODE, VESSEL_NAME, SAFETY_COMPANY, FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE, FVIA.POSI_DATE, '5', '0') as SAFETY_COMPANY_CODE, MMSI, POSI_DATE, POSI_LAT, POSI_LONG, AREA_NAME 
        FROM FHD_VESSEL_IN_AREA FVIA 
        WHERE FVIA.SORTCODE=(SELECT MAX(SORTCODE) AS SORTCODE FROM FHD_VESSEL_IN_AREA) 
        AND FVIA.CREATED_DTM_LOC > CURRENT_TIMESTAMP - INTERVAL '1 hour' 
        AND (I_VESSEL_CODE IS NULL OR FVIA.VESSEL_CODE=I_VESSEL_CODE) 
        AND (I_MANAGER IS NULL OR FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE,FVIA.CREATED_DTM_LOC,'5', '0')=I_MANAGER)
    ) LOOP
        OBJ_TAB_TYPE.EXTEND;
        OBJ_TAB_TYPE(I) := OBJECTTABTYPE(M.VESSEL_CODE, M.VESSEL_NAME, NULL, NULL, NULL, NULL, M.POSI_LONG, M.POSI_LAT, M.POSI_DATE, M.AREA_NAME, M.SAFETY_COMPANY, GEN_RANDOM_UUID(), M.SAFETY_COMPANY_CODE, M.MMSI);
        I := I + 1;
    END LOOP;
    
    UPDATE imt_monitor_main IMM 
    SET IMM.STATUS=1, IMM.MONITOR_ENDDATE=null 
    WHERE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - IMM.MONITOR_ENDDATE))/3600,2)<47 
    AND IMM.MONITOR_ENDDATE IS NOT NULL 
    AND IMM.MONITOR_CONF_ID='FHD_ALERT' 
    AND IMM.VESSEL_CODE IN (
        SELECT VESSEL_CODE 
        FROM OBJ_TAB_TYPE AA 
        WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=0
    );
    
    INSERT INTO imt_monitor_detail(monitor_detail_id,monitor_main_id,vessel_code,feedback_mode,feedback_user,feedback_explain,feedback_date,MONITOR_DETAIL_MODE, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE) 
    SELECT GEN_RANDOM_UUID(),AA.ETA_PORT_NAME,AA.VESSEL_CODE,'自动记录','系统','船舶驶入防海盗区，监控启动',CURRENT_TIMESTAMP,'1.1', '00000000','YLZ','00000000',CURRENT_TIMESTAMP,0,0 
    FROM OBJ_TAB_TYPE AA 
    WHERE AA.VESSEL_CODE IN (
        SELECT IMM.VESSEL_CODE 
        FROM imt_monitor_main IMM 
        WHERE MONITOR_CONF_ID='FHD_ALERT' 
        AND MONITOR_STARTDATE IS NOT NULL 
        AND MONITOR_ENDDATE IS NULL
    );
    
    INSERT INTO imt_monitor_main(MONITOR_MAIN_ID,MONITOR_CONF_ID,VESSEL_CODE,Manage_Company_Code,STATUS, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE, MONITOR_STARTDATE) 
    SELECT AA.ETA_PORT_NAME,'FHD_ALERT' AS MONITOR_CONF_ID,AA.VESSEL_CODE,ETA_TIME AS MANAGER_NAME,1, '00000000','YLZ','00000000',CURRENT_TIMESTAMP,0,0,AA.ACTIVITY_DATE 
    FROM OBJ_TAB_TYPE AA 
    WHERE AA.VESSEL_CODE IN (
        SELECT IMM.VESSEL_CODE 
        FROM imt_monitor_main IMM 
        WHERE MONITOR_CONF_ID='FHD_ALERT' 
        AND MONITOR_STARTDATE IS NOT NULL 
        AND MONITOR_ENDDATE IS NULL
    );
    
    OPEN OUT_CURSOR FOR 
    SELECT VESSEL_CODE, VESSEL_NAME, AA.MANAGER_NAME AS SAFETY_COMPANY, AA.MMSI AS MMSI, AA.ACTIVITY_DATE AS POSI_DATE, AA.LATITUDE AS POSI_LAT, AA.LONGTITUDE AS POSI_LONG, AREA_NAME 
    FROM OBJ_TAB_TYPE AA 
    WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=1;
    
EXCEPTION 
    WHEN OTHERS THEN 
        RAISE NOTICE '错误: %', SQLERRM;
END;
$$ LANGUAGE plpgsql;

[2025-06-12 17:42:37.047499] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE SP_FHD_ALERT_IMT (I_VESSEL_CODE IN VARCHAR, I_MANAGER IN VARCHAR, OUT_CURSOR OUT REFCURSOR) AS $$\nDECLARE\n    OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();\n    I INTEGER;\nBEGIN\n    I:=1;\n    FOR M IN (\n        SELECT VESSEL_CODE, VESSEL_NAME, SAFETY_COMPANY, FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE, FVIA.POSI_DATE, \'5\', \'0\') as SAFETY_COMPANY_CODE, MMSI, POSI_DATE, POSI_LAT, POSI_LONG, AREA_NAME \n        FROM FHD_VESSEL_IN_AREA FVIA \n        WHERE FVIA.SORTCODE=(SELECT MAX(SORTCODE) AS SORTCODE FROM FHD_VESSEL_IN_AREA) \n        AND FVIA.CREATED_DTM_LOC > CURRENT_TIMESTAMP - INTERVAL \'1 hour\' \n        AND (I_VESSEL_CODE IS NULL OR FVIA.VESSEL_CODE=I_VESSEL_CODE) \n        AND (I_MANAGER IS NULL OR FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE,FVIA.CREATED_DTM_LOC,\'5\', \'0\')=I_MANAGER)\n    ) LOOP\n        OBJ_TAB_TYPE.EXTEND;\n        OBJ_TAB_TYPE(I) := OBJECTTABTYPE(M.VESSEL_CODE, M.VESSEL_NAME, NULL, NULL, NULL, NULL, M.POSI_LONG, M.POSI_LAT, M.POSI_DATE, M.AREA_NAME, M.SAFETY_COMPANY, GEN_RANDOM_UUID(), M.SAFETY_COMPANY_CODE, M.MMSI);\n        I := I + 1;\n    END LOOP;\n    \n    UPDATE imt_monitor_main IMM \n    SET IMM.STATUS=1, IMM.MONITOR_ENDDATE=null \n    WHERE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - IMM.MONITOR_ENDDATE))/3600,2)<47 \n    AND IMM.MONITOR_ENDDATE IS NOT NULL \n    AND IMM.MONITOR_CONF_ID=\'FHD_ALERT\' \n    AND IMM.VESSEL_CODE IN (\n        SELECT VESSEL_CODE \n        FROM OBJ_TAB_TYPE AA \n        WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=0\n    );\n    \n    INSERT INTO imt_monitor_detail(monitor_detail_id,monitor_main_id,vessel_code,feedback_mode,feedback_user,feedback_explain,feedback_date,MONITOR_DETAIL_MODE, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE) \n    SELECT GEN_RANDOM_UUID(),AA.ETA_PORT_NAME,AA.VESSEL_CODE,\'自动记录\',\'系统\',\'船舶驶入防海盗区，监控启动\',CURRENT_TIMESTAMP,\'1.1\', \'00000000\',\'YLZ\',\'00000000\',CURRENT_TIMESTAMP,0,0 \n    FROM OBJ_TAB_TYPE AA \n    WHERE AA.VESSEL_CODE IN (\n        SELECT IMM.VESSEL_CODE \n        FROM imt_monitor_main IMM \n        WHERE MONITOR_CONF_ID=\'FHD_ALERT\' \n        AND MONITOR_STARTDATE IS NOT NULL \n        AND MONITOR_ENDDATE IS NULL\n    );\n    \n    INSERT INTO imt_monitor_main(MONITOR_MAIN_ID,MONITOR_CONF_ID,VESSEL_CODE,Manage_Company_Code,STATUS, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE, MONITOR_STARTDATE) \n    SELECT AA.ETA_PORT_NAME,\'FHD_ALERT\' AS MONITOR_CONF_ID,AA.VESSEL_CODE,ETA_TIME AS MANAGER_NAME,1, \'00000000\',\'YLZ\',\'00000000\',CURRENT_TIMESTAMP,0,0,AA.ACTIVITY_DATE \n    FROM OBJ_TAB_TYPE AA \n    WHERE AA.VESSEL_CODE IN (\n        SELECT IMM.VESSEL_CODE \n        FROM imt_monitor_main IMM \n        WHERE MONITOR_CONF_ID=\'FHD_ALERT\' \n        AND MONITOR_STARTDATE IS NOT NULL \n        AND MONITOR_ENDDATE IS NULL\n    );\n    \n    OPEN OUT_CURSOR FOR \n    SELECT VESSEL_CODE, VESSEL_NAME, AA.MANAGER_NAME AS SAFETY_COMPANY, AA.MMSI AS MMSI, AA.ACTIVITY_DATE AS POSI_DATE, AA.LATITUDE AS POSI_LAT, AA.LONGTITUDE AS POSI_LONG, AREA_NAME \n    FROM OBJ_TAB_TYPE AA \n    WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=1;\n    \nEXCEPTION \n    WHEN OTHERS THEN \n        RAISE NOTICE \'错误: %\', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:42:40.061534] [Model Answer]: {
  "answer": "no"
}
[2025-06-12 17:42:40.061534] [24] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: False
[2025-06-12 17:42:40.061534] [24] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:42:40.061534] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a PG database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE SP_FHD_ALERT_IMT (I_VESSEL_CODE IN VARCHAR, I_MANAGER IN VARCHAR, OUT_CURSOR OUT REFCURSOR) AS $$
DECLARE
    OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();
    I INTEGER;
BEGIN
    I:=1;
    FOR M IN (
        SELECT VESSEL_CODE, VESSEL_NAME, SAFETY_COMPANY, FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE, FVIA.POSI_DATE, '5', '0') as SAFETY_COMPANY_CODE, MMSI, POSI_DATE, POSI_LAT, POSI_LONG, AREA_NAME 
        FROM FHD_VESSEL_IN_AREA FVIA 
        WHERE FVIA.SORTCODE=(SELECT MAX(SORTCODE) AS SORTCODE FROM FHD_VESSEL_IN_AREA) 
        AND FVIA.CREATED_DTM_LOC > CURRENT_TIMESTAMP - INTERVAL '1 hour' 
        AND (I_VESSEL_CODE IS NULL OR FVIA.VESSEL_CODE=I_VESSEL_CODE) 
        AND (I_MANAGER IS NULL OR FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE,FVIA.CREATED_DTM_LOC,'5', '0')=I_MANAGER)
    ) LOOP
        OBJ_TAB_TYPE.EXTEND;
        OBJ_TAB_TYPE(I) := OBJECTTABTYPE(M.VESSEL_CODE, M.VESSEL_NAME, NULL, NULL, NULL, NULL, M.POSI_LONG, M.POSI_LAT, M.POSI_DATE, M.AREA_NAME, M.SAFETY_COMPANY, GEN_RANDOM_UUID(), M.SAFETY_COMPANY_CODE, M.MMSI);
        I := I + 1;
    END LOOP;
    
    UPDATE imt_monitor_main IMM 
    SET IMM.STATUS=1, IMM.MONITOR_ENDDATE=null 
    WHERE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - IMM.MONITOR_ENDDATE))/3600,2)<47 
    AND IMM.MONITOR_ENDDATE IS NOT NULL 
    AND IMM.MONITOR_CONF_ID='FHD_ALERT' 
    AND IMM.VESSEL_CODE IN (
        SELECT VESSEL_CODE 
        FROM OBJ_TAB_TYPE AA 
        WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=0
    );
    
    INSERT INTO imt_monitor_detail(monitor_detail_id,monitor_main_id,vessel_code,feedback_mode,feedback_user,feedback_explain,feedback_date,MONITOR_DETAIL_MODE, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE) 
    SELECT GEN_RANDOM_UUID(),AA.ETA_PORT_NAME,AA.VESSEL_CODE,'自动记录','系统','船舶驶入防海盗区，监控启动',CURRENT_TIMESTAMP,'1.1', '00000000','YLZ','00000000',CURRENT_TIMESTAMP,0,0 
    FROM OBJ_TAB_TYPE AA 
    WHERE AA.VESSEL_CODE IN (
        SELECT IMM.VESSEL_CODE 
        FROM imt_monitor_main IMM 
        WHERE MONITOR_CONF_ID='FHD_ALERT' 
        AND MONITOR_STARTDATE IS NOT NULL 
        AND MONITOR_ENDDATE IS NULL
    );
    
    INSERT INTO imt_monitor_main(MONITOR_MAIN_ID,MONITOR_CONF_ID,VESSEL_CODE,Manage_Company_Code,STATUS, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE, MONITOR_STARTDATE) 
    SELECT AA.ETA_PORT_NAME,'FHD_ALERT' AS MONITOR_CONF_ID,AA.VESSEL_CODE,ETA_TIME AS MANAGER_NAME,1, '00000000','YLZ','00000000',CURRENT_TIMESTAMP,0,0,AA.ACTIVITY_DATE 
    FROM OBJ_TAB_TYPE AA 
    WHERE AA.VESSEL_CODE IN (
        SELECT IMM.VESSEL_CODE 
        FROM imt_monitor_main IMM 
        WHERE MONITOR_CONF_ID='FHD_ALERT' 
        AND MONITOR_STARTDATE IS NOT NULL 
        AND MONITOR_ENDDATE IS NULL
    );
    
    OPEN OUT_CURSOR FOR 
    SELECT VESSEL_CODE, VESSEL_NAME, AA.MANAGER_NAME AS SAFETY_COMPANY, AA.MMSI AS MMSI, AA.ACTIVITY_DATE AS POSI_DATE, AA.LATITUDE AS POSI_LAT, AA.LONGTITUDE AS POSI_LONG, AREA_NAME 
    FROM OBJ_TAB_TYPE AA 
    WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=1;
    
EXCEPTION 
    WHEN OTHERS THEN 
        RAISE NOTICE '错误: %', SQLERRM;
END;
$$ LANGUAGE plpgsql;

[2025-06-12 17:42:40.063743] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE SP_FHD_ALERT_IMT (I_VESSEL_CODE IN VARCHAR, I_MANAGER IN VARCHAR, OUT_CURSOR OUT REFCURSOR) AS $$\nDECLARE\n    OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();\n    I INTEGER;\nBEGIN\n    I:=1;\n    FOR M IN (\n        SELECT VESSEL_CODE, VESSEL_NAME, SAFETY_COMPANY, FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE, FVIA.POSI_DATE, \'5\', \'0\') as SAFETY_COMPANY_CODE, MMSI, POSI_DATE, POSI_LAT, POSI_LONG, AREA_NAME \n        FROM FHD_VESSEL_IN_AREA FVIA \n        WHERE FVIA.SORTCODE=(SELECT MAX(SORTCODE) AS SORTCODE FROM FHD_VESSEL_IN_AREA) \n        AND FVIA.CREATED_DTM_LOC > CURRENT_TIMESTAMP - INTERVAL \'1 hour\' \n        AND (I_VESSEL_CODE IS NULL OR FVIA.VESSEL_CODE=I_VESSEL_CODE) \n        AND (I_MANAGER IS NULL OR FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE,FVIA.CREATED_DTM_LOC,\'5\', \'0\')=I_MANAGER)\n    ) LOOP\n        OBJ_TAB_TYPE.EXTEND;\n        OBJ_TAB_TYPE(I) := OBJECTTABTYPE(M.VESSEL_CODE, M.VESSEL_NAME, NULL, NULL, NULL, NULL, M.POSI_LONG, M.POSI_LAT, M.POSI_DATE, M.AREA_NAME, M.SAFETY_COMPANY, GEN_RANDOM_UUID(), M.SAFETY_COMPANY_CODE, M.MMSI);\n        I := I + 1;\n    END LOOP;\n    \n    UPDATE imt_monitor_main IMM \n    SET IMM.STATUS=1, IMM.MONITOR_ENDDATE=null \n    WHERE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - IMM.MONITOR_ENDDATE))/3600,2)<47 \n    AND IMM.MONITOR_ENDDATE IS NOT NULL \n    AND IMM.MONITOR_CONF_ID=\'FHD_ALERT\' \n    AND IMM.VESSEL_CODE IN (\n        SELECT VESSEL_CODE \n        FROM OBJ_TAB_TYPE AA \n        WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=0\n    );\n    \n    INSERT INTO imt_monitor_detail(monitor_detail_id,monitor_main_id,vessel_code,feedback_mode,feedback_user,feedback_explain,feedback_date,MONITOR_DETAIL_MODE, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE) \n    SELECT GEN_RANDOM_UUID(),AA.ETA_PORT_NAME,AA.VESSEL_CODE,\'自动记录\',\'系统\',\'船舶驶入防海盗区，监控启动\',CURRENT_TIMESTAMP,\'1.1\', \'00000000\',\'YLZ\',\'00000000\',CURRENT_TIMESTAMP,0,0 \n    FROM OBJ_TAB_TYPE AA \n    WHERE AA.VESSEL_CODE IN (\n        SELECT IMM.VESSEL_CODE \n        FROM imt_monitor_main IMM \n        WHERE MONITOR_CONF_ID=\'FHD_ALERT\' \n        AND MONITOR_STARTDATE IS NOT NULL \n        AND MONITOR_ENDDATE IS NULL\n    );\n    \n    INSERT INTO imt_monitor_main(MONITOR_MAIN_ID,MONITOR_CONF_ID,VESSEL_CODE,Manage_Company_Code,STATUS, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE, MONITOR_STARTDATE) \n    SELECT AA.ETA_PORT_NAME,\'FHD_ALERT\' AS MONITOR_CONF_ID,AA.VESSEL_CODE,ETA_TIME AS MANAGER_NAME,1, \'00000000\',\'YLZ\',\'00000000\',CURRENT_TIMESTAMP,0,0,AA.ACTIVITY_DATE \n    FROM OBJ_TAB_TYPE AA \n    WHERE AA.VESSEL_CODE IN (\n        SELECT IMM.VESSEL_CODE \n        FROM imt_monitor_main IMM \n        WHERE MONITOR_CONF_ID=\'FHD_ALERT\' \n        AND MONITOR_STARTDATE IS NOT NULL \n        AND MONITOR_ENDDATE IS NULL\n    );\n    \n    OPEN OUT_CURSOR FOR \n    SELECT VESSEL_CODE, VESSEL_NAME, AA.MANAGER_NAME AS SAFETY_COMPANY, AA.MMSI AS MMSI, AA.ACTIVITY_DATE AS POSI_DATE, AA.LATITUDE AS POSI_LAT, AA.LONGTITUDE AS POSI_LONG, AREA_NAME \n    FROM OBJ_TAB_TYPE AA \n    WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=1;\n    \nEXCEPTION \n    WHEN OTHERS THEN \n        RAISE NOTICE \'错误: %\', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:43:08.022139] [Model Answer]: {"answer":"no"}
[2025-06-12 17:43:08.022139] [24] Hybrid Eval Case Judge o4-mini Results: False
[2025-06-12 17:43:08.022139] [24] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:43:08.022139] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a PG database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE SP_FHD_ALERT_IMT (I_VESSEL_CODE IN VARCHAR, I_MANAGER IN VARCHAR, OUT_CURSOR OUT REFCURSOR) AS $$
DECLARE
    OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();
    I INTEGER;
BEGIN
    I:=1;
    FOR M IN (
        SELECT VESSEL_CODE, VESSEL_NAME, SAFETY_COMPANY, FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE, FVIA.POSI_DATE, '5', '0') as SAFETY_COMPANY_CODE, MMSI, POSI_DATE, POSI_LAT, POSI_LONG, AREA_NAME 
        FROM FHD_VESSEL_IN_AREA FVIA 
        WHERE FVIA.SORTCODE=(SELECT MAX(SORTCODE) AS SORTCODE FROM FHD_VESSEL_IN_AREA) 
        AND FVIA.CREATED_DTM_LOC > CURRENT_TIMESTAMP - INTERVAL '1 hour' 
        AND (I_VESSEL_CODE IS NULL OR FVIA.VESSEL_CODE=I_VESSEL_CODE) 
        AND (I_MANAGER IS NULL OR FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE,FVIA.CREATED_DTM_LOC,'5', '0')=I_MANAGER)
    ) LOOP
        OBJ_TAB_TYPE.EXTEND;
        OBJ_TAB_TYPE(I) := OBJECTTABTYPE(M.VESSEL_CODE, M.VESSEL_NAME, NULL, NULL, NULL, NULL, M.POSI_LONG, M.POSI_LAT, M.POSI_DATE, M.AREA_NAME, M.SAFETY_COMPANY, GEN_RANDOM_UUID(), M.SAFETY_COMPANY_CODE, M.MMSI);
        I := I + 1;
    END LOOP;
    
    UPDATE imt_monitor_main IMM 
    SET IMM.STATUS=1, IMM.MONITOR_ENDDATE=null 
    WHERE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - IMM.MONITOR_ENDDATE))/3600,2)<47 
    AND IMM.MONITOR_ENDDATE IS NOT NULL 
    AND IMM.MONITOR_CONF_ID='FHD_ALERT' 
    AND IMM.VESSEL_CODE IN (
        SELECT VESSEL_CODE 
        FROM OBJ_TAB_TYPE AA 
        WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=0
    );
    
    INSERT INTO imt_monitor_detail(monitor_detail_id,monitor_main_id,vessel_code,feedback_mode,feedback_user,feedback_explain,feedback_date,MONITOR_DETAIL_MODE, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE) 
    SELECT GEN_RANDOM_UUID(),AA.ETA_PORT_NAME,AA.VESSEL_CODE,'自动记录','系统','船舶驶入防海盗区，监控启动',CURRENT_TIMESTAMP,'1.1', '00000000','YLZ','00000000',CURRENT_TIMESTAMP,0,0 
    FROM OBJ_TAB_TYPE AA 
    WHERE AA.VESSEL_CODE IN (
        SELECT IMM.VESSEL_CODE 
        FROM imt_monitor_main IMM 
        WHERE MONITOR_CONF_ID='FHD_ALERT' 
        AND MONITOR_STARTDATE IS NOT NULL 
        AND MONITOR_ENDDATE IS NULL
    );
    
    INSERT INTO imt_monitor_main(MONITOR_MAIN_ID,MONITOR_CONF_ID,VESSEL_CODE,Manage_Company_Code,STATUS, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE, MONITOR_STARTDATE) 
    SELECT AA.ETA_PORT_NAME,'FHD_ALERT' AS MONITOR_CONF_ID,AA.VESSEL_CODE,ETA_TIME AS MANAGER_NAME,1, '00000000','YLZ','00000000',CURRENT_TIMESTAMP,0,0,AA.ACTIVITY_DATE 
    FROM OBJ_TAB_TYPE AA 
    WHERE AA.VESSEL_CODE IN (
        SELECT IMM.VESSEL_CODE 
        FROM imt_monitor_main IMM 
        WHERE MONITOR_CONF_ID='FHD_ALERT' 
        AND MONITOR_STARTDATE IS NOT NULL 
        AND MONITOR_ENDDATE IS NULL
    );
    
    OPEN OUT_CURSOR FOR 
    SELECT VESSEL_CODE, VESSEL_NAME, AA.MANAGER_NAME AS SAFETY_COMPANY, AA.MMSI AS MMSI, AA.ACTIVITY_DATE AS POSI_DATE, AA.LATITUDE AS POSI_LAT, AA.LONGTITUDE AS POSI_LONG, AREA_NAME 
    FROM OBJ_TAB_TYPE AA 
    WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=1;
    
EXCEPTION 
    WHEN OTHERS THEN 
        RAISE NOTICE '错误: %', SQLERRM;
END;
$$ LANGUAGE plpgsql;

[2025-06-12 17:43:08.024145] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE SP_FHD_ALERT_IMT (I_VESSEL_CODE IN VARCHAR, I_MANAGER IN VARCHAR, OUT_CURSOR OUT REFCURSOR) AS $$\nDECLARE\n    OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();\n    I INTEGER;\nBEGIN\n    I:=1;\n    FOR M IN (\n        SELECT VESSEL_CODE, VESSEL_NAME, SAFETY_COMPANY, FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE, FVIA.POSI_DATE, \'5\', \'0\') as SAFETY_COMPANY_CODE, MMSI, POSI_DATE, POSI_LAT, POSI_LONG, AREA_NAME \n        FROM FHD_VESSEL_IN_AREA FVIA \n        WHERE FVIA.SORTCODE=(SELECT MAX(SORTCODE) AS SORTCODE FROM FHD_VESSEL_IN_AREA) \n        AND FVIA.CREATED_DTM_LOC > CURRENT_TIMESTAMP - INTERVAL \'1 hour\' \n        AND (I_VESSEL_CODE IS NULL OR FVIA.VESSEL_CODE=I_VESSEL_CODE) \n        AND (I_MANAGER IS NULL OR FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE,FVIA.CREATED_DTM_LOC,\'5\', \'0\')=I_MANAGER)\n    ) LOOP\n        OBJ_TAB_TYPE.EXTEND;\n        OBJ_TAB_TYPE(I) := OBJECTTABTYPE(M.VESSEL_CODE, M.VESSEL_NAME, NULL, NULL, NULL, NULL, M.POSI_LONG, M.POSI_LAT, M.POSI_DATE, M.AREA_NAME, M.SAFETY_COMPANY, GEN_RANDOM_UUID(), M.SAFETY_COMPANY_CODE, M.MMSI);\n        I := I + 1;\n    END LOOP;\n    \n    UPDATE imt_monitor_main IMM \n    SET IMM.STATUS=1, IMM.MONITOR_ENDDATE=null \n    WHERE ROUND(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - IMM.MONITOR_ENDDATE))/3600,2)<47 \n    AND IMM.MONITOR_ENDDATE IS NOT NULL \n    AND IMM.MONITOR_CONF_ID=\'FHD_ALERT\' \n    AND IMM.VESSEL_CODE IN (\n        SELECT VESSEL_CODE \n        FROM OBJ_TAB_TYPE AA \n        WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=0\n    );\n    \n    INSERT INTO imt_monitor_detail(monitor_detail_id,monitor_main_id,vessel_code,feedback_mode,feedback_user,feedback_explain,feedback_date,MONITOR_DETAIL_MODE, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE) \n    SELECT GEN_RANDOM_UUID(),AA.ETA_PORT_NAME,AA.VESSEL_CODE,\'自动记录\',\'系统\',\'船舶驶入防海盗区，监控启动\',CURRENT_TIMESTAMP,\'1.1\', \'00000000\',\'YLZ\',\'00000000\',CURRENT_TIMESTAMP,0,0 \n    FROM OBJ_TAB_TYPE AA \n    WHERE AA.VESSEL_CODE IN (\n        SELECT IMM.VESSEL_CODE \n        FROM imt_monitor_main IMM \n        WHERE MONITOR_CONF_ID=\'FHD_ALERT\' \n        AND MONITOR_STARTDATE IS NOT NULL \n        AND MONITOR_ENDDATE IS NULL\n    );\n    \n    INSERT INTO imt_monitor_main(MONITOR_MAIN_ID,MONITOR_CONF_ID,VESSEL_CODE,Manage_Company_Code,STATUS, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE, MONITOR_STARTDATE) \n    SELECT AA.ETA_PORT_NAME,\'FHD_ALERT\' AS MONITOR_CONF_ID,AA.VESSEL_CODE,ETA_TIME AS MANAGER_NAME,1, \'00000000\',\'YLZ\',\'00000000\',CURRENT_TIMESTAMP,0,0,AA.ACTIVITY_DATE \n    FROM OBJ_TAB_TYPE AA \n    WHERE AA.VESSEL_CODE IN (\n        SELECT IMM.VESSEL_CODE \n        FROM imt_monitor_main IMM \n        WHERE MONITOR_CONF_ID=\'FHD_ALERT\' \n        AND MONITOR_STARTDATE IS NOT NULL \n        AND MONITOR_ENDDATE IS NULL\n    );\n    \n    OPEN OUT_CURSOR FOR \n    SELECT VESSEL_CODE, VESSEL_NAME, AA.MANAGER_NAME AS SAFETY_COMPANY, AA.MMSI AS MMSI, AA.ACTIVITY_DATE AS POSI_DATE, AA.LATITUDE AS POSI_LAT, AA.LONGTITUDE AS POSI_LONG, AREA_NAME \n    FROM OBJ_TAB_TYPE AA \n    WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=1;\n    \nEXCEPTION \n    WHEN OTHERS THEN \n        RAISE NOTICE \'错误: %\', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:43:10.264491] [Model Answer]: {
  "answer": "no"
}
[2025-06-12 17:43:10.265501] [24] Hybrid Eval Case Judge gemini-2.0-flash Results: False
[2025-06-12 17:43:10.265501] [24] Hybrid Eval Case Judge Final Results: False
[2025-06-12 17:43:10.265501] [24] hybrid Eval Case Final Result: False
[2025-06-12 17:43:10.265501] 
--- Case: 25 ---
[2025-06-12 17:43:10.265501] [25] Case Run 1/1
[2025-06-12 17:43:10.266762] [Model Prompt]: You are an expert in SQL dialect translation.
Please convert the following SQL statement from Oracle syntax to PG syntax.
Return **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.

Source SQL:
CREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR2, V_CHARGE_DEPT IN VARCHAR2, V_FEE_TYPE IN VARCHAR2, V_DTLPROJECT IN VARCHAR2, V_APPLY_USER IN VARCHAR2, V_HOST_PERSON IN VARCHAR2, V_CLAIM_NO IN VARCHAR2, V_CLAIM_DATE_F IN VARCHAR2, V_CLAIM_DATE_T IN VARCHAR2, V_SUBMIT_IND IN VARCHAR2, V_AUDIT_PROGRESS IN VARCHAR2, V_INVOICE_TYPE IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_INVOICE_NO IN VARCHAR2, V_CURSOR_TJ OUT SYS_REFCURSOR ) AS BEGIN OPEN V_CURSOR_TJ FOR WITH LS_CURSOR AS ( SELECT REGEXP_SUBSTR (V_AUDIT_PROGRESS, '[^,]+', 1,ROWNUM) AS COLUMN_VALUE FROM DUAL CONNECT BY ROWNUM <= LENGTH (V_AUDIT_PROGRESS) - LENGTH (REPLACE (V_AUDIT_PROGRESS, ',', ''))+1), LS_CURSOR2 AS ( SELECT REGEXP_SUBSTR (V_COST_CONTROL_COMPANY, '[^,]+', 1,ROWNUM) AS COLUMN_VALUE FROM DUAL CONNECT BY ROWNUM <= LENGTH (V_COST_CONTROL_COMPANY) - LENGTH (REPLACE (V_COST_CONTROL_COMPANY, ',', ''))+1 ) SELECT * FROM ( SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID, MAX(FH.CLAIM_NO), MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY, MAX(FR.REL_OFFICE_NAME), MAX(SU1.USR_NAME) AS APPLY_USER, MAX(FU.USR_NAME) AS HOST_PERSON, MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY, MAX(OFF.OFFICE_NAME) AS HOST_DEPT, MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE, MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND, MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS, MAX(FH.AUDIT_DATE), MAX(SU2.USR_NAME), MAX(FH.APPROVE_IND2), MAX(FH.HIGHER_DEPT), LISTAGG(SU2.POSITION_DESCRIBE, ',') WITHIN GROUP(ORDER BY ROWNUM) SU_POSITION_DESCRIBE, MAX(FH.CLAIM_DATE), MAX(CC.CURRENCY_NAME) AS CURRENCY, MAX(FH.AMOUNT), MAX(FH.REAL_AMOUNT), MAX('银行转账') AS PAY_TYPE, MAX(FH.REMARK), MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE FROM FC_ORGAN_FEE_HEADER FH LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_FEE_TYPE' AND C5.CODE_VALUE = FH.Project_Code LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = 'SFC_COST_BODY' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = 'SFC_COST_BODY' AND C1.CODE_VALUE = FH.COST_BODY LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = 'SFC_AUDIT_PROGRESS' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_SUBMIT_IND' AND C4.CODE_VALUE = FH.SUBMIT_IND LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL) AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL) AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL) AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL) AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL) AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL) AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, 'YYYY-MM-DD') OR V_CLAIM_DATE_F IS NULL) AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, 'YYYY-MM-DD') OR V_CLAIM_DATE_T IS NULL) AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL) AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR)OR V_AUDIT_PROGRESS IS NULL) AND EXISTS (SELECT 1 FROM FC_ORGAN_FEE_DTL FFD WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL) AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL) AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL) AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)) GROUP BY FH.ORGAN_FEE_HEADER_ID ORDER BY MAX(FH.CLAIM_NO) DESC ) T LEFT JOIN ( SELECT FD.ORGAN_FEE_HEADER_ID, FF.FREIGHT_NAME, C3.DISPLAY_VALUE_CN AS INVOICE_TYPE, C4.DISPLAY_VALUE_CN AS FEE_PROPERTY, C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE, FD.AMOUNT, FD.AMOUNT_NO_TAX, FD.TAX_RATE, FD.TAX_AMOUNT, FD.INVOICE_NO, FD.INVOICE_CODE, FD.BILLING_DATE, FD.HOUSE_INFO, FD.CHECKCODE_6, FD.BEGIN_DATE, FD.END_DATE, FD.QTY, C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM FROM FC_ORGAN_FEE_DTL FD LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = 'SFC_INVOICE_TYPE' AND C3.CODE_VALUE = FD.INVOICE_TYPE LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_FEE_PROPERTY' AND C4.CODE_VALUE = FD.FEE_PROPERTY LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_CUST_TYPE' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = 'SFC_PURCHASE_ITEM' AND C6.CODE_VALUE = FD.PURCHASE_ITEM where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL) AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL) AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL) AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID; END SP_OFFSET_INFORMATION;

Translated SQL (PG):

[2025-06-12 17:43:10.267765] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR2, V_CHARGE_DEPT IN VARCHAR2, V_FEE_TYPE IN VARCHAR2, V_DTLPROJECT IN VARCHAR2, V_APPLY_USER IN VARCHAR2, V_HOST_PERSON IN VARCHAR2, V_CLAIM_NO IN VARCHAR2, V_CLAIM_DATE_F IN VARCHAR2, V_CLAIM_DATE_T IN VARCHAR2, V_SUBMIT_IND IN VARCHAR2, V_AUDIT_PROGRESS IN VARCHAR2, V_INVOICE_TYPE IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_INVOICE_NO IN VARCHAR2, V_CURSOR_TJ OUT SYS_REFCURSOR ) AS BEGIN OPEN V_CURSOR_TJ FOR WITH LS_CURSOR AS ( SELECT REGEXP_SUBSTR (V_AUDIT_PROGRESS, '[^,]+', 1,ROWNUM) AS COLUMN_VALUE FROM DUAL CONNECT BY ROWNUM <= LENGTH (V_AUDIT_PROGRESS) - LENGTH (REPLACE (V_AUDIT_PROGRESS, ',', ''))+1), LS_CURSOR2 AS ( SELECT REGEXP_SUBSTR (V_COST_CONTROL_COMPANY, '[^,]+', 1,ROWNUM) AS COLUMN_VALUE FROM DUAL CONNECT BY ROWNUM <= LENGTH (V_COST_CONTROL_COMPANY) - LENGTH (REPLACE (V_COST_CONTROL_COMPANY, ',', ''))+1 ) SELECT * FROM ( SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID, MAX(FH.CLAIM_NO), MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY, MAX(FR.REL_OFFICE_NAME), MAX(SU1.USR_NAME) AS APPLY_USER, MAX(FU.USR_NAME) AS HOST_PERSON, MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY, MAX(OFF.OFFICE_NAME) AS HOST_DEPT, MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE, MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND, MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS, MAX(FH.AUDIT_DATE), MAX(SU2.USR_NAME), MAX(FH.APPROVE_IND2), MAX(FH.HIGHER_DEPT), LISTAGG(SU2.POSITION_DESCRIBE, ',') WITHIN GROUP(ORDER BY ROWNUM) SU_POSITION_DESCRIBE, MAX(FH.CLAIM_DATE), MAX(CC.CURRENCY_NAME) AS CURRENCY, MAX(FH.AMOUNT), MAX(FH.REAL_AMOUNT), MAX('银行转账') AS PAY_TYPE, MAX(FH.REMARK), MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE FROM FC_ORGAN_FEE_HEADER FH LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_FEE_TYPE' AND C5.CODE_VALUE = FH.Project_Code LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = 'SFC_COST_BODY' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = 'SFC_COST_BODY' AND C1.CODE_VALUE = FH.COST_BODY LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = 'SFC_AUDIT_PROGRESS' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_SUBMIT_IND' AND C4.CODE_VALUE = FH.SUBMIT_IND LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL) AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL) AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL) AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL) AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL) AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL) AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, 'YYYY-MM-DD') OR V_CLAIM_DATE_F IS NULL) AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, 'YYYY-MM-DD') OR V_CLAIM_DATE_T IS NULL) AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL) AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR)OR V_AUDIT_PROGRESS IS NULL) AND EXISTS (SELECT 1 FROM FC_ORGAN_FEE_DTL FFD WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL) AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL) AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL) AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)) GROUP BY FH.ORGAN_FEE_HEADER_ID ORDER BY MAX(FH.CLAIM_NO) DESC ) T LEFT JOIN ( SELECT FD.ORGAN_FEE_HEADER_ID, FF.FREIGHT_NAME, C3.DISPLAY_VALUE_CN AS INVOICE_TYPE, C4.DISPLAY_VALUE_CN AS FEE_PROPERTY, C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE, FD.AMOUNT, FD.AMOUNT_NO_TAX, FD.TAX_RATE, FD.TAX_AMOUNT, FD.INVOICE_NO, FD.INVOICE_CODE, FD.BILLING_DATE, FD.HOUSE_INFO, FD.CHECKCODE_6, FD.BEGIN_DATE, FD.END_DATE, FD.QTY, C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM FROM FC_ORGAN_FEE_DTL FD LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = 'SFC_INVOICE_TYPE' AND C3.CODE_VALUE = FD.INVOICE_TYPE LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_FEE_PROPERTY' AND C4.CODE_VALUE = FD.FEE_PROPERTY LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_CUST_TYPE' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = 'SFC_PURCHASE_ITEM' AND C6.CODE_VALUE = FD.PURCHASE_ITEM where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL) AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL) AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL) AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID; END SP_OFFSET_INFORMATION;\n\nTranslated SQL (PG):\n"}], 'temperature': 0.6, 'max_tokens': 6500, 'stream': False, 'response_format': None}
[2025-06-12 17:44:31.547899] [Model Answer]: CREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR, V_CHARGE_DEPT IN VARCHAR, V_FEE_TYPE IN VARCHAR, V_DTLPROJECT IN VARCHAR, V_APPLY_USER IN VARCHAR, V_HOST_PERSON IN VARCHAR, V_CLAIM_NO IN VARCHAR, V_CLAIM_DATE_F IN VARCHAR, V_CLAIM_DATE_T IN VARCHAR, V_SUBMIT_IND IN VARCHAR, V_AUDIT_PROGRESS IN VARCHAR, V_INVOICE_TYPE IN VARCHAR, V_INVOICE_CODE IN VARCHAR, V_INVOICE_NO IN VARCHAR, INOUT V_CURSOR_TJ REFCURSOR) AS $$
BEGIN
    OPEN V_CURSOR_TJ FOR
    WITH LS_CURSOR AS (
        SELECT regexp_split_to_table(V_AUDIT_PROGRESS, ',') AS COLUMN_VALUE
    ),
    LS_CURSOR2 AS (
        SELECT regexp_split_to_table(V_COST_CONTROL_COMPANY, ',') AS COLUMN_VALUE
    )
    SELECT * FROM (
        SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID,
        MAX(FH.CLAIM_NO),
        MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY,
        MAX(FR.REL_OFFICE_NAME),
        MAX(SU1.USR_NAME) AS APPLY_USER,
        MAX(FU.USR_NAME) AS HOST_PERSON,
        MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY,
        MAX(OFF.OFFICE_NAME) AS HOST_DEPT,
        MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE,
        MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND,
        MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS,
        MAX(FH.AUDIT_DATE),
        MAX(SU2.USR_NAME),
        MAX(FH.APPROVE_IND2),
        MAX(FH.HIGHER_DEPT),
        string_agg(SU2.POSITION_DESCRIBE, ',') AS SU_POSITION_DESCRIBE,
        MAX(FH.CLAIM_DATE),
        MAX(CC.CURRENCY_NAME) AS CURRENCY,
        MAX(FH.AMOUNT),
        MAX(FH.REAL_AMOUNT),
        MAX('银行转账') AS PAY_TYPE,
        MAX(FH.REMARK),
        MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE
        FROM FC_ORGAN_FEE_HEADER FH
        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_FEE_TYPE' AND C5.CODE_VALUE = FH.Project_Code
        LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON
        LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = 'SFC_COST_BODY' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY
        LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT
        LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER
        LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON
        LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = 'SFC_COST_BODY' AND C1.CODE_VALUE = FH.COST_BODY
        LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT
        LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER
        LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY
        LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = 'SFC_AUDIT_PROGRESS' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS
        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_SUBMIT_IND' AND C4.CODE_VALUE = FH.SUBMIT_IND
        LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID
        LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID
        WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL)
        AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL)
        AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL)
        AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL)
        AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL)
        AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL)
        AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, 'YYYY-MM-DD') OR V_CLAIM_DATE_F IS NULL)
        AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, 'YYYY-MM-DD') OR V_CLAIM_DATE_T IS NULL)
        AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL)
        AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR) OR V_AUDIT_PROGRESS IS NULL)
        AND EXISTS (
            SELECT 1 FROM FC_ORGAN_FEE_DTL FFD
            WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID
            AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)
            AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)
            AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)
            AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)
        )
        GROUP BY FH.ORGAN_FEE_HEADER_ID
        ORDER BY MAX(FH.CLAIM_NO) DESC
    ) T
    LEFT JOIN (
        SELECT FD.ORGAN_FEE_HEADER_ID,
        FF.FREIGHT_NAME,
        C3.DISPLAY_VALUE_CN AS INVOICE_TYPE,
        C4.DISPLAY_VALUE_CN AS FEE_PROPERTY,
        C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE,
        FD.AMOUNT,
        FD.AMOUNT_NO_TAX,
        FD.TAX_RATE,
        FD.TAX_AMOUNT,
        FD.INVOICE_NO,
        FD.INVOICE_CODE,
        FD.BILLING_DATE,
        FD.HOUSE_INFO,
        FD.CHECKCODE_6,
        FD.BEGIN_DATE,
        FD.END_DATE,
        FD.QTY,
        C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM
        FROM FC_ORGAN_FEE_DTL FD
        LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE
        LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = 'SFC_INVOICE_TYPE' AND C3.CODE_VALUE = FD.INVOICE_TYPE
        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_FEE_PROPERTY' AND C4.CODE_VALUE = FD.FEE_PROPERTY
        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_CUST_TYPE' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE
        LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = 'SFC_PURCHASE_ITEM' AND C6.CODE_VALUE = FD.PURCHASE_ITEM
        where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)
        AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)
        AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)
        AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)
    ) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID;
END;
$$ LANGUAGE plpgsql;
[2025-06-12 17:44:31.550329] [25] Hybrid Eval: Using Judge LLM 'Pro/deepseek-ai/DeepSeek-V3'
[2025-06-12 17:44:31.550329] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a PG database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR, V_CHARGE_DEPT IN VARCHAR, V_FEE_TYPE IN VARCHAR, V_DTLPROJECT IN VARCHAR, V_APPLY_USER IN VARCHAR, V_HOST_PERSON IN VARCHAR, V_CLAIM_NO IN VARCHAR, V_CLAIM_DATE_F IN VARCHAR, V_CLAIM_DATE_T IN VARCHAR, V_SUBMIT_IND IN VARCHAR, V_AUDIT_PROGRESS IN VARCHAR, V_INVOICE_TYPE IN VARCHAR, V_INVOICE_CODE IN VARCHAR, V_INVOICE_NO IN VARCHAR, INOUT V_CURSOR_TJ REFCURSOR) AS $$
BEGIN
    OPEN V_CURSOR_TJ FOR
    WITH LS_CURSOR AS (
        SELECT regexp_split_to_table(V_AUDIT_PROGRESS, ',') AS COLUMN_VALUE
    ),
    LS_CURSOR2 AS (
        SELECT regexp_split_to_table(V_COST_CONTROL_COMPANY, ',') AS COLUMN_VALUE
    )
    SELECT * FROM (
        SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID,
        MAX(FH.CLAIM_NO),
        MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY,
        MAX(FR.REL_OFFICE_NAME),
        MAX(SU1.USR_NAME) AS APPLY_USER,
        MAX(FU.USR_NAME) AS HOST_PERSON,
        MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY,
        MAX(OFF.OFFICE_NAME) AS HOST_DEPT,
        MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE,
        MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND,
        MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS,
        MAX(FH.AUDIT_DATE),
        MAX(SU2.USR_NAME),
        MAX(FH.APPROVE_IND2),
        MAX(FH.HIGHER_DEPT),
        string_agg(SU2.POSITION_DESCRIBE, ',') AS SU_POSITION_DESCRIBE,
        MAX(FH.CLAIM_DATE),
        MAX(CC.CURRENCY_NAME) AS CURRENCY,
        MAX(FH.AMOUNT),
        MAX(FH.REAL_AMOUNT),
        MAX('银行转账') AS PAY_TYPE,
        MAX(FH.REMARK),
        MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE
        FROM FC_ORGAN_FEE_HEADER FH
        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_FEE_TYPE' AND C5.CODE_VALUE = FH.Project_Code
        LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON
        LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = 'SFC_COST_BODY' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY
        LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT
        LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER
        LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON
        LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = 'SFC_COST_BODY' AND C1.CODE_VALUE = FH.COST_BODY
        LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT
        LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER
        LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY
        LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = 'SFC_AUDIT_PROGRESS' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS
        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_SUBMIT_IND' AND C4.CODE_VALUE = FH.SUBMIT_IND
        LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID
        LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID
        WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL)
        AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL)
        AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL)
        AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL)
        AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL)
        AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL)
        AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, 'YYYY-MM-DD') OR V_CLAIM_DATE_F IS NULL)
        AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, 'YYYY-MM-DD') OR V_CLAIM_DATE_T IS NULL)
        AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL)
        AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR) OR V_AUDIT_PROGRESS IS NULL)
        AND EXISTS (
            SELECT 1 FROM FC_ORGAN_FEE_DTL FFD
            WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID
            AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)
            AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)
            AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)
            AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)
        )
        GROUP BY FH.ORGAN_FEE_HEADER_ID
        ORDER BY MAX(FH.CLAIM_NO) DESC
    ) T
    LEFT JOIN (
        SELECT FD.ORGAN_FEE_HEADER_ID,
        FF.FREIGHT_NAME,
        C3.DISPLAY_VALUE_CN AS INVOICE_TYPE,
        C4.DISPLAY_VALUE_CN AS FEE_PROPERTY,
        C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE,
        FD.AMOUNT,
        FD.AMOUNT_NO_TAX,
        FD.TAX_RATE,
        FD.TAX_AMOUNT,
        FD.INVOICE_NO,
        FD.INVOICE_CODE,
        FD.BILLING_DATE,
        FD.HOUSE_INFO,
        FD.CHECKCODE_6,
        FD.BEGIN_DATE,
        FD.END_DATE,
        FD.QTY,
        C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM
        FROM FC_ORGAN_FEE_DTL FD
        LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE
        LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = 'SFC_INVOICE_TYPE' AND C3.CODE_VALUE = FD.INVOICE_TYPE
        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_FEE_PROPERTY' AND C4.CODE_VALUE = FD.FEE_PROPERTY
        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_CUST_TYPE' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE
        LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = 'SFC_PURCHASE_ITEM' AND C6.CODE_VALUE = FD.PURCHASE_ITEM
        where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)
        AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)
        AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)
        AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)
    ) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID;
END;
$$ LANGUAGE plpgsql;

[2025-06-12 17:44:31.552583] Model Request Data: {'model': 'Pro/deepseek-ai/DeepSeek-V3', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR, V_CHARGE_DEPT IN VARCHAR, V_FEE_TYPE IN VARCHAR, V_DTLPROJECT IN VARCHAR, V_APPLY_USER IN VARCHAR, V_HOST_PERSON IN VARCHAR, V_CLAIM_NO IN VARCHAR, V_CLAIM_DATE_F IN VARCHAR, V_CLAIM_DATE_T IN VARCHAR, V_SUBMIT_IND IN VARCHAR, V_AUDIT_PROGRESS IN VARCHAR, V_INVOICE_TYPE IN VARCHAR, V_INVOICE_CODE IN VARCHAR, V_INVOICE_NO IN VARCHAR, INOUT V_CURSOR_TJ REFCURSOR) AS $$\nBEGIN\n    OPEN V_CURSOR_TJ FOR\n    WITH LS_CURSOR AS (\n        SELECT regexp_split_to_table(V_AUDIT_PROGRESS, \',\') AS COLUMN_VALUE\n    ),\n    LS_CURSOR2 AS (\n        SELECT regexp_split_to_table(V_COST_CONTROL_COMPANY, \',\') AS COLUMN_VALUE\n    )\n    SELECT * FROM (\n        SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID,\n        MAX(FH.CLAIM_NO),\n        MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY,\n        MAX(FR.REL_OFFICE_NAME),\n        MAX(SU1.USR_NAME) AS APPLY_USER,\n        MAX(FU.USR_NAME) AS HOST_PERSON,\n        MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY,\n        MAX(OFF.OFFICE_NAME) AS HOST_DEPT,\n        MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE,\n        MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND,\n        MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS,\n        MAX(FH.AUDIT_DATE),\n        MAX(SU2.USR_NAME),\n        MAX(FH.APPROVE_IND2),\n        MAX(FH.HIGHER_DEPT),\n        string_agg(SU2.POSITION_DESCRIBE, \',\') AS SU_POSITION_DESCRIBE,\n        MAX(FH.CLAIM_DATE),\n        MAX(CC.CURRENCY_NAME) AS CURRENCY,\n        MAX(FH.AMOUNT),\n        MAX(FH.REAL_AMOUNT),\n        MAX(\'银行转账\') AS PAY_TYPE,\n        MAX(FH.REMARK),\n        MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE\n        FROM FC_ORGAN_FEE_HEADER FH\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_FEE_TYPE\' AND C5.CODE_VALUE = FH.Project_Code\n        LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = \'SFC_COST_BODY\' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY\n        LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT\n        LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER\n        LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = \'SFC_COST_BODY\' AND C1.CODE_VALUE = FH.COST_BODY\n        LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT\n        LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER\n        LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY\n        LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = \'SFC_AUDIT_PROGRESS\' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_SUBMIT_IND\' AND C4.CODE_VALUE = FH.SUBMIT_IND\n        LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID\n        LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID\n        WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL)\n        AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL)\n        AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL)\n        AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL)\n        AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL)\n        AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL)\n        AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, \'YYYY-MM-DD\') OR V_CLAIM_DATE_F IS NULL)\n        AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, \'YYYY-MM-DD\') OR V_CLAIM_DATE_T IS NULL)\n        AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL)\n        AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR) OR V_AUDIT_PROGRESS IS NULL)\n        AND EXISTS (\n            SELECT 1 FROM FC_ORGAN_FEE_DTL FFD\n            WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID\n            AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n            AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n            AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n            AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n        )\n        GROUP BY FH.ORGAN_FEE_HEADER_ID\n        ORDER BY MAX(FH.CLAIM_NO) DESC\n    ) T\n    LEFT JOIN (\n        SELECT FD.ORGAN_FEE_HEADER_ID,\n        FF.FREIGHT_NAME,\n        C3.DISPLAY_VALUE_CN AS INVOICE_TYPE,\n        C4.DISPLAY_VALUE_CN AS FEE_PROPERTY,\n        C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE,\n        FD.AMOUNT,\n        FD.AMOUNT_NO_TAX,\n        FD.TAX_RATE,\n        FD.TAX_AMOUNT,\n        FD.INVOICE_NO,\n        FD.INVOICE_CODE,\n        FD.BILLING_DATE,\n        FD.HOUSE_INFO,\n        FD.CHECKCODE_6,\n        FD.BEGIN_DATE,\n        FD.END_DATE,\n        FD.QTY,\n        C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM\n        FROM FC_ORGAN_FEE_DTL FD\n        LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE\n        LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = \'SFC_INVOICE_TYPE\' AND C3.CODE_VALUE = FD.INVOICE_TYPE\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_FEE_PROPERTY\' AND C4.CODE_VALUE = FD.FEE_PROPERTY\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_CUST_TYPE\' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE\n        LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = \'SFC_PURCHASE_ITEM\' AND C6.CODE_VALUE = FD.PURCHASE_ITEM\n        where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n        AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n        AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n        AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n    ) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID;\nEND;\n$$ LANGUAGE plpgsql;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:44:34.809979] [Model Answer]: {
  "answer": "yes"
}
[2025-06-12 17:44:34.809979] [25] Hybrid Eval Case Judge Pro/deepseek-ai/DeepSeek-V3 Results: True
[2025-06-12 17:44:34.809979] [25] Hybrid Eval: Using Judge LLM 'o4-mini'
[2025-06-12 17:44:34.810989] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a PG database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR, V_CHARGE_DEPT IN VARCHAR, V_FEE_TYPE IN VARCHAR, V_DTLPROJECT IN VARCHAR, V_APPLY_USER IN VARCHAR, V_HOST_PERSON IN VARCHAR, V_CLAIM_NO IN VARCHAR, V_CLAIM_DATE_F IN VARCHAR, V_CLAIM_DATE_T IN VARCHAR, V_SUBMIT_IND IN VARCHAR, V_AUDIT_PROGRESS IN VARCHAR, V_INVOICE_TYPE IN VARCHAR, V_INVOICE_CODE IN VARCHAR, V_INVOICE_NO IN VARCHAR, INOUT V_CURSOR_TJ REFCURSOR) AS $$
BEGIN
    OPEN V_CURSOR_TJ FOR
    WITH LS_CURSOR AS (
        SELECT regexp_split_to_table(V_AUDIT_PROGRESS, ',') AS COLUMN_VALUE
    ),
    LS_CURSOR2 AS (
        SELECT regexp_split_to_table(V_COST_CONTROL_COMPANY, ',') AS COLUMN_VALUE
    )
    SELECT * FROM (
        SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID,
        MAX(FH.CLAIM_NO),
        MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY,
        MAX(FR.REL_OFFICE_NAME),
        MAX(SU1.USR_NAME) AS APPLY_USER,
        MAX(FU.USR_NAME) AS HOST_PERSON,
        MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY,
        MAX(OFF.OFFICE_NAME) AS HOST_DEPT,
        MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE,
        MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND,
        MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS,
        MAX(FH.AUDIT_DATE),
        MAX(SU2.USR_NAME),
        MAX(FH.APPROVE_IND2),
        MAX(FH.HIGHER_DEPT),
        string_agg(SU2.POSITION_DESCRIBE, ',') AS SU_POSITION_DESCRIBE,
        MAX(FH.CLAIM_DATE),
        MAX(CC.CURRENCY_NAME) AS CURRENCY,
        MAX(FH.AMOUNT),
        MAX(FH.REAL_AMOUNT),
        MAX('银行转账') AS PAY_TYPE,
        MAX(FH.REMARK),
        MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE
        FROM FC_ORGAN_FEE_HEADER FH
        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_FEE_TYPE' AND C5.CODE_VALUE = FH.Project_Code
        LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON
        LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = 'SFC_COST_BODY' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY
        LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT
        LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER
        LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON
        LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = 'SFC_COST_BODY' AND C1.CODE_VALUE = FH.COST_BODY
        LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT
        LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER
        LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY
        LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = 'SFC_AUDIT_PROGRESS' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS
        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_SUBMIT_IND' AND C4.CODE_VALUE = FH.SUBMIT_IND
        LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID
        LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID
        WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL)
        AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL)
        AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL)
        AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL)
        AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL)
        AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL)
        AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, 'YYYY-MM-DD') OR V_CLAIM_DATE_F IS NULL)
        AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, 'YYYY-MM-DD') OR V_CLAIM_DATE_T IS NULL)
        AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL)
        AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR) OR V_AUDIT_PROGRESS IS NULL)
        AND EXISTS (
            SELECT 1 FROM FC_ORGAN_FEE_DTL FFD
            WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID
            AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)
            AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)
            AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)
            AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)
        )
        GROUP BY FH.ORGAN_FEE_HEADER_ID
        ORDER BY MAX(FH.CLAIM_NO) DESC
    ) T
    LEFT JOIN (
        SELECT FD.ORGAN_FEE_HEADER_ID,
        FF.FREIGHT_NAME,
        C3.DISPLAY_VALUE_CN AS INVOICE_TYPE,
        C4.DISPLAY_VALUE_CN AS FEE_PROPERTY,
        C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE,
        FD.AMOUNT,
        FD.AMOUNT_NO_TAX,
        FD.TAX_RATE,
        FD.TAX_AMOUNT,
        FD.INVOICE_NO,
        FD.INVOICE_CODE,
        FD.BILLING_DATE,
        FD.HOUSE_INFO,
        FD.CHECKCODE_6,
        FD.BEGIN_DATE,
        FD.END_DATE,
        FD.QTY,
        C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM
        FROM FC_ORGAN_FEE_DTL FD
        LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE
        LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = 'SFC_INVOICE_TYPE' AND C3.CODE_VALUE = FD.INVOICE_TYPE
        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_FEE_PROPERTY' AND C4.CODE_VALUE = FD.FEE_PROPERTY
        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_CUST_TYPE' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE
        LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = 'SFC_PURCHASE_ITEM' AND C6.CODE_VALUE = FD.PURCHASE_ITEM
        where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)
        AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)
        AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)
        AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)
    ) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID;
END;
$$ LANGUAGE plpgsql;

[2025-06-12 17:44:34.812604] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR, V_CHARGE_DEPT IN VARCHAR, V_FEE_TYPE IN VARCHAR, V_DTLPROJECT IN VARCHAR, V_APPLY_USER IN VARCHAR, V_HOST_PERSON IN VARCHAR, V_CLAIM_NO IN VARCHAR, V_CLAIM_DATE_F IN VARCHAR, V_CLAIM_DATE_T IN VARCHAR, V_SUBMIT_IND IN VARCHAR, V_AUDIT_PROGRESS IN VARCHAR, V_INVOICE_TYPE IN VARCHAR, V_INVOICE_CODE IN VARCHAR, V_INVOICE_NO IN VARCHAR, INOUT V_CURSOR_TJ REFCURSOR) AS $$\nBEGIN\n    OPEN V_CURSOR_TJ FOR\n    WITH LS_CURSOR AS (\n        SELECT regexp_split_to_table(V_AUDIT_PROGRESS, \',\') AS COLUMN_VALUE\n    ),\n    LS_CURSOR2 AS (\n        SELECT regexp_split_to_table(V_COST_CONTROL_COMPANY, \',\') AS COLUMN_VALUE\n    )\n    SELECT * FROM (\n        SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID,\n        MAX(FH.CLAIM_NO),\n        MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY,\n        MAX(FR.REL_OFFICE_NAME),\n        MAX(SU1.USR_NAME) AS APPLY_USER,\n        MAX(FU.USR_NAME) AS HOST_PERSON,\n        MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY,\n        MAX(OFF.OFFICE_NAME) AS HOST_DEPT,\n        MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE,\n        MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND,\n        MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS,\n        MAX(FH.AUDIT_DATE),\n        MAX(SU2.USR_NAME),\n        MAX(FH.APPROVE_IND2),\n        MAX(FH.HIGHER_DEPT),\n        string_agg(SU2.POSITION_DESCRIBE, \',\') AS SU_POSITION_DESCRIBE,\n        MAX(FH.CLAIM_DATE),\n        MAX(CC.CURRENCY_NAME) AS CURRENCY,\n        MAX(FH.AMOUNT),\n        MAX(FH.REAL_AMOUNT),\n        MAX(\'银行转账\') AS PAY_TYPE,\n        MAX(FH.REMARK),\n        MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE\n        FROM FC_ORGAN_FEE_HEADER FH\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_FEE_TYPE\' AND C5.CODE_VALUE = FH.Project_Code\n        LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = \'SFC_COST_BODY\' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY\n        LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT\n        LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER\n        LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = \'SFC_COST_BODY\' AND C1.CODE_VALUE = FH.COST_BODY\n        LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT\n        LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER\n        LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY\n        LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = \'SFC_AUDIT_PROGRESS\' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_SUBMIT_IND\' AND C4.CODE_VALUE = FH.SUBMIT_IND\n        LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID\n        LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID\n        WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL)\n        AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL)\n        AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL)\n        AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL)\n        AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL)\n        AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL)\n        AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, \'YYYY-MM-DD\') OR V_CLAIM_DATE_F IS NULL)\n        AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, \'YYYY-MM-DD\') OR V_CLAIM_DATE_T IS NULL)\n        AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL)\n        AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR) OR V_AUDIT_PROGRESS IS NULL)\n        AND EXISTS (\n            SELECT 1 FROM FC_ORGAN_FEE_DTL FFD\n            WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID\n            AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n            AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n            AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n            AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n        )\n        GROUP BY FH.ORGAN_FEE_HEADER_ID\n        ORDER BY MAX(FH.CLAIM_NO) DESC\n    ) T\n    LEFT JOIN (\n        SELECT FD.ORGAN_FEE_HEADER_ID,\n        FF.FREIGHT_NAME,\n        C3.DISPLAY_VALUE_CN AS INVOICE_TYPE,\n        C4.DISPLAY_VALUE_CN AS FEE_PROPERTY,\n        C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE,\n        FD.AMOUNT,\n        FD.AMOUNT_NO_TAX,\n        FD.TAX_RATE,\n        FD.TAX_AMOUNT,\n        FD.INVOICE_NO,\n        FD.INVOICE_CODE,\n        FD.BILLING_DATE,\n        FD.HOUSE_INFO,\n        FD.CHECKCODE_6,\n        FD.BEGIN_DATE,\n        FD.END_DATE,\n        FD.QTY,\n        C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM\n        FROM FC_ORGAN_FEE_DTL FD\n        LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE\n        LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = \'SFC_INVOICE_TYPE\' AND C3.CODE_VALUE = FD.INVOICE_TYPE\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_FEE_PROPERTY\' AND C4.CODE_VALUE = FD.FEE_PROPERTY\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_CUST_TYPE\' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE\n        LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = \'SFC_PURCHASE_ITEM\' AND C6.CODE_VALUE = FD.PURCHASE_ITEM\n        where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n        AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n        AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n        AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n    ) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID;\nEND;\n$$ LANGUAGE plpgsql;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:45:49.039748] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR, V_CHARGE_DEPT IN VARCHAR, V_FEE_TYPE IN VARCHAR, V_DTLPROJECT IN VARCHAR, V_APPLY_USER IN VARCHAR, V_HOST_PERSON IN VARCHAR, V_CLAIM_NO IN VARCHAR, V_CLAIM_DATE_F IN VARCHAR, V_CLAIM_DATE_T IN VARCHAR, V_SUBMIT_IND IN VARCHAR, V_AUDIT_PROGRESS IN VARCHAR, V_INVOICE_TYPE IN VARCHAR, V_INVOICE_CODE IN VARCHAR, V_INVOICE_NO IN VARCHAR, INOUT V_CURSOR_TJ REFCURSOR) AS $$\nBEGIN\n    OPEN V_CURSOR_TJ FOR\n    WITH LS_CURSOR AS (\n        SELECT regexp_split_to_table(V_AUDIT_PROGRESS, \',\') AS COLUMN_VALUE\n    ),\n    LS_CURSOR2 AS (\n        SELECT regexp_split_to_table(V_COST_CONTROL_COMPANY, \',\') AS COLUMN_VALUE\n    )\n    SELECT * FROM (\n        SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID,\n        MAX(FH.CLAIM_NO),\n        MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY,\n        MAX(FR.REL_OFFICE_NAME),\n        MAX(SU1.USR_NAME) AS APPLY_USER,\n        MAX(FU.USR_NAME) AS HOST_PERSON,\n        MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY,\n        MAX(OFF.OFFICE_NAME) AS HOST_DEPT,\n        MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE,\n        MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND,\n        MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS,\n        MAX(FH.AUDIT_DATE),\n        MAX(SU2.USR_NAME),\n        MAX(FH.APPROVE_IND2),\n        MAX(FH.HIGHER_DEPT),\n        string_agg(SU2.POSITION_DESCRIBE, \',\') AS SU_POSITION_DESCRIBE,\n        MAX(FH.CLAIM_DATE),\n        MAX(CC.CURRENCY_NAME) AS CURRENCY,\n        MAX(FH.AMOUNT),\n        MAX(FH.REAL_AMOUNT),\n        MAX(\'银行转账\') AS PAY_TYPE,\n        MAX(FH.REMARK),\n        MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE\n        FROM FC_ORGAN_FEE_HEADER FH\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_FEE_TYPE\' AND C5.CODE_VALUE = FH.Project_Code\n        LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = \'SFC_COST_BODY\' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY\n        LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT\n        LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER\n        LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = \'SFC_COST_BODY\' AND C1.CODE_VALUE = FH.COST_BODY\n        LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT\n        LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER\n        LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY\n        LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = \'SFC_AUDIT_PROGRESS\' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_SUBMIT_IND\' AND C4.CODE_VALUE = FH.SUBMIT_IND\n        LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID\n        LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID\n        WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL)\n        AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL)\n        AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL)\n        AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL)\n        AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL)\n        AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL)\n        AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, \'YYYY-MM-DD\') OR V_CLAIM_DATE_F IS NULL)\n        AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, \'YYYY-MM-DD\') OR V_CLAIM_DATE_T IS NULL)\n        AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL)\n        AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR) OR V_AUDIT_PROGRESS IS NULL)\n        AND EXISTS (\n            SELECT 1 FROM FC_ORGAN_FEE_DTL FFD\n            WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID\n            AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n            AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n            AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n            AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n        )\n        GROUP BY FH.ORGAN_FEE_HEADER_ID\n        ORDER BY MAX(FH.CLAIM_NO) DESC\n    ) T\n    LEFT JOIN (\n        SELECT FD.ORGAN_FEE_HEADER_ID,\n        FF.FREIGHT_NAME,\n        C3.DISPLAY_VALUE_CN AS INVOICE_TYPE,\n        C4.DISPLAY_VALUE_CN AS FEE_PROPERTY,\n        C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE,\n        FD.AMOUNT,\n        FD.AMOUNT_NO_TAX,\n        FD.TAX_RATE,\n        FD.TAX_AMOUNT,\n        FD.INVOICE_NO,\n        FD.INVOICE_CODE,\n        FD.BILLING_DATE,\n        FD.HOUSE_INFO,\n        FD.CHECKCODE_6,\n        FD.BEGIN_DATE,\n        FD.END_DATE,\n        FD.QTY,\n        C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM\n        FROM FC_ORGAN_FEE_DTL FD\n        LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE\n        LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = \'SFC_INVOICE_TYPE\' AND C3.CODE_VALUE = FD.INVOICE_TYPE\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_FEE_PROPERTY\' AND C4.CODE_VALUE = FD.FEE_PROPERTY\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_CUST_TYPE\' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE\n        LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = \'SFC_PURCHASE_ITEM\' AND C6.CODE_VALUE = FD.PURCHASE_ITEM\n        where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n        AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n        AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n        AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n    ) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID;\nEND;\n$$ LANGUAGE plpgsql;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:46:59.062900] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR, V_CHARGE_DEPT IN VARCHAR, V_FEE_TYPE IN VARCHAR, V_DTLPROJECT IN VARCHAR, V_APPLY_USER IN VARCHAR, V_HOST_PERSON IN VARCHAR, V_CLAIM_NO IN VARCHAR, V_CLAIM_DATE_F IN VARCHAR, V_CLAIM_DATE_T IN VARCHAR, V_SUBMIT_IND IN VARCHAR, V_AUDIT_PROGRESS IN VARCHAR, V_INVOICE_TYPE IN VARCHAR, V_INVOICE_CODE IN VARCHAR, V_INVOICE_NO IN VARCHAR, INOUT V_CURSOR_TJ REFCURSOR) AS $$\nBEGIN\n    OPEN V_CURSOR_TJ FOR\n    WITH LS_CURSOR AS (\n        SELECT regexp_split_to_table(V_AUDIT_PROGRESS, \',\') AS COLUMN_VALUE\n    ),\n    LS_CURSOR2 AS (\n        SELECT regexp_split_to_table(V_COST_CONTROL_COMPANY, \',\') AS COLUMN_VALUE\n    )\n    SELECT * FROM (\n        SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID,\n        MAX(FH.CLAIM_NO),\n        MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY,\n        MAX(FR.REL_OFFICE_NAME),\n        MAX(SU1.USR_NAME) AS APPLY_USER,\n        MAX(FU.USR_NAME) AS HOST_PERSON,\n        MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY,\n        MAX(OFF.OFFICE_NAME) AS HOST_DEPT,\n        MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE,\n        MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND,\n        MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS,\n        MAX(FH.AUDIT_DATE),\n        MAX(SU2.USR_NAME),\n        MAX(FH.APPROVE_IND2),\n        MAX(FH.HIGHER_DEPT),\n        string_agg(SU2.POSITION_DESCRIBE, \',\') AS SU_POSITION_DESCRIBE,\n        MAX(FH.CLAIM_DATE),\n        MAX(CC.CURRENCY_NAME) AS CURRENCY,\n        MAX(FH.AMOUNT),\n        MAX(FH.REAL_AMOUNT),\n        MAX(\'银行转账\') AS PAY_TYPE,\n        MAX(FH.REMARK),\n        MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE\n        FROM FC_ORGAN_FEE_HEADER FH\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_FEE_TYPE\' AND C5.CODE_VALUE = FH.Project_Code\n        LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = \'SFC_COST_BODY\' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY\n        LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT\n        LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER\n        LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = \'SFC_COST_BODY\' AND C1.CODE_VALUE = FH.COST_BODY\n        LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT\n        LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER\n        LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY\n        LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = \'SFC_AUDIT_PROGRESS\' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_SUBMIT_IND\' AND C4.CODE_VALUE = FH.SUBMIT_IND\n        LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID\n        LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID\n        WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL)\n        AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL)\n        AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL)\n        AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL)\n        AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL)\n        AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL)\n        AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, \'YYYY-MM-DD\') OR V_CLAIM_DATE_F IS NULL)\n        AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, \'YYYY-MM-DD\') OR V_CLAIM_DATE_T IS NULL)\n        AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL)\n        AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR) OR V_AUDIT_PROGRESS IS NULL)\n        AND EXISTS (\n            SELECT 1 FROM FC_ORGAN_FEE_DTL FFD\n            WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID\n            AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n            AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n            AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n            AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n        )\n        GROUP BY FH.ORGAN_FEE_HEADER_ID\n        ORDER BY MAX(FH.CLAIM_NO) DESC\n    ) T\n    LEFT JOIN (\n        SELECT FD.ORGAN_FEE_HEADER_ID,\n        FF.FREIGHT_NAME,\n        C3.DISPLAY_VALUE_CN AS INVOICE_TYPE,\n        C4.DISPLAY_VALUE_CN AS FEE_PROPERTY,\n        C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE,\n        FD.AMOUNT,\n        FD.AMOUNT_NO_TAX,\n        FD.TAX_RATE,\n        FD.TAX_AMOUNT,\n        FD.INVOICE_NO,\n        FD.INVOICE_CODE,\n        FD.BILLING_DATE,\n        FD.HOUSE_INFO,\n        FD.CHECKCODE_6,\n        FD.BEGIN_DATE,\n        FD.END_DATE,\n        FD.QTY,\n        C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM\n        FROM FC_ORGAN_FEE_DTL FD\n        LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE\n        LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = \'SFC_INVOICE_TYPE\' AND C3.CODE_VALUE = FD.INVOICE_TYPE\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_FEE_PROPERTY\' AND C4.CODE_VALUE = FD.FEE_PROPERTY\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_CUST_TYPE\' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE\n        LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = \'SFC_PURCHASE_ITEM\' AND C6.CODE_VALUE = FD.PURCHASE_ITEM\n        where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n        AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n        AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n        AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n    ) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID;\nEND;\n$$ LANGUAGE plpgsql;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:48:23.613013] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR, V_CHARGE_DEPT IN VARCHAR, V_FEE_TYPE IN VARCHAR, V_DTLPROJECT IN VARCHAR, V_APPLY_USER IN VARCHAR, V_HOST_PERSON IN VARCHAR, V_CLAIM_NO IN VARCHAR, V_CLAIM_DATE_F IN VARCHAR, V_CLAIM_DATE_T IN VARCHAR, V_SUBMIT_IND IN VARCHAR, V_AUDIT_PROGRESS IN VARCHAR, V_INVOICE_TYPE IN VARCHAR, V_INVOICE_CODE IN VARCHAR, V_INVOICE_NO IN VARCHAR, INOUT V_CURSOR_TJ REFCURSOR) AS $$\nBEGIN\n    OPEN V_CURSOR_TJ FOR\n    WITH LS_CURSOR AS (\n        SELECT regexp_split_to_table(V_AUDIT_PROGRESS, \',\') AS COLUMN_VALUE\n    ),\n    LS_CURSOR2 AS (\n        SELECT regexp_split_to_table(V_COST_CONTROL_COMPANY, \',\') AS COLUMN_VALUE\n    )\n    SELECT * FROM (\n        SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID,\n        MAX(FH.CLAIM_NO),\n        MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY,\n        MAX(FR.REL_OFFICE_NAME),\n        MAX(SU1.USR_NAME) AS APPLY_USER,\n        MAX(FU.USR_NAME) AS HOST_PERSON,\n        MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY,\n        MAX(OFF.OFFICE_NAME) AS HOST_DEPT,\n        MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE,\n        MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND,\n        MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS,\n        MAX(FH.AUDIT_DATE),\n        MAX(SU2.USR_NAME),\n        MAX(FH.APPROVE_IND2),\n        MAX(FH.HIGHER_DEPT),\n        string_agg(SU2.POSITION_DESCRIBE, \',\') AS SU_POSITION_DESCRIBE,\n        MAX(FH.CLAIM_DATE),\n        MAX(CC.CURRENCY_NAME) AS CURRENCY,\n        MAX(FH.AMOUNT),\n        MAX(FH.REAL_AMOUNT),\n        MAX(\'银行转账\') AS PAY_TYPE,\n        MAX(FH.REMARK),\n        MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE\n        FROM FC_ORGAN_FEE_HEADER FH\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_FEE_TYPE\' AND C5.CODE_VALUE = FH.Project_Code\n        LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = \'SFC_COST_BODY\' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY\n        LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT\n        LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER\n        LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = \'SFC_COST_BODY\' AND C1.CODE_VALUE = FH.COST_BODY\n        LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT\n        LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER\n        LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY\n        LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = \'SFC_AUDIT_PROGRESS\' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_SUBMIT_IND\' AND C4.CODE_VALUE = FH.SUBMIT_IND\n        LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID\n        LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID\n        WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL)\n        AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL)\n        AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL)\n        AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL)\n        AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL)\n        AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL)\n        AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, \'YYYY-MM-DD\') OR V_CLAIM_DATE_F IS NULL)\n        AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, \'YYYY-MM-DD\') OR V_CLAIM_DATE_T IS NULL)\n        AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL)\n        AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR) OR V_AUDIT_PROGRESS IS NULL)\n        AND EXISTS (\n            SELECT 1 FROM FC_ORGAN_FEE_DTL FFD\n            WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID\n            AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n            AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n            AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n            AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n        )\n        GROUP BY FH.ORGAN_FEE_HEADER_ID\n        ORDER BY MAX(FH.CLAIM_NO) DESC\n    ) T\n    LEFT JOIN (\n        SELECT FD.ORGAN_FEE_HEADER_ID,\n        FF.FREIGHT_NAME,\n        C3.DISPLAY_VALUE_CN AS INVOICE_TYPE,\n        C4.DISPLAY_VALUE_CN AS FEE_PROPERTY,\n        C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE,\n        FD.AMOUNT,\n        FD.AMOUNT_NO_TAX,\n        FD.TAX_RATE,\n        FD.TAX_AMOUNT,\n        FD.INVOICE_NO,\n        FD.INVOICE_CODE,\n        FD.BILLING_DATE,\n        FD.HOUSE_INFO,\n        FD.CHECKCODE_6,\n        FD.BEGIN_DATE,\n        FD.END_DATE,\n        FD.QTY,\n        C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM\n        FROM FC_ORGAN_FEE_DTL FD\n        LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE\n        LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = \'SFC_INVOICE_TYPE\' AND C3.CODE_VALUE = FD.INVOICE_TYPE\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_FEE_PROPERTY\' AND C4.CODE_VALUE = FD.FEE_PROPERTY\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_CUST_TYPE\' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE\n        LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = \'SFC_PURCHASE_ITEM\' AND C6.CODE_VALUE = FD.PURCHASE_ITEM\n        where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n        AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n        AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n        AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n    ) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID;\nEND;\n$$ LANGUAGE plpgsql;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:50:06.134061] Model Request Data: {'model': 'o4-mini', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR, V_CHARGE_DEPT IN VARCHAR, V_FEE_TYPE IN VARCHAR, V_DTLPROJECT IN VARCHAR, V_APPLY_USER IN VARCHAR, V_HOST_PERSON IN VARCHAR, V_CLAIM_NO IN VARCHAR, V_CLAIM_DATE_F IN VARCHAR, V_CLAIM_DATE_T IN VARCHAR, V_SUBMIT_IND IN VARCHAR, V_AUDIT_PROGRESS IN VARCHAR, V_INVOICE_TYPE IN VARCHAR, V_INVOICE_CODE IN VARCHAR, V_INVOICE_NO IN VARCHAR, INOUT V_CURSOR_TJ REFCURSOR) AS $$\nBEGIN\n    OPEN V_CURSOR_TJ FOR\n    WITH LS_CURSOR AS (\n        SELECT regexp_split_to_table(V_AUDIT_PROGRESS, \',\') AS COLUMN_VALUE\n    ),\n    LS_CURSOR2 AS (\n        SELECT regexp_split_to_table(V_COST_CONTROL_COMPANY, \',\') AS COLUMN_VALUE\n    )\n    SELECT * FROM (\n        SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID,\n        MAX(FH.CLAIM_NO),\n        MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY,\n        MAX(FR.REL_OFFICE_NAME),\n        MAX(SU1.USR_NAME) AS APPLY_USER,\n        MAX(FU.USR_NAME) AS HOST_PERSON,\n        MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY,\n        MAX(OFF.OFFICE_NAME) AS HOST_DEPT,\n        MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE,\n        MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND,\n        MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS,\n        MAX(FH.AUDIT_DATE),\n        MAX(SU2.USR_NAME),\n        MAX(FH.APPROVE_IND2),\n        MAX(FH.HIGHER_DEPT),\n        string_agg(SU2.POSITION_DESCRIBE, \',\') AS SU_POSITION_DESCRIBE,\n        MAX(FH.CLAIM_DATE),\n        MAX(CC.CURRENCY_NAME) AS CURRENCY,\n        MAX(FH.AMOUNT),\n        MAX(FH.REAL_AMOUNT),\n        MAX(\'银行转账\') AS PAY_TYPE,\n        MAX(FH.REMARK),\n        MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE\n        FROM FC_ORGAN_FEE_HEADER FH\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_FEE_TYPE\' AND C5.CODE_VALUE = FH.Project_Code\n        LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = \'SFC_COST_BODY\' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY\n        LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT\n        LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER\n        LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = \'SFC_COST_BODY\' AND C1.CODE_VALUE = FH.COST_BODY\n        LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT\n        LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER\n        LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY\n        LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = \'SFC_AUDIT_PROGRESS\' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_SUBMIT_IND\' AND C4.CODE_VALUE = FH.SUBMIT_IND\n        LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID\n        LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID\n        WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL)\n        AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL)\n        AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL)\n        AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL)\n        AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL)\n        AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL)\n        AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, \'YYYY-MM-DD\') OR V_CLAIM_DATE_F IS NULL)\n        AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, \'YYYY-MM-DD\') OR V_CLAIM_DATE_T IS NULL)\n        AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL)\n        AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR) OR V_AUDIT_PROGRESS IS NULL)\n        AND EXISTS (\n            SELECT 1 FROM FC_ORGAN_FEE_DTL FFD\n            WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID\n            AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n            AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n            AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n            AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n        )\n        GROUP BY FH.ORGAN_FEE_HEADER_ID\n        ORDER BY MAX(FH.CLAIM_NO) DESC\n    ) T\n    LEFT JOIN (\n        SELECT FD.ORGAN_FEE_HEADER_ID,\n        FF.FREIGHT_NAME,\n        C3.DISPLAY_VALUE_CN AS INVOICE_TYPE,\n        C4.DISPLAY_VALUE_CN AS FEE_PROPERTY,\n        C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE,\n        FD.AMOUNT,\n        FD.AMOUNT_NO_TAX,\n        FD.TAX_RATE,\n        FD.TAX_AMOUNT,\n        FD.INVOICE_NO,\n        FD.INVOICE_CODE,\n        FD.BILLING_DATE,\n        FD.HOUSE_INFO,\n        FD.CHECKCODE_6,\n        FD.BEGIN_DATE,\n        FD.END_DATE,\n        FD.QTY,\n        C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM\n        FROM FC_ORGAN_FEE_DTL FD\n        LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE\n        LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = \'SFC_INVOICE_TYPE\' AND C3.CODE_VALUE = FD.INVOICE_TYPE\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_FEE_PROPERTY\' AND C4.CODE_VALUE = FD.FEE_PROPERTY\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_CUST_TYPE\' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE\n        LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = \'SFC_PURCHASE_ITEM\' AND C6.CODE_VALUE = FD.PURCHASE_ITEM\n        where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n        AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n        AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n        AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n    ) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID;\nEND;\n$$ LANGUAGE plpgsql;\n'}], 'max_completion_tokens': 6500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:50:24.193183] [25] Hybrid Eval Case Judge o4-mini Results: False
[2025-06-12 17:50:24.194202] [25] Hybrid Eval: Using Judge LLM 'gemini-2.0-flash'
[2025-06-12 17:50:24.194202] [Model Prompt]: You are a database expert. Determine whether the following SQL statement
is syntactically valid and executable in a PG database.
Do **not** execute it; just check syntax correctness.
Return **only** JSON in this format, with no extra text:

{
  "answer": "yes" | "no"
}

SQL:
CREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR, V_CHARGE_DEPT IN VARCHAR, V_FEE_TYPE IN VARCHAR, V_DTLPROJECT IN VARCHAR, V_APPLY_USER IN VARCHAR, V_HOST_PERSON IN VARCHAR, V_CLAIM_NO IN VARCHAR, V_CLAIM_DATE_F IN VARCHAR, V_CLAIM_DATE_T IN VARCHAR, V_SUBMIT_IND IN VARCHAR, V_AUDIT_PROGRESS IN VARCHAR, V_INVOICE_TYPE IN VARCHAR, V_INVOICE_CODE IN VARCHAR, V_INVOICE_NO IN VARCHAR, INOUT V_CURSOR_TJ REFCURSOR) AS $$
BEGIN
    OPEN V_CURSOR_TJ FOR
    WITH LS_CURSOR AS (
        SELECT regexp_split_to_table(V_AUDIT_PROGRESS, ',') AS COLUMN_VALUE
    ),
    LS_CURSOR2 AS (
        SELECT regexp_split_to_table(V_COST_CONTROL_COMPANY, ',') AS COLUMN_VALUE
    )
    SELECT * FROM (
        SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID,
        MAX(FH.CLAIM_NO),
        MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY,
        MAX(FR.REL_OFFICE_NAME),
        MAX(SU1.USR_NAME) AS APPLY_USER,
        MAX(FU.USR_NAME) AS HOST_PERSON,
        MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY,
        MAX(OFF.OFFICE_NAME) AS HOST_DEPT,
        MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE,
        MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND,
        MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS,
        MAX(FH.AUDIT_DATE),
        MAX(SU2.USR_NAME),
        MAX(FH.APPROVE_IND2),
        MAX(FH.HIGHER_DEPT),
        string_agg(SU2.POSITION_DESCRIBE, ',') AS SU_POSITION_DESCRIBE,
        MAX(FH.CLAIM_DATE),
        MAX(CC.CURRENCY_NAME) AS CURRENCY,
        MAX(FH.AMOUNT),
        MAX(FH.REAL_AMOUNT),
        MAX('银行转账') AS PAY_TYPE,
        MAX(FH.REMARK),
        MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE
        FROM FC_ORGAN_FEE_HEADER FH
        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_FEE_TYPE' AND C5.CODE_VALUE = FH.Project_Code
        LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON
        LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = 'SFC_COST_BODY' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY
        LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT
        LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER
        LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON
        LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = 'SFC_COST_BODY' AND C1.CODE_VALUE = FH.COST_BODY
        LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT
        LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER
        LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY
        LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = 'SFC_AUDIT_PROGRESS' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS
        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_SUBMIT_IND' AND C4.CODE_VALUE = FH.SUBMIT_IND
        LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID
        LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID
        WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL)
        AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL)
        AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL)
        AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL)
        AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL)
        AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL)
        AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, 'YYYY-MM-DD') OR V_CLAIM_DATE_F IS NULL)
        AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, 'YYYY-MM-DD') OR V_CLAIM_DATE_T IS NULL)
        AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL)
        AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR) OR V_AUDIT_PROGRESS IS NULL)
        AND EXISTS (
            SELECT 1 FROM FC_ORGAN_FEE_DTL FFD
            WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID
            AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)
            AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)
            AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)
            AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)
        )
        GROUP BY FH.ORGAN_FEE_HEADER_ID
        ORDER BY MAX(FH.CLAIM_NO) DESC
    ) T
    LEFT JOIN (
        SELECT FD.ORGAN_FEE_HEADER_ID,
        FF.FREIGHT_NAME,
        C3.DISPLAY_VALUE_CN AS INVOICE_TYPE,
        C4.DISPLAY_VALUE_CN AS FEE_PROPERTY,
        C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE,
        FD.AMOUNT,
        FD.AMOUNT_NO_TAX,
        FD.TAX_RATE,
        FD.TAX_AMOUNT,
        FD.INVOICE_NO,
        FD.INVOICE_CODE,
        FD.BILLING_DATE,
        FD.HOUSE_INFO,
        FD.CHECKCODE_6,
        FD.BEGIN_DATE,
        FD.END_DATE,
        FD.QTY,
        C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM
        FROM FC_ORGAN_FEE_DTL FD
        LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE
        LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = 'SFC_INVOICE_TYPE' AND C3.CODE_VALUE = FD.INVOICE_TYPE
        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_FEE_PROPERTY' AND C4.CODE_VALUE = FD.FEE_PROPERTY
        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_CUST_TYPE' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE
        LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = 'SFC_PURCHASE_ITEM' AND C6.CODE_VALUE = FD.PURCHASE_ITEM
        where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)
        AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)
        AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)
        AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)
    ) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID;
END;
$$ LANGUAGE plpgsql;

[2025-06-12 17:50:24.197695] Model Request Data: {'model': 'gemini-2.0-flash', 'messages': [{'role': 'user', 'content': 'You are a database expert. Determine whether the following SQL statement\nis syntactically valid and executable in a PG database.\nDo **not** execute it; just check syntax correctness.\nReturn **only** JSON in this format, with no extra text:\n\n{\n  "answer": "yes" | "no"\n}\n\nSQL:\nCREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR, V_CHARGE_DEPT IN VARCHAR, V_FEE_TYPE IN VARCHAR, V_DTLPROJECT IN VARCHAR, V_APPLY_USER IN VARCHAR, V_HOST_PERSON IN VARCHAR, V_CLAIM_NO IN VARCHAR, V_CLAIM_DATE_F IN VARCHAR, V_CLAIM_DATE_T IN VARCHAR, V_SUBMIT_IND IN VARCHAR, V_AUDIT_PROGRESS IN VARCHAR, V_INVOICE_TYPE IN VARCHAR, V_INVOICE_CODE IN VARCHAR, V_INVOICE_NO IN VARCHAR, INOUT V_CURSOR_TJ REFCURSOR) AS $$\nBEGIN\n    OPEN V_CURSOR_TJ FOR\n    WITH LS_CURSOR AS (\n        SELECT regexp_split_to_table(V_AUDIT_PROGRESS, \',\') AS COLUMN_VALUE\n    ),\n    LS_CURSOR2 AS (\n        SELECT regexp_split_to_table(V_COST_CONTROL_COMPANY, \',\') AS COLUMN_VALUE\n    )\n    SELECT * FROM (\n        SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID,\n        MAX(FH.CLAIM_NO),\n        MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY,\n        MAX(FR.REL_OFFICE_NAME),\n        MAX(SU1.USR_NAME) AS APPLY_USER,\n        MAX(FU.USR_NAME) AS HOST_PERSON,\n        MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY,\n        MAX(OFF.OFFICE_NAME) AS HOST_DEPT,\n        MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE,\n        MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND,\n        MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS,\n        MAX(FH.AUDIT_DATE),\n        MAX(SU2.USR_NAME),\n        MAX(FH.APPROVE_IND2),\n        MAX(FH.HIGHER_DEPT),\n        string_agg(SU2.POSITION_DESCRIBE, \',\') AS SU_POSITION_DESCRIBE,\n        MAX(FH.CLAIM_DATE),\n        MAX(CC.CURRENCY_NAME) AS CURRENCY,\n        MAX(FH.AMOUNT),\n        MAX(FH.REAL_AMOUNT),\n        MAX(\'银行转账\') AS PAY_TYPE,\n        MAX(FH.REMARK),\n        MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE\n        FROM FC_ORGAN_FEE_HEADER FH\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_FEE_TYPE\' AND C5.CODE_VALUE = FH.Project_Code\n        LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = \'SFC_COST_BODY\' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY\n        LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT\n        LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER\n        LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON\n        LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = \'SFC_COST_BODY\' AND C1.CODE_VALUE = FH.COST_BODY\n        LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT\n        LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER\n        LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY\n        LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = \'SFC_AUDIT_PROGRESS\' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_SUBMIT_IND\' AND C4.CODE_VALUE = FH.SUBMIT_IND\n        LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID\n        LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID\n        WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL)\n        AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL)\n        AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL)\n        AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL)\n        AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL)\n        AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL)\n        AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, \'YYYY-MM-DD\') OR V_CLAIM_DATE_F IS NULL)\n        AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, \'YYYY-MM-DD\') OR V_CLAIM_DATE_T IS NULL)\n        AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL)\n        AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR) OR V_AUDIT_PROGRESS IS NULL)\n        AND EXISTS (\n            SELECT 1 FROM FC_ORGAN_FEE_DTL FFD\n            WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID\n            AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n            AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n            AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n            AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n        )\n        GROUP BY FH.ORGAN_FEE_HEADER_ID\n        ORDER BY MAX(FH.CLAIM_NO) DESC\n    ) T\n    LEFT JOIN (\n        SELECT FD.ORGAN_FEE_HEADER_ID,\n        FF.FREIGHT_NAME,\n        C3.DISPLAY_VALUE_CN AS INVOICE_TYPE,\n        C4.DISPLAY_VALUE_CN AS FEE_PROPERTY,\n        C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE,\n        FD.AMOUNT,\n        FD.AMOUNT_NO_TAX,\n        FD.TAX_RATE,\n        FD.TAX_AMOUNT,\n        FD.INVOICE_NO,\n        FD.INVOICE_CODE,\n        FD.BILLING_DATE,\n        FD.HOUSE_INFO,\n        FD.CHECKCODE_6,\n        FD.BEGIN_DATE,\n        FD.END_DATE,\n        FD.QTY,\n        C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM\n        FROM FC_ORGAN_FEE_DTL FD\n        LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE\n        LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = \'SFC_INVOICE_TYPE\' AND C3.CODE_VALUE = FD.INVOICE_TYPE\n        LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = \'SFC_FEE_PROPERTY\' AND C4.CODE_VALUE = FD.FEE_PROPERTY\n        LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = \'SFC_CUST_TYPE\' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE\n        LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = \'SFC_PURCHASE_ITEM\' AND C6.CODE_VALUE = FD.PURCHASE_ITEM\n        where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL)\n        AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL)\n        AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL)\n        AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)\n    ) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID;\nEND;\n$$ LANGUAGE plpgsql;\n'}], 'temperature': 0.3, 'max_tokens': 1500, 'stream': False, 'response_format': {'type': 'json_object'}}
[2025-06-12 17:50:25.949392] [Model Answer]: {
  "answer": "no"
}
[2025-06-12 17:50:25.950462] [25] Hybrid Eval Case Judge gemini-2.0-flash Results: False
[2025-06-12 17:50:25.951485] [25] Hybrid Eval Case Judge Final Results: False
[2025-06-12 17:50:25.951485] [25] hybrid Eval Case Final Result: False