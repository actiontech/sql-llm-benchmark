[
    {
        "indicator_name": "logical_equivalence.jsonl",
        "indicator_weight": 4,
        "evaluation_type": "hybrid",
        "case_pass_count": 22,
        "case_wrong_count": 3,
        "correct_rate": 0.88,
        "case_datas": [
            {
                "case_id": "1",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"1\", \"difficulty_level\": \"1\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT name, id FROM students WHERE age > 10 AND name COLLATE utf8mb4_unicode_ci = 'John Doe';\", \"create_table_statements\": [\"CREATE TABLE IF NOT EXISTS students (id INT PRIMARY KEY, name VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci, age INT);\"]}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE IF NOT EXISTS students (id INT PRIMARY KEY, name VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci, age INT);\n\nSource SQL:\nSELECT name, id FROM students WHERE age > 10 AND name COLLATE utf8mb4_unicode_ci = 'John Doe';\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT name, id FROM students WHERE age > 10 AND name = 'John Doe';"
                    }
                ]
            },
            {
                "case_id": "2",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"2\", \"difficulty_level\": \"1\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"INSERT INTO products (product_name, price) VALUES ('Monitor', 300) ON DUPLICATE KEY UPDATE price = VALUES(price) * 1.05;\", \"create_table_statements\": [\"CREATE TABLE IF NOT EXISTS products (product_id INT PRIMARY KEY AUTO_INCREMENT, product_name VARCHAR(255) NOT NULL UNIQUE, price DECIMAL(10, 2));\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE IF NOT EXISTS products (product_id INT PRIMARY KEY AUTO_INCREMENT, product_name VARCHAR(255) NOT NULL UNIQUE, price DECIMAL(10, 2));\n\nSource SQL:\nINSERT INTO products (product_name, price) VALUES ('Monitor', 300) ON DUPLICATE KEY UPDATE price = VALUES(price) * 1.05;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "MERGE INTO products p\nUSING (SELECT 'Monitor' AS product_name, 300 AS price FROM dual) src\nON (p.product_name = src.product_name)\nWHEN MATCHED THEN\n  UPDATE SET p.price = src.price * 1.05\nWHEN NOT MATCHED THEN\n  INSERT (product_name, price) VALUES (src.product_name, src.price);"
                    }
                ]
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"difficulty_level\": \"1\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"CREATE TABLE IF NOT EXISTS orders (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, order_date DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE);\", \"create_table_statements\": [\"CREATE TABLE IF NOT EXISTS customers (customer_id INT PRIMARY KEY AUTO_INCREMENT, customer_name VARCHAR(255));\", \"CREATE TABLE IF NOT EXISTS orders (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, order_date DATETIME DEFAULT CURRENT_TIMESTAMP);\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE IF NOT EXISTS customers (customer_id INT PRIMARY KEY AUTO_INCREMENT, customer_name VARCHAR(255));\nCREATE TABLE IF NOT EXISTS orders (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, order_date DATETIME DEFAULT CURRENT_TIMESTAMP);\n\nSource SQL:\nCREATE TABLE IF NOT EXISTS orders (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, order_date DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE);\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TABLE orders (\n  order_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,\n  customer_id NUMBER,\n  order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT fk_orders_customer FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE\n)"
                    }
                ]
            },
            {
                "case_id": "4",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"4\", \"difficulty_level\": \"1\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"SELECT employee_name, hire_date, NVL(commission, 0) AS actual_commission FROM employees WHERE department_id = 5 AND TRUNC(hire_date) = TRUNC(SYSDATE);\", \"create_table_statements\": [\"CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), hire_date DATE, department_id NUMBER, commission NUMBER);\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), hire_date DATE, department_id NUMBER, commission NUMBER);\n\nSource SQL:\nSELECT employee_name, hire_date, NVL(commission, 0) AS actual_commission FROM employees WHERE department_id = 5 AND TRUNC(hire_date) = TRUNC(SYSDATE);\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT employee_name, hire_date, coalesce(commission, 0) AS actual_commission FROM employees WHERE department_id = 5 AND hire_date::date = current_date;"
                    }
                ]
            },
            {
                "case_id": "5",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"5\", \"difficulty_level\": \"1\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"CREATE TABLE books (book_id NUMBER PRIMARY KEY, title VARCHAR2(255) NOT NULL, published_date DATE DEFAULT SYSDATE);\", \"create_table_statements\": [\"BEGIN EXECUTE IMMEDIATE 'DROP TABLE books CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN NULL; ELSE RAISE; END IF; END;\", \"CREATE TABLE books (book_id NUMBER PRIMARY KEY, title VARCHAR2(255) NOT NULL, published_date DATE DEFAULT SYSDATE);\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nBEGIN EXECUTE IMMEDIATE 'DROP TABLE books CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN NULL; ELSE RAISE; END IF; END;\nCREATE TABLE books (book_id NUMBER PRIMARY KEY, title VARCHAR2(255) NOT NULL, published_date DATE DEFAULT SYSDATE);\n\nSource SQL:\nCREATE TABLE books (book_id NUMBER PRIMARY KEY, title VARCHAR2(255) NOT NULL, published_date DATE DEFAULT SYSDATE);\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TABLE books (\n    book_id INTEGER PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    published_date DATE DEFAULT CURRENT_DATE\n);"
                    }
                ]
            },
            {
                "case_id": "6",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"6\", \"difficulty_level\": \"2\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"ELECT user_id, username, DATE_FORMAT(last_login, '%Y-%m-%d %H:%i:%s') AS formatted_last_login, LEFT(user_bio, 20) AS short_bio FROM user_data;\", \"create_table_statements\": [\"CREATE TABLE `user_data` (\\n  `user_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,\\n  `username` VARCHAR(50) NOT NULL,\\n  `last_login` DATETIME DEFAULT NULL,\\n  `user_bio` TEXT,\\n  PRIMARY KEY (`user_id`),\\n  INDEX `idx_username` (`username`)\\n) ENGINE=InnoDB\\n  DEFAULT CHARSET = utf8mb4\\n  COLLATE = utf8mb4_unicode_ci;\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE `user_data` (\n  `user_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,\n  `username` VARCHAR(50) NOT NULL,\n  `last_login` DATETIME DEFAULT NULL,\n  `user_bio` TEXT,\n  PRIMARY KEY (`user_id`),\n  INDEX `idx_username` (`username`)\n) ENGINE=InnoDB\n  DEFAULT CHARSET = utf8mb4\n  COLLATE = utf8mb4_unicode_ci;\n\nSource SQL:\nELECT user_id, username, DATE_FORMAT(last_login, '%Y-%m-%d %H:%i:%s') AS formatted_last_login, LEFT(user_bio, 20) AS short_bio FROM user_data;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT user_id, username, TO_CHAR(last_login, 'YYYY-MM-DD HH24:MI:SS') AS formatted_last_login, SUBSTR(user_bio, 1, 20) AS short_bio FROM user_data;"
                    }
                ]
            },
            {
                "case_id": "7",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"7\", \"difficulty_level\": \"2\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT DATE_FORMAT(registration_date, '%Y-%m-%d %H:%i:%s') AS formatted_reg_date, COUNT(DISTINCT city) AS unique_cities, NULLIF(MAX(customer_id), 0) AS max_customer_id, JSON_ARRAYAGG(JSON_OBJECT('name', customer_name, 'status', status)) AS customer_details_json FROM customers WHERE registration_date > (SELECT MIN(order_date) FROM orders WHERE order_status = 'COMPLETED') AND status = 'Active' GROUP BY formatted_reg_date ORDER BY formatted_reg_date;\", \"create_table_statements\": [\"CREATE TABLE IF NOT EXISTS customers (customer_id INT PRIMARY KEY AUTO_INCREMENT, customer_name VARCHAR(255), city VARCHAR(100), registration_date DATETIME, status VARCHAR(50));\", \"CREATE TABLE IF NOT EXISTS orders (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, order_date DATETIME, order_status VARCHAR(50));\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE IF NOT EXISTS customers (customer_id INT PRIMARY KEY AUTO_INCREMENT, customer_name VARCHAR(255), city VARCHAR(100), registration_date DATETIME, status VARCHAR(50));\nCREATE TABLE IF NOT EXISTS orders (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, order_date DATETIME, order_status VARCHAR(50));\n\nSource SQL:\nSELECT DATE_FORMAT(registration_date, '%Y-%m-%d %H:%i:%s') AS formatted_reg_date, COUNT(DISTINCT city) AS unique_cities, NULLIF(MAX(customer_id), 0) AS max_customer_id, JSON_ARRAYAGG(JSON_OBJECT('name', customer_name, 'status', status)) AS customer_details_json FROM customers WHERE registration_date > (SELECT MIN(order_date) FROM orders WHERE order_status = 'COMPLETED') AND status = 'Active' GROUP BY formatted_reg_date ORDER BY formatted_reg_date;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT TO_CHAR(registration_date,'YYYY-MM-DD HH24:MI:SS') AS formatted_reg_date, COUNT(DISTINCT city) AS unique_cities, NULLIF(MAX(customer_id),0) AS max_customer_id, JSON_ARRAYAGG(JSON_OBJECT('name' VALUE customer_name,'status' VALUE status)) AS customer_details_json FROM customers WHERE registration_date > (SELECT MIN(order_date) FROM orders WHERE order_status='COMPLETED') AND status='Active' GROUP BY TO_CHAR(registration_date,'YYYY-MM-DD HH24:MI:SS') ORDER BY TO_CHAR(registration_date,'YYYY-MM-DD HH24:MI:SS');"
                    }
                ]
            },
            {
                "case_id": "8",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"8\", \"difficulty_level\": \"2\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT DATE_FORMAT(sale_date, '%Y-%m-%d') AS sale_day, COUNT(sale_id) AS total_sales, SUM(amount) AS total_amount\\nFROM sales\\nGROUP BY sale_day\\nORDER BY total_amount DESC\\nLIMIT 1 OFFSET 0;\", \"create_table_statements\": [\"CREATE TABLE `sales` (\\n  `sale_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,\\n  `sale_date` DATETIME NOT NULL,\\n  `amount` DECIMAL(12, 2) NOT NULL,\\n  PRIMARY KEY (`sale_id`),\\n  INDEX `idx_sale_date` (`sale_date`)\\n) ENGINE=InnoDB\\n  DEFAULT CHARSET = utf8mb4\\n  COLLATE = utf8mb4_unicode_ci;\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE `sales` (\n  `sale_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,\n  `sale_date` DATETIME NOT NULL,\n  `amount` DECIMAL(12, 2) NOT NULL,\n  PRIMARY KEY (`sale_id`),\n  INDEX `idx_sale_date` (`sale_date`)\n) ENGINE=InnoDB\n  DEFAULT CHARSET = utf8mb4\n  COLLATE = utf8mb4_unicode_ci;\n\nSource SQL:\nSELECT DATE_FORMAT(sale_date, '%Y-%m-%d') AS sale_day, COUNT(sale_id) AS total_sales, SUM(amount) AS total_amount\nFROM sales\nGROUP BY sale_day\nORDER BY total_amount DESC\nLIMIT 1 OFFSET 0;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT TO_CHAR(sale_date, 'YYYY-MM-DD') AS sale_day, COUNT(sale_id) AS total_sales, SUM(amount) AS total_amount\nFROM sales\nGROUP BY TO_CHAR(sale_date, 'YYYY-MM-DD')\nORDER BY total_amount DESC\nFETCH FIRST 1 ROW ONLY;"
                    }
                ]
            },
            {
                "case_id": "9",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"9\", \"difficulty_level\": \"2\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"CREATE TABLE IF NOT EXISTS articles (article_id INT AUTO_INCREMENT PRIMARY KEY, title VARCHAR(255) UNIQUE NOT NULL, content LONGTEXT, published_on DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), views BIGINT DEFAULT 0);\", \"create_table_statements\": [\"CREATE TABLE IF NOT EXISTS articles (article_id INT AUTO_INCREMENT PRIMARY KEY, title VARCHAR(255) UNIQUE NOT NULL, content LONGTEXT, published_on DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), views BIGINT DEFAULT 0);\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE IF NOT EXISTS articles (article_id INT AUTO_INCREMENT PRIMARY KEY, title VARCHAR(255) UNIQUE NOT NULL, content LONGTEXT, published_on DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), views BIGINT DEFAULT 0);\n\nSource SQL:\nCREATE TABLE IF NOT EXISTS articles (article_id INT AUTO_INCREMENT PRIMARY KEY, title VARCHAR(255) UNIQUE NOT NULL, content LONGTEXT, published_on DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), views BIGINT DEFAULT 0);\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TABLE articles (\n  article_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,\n  title VARCHAR2(255) UNIQUE NOT NULL,\n  content CLOB,\n  published_on TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP,\n  views NUMBER DEFAULT 0\n);\n\nCREATE OR REPLACE TRIGGER articles_published_on_trg\nBEFORE UPDATE ON articles\nFOR EACH ROW\nBEGIN\n  :NEW.published_on := CURRENT_TIMESTAMP;\nEND;\n/\n"
                    }
                ]
            },
            {
                "case_id": "10",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"10\", \"difficulty_level\": \"2\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"SELECT employee_id, employee_name, hire_date, NVL2(commission, 'Has Commission', 'No Commission') AS commission_status, LAG(salary, 1, 0) OVER (PARTITION BY department_id ORDER BY hire_date) AS prev_employee_salary, LEAD(salary, 1, 0) OVER (PARTITION BY department_id ORDER BY hire_date) AS next_employee_salary, FIRST_VALUE(employee_name) OVER (PARTITION BY department_id ORDER BY salary DESC) AS top_earner_in_dept, TRUNC(SYSDATE, 'IW') AS start_of_week FROM employees WHERE hire_date BETWEEN TO_DATE('2020-01-01', 'YYYY-MM-DD') AND SYSDATE - INTERVAL '30' DAY ORDER BY hire_date ASC OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;\", \"create_table_statements\": [\"CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), hire_date DATE, department_id NUMBER, salary DECIMAL(10,2), commission DECIMAL(10,2));\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), hire_date DATE, department_id NUMBER, salary DECIMAL(10,2), commission DECIMAL(10,2));\n\nSource SQL:\nSELECT employee_id, employee_name, hire_date, NVL2(commission, 'Has Commission', 'No Commission') AS commission_status, LAG(salary, 1, 0) OVER (PARTITION BY department_id ORDER BY hire_date) AS prev_employee_salary, LEAD(salary, 1, 0) OVER (PARTITION BY department_id ORDER BY hire_date) AS next_employee_salary, FIRST_VALUE(employee_name) OVER (PARTITION BY department_id ORDER BY salary DESC) AS top_earner_in_dept, TRUNC(SYSDATE, 'IW') AS start_of_week FROM employees WHERE hire_date BETWEEN TO_DATE('2020-01-01', 'YYYY-MM-DD') AND SYSDATE - INTERVAL '30' DAY ORDER BY hire_date ASC OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT employee_id,\n       employee_name,\n       hire_date,\n       CASE WHEN commission IS NOT NULL THEN 'Has Commission' ELSE 'No Commission' END AS commission_status,\n       LAG(salary, 1, 0) OVER (PARTITION BY department_id ORDER BY hire_date) AS prev_employee_salary,\n       LEAD(salary, 1, 0) OVER (PARTITION BY department_id ORDER BY hire_date) AS next_employee_salary,\n       FIRST_VALUE(employee_name) OVER (PARTITION BY department_id ORDER BY salary DESC) AS top_earner_in_dept,\n       date_trunc('week', current_date)::date AS start_of_week\nFROM employees\nWHERE hire_date BETWEEN '2020-01-01'::date AND current_date - INTERVAL '30 days'\nORDER BY hire_date ASC\nOFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;"
                    }
                ]
            },
            {
                "case_id": "11",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"11\", \"difficulty_level\": \"2\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"CREATE TABLE documents (doc_id NUMBER PRIMARY KEY, content CLOB, metadata CLOB, created_at TIMESTAMP WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, is_active NUMBER(1,0) DEFAULT 1, tags VARCHAR2(4000)); SELECT doc_id, JSON_VALUE(metadata, '$.author.name' RETURNING VARCHAR2(100) ERROR ON ERROR) AS author_name, XMLSERIALIZE(CONTENT XMLTYPE('<doc><id>' || doc_id || '</id><status>' || is_active || '</status></doc>') AS CLOB) AS doc_xml_representation FROM documents WHERE JSON_EXISTS(metadata, '$.status') AND JSON_VALUE(metadata, '$.status') = 'Published' AND SYS_CONTEXT('USERENV', 'SESSION_USER') = 'APP_USER';\", \"create_table_statements\": [\"BEGIN EXECUTE IMMEDIATE 'DROP TABLE documents CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN NULL; ELSE RAISE; END IF; END;\", \"CREATE TABLE documents (doc_id NUMBER PRIMARY KEY, content CLOB, metadata CLOB, created_at TIMESTAMP WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, is_active NUMBER(1,0) DEFAULT 1, tags VARCHAR2(4000));\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nBEGIN EXECUTE IMMEDIATE 'DROP TABLE documents CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN NULL; ELSE RAISE; END IF; END;\nCREATE TABLE documents (doc_id NUMBER PRIMARY KEY, content CLOB, metadata CLOB, created_at TIMESTAMP WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, is_active NUMBER(1,0) DEFAULT 1, tags VARCHAR2(4000));\n\nSource SQL:\nCREATE TABLE documents (doc_id NUMBER PRIMARY KEY, content CLOB, metadata CLOB, created_at TIMESTAMP WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, is_active NUMBER(1,0) DEFAULT 1, tags VARCHAR2(4000)); SELECT doc_id, JSON_VALUE(metadata, '$.author.name' RETURNING VARCHAR2(100) ERROR ON ERROR) AS author_name, XMLSERIALIZE(CONTENT XMLTYPE('<doc><id>' || doc_id || '</id><status>' || is_active || '</status></doc>') AS CLOB) AS doc_xml_representation FROM documents WHERE JSON_EXISTS(metadata, '$.status') AND JSON_VALUE(metadata, '$.status') = 'Published' AND SYS_CONTEXT('USERENV', 'SESSION_USER') = 'APP_USER';\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TABLE documents (doc_id numeric PRIMARY KEY, content text, metadata jsonb, created_at timestamptz DEFAULT CURRENT_TIMESTAMP, is_active smallint DEFAULT 1, tags varchar(4000));\nSELECT\n  doc_id,\n  metadata->'author'->>'name' AS author_name,\n  xmlserialize(\n    document xmlparse(\n      document '<doc><id>' || doc_id || '</id><status>' || is_active || '</status></doc>'\n    )\n    AS text\n  ) AS doc_xml_representation\nFROM documents\nWHERE metadata ? 'status'\n  AND metadata->>'status' = 'Published'\n  AND current_user = 'app_user';"
                    }
                ]
            },
            {
                "case_id": "12",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"12\", \"difficulty_level\": \"3\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"WITH RECURSIVE EmployeeHierarchy AS ( SELECT employee_id, employee_name, manager_id, 1 AS level, CAST(employee_id AS CHAR) AS path FROM employees WHERE manager_id IS NULL UNION ALL SELECT e.employee_id, e.employee_name, e.manager_id, eh.level + 1, CONCAT(eh.path, '->', e.employee_id) FROM employees e JOIN EmployeeHierarchy eh ON e.manager_id = eh.employee_id WHERE eh.level < 5 ), DeptEmployeeSummary AS ( SELECT d.department_id, d.department_name, COUNT(eh.employee_id) AS total_employees, SUM(CASE WHEN eh.salary > 70000 THEN 1 ELSE 0 END) AS high_salary_employees, GROUP_CONCAT(DISTINCT eh.employee_name ORDER BY eh.employee_id SEPARATOR '; ') AS employees_list FROM departments d LEFT JOIN EmployeeHierarchy eh ON d.department_id = eh.department_id GROUP BY d.department_id, d.department_name ) SELECT ds.*, (SELECT COUNT(*) FROM employee_projects ep WHERE ep.employee_id IN (SELECT eh2.employee_id FROM EmployeeHierarchy eh2 WHERE eh2.department_id = ds.department_id)) AS num_projects_in_dept FROM DeptEmployeeSummary ds WHERE ds.total_employees > 5 AND ds.high_salary_employees > 2 ORDER BY ds.department_name;\", \"create_table_statements\": [\"CREATE TABLE IF NOT EXISTS employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), manager_id INT, department_id INT, salary DECIMAL(10,2));\", \"CREATE TABLE IF NOT EXISTS departments (department_id INT PRIMARY KEY, department_name VARCHAR(255));\", \"CREATE TABLE IF NOT EXISTS employee_projects (project_id INT, employee_id INT, PRIMARY KEY (project_id, employee_id));\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE IF NOT EXISTS employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), manager_id INT, department_id INT, salary DECIMAL(10,2));\nCREATE TABLE IF NOT EXISTS departments (department_id INT PRIMARY KEY, department_name VARCHAR(255));\nCREATE TABLE IF NOT EXISTS employee_projects (project_id INT, employee_id INT, PRIMARY KEY (project_id, employee_id));\n\nSource SQL:\nWITH RECURSIVE EmployeeHierarchy AS ( SELECT employee_id, employee_name, manager_id, 1 AS level, CAST(employee_id AS CHAR) AS path FROM employees WHERE manager_id IS NULL UNION ALL SELECT e.employee_id, e.employee_name, e.manager_id, eh.level + 1, CONCAT(eh.path, '->', e.employee_id) FROM employees e JOIN EmployeeHierarchy eh ON e.manager_id = eh.employee_id WHERE eh.level < 5 ), DeptEmployeeSummary AS ( SELECT d.department_id, d.department_name, COUNT(eh.employee_id) AS total_employees, SUM(CASE WHEN eh.salary > 70000 THEN 1 ELSE 0 END) AS high_salary_employees, GROUP_CONCAT(DISTINCT eh.employee_name ORDER BY eh.employee_id SEPARATOR '; ') AS employees_list FROM departments d LEFT JOIN EmployeeHierarchy eh ON d.department_id = eh.department_id GROUP BY d.department_id, d.department_name ) SELECT ds.*, (SELECT COUNT(*) FROM employee_projects ep WHERE ep.employee_id IN (SELECT eh2.employee_id FROM EmployeeHierarchy eh2 WHERE eh2.department_id = ds.department_id)) AS num_projects_in_dept FROM DeptEmployeeSummary ds WHERE ds.total_employees > 5 AND ds.high_salary_employees > 2 ORDER BY ds.department_name;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "WITH EmployeeHierarchy AS (\n  SELECT employee_id,\n         employee_name,\n         manager_id,\n         1 lvl,\n         TO_CHAR(employee_id) path,\n         department_id,\n         salary\n  FROM employees\n  WHERE manager_id IS NULL\n  UNION ALL\n  SELECT e.employee_id,\n         e.employee_name,\n         e.manager_id,\n         eh.lvl + 1,\n         eh.path || '->' || e.employee_id,\n         e.department_id,\n         e.salary\n  FROM employees e\n  JOIN EmployeeHierarchy eh ON e.manager_id = eh.employee_id\n  WHERE eh.lvl < 5\n),\nDeptEmployeeSummary AS (\n  SELECT d.department_id,\n         d.department_name,\n         COUNT(eh.employee_id) total_employees,\n         SUM(CASE WHEN eh.salary > 70000 THEN 1 ELSE 0 END) high_salary_employees,\n         LISTAGG(DISTINCT eh.employee_name, '; ') WITHIN GROUP (ORDER BY eh.employee_id) employees_list\n  FROM departments d\n  LEFT JOIN EmployeeHierarchy eh ON d.department_id = eh.department_id\n  GROUP BY d.department_id, d.department_name\n)\nSELECT ds.*,\n       (SELECT COUNT(*)\n        FROM employee_projects ep\n        WHERE ep.employee_id IN (\n          SELECT eh2.employee_id FROM EmployeeHierarchy eh2 WHERE eh2.department_id = ds.department_id\n        )\n       ) num_projects_in_dept\nFROM DeptEmployeeSummary ds\nWHERE ds.total_employees > 5\n  AND ds.high_salary_employees > 2\nORDER BY ds.department_name;"
                    }
                ]
            },
            {
                "case_id": "13",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"13\", \"difficulty_level\": \"3\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT order_id, customer_id, order_date, total_amount, SUM(total_amount) OVER (PARTITION BY customer_id ORDER BY order_date) AS running_total, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY total_amount DESC) AS rn_by_customer_salary FROM orders_w WHERE customer_id IN (101, 102);\", \"create_table_statements\": [\"CREATE TABLE `orders_w` (\\n  `order_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,\\n  `customer_id` BIGINT UNSIGNED NOT NULL,\\n  `order_date` DATETIME NOT NULL,\\n  `total_amount` DECIMAL(10, 2) NOT NULL,\\n  PRIMARY KEY (`order_id`),\\n  INDEX `idx_customer_id` (`customer_id`)\\n) ENGINE=InnoDB\\n  DEFAULT CHARSET = utf8mb4\\n  COLLATE = utf8mb4_unicode_ci;\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE `orders_w` (\n  `order_id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,\n  `customer_id` BIGINT UNSIGNED NOT NULL,\n  `order_date` DATETIME NOT NULL,\n  `total_amount` DECIMAL(10, 2) NOT NULL,\n  PRIMARY KEY (`order_id`),\n  INDEX `idx_customer_id` (`customer_id`)\n) ENGINE=InnoDB\n  DEFAULT CHARSET = utf8mb4\n  COLLATE = utf8mb4_unicode_ci;\n\nSource SQL:\nSELECT order_id, customer_id, order_date, total_amount, SUM(total_amount) OVER (PARTITION BY customer_id ORDER BY order_date) AS running_total, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY total_amount DESC) AS rn_by_customer_salary FROM orders_w WHERE customer_id IN (101, 102);\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT order_id,\n       customer_id,\n       order_date,\n       total_amount,\n       SUM(total_amount) OVER (PARTITION BY customer_id ORDER BY order_date) AS running_total,\n       ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY total_amount DESC) AS rn_by_customer_salary\nFROM orders_w\nWHERE customer_id IN (101, 102)"
                    }
                ]
            },
            {
                "case_id": "14",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"14\", \"difficulty_level\": \"3\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"DELIMITER $$ CREATE PROCEDURE ProcessPayments(IN p_batch_size INT, OUT p_processed_count INT, OUT p_error_message VARCHAR(255)) BEGIN     DECLARE v_payment_id INT;    DECLARE v_amount DECIMAL(10, 2);    DECLARE v_status VARCHAR(50);    DECLARE v_sql TEXT;    DECLARE no_more_payments BOOLEAN DEFAULT FALSE;    DECLARE payment_cursor CURSOR FOR SELECT payment_id, amount FROM payments WHERE status = 'PENDING' ORDER BY payment_id LIMIT p_batch_size;    DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_payments = TRUE;    DECLARE EXIT HANDLER FOR SQLEXCEPTION     BEGIN        ROLLBACK;        SET p_error_message = CONCAT('Unhandled error (SQLSTATE: ', SQLSTATE, ', Message: ', MESSAGE_TEXT, ')');        SET p_processed_count = 0;        INSERT INTO error_log (log_message, error_code, log_user, log_host, log_timestamp) VALUES (p_error_message, SQLCODE, CURRENT_USER(), CURRENT_HOST(), NOW());    END;     SET p_processed_count = 0;    SET p_error_message = NULL;     START TRANSACTION;    OPEN payment_cursor;    payment_loop: LOOP        FETCH payment_cursor INTO v_payment_id, v_amount;        IF no_more_payments THEN            LEAVE payment_loop;        END IF;         IF v_amount <= 0 THEN            SET v_status = 'INVALID_AMOUNT';            CALL log_audit_event(v_payment_id, 'INVALID_AMOUNT', 'Amount must be positive');        ELSEIF EXISTS (SELECT 1 FROM blacklisted_accounts ba WHERE ba.account_id = (SELECT account_id FROM payments_accounts WHERE payment_id = v_payment_id)) THEN            SET v_status = 'BLACKLISTED_ACCOUNT';            CALL log_audit_event(v_payment_id, 'BLACKLISTED', 'Account is blacklisted');        ELSE            SET v_sql = CONCAT('UPDATE payments SET status = ''PROCESSED'', processed_at = NOW() WHERE payment_id = ?');            PREPARE stmt FROM v_sql;            EXECUTE stmt USING v_payment_id;            DEALLOCATE PREPARE stmt;            SET v_status = 'PROCESSED';            SET p_processed_count = p_processed_count + 1;            CALL log_audit_event(v_payment_id, 'PROCESSED', 'Payment processed successfully');        END IF;    END LOOP;    CLOSE payment_cursor;    COMMIT;    SET p_error_message = CONCAT('Batch processing complete. Processed: ', p_processed_count, ' payments.'); END $$ DELIMITER ;\", \"create_table_statements\": [\"CREATE TABLE IF NOT EXISTS payments (payment_id INT PRIMARY KEY AUTO_INCREMENT, amount DECIMAL(10, 2), status VARCHAR(50), processed_at DATETIME);\", \"CREATE TABLE IF NOT EXISTS payment_log (log_id INT PRIMARY KEY AUTO_INCREMENT, payment_id INT, new_status VARCHAR(50), log_timestamp DATETIME, audit_user VARCHAR(255));\", \"CREATE TABLE IF NOT EXISTS payments_accounts (payment_id INT PRIMARY KEY, account_id INT);\", \"CREATE TABLE IF NOT EXISTS blacklisted_accounts (account_id INT PRIMARY KEY);\", \"DELIMITER $$ CREATE PROCEDURE log_audit_event(IN p_entity_id INT, IN p_event_type VARCHAR(50), IN p_event_details VARCHAR(255)) BEGIN INSERT INTO audit_log (entity_id, event_type, event_details, log_timestamp) VALUES (p_entity_id, p_event_type, p_event_details, NOW()); END $$ DELIMITER ; CREATE TABLE IF NOT EXISTS audit_log (log_id INT PRIMARY KEY AUTO_INCREMENT, entity_id INT, event_type VARCHAR(50), event_details VARCHAR(255), log_timestamp DATETIME);\", \"CREATE TABLE IF NOT EXISTS error_log (error_log_id INT PRIMARY KEY AUTO_INCREMENT, log_message VARCHAR(1000), error_code INT, log_user VARCHAR(255), log_host VARCHAR(255), log_timestamp DATETIME);\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE IF NOT EXISTS payments (payment_id INT PRIMARY KEY AUTO_INCREMENT, amount DECIMAL(10, 2), status VARCHAR(50), processed_at DATETIME);\nCREATE TABLE IF NOT EXISTS payment_log (log_id INT PRIMARY KEY AUTO_INCREMENT, payment_id INT, new_status VARCHAR(50), log_timestamp DATETIME, audit_user VARCHAR(255));\nCREATE TABLE IF NOT EXISTS payments_accounts (payment_id INT PRIMARY KEY, account_id INT);\nCREATE TABLE IF NOT EXISTS blacklisted_accounts (account_id INT PRIMARY KEY);\nDELIMITER $$ CREATE PROCEDURE log_audit_event(IN p_entity_id INT, IN p_event_type VARCHAR(50), IN p_event_details VARCHAR(255)) BEGIN INSERT INTO audit_log (entity_id, event_type, event_details, log_timestamp) VALUES (p_entity_id, p_event_type, p_event_details, NOW()); END $$ DELIMITER ; CREATE TABLE IF NOT EXISTS audit_log (log_id INT PRIMARY KEY AUTO_INCREMENT, entity_id INT, event_type VARCHAR(50), event_details VARCHAR(255), log_timestamp DATETIME);\nCREATE TABLE IF NOT EXISTS error_log (error_log_id INT PRIMARY KEY AUTO_INCREMENT, log_message VARCHAR(1000), error_code INT, log_user VARCHAR(255), log_host VARCHAR(255), log_timestamp DATETIME);\n\nSource SQL:\nDELIMITER $$ CREATE PROCEDURE ProcessPayments(IN p_batch_size INT, OUT p_processed_count INT, OUT p_error_message VARCHAR(255)) BEGIN     DECLARE v_payment_id INT;    DECLARE v_amount DECIMAL(10, 2);    DECLARE v_status VARCHAR(50);    DECLARE v_sql TEXT;    DECLARE no_more_payments BOOLEAN DEFAULT FALSE;    DECLARE payment_cursor CURSOR FOR SELECT payment_id, amount FROM payments WHERE status = 'PENDING' ORDER BY payment_id LIMIT p_batch_size;    DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_payments = TRUE;    DECLARE EXIT HANDLER FOR SQLEXCEPTION     BEGIN        ROLLBACK;        SET p_error_message = CONCAT('Unhandled error (SQLSTATE: ', SQLSTATE, ', Message: ', MESSAGE_TEXT, ')');        SET p_processed_count = 0;        INSERT INTO error_log (log_message, error_code, log_user, log_host, log_timestamp) VALUES (p_error_message, SQLCODE, CURRENT_USER(), CURRENT_HOST(), NOW());    END;     SET p_processed_count = 0;    SET p_error_message = NULL;     START TRANSACTION;    OPEN payment_cursor;    payment_loop: LOOP        FETCH payment_cursor INTO v_payment_id, v_amount;        IF no_more_payments THEN            LEAVE payment_loop;        END IF;         IF v_amount <= 0 THEN            SET v_status = 'INVALID_AMOUNT';            CALL log_audit_event(v_payment_id, 'INVALID_AMOUNT', 'Amount must be positive');        ELSEIF EXISTS (SELECT 1 FROM blacklisted_accounts ba WHERE ba.account_id = (SELECT account_id FROM payments_accounts WHERE payment_id = v_payment_id)) THEN            SET v_status = 'BLACKLISTED_ACCOUNT';            CALL log_audit_event(v_payment_id, 'BLACKLISTED', 'Account is blacklisted');        ELSE            SET v_sql = CONCAT('UPDATE payments SET status = ''PROCESSED'', processed_at = NOW() WHERE payment_id = ?');            PREPARE stmt FROM v_sql;            EXECUTE stmt USING v_payment_id;            DEALLOCATE PREPARE stmt;            SET v_status = 'PROCESSED';            SET p_processed_count = p_processed_count + 1;            CALL log_audit_event(v_payment_id, 'PROCESSED', 'Payment processed successfully');        END IF;    END LOOP;    CLOSE payment_cursor;    COMMIT;    SET p_error_message = CONCAT('Batch processing complete. Processed: ', p_processed_count, ' payments.'); END $$ DELIMITER ;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE ProcessPayments(p_batch_size IN NUMBER, p_processed_count OUT NUMBER, p_error_message OUT VARCHAR2) IS\n  v_payment_id payments.payment_id%TYPE;\n  v_amount payments.amount%TYPE;\n  v_status VARCHAR2(50);\n  CURSOR payment_cursor IS\n    SELECT payment_id, amount\n      FROM (\n        SELECT payment_id, amount\n          FROM payments\n         WHERE status = 'PENDING'\n         ORDER BY payment_id\n      )\n     WHERE ROWNUM <= p_batch_size;\nBEGIN\n  p_processed_count := 0;\n  p_error_message := NULL;\n  OPEN payment_cursor;\n  LOOP\n    FETCH payment_cursor INTO v_payment_id, v_amount;\n    EXIT WHEN payment_cursor%NOTFOUND;\n    IF v_amount <= 0 THEN\n      v_status := 'INVALID_AMOUNT';\n      log_audit_event(v_payment_id, 'INVALID_AMOUNT', 'Amount must be positive');\n    ELSIF EXISTS (\n      SELECT 1\n        FROM blacklisted_accounts ba\n       WHERE ba.account_id = (\n         SELECT pa.account_id\n           FROM payments_accounts pa\n          WHERE pa.payment_id = v_payment_id\n       )\n    ) THEN\n      v_status := 'BLACKLISTED_ACCOUNT';\n      log_audit_event(v_payment_id, 'BLACKLISTED', 'Account is blacklisted');\n    ELSE\n      UPDATE payments\n         SET status = 'PROCESSED',\n             processed_at = SYSTIMESTAMP\n       WHERE payment_id = v_payment_id;\n      v_status := 'PROCESSED';\n      p_processed_count := p_processed_count + 1;\n      log_audit_event(v_payment_id, 'PROCESSED', 'Payment processed successfully');\n    END IF;\n  END LOOP;\n  CLOSE payment_cursor;\n  COMMIT;\n  p_error_message := 'Batch processing complete. Processed: ' || p_processed_count || ' payments.';\nEXCEPTION\n  WHEN OTHERS THEN\n    ROLLBACK;\n    p_error_message := 'Unhandled error (SQLCODE: ' || SQLCODE || ', Message: ' || SQLERRM || ')';\n    p_processed_count := 0;\n    INSERT INTO error_log(log_message, error_code, log_user, log_host, log_timestamp)\n    VALUES (\n      p_error_message,\n      SQLCODE,\n      SYS_CONTEXT('USERENV','SESSION_USER'),\n      SYS_CONTEXT('USERENV','HOST'),\n      SYSTIMESTAMP\n    );\nEND ProcessPayments;"
                    }
                ]
            },
            {
                "case_id": "15",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"15\", \"difficulty_level\": \"3\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"DELETE c FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date < DATE_SUB(CURDATE(), INTERVAL 2 YEAR) AND c.status = 'Inactive' AND NOT EXISTS (SELECT 1 FROM payments p WHERE p.customer_id = c.customer_id AND p.payment_date > DATE_SUB(CURDATE(), INTERVAL 1 YEAR));\", \"create_table_statements\": [\"CREATE TABLE IF NOT EXISTS customers (customer_id INT PRIMARY KEY AUTO_INCREMENT, customer_name VARCHAR(255), registration_date DATE, last_order_date DATE, total_purchase_amount DECIMAL(10,2), status VARCHAR(50));\", \"CREATE TABLE IF NOT EXISTS orders (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, order_date DATE);\", \"CREATE TABLE IF NOT EXISTS order_items (order_item_id INT PRIMARY KEY AUTO_INCREMENT, order_id INT, product_id INT, quantity INT, price DECIMAL(10, 2));\", \"CREATE TABLE IF NOT EXISTS payments (payment_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, payment_date DATE, amount DECIMAL(10,2));\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE IF NOT EXISTS customers (customer_id INT PRIMARY KEY AUTO_INCREMENT, customer_name VARCHAR(255), registration_date DATE, last_order_date DATE, total_purchase_amount DECIMAL(10,2), status VARCHAR(50));\nCREATE TABLE IF NOT EXISTS orders (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, order_date DATE);\nCREATE TABLE IF NOT EXISTS order_items (order_item_id INT PRIMARY KEY AUTO_INCREMENT, order_id INT, product_id INT, quantity INT, price DECIMAL(10, 2));\nCREATE TABLE IF NOT EXISTS payments (payment_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT, payment_date DATE, amount DECIMAL(10,2));\n\nSource SQL:\nDELETE c FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date < DATE_SUB(CURDATE(), INTERVAL 2 YEAR) AND c.status = 'Inactive' AND NOT EXISTS (SELECT 1 FROM payments p WHERE p.customer_id = c.customer_id AND p.payment_date > DATE_SUB(CURDATE(), INTERVAL 1 YEAR));\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DELETE FROM customers c\nWHERE c.status = 'Inactive'\n  AND EXISTS (\n    SELECT 1 FROM orders o\n    WHERE o.customer_id = c.customer_id\n      AND o.order_date < ADD_MONTHS(SYSDATE, -24)\n  )\n  AND NOT EXISTS (\n    SELECT 1 FROM payments p\n    WHERE p.customer_id = c.customer_id\n      AND p.payment_date > ADD_MONTHS(SYSDATE, -12)\n  );"
                    }
                ]
            },
            {
                "case_id": "16",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"16\", \"difficulty_level\": \"3\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"CREATE TRIGGER before_employee_update BEFORE UPDATE ON employees FOR EACH ROW WHEN (NEW.salary != OLD.salary OR NEW.employee_status != OLD.employee_status) BEGIN IF NEW.salary < OLD.salary THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot decrease employee salary!'; END IF; IF NEW.employee_name IS NULL OR LENGTH(TRIM(NEW.employee_name)) = 0 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Employee name cannot be empty!'; END IF; IF NEW.employee_status = 'Terminated' AND OLD.employee_status != 'Terminated' THEN CALL audit_employee_termination(OLD.employee_id, NOW()); END IF; SET NEW.last_updated_at = NOW(); END;\", \"create_table_statements\": [\"CREATE TABLE IF NOT EXISTS employees (employee_id INT PRIMARY KEY AUTO_INCREMENT, employee_name VARCHAR(255), salary DECIMAL(10, 2), employee_status VARCHAR(50), last_updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);\", \"CREATE PROCEDURE audit_employee_termination(IN p_employee_id INT, IN p_timestamp DATETIME) BEGIN INSERT INTO employee_audit_log (employee_id, action, action_timestamp) VALUES (p_employee_id, 'TERMINATED', p_timestamp); END; CREATE TABLE IF NOT EXISTS employee_audit_log (log_id INT PRIMARY KEY AUTO_INCREMENT, employee_id INT, action VARCHAR(100), action_timestamp DATETIME);\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE IF NOT EXISTS employees (employee_id INT PRIMARY KEY AUTO_INCREMENT, employee_name VARCHAR(255), salary DECIMAL(10, 2), employee_status VARCHAR(50), last_updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);\nCREATE PROCEDURE audit_employee_termination(IN p_employee_id INT, IN p_timestamp DATETIME) BEGIN INSERT INTO employee_audit_log (employee_id, action, action_timestamp) VALUES (p_employee_id, 'TERMINATED', p_timestamp); END; CREATE TABLE IF NOT EXISTS employee_audit_log (log_id INT PRIMARY KEY AUTO_INCREMENT, employee_id INT, action VARCHAR(100), action_timestamp DATETIME);\n\nSource SQL:\nCREATE TRIGGER before_employee_update BEFORE UPDATE ON employees FOR EACH ROW WHEN (NEW.salary != OLD.salary OR NEW.employee_status != OLD.employee_status) BEGIN IF NEW.salary < OLD.salary THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot decrease employee salary!'; END IF; IF NEW.employee_name IS NULL OR LENGTH(TRIM(NEW.employee_name)) = 0 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Employee name cannot be empty!'; END IF; IF NEW.employee_status = 'Terminated' AND OLD.employee_status != 'Terminated' THEN CALL audit_employee_termination(OLD.employee_id, NOW()); END IF; SET NEW.last_updated_at = NOW(); END;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TRIGGER before_employee_update\nBEFORE UPDATE ON employees\nFOR EACH ROW\nWHEN (:NEW.salary <> :OLD.salary OR :NEW.employee_status <> :OLD.employee_status)\nBEGIN\n  IF :NEW.salary < :OLD.salary THEN\n    raise_application_error(-20001, 'Cannot decrease employee salary!');\n  END IF;\n  IF :NEW.employee_name IS NULL OR LENGTH(TRIM(:NEW.employee_name)) = 0 THEN\n    raise_application_error(-20002, 'Employee name cannot be empty!');\n  END IF;\n  IF :NEW.employee_status = 'Terminated' AND :OLD.employee_status <> 'Terminated' THEN\n    audit_employee_termination(:OLD.employee_id, SYSDATE);\n  END IF;\n  :NEW.last_updated_at := SYSDATE;\nEND;\n/"
                    }
                ]
            },
            {
                "case_id": "17",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"17\", \"difficulty_level\": \"3\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"SELECT department_name, Eng_TotalSalary, DS_TotalSalary, PM_TotalSalary, HR_TotalSalary, Eng_EmployeeCount, DS_EmployeeCount, PM_EmployeeCount, HR_EmployeeCount FROM ( SELECT department_name, job_title, salary, employee_id FROM employees ) PIVOT ( SUM(salary) AS TotalSalary, COUNT(employee_id) AS EmployeeCount FOR job_title IN ('Software Engineer' AS Eng, 'Data Scientist' AS DS, 'Project Manager' AS PM, 'HR Specialist' AS HR) ) WHERE Eng_TotalSalary IS NOT NULL OR DS_TotalSalary IS NOT NULL OR PM_TotalSalary IS NOT NULL OR HR_TotalSalary IS NOT NULL;\", \"create_table_statements\": [\"CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), hire_date DATE, department_id NUMBER, department_name VARCHAR2(255), job_title VARCHAR2(100), salary DECIMAL(10,2));\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), hire_date DATE, department_id NUMBER, department_name VARCHAR2(255), job_title VARCHAR2(100), salary DECIMAL(10,2));\n\nSource SQL:\nSELECT department_name, Eng_TotalSalary, DS_TotalSalary, PM_TotalSalary, HR_TotalSalary, Eng_EmployeeCount, DS_EmployeeCount, PM_EmployeeCount, HR_EmployeeCount FROM ( SELECT department_name, job_title, salary, employee_id FROM employees ) PIVOT ( SUM(salary) AS TotalSalary, COUNT(employee_id) AS EmployeeCount FOR job_title IN ('Software Engineer' AS Eng, 'Data Scientist' AS DS, 'Project Manager' AS PM, 'HR Specialist' AS HR) ) WHERE Eng_TotalSalary IS NOT NULL OR DS_TotalSalary IS NOT NULL OR PM_TotalSalary IS NOT NULL OR HR_TotalSalary IS NOT NULL;\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT\n    department_name,\n    SUM(salary) FILTER (WHERE job_title = 'Software Engineer') AS Eng_TotalSalary,\n    SUM(salary) FILTER (WHERE job_title = 'Data Scientist') AS DS_TotalSalary,\n    SUM(salary) FILTER (WHERE job_title = 'Project Manager') AS PM_TotalSalary,\n    SUM(salary) FILTER (WHERE job_title = 'HR Specialist') AS HR_TotalSalary,\n    COUNT(employee_id) FILTER (WHERE job_title = 'Software Engineer') AS Eng_EmployeeCount,\n    COUNT(employee_id) FILTER (WHERE job_title = 'Data Scientist') AS DS_EmployeeCount,\n    COUNT(employee_id) FILTER (WHERE job_title = 'Project Manager') AS PM_EmployeeCount,\n    COUNT(employee_id) FILTER (WHERE job_title = 'HR Specialist') AS HR_EmployeeCount\nFROM employees\nGROUP BY department_name\nHAVING\n    SUM(salary) FILTER (WHERE job_title = 'Software Engineer') IS NOT NULL\n    OR SUM(salary) FILTER (WHERE job_title = 'Data Scientist') IS NOT NULL\n    OR SUM(salary) FILTER (WHERE job_title = 'Project Manager') IS NOT NULL\n    OR SUM(salary) FILTER (WHERE job_title = 'HR Specialist') IS NOT NULL;"
                    }
                ]
            },
            {
                "case_id": "18",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"18\", \"difficulty_level\": \"3\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"SELECT department_name, job_title, SUM(salary) AS total_salary, GROUPING_ID(department_name, job_title) AS grouping_level, DECODE(GROUPING(department_name), 1, 'Total by Job', 0, DECODE(GROUPING(job_title), 1, 'Total by Dept', 'Detail')) AS aggregation_type, SYS_CONTEXT('USERENV', 'CLIENT_IP_ADDRESS') AS client_ip, DBMS_RANDOM.VALUE(0, 1) AS random_value FROM employees WHERE status = 'Active' GROUP BY CUBE(department_name, job_title) ORDER BY grouping_level, department_name NULLS FIRST, job_title NULLS LAST;\", \"create_table_statements\": [\"CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), department_id NUMBER, department_name VARCHAR2(255), job_title VARCHAR2(100), salary DECIMAL(10,2), status VARCHAR2(50));\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), department_id NUMBER, department_name VARCHAR2(255), job_title VARCHAR2(100), salary DECIMAL(10,2), status VARCHAR2(50));\n\nSource SQL:\nSELECT department_name, job_title, SUM(salary) AS total_salary, GROUPING_ID(department_name, job_title) AS grouping_level, DECODE(GROUPING(department_name), 1, 'Total by Job', 0, DECODE(GROUPING(job_title), 1, 'Total by Dept', 'Detail')) AS aggregation_type, SYS_CONTEXT('USERENV', 'CLIENT_IP_ADDRESS') AS client_ip, DBMS_RANDOM.VALUE(0, 1) AS random_value FROM employees WHERE status = 'Active' GROUP BY CUBE(department_name, job_title) ORDER BY grouping_level, department_name NULLS FIRST, job_title NULLS LAST;\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT\n  department_name,\n  job_title,\n  SUM(salary) AS total_salary,\n  grouping_id(department_name, job_title) AS grouping_level,\n  CASE\n    WHEN GROUPING(department_name)=1 THEN 'Total by Job'\n    WHEN GROUPING(job_title)=1 THEN 'Total by Dept'\n    ELSE 'Detail'\n  END AS aggregation_type,\n  inet_client_addr()::text AS client_ip,\n  random() AS random_value\nFROM employees\nWHERE status = 'Active'\nGROUP BY CUBE(department_name, job_title)\nORDER BY grouping_level, department_name NULLS FIRST, job_title NULLS LAST;"
                    }
                ]
            },
            {
                "case_id": "19",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"19\", \"difficulty_level\": \"3\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"CREATE OR REPLACE TYPE T_EMP_REC AS OBJECT (employee_id NUMBER, employee_name VARCHAR2(255), salary NUMBER); CREATE OR REPLACE TYPE T_EMP_TAB IS TABLE OF T_EMP_REC; CREATE OR REPLACE FUNCTION get_high_salary_employees(p_min_salary IN NUMBER) RETURN T_EMP_TAB PIPELINED IS CURSOR c_employees IS SELECT employee_id, employee_name, salary FROM employees WHERE salary >= p_min_salary; v_emp_rec T_EMP_REC := T_EMP_REC(NULL, NULL, NULL); BEGIN FOR r_emp IN c_employees LOOP v_emp_rec.employee_id := r_emp.employee_id; v_emp_rec.employee_name := r_emp.employee_name; v_emp_rec.salary := r_emp.salary; PIPE ROW (v_emp_rec); END LOOP; RETURN; END;\", \"create_table_statements\": [\"CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), salary DECIMAL(10,2));\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), salary DECIMAL(10,2));\n\nSource SQL:\nCREATE OR REPLACE TYPE T_EMP_REC AS OBJECT (employee_id NUMBER, employee_name VARCHAR2(255), salary NUMBER); CREATE OR REPLACE TYPE T_EMP_TAB IS TABLE OF T_EMP_REC; CREATE OR REPLACE FUNCTION get_high_salary_employees(p_min_salary IN NUMBER) RETURN T_EMP_TAB PIPELINED IS CURSOR c_employees IS SELECT employee_id, employee_name, salary FROM employees WHERE salary >= p_min_salary; v_emp_rec T_EMP_REC := T_EMP_REC(NULL, NULL, NULL); BEGIN FOR r_emp IN c_employees LOOP v_emp_rec.employee_id := r_emp.employee_id; v_emp_rec.employee_name := r_emp.employee_name; v_emp_rec.salary := r_emp.salary; PIPE ROW (v_emp_rec); END LOOP; RETURN; END;\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TYPE t_emp_rec AS (employee_id integer, employee_name varchar(255), salary numeric(10,2));\nCREATE OR REPLACE FUNCTION get_high_salary_employees(p_min_salary numeric) RETURNS SETOF t_emp_rec AS $$\nBEGIN\n  RETURN QUERY\n    SELECT employee_id, employee_name, salary\n    FROM employees\n    WHERE salary >= p_min_salary;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "20",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"20\", \"difficulty_level\": \"3\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"CREATE OR REPLACE PACKAGE BODY employee_pkg IS    PRAGMA AUTONOMOUS_TRANSACTION;    FUNCTION get_employee_salary (p_employee_id IN NUMBER) RETURN NUMBER IS        v_salary employees.salary%TYPE;    BEGIN        SELECT salary INTO v_salary FROM employees WHERE employee_id = p_employee_id;        RETURN v_salary;    EXCEPTION        WHEN NO_DATA_FOUND THEN            RETURN NULL;    END get_employee_salary;     PROCEDURE update_employee_status (p_employee_id IN NUMBER, p_status IN VARCHAR2) IS        v_log_message VARCHAR2(200);        v_audit_id NUMBER;    BEGIN        UPDATE employees SET status = p_status, last_updated_at = SYSTIMESTAMP WHERE employee_id = p_employee_id;        IF SQL%NOTFOUND THEN            v_log_message := 'Attempted to update non-existent employee ' || p_employee_id;            INSERT INTO audit_log (log_message, log_timestamp, log_type) VALUES (v_log_message, SYSTIMESTAMP, 'ERROR') RETURNING log_id INTO v_audit_id;            COMMIT;            RAISE_APPLICATION_ERROR(-20001, v_log_message || ' Audit ID: ' || v_audit_id);        END IF;        v_log_message := 'Employee ' || p_employee_id || ' status updated to ' || p_status;        INSERT INTO audit_log (log_message, log_timestamp, log_type) VALUES (v_log_message, SYSTIMESTAMP, 'INFO') RETURNING log_id INTO v_audit_id;        COMMIT;    END update_employee_status;     FUNCTION get_session_info RETURN VARCHAR2 IS        v_sid NUMBER;        v_serial NUMBER;    BEGIN        SELECT SYS_CONTEXT('USERENV', 'SID'), SYS_CONTEXT('USERENV', 'SESSION_SERIAL#') INTO v_sid, v_serial FROM DUAL;        RETURN 'Session ID: ' || v_sid || ', Serial: ' || v_serial;    END get_session_info; END employee_pkg;\", \"create_table_statements\": [\"CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), salary DECIMAL(10,2), status VARCHAR2(50), last_updated_at TIMESTAMP WITH LOCAL TIME ZONE);\", \"CREATE OR REPLACE PACKAGE employee_pkg IS FUNCTION get_employee_salary (p_employee_id IN NUMBER) RETURN NUMBER; PROCEDURE update_employee_status (p_employee_id IN NUMBER, p_status IN VARCHAR2); FUNCTION get_session_info RETURN VARCHAR2; END employee_pkg;\", \"CREATE TABLE audit_log (log_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, log_message VARCHAR2(4000), log_timestamp TIMESTAMP WITH LOCAL TIME ZONE, log_type VARCHAR2(10));\"]}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE employees (employee_id NUMBER PRIMARY KEY, employee_name VARCHAR2(255), salary DECIMAL(10,2), status VARCHAR2(50), last_updated_at TIMESTAMP WITH LOCAL TIME ZONE);\nCREATE OR REPLACE PACKAGE employee_pkg IS FUNCTION get_employee_salary (p_employee_id IN NUMBER) RETURN NUMBER; PROCEDURE update_employee_status (p_employee_id IN NUMBER, p_status IN VARCHAR2); FUNCTION get_session_info RETURN VARCHAR2; END employee_pkg;\nCREATE TABLE audit_log (log_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, log_message VARCHAR2(4000), log_timestamp TIMESTAMP WITH LOCAL TIME ZONE, log_type VARCHAR2(10));\n\nSource SQL:\nCREATE OR REPLACE PACKAGE BODY employee_pkg IS    PRAGMA AUTONOMOUS_TRANSACTION;    FUNCTION get_employee_salary (p_employee_id IN NUMBER) RETURN NUMBER IS        v_salary employees.salary%TYPE;    BEGIN        SELECT salary INTO v_salary FROM employees WHERE employee_id = p_employee_id;        RETURN v_salary;    EXCEPTION        WHEN NO_DATA_FOUND THEN            RETURN NULL;    END get_employee_salary;     PROCEDURE update_employee_status (p_employee_id IN NUMBER, p_status IN VARCHAR2) IS        v_log_message VARCHAR2(200);        v_audit_id NUMBER;    BEGIN        UPDATE employees SET status = p_status, last_updated_at = SYSTIMESTAMP WHERE employee_id = p_employee_id;        IF SQL%NOTFOUND THEN            v_log_message := 'Attempted to update non-existent employee ' || p_employee_id;            INSERT INTO audit_log (log_message, log_timestamp, log_type) VALUES (v_log_message, SYSTIMESTAMP, 'ERROR') RETURNING log_id INTO v_audit_id;            COMMIT;            RAISE_APPLICATION_ERROR(-20001, v_log_message || ' Audit ID: ' || v_audit_id);        END IF;        v_log_message := 'Employee ' || p_employee_id || ' status updated to ' || p_status;        INSERT INTO audit_log (log_message, log_timestamp, log_type) VALUES (v_log_message, SYSTIMESTAMP, 'INFO') RETURNING log_id INTO v_audit_id;        COMMIT;    END update_employee_status;     FUNCTION get_session_info RETURN VARCHAR2 IS        v_sid NUMBER;        v_serial NUMBER;    BEGIN        SELECT SYS_CONTEXT('USERENV', 'SID'), SYS_CONTEXT('USERENV', 'SESSION_SERIAL#') INTO v_sid, v_serial FROM DUAL;        RETURN 'Session ID: ' || v_sid || ', Serial: ' || v_serial;    END get_session_info; END employee_pkg;\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION get_employee_salary(p_employee_id integer) RETURNS numeric AS $$\nDECLARE\n  v_salary numeric;\nBEGIN\n  SELECT salary INTO STRICT v_salary FROM employees WHERE employee_id = p_employee_id;\n  RETURN v_salary;\nEXCEPTION WHEN no_data_found THEN\n  RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE OR REPLACE PROCEDURE update_employee_status(p_employee_id integer, p_status text)\nLANGUAGE plpgsql\nAS $$\nDECLARE\n  v_log_message text;\n  v_audit_id bigint;\nBEGIN\n  UPDATE employees\n    SET status = p_status,\n        last_updated_at = now()\n    WHERE employee_id = p_employee_id;\n  IF NOT FOUND THEN\n    v_log_message := 'Attempted to update non-existent employee ' || p_employee_id;\n    INSERT INTO audit_log(log_message, log_timestamp, log_type)\n      VALUES(v_log_message, now(), 'ERROR')\n      RETURNING log_id INTO v_audit_id;\n    COMMIT;\n    RAISE EXCEPTION '% Audit ID: %', v_log_message, v_audit_id;\n  END IF;\n  v_log_message := 'Employee ' || p_employee_id || ' status updated to ' || p_status;\n  INSERT INTO audit_log(log_message, log_timestamp, log_type)\n    VALUES(v_log_message, now(), 'INFO')\n    RETURNING log_id INTO v_audit_id;\n  COMMIT;\nEND;\n$$;\n\nCREATE OR REPLACE FUNCTION get_session_info() RETURNS text AS $$\nDECLARE\n  v_pid integer;\n  v_txid bigint;\nBEGIN\n  v_pid := pg_backend_pid();\n  v_txid := txid_current();\n  RETURN 'Session ID: ' || v_pid || ', Transaction ID: ' || v_txid;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "21",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"21\", \"difficulty_level\": \"3\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT d.doc_id, item_price, item_name, JSON_DEPTH(document_data) AS json_depth FROM documents, JSON_TABLE(document_data, '$.items[*]' COLUMNS ( item_id INT PATH '$.id', item_name VARCHAR(255) PATH '$.name', item_price DECIMAL(10,2) PATH '$.price' )) AS jt WHERE JSON_EXTRACT(document_data, '$.status') = 'Active' AND JSON_CONTAINS(document_data, '\\\"Laptop\\\"', '$.products');\", \"create_table_statements\": [\"CREATE TABLE IF NOT EXISTS documents (doc_id INT PRIMARY KEY AUTO_INCREMENT, document_data JSON);\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE IF NOT EXISTS documents (doc_id INT PRIMARY KEY AUTO_INCREMENT, document_data JSON);\n\nSource SQL:\nSELECT d.doc_id, item_price, item_name, JSON_DEPTH(document_data) AS json_depth FROM documents, JSON_TABLE(document_data, '$.items[*]' COLUMNS ( item_id INT PATH '$.id', item_name VARCHAR(255) PATH '$.name', item_price DECIMAL(10,2) PATH '$.price' )) AS jt WHERE JSON_EXTRACT(document_data, '$.status') = 'Active' AND JSON_CONTAINS(document_data, '\"Laptop\"', '$.products');\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT d.doc_id,\n       jt.item_price,\n       jt.item_name,\n       JSON_DEPTH(d.document_data) AS json_depth\n  FROM documents d,\n       JSON_TABLE(\n         d.document_data,\n         '$.items[*]'\n         COLUMNS (\n           item_id    NUMBER       PATH '$.id',\n           item_name  VARCHAR2(255) PATH '$.name',\n           item_price NUMBER(10,2)  PATH '$.price'\n         )\n       ) jt\n WHERE JSON_VALUE(d.document_data, '$.status') = 'Active'\n   AND JSON_EXISTS(d.document_data, '$.products[*]?(@ == \"Laptop\")')"
                    }
                ]
            },
            {
                "case_id": "22",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"22\", \"difficulty_level\": \"3\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"DECLARE\\n    v_emp_count NUMBER;\\nBEGIN\\n    SELECT COUNT(*) INTO v_emp_count FROM employees_temp;\\n    IF v_emp_count > 0 THEN\\n        DBMS_OUTPUT.PUT_LINE('Employees exist: ' || v_emp_count);\\n    ELSE\\n        DBMS_OUTPUT.PUT_LINE('No employees found.');\\n    END IF;\\nEND;\", \"create_table_statements\": [\"CREATE TABLE `employees_temp` (\\n  `employee_id` INT NOT NULL AUTO_INCREMENT,\\n  `first_name` VARCHAR(50),\\n  `last_name` VARCHAR(50),\\n  `department_id` INT,\\n  `hire_date` DATE,\\n  `salary` DECIMAL(10, 2),\\n  PRIMARY KEY (`employee_id`),\\n  INDEX `idx_department_id` (`department_id`)\\n) ENGINE=InnoDB\\n  DEFAULT CHARSET = utf8mb4\\n  COLLATE = utf8mb4_unicode_ci;\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE `employees_temp` (\n  `employee_id` INT NOT NULL AUTO_INCREMENT,\n  `first_name` VARCHAR(50),\n  `last_name` VARCHAR(50),\n  `department_id` INT,\n  `hire_date` DATE,\n  `salary` DECIMAL(10, 2),\n  PRIMARY KEY (`employee_id`),\n  INDEX `idx_department_id` (`department_id`)\n) ENGINE=InnoDB\n  DEFAULT CHARSET = utf8mb4\n  COLLATE = utf8mb4_unicode_ci;\n\nSource SQL:\nDECLARE\n    v_emp_count NUMBER;\nBEGIN\n    SELECT COUNT(*) INTO v_emp_count FROM employees_temp;\n    IF v_emp_count > 0 THEN\n        DBMS_OUTPUT.PUT_LINE('Employees exist: ' || v_emp_count);\n    ELSE\n        DBMS_OUTPUT.PUT_LINE('No employees found.');\n    END IF;\nEND;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TABLE employees_temp (\n  employee_id NUMBER(10) NOT NULL,\n  first_name  VARCHAR2(50),\n  last_name   VARCHAR2(50),\n  department_id NUMBER(10),\n  hire_date   DATE,\n  salary      NUMBER(10,2),\n  CONSTRAINT pk_employees_temp PRIMARY KEY (employee_id)\n);\n\nCREATE INDEX idx_department_id ON employees_temp(department_id);\n\nCREATE SEQUENCE employees_temp_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;\n\nCREATE OR REPLACE TRIGGER trg_employees_temp_bi\nBEFORE INSERT ON employees_temp\nFOR EACH ROW\nWHEN (new.employee_id IS NULL)\nBEGIN\n  SELECT employees_temp_seq.NEXTVAL INTO :new.employee_id FROM dual;\nEND;\n/\n\nDECLARE\n    v_emp_count NUMBER;\nBEGIN\n    SELECT COUNT(*) INTO v_emp_count FROM employees_temp;\n    IF v_emp_count > 0 THEN\n        DBMS_OUTPUT.PUT_LINE('Employees exist: ' || v_emp_count);\n    ELSE\n        DBMS_OUTPUT.PUT_LINE('No employees found.');\n    END IF;\nEND;\n/\n"
                    }
                ]
            },
            {
                "case_id": "23",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"23\", \"difficulty_level\": \"3\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"MERGE INTO target_products tp USING (SELECT product_id, product_name, price, stock FROM staging_products) sp ON (tp.product_id = sp.product_id) WHEN MATCHED THEN UPDATE SET tp.product_name = sp.product_name, tp.price = sp.price, tp.stock = tp.stock + sp.stock WHERE tp.status = 'Active' DELETE WHERE tp.stock <= 0 WHEN NOT MATCHED THEN INSERT (product_id, product_name, price, stock, status, last_update_date) VALUES (sp.product_id, sp.product_name, sp.price, sp.stock, 'New', SYSDATE) WHERE sp.price > 100;\", \"create_table_statements\": [\"CREATE TABLE target_products (product_id NUMBER PRIMARY KEY, product_name VARCHAR2(255), price DECIMAL(10,2), stock NUMBER, status VARCHAR2(50), last_update_date DATE DEFAULT SYSDATE);\", \"CREATE TABLE staging_products (product_id NUMBER PRIMARY KEY, product_name VARCHAR2(255), price DECIMAL(10,2), stock NUMBER);\"]}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE target_products (product_id NUMBER PRIMARY KEY, product_name VARCHAR2(255), price DECIMAL(10,2), stock NUMBER, status VARCHAR2(50), last_update_date DATE DEFAULT SYSDATE);\nCREATE TABLE staging_products (product_id NUMBER PRIMARY KEY, product_name VARCHAR2(255), price DECIMAL(10,2), stock NUMBER);\n\nSource SQL:\nMERGE INTO target_products tp USING (SELECT product_id, product_name, price, stock FROM staging_products) sp ON (tp.product_id = sp.product_id) WHEN MATCHED THEN UPDATE SET tp.product_name = sp.product_name, tp.price = sp.price, tp.stock = tp.stock + sp.stock WHERE tp.status = 'Active' DELETE WHERE tp.stock <= 0 WHEN NOT MATCHED THEN INSERT (product_id, product_name, price, stock, status, last_update_date) VALUES (sp.product_id, sp.product_name, sp.price, sp.stock, 'New', SYSDATE) WHERE sp.price > 100;\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "MERGE INTO target_products AS tp\nUSING (SELECT product_id, product_name, price, stock FROM staging_products) AS sp\nON tp.product_id = sp.product_id\nWHEN MATCHED AND tp.status = 'Active' THEN\n  UPDATE SET product_name = sp.product_name,\n             price = sp.price,\n             stock = tp.stock + sp.stock\nWHEN MATCHED AND tp.stock + sp.stock <= 0 THEN\n  DELETE\nWHEN NOT MATCHED AND sp.price > 100 THEN\n  INSERT (product_id, product_name, price, stock, status, last_update_date)\n  VALUES (sp.product_id, sp.product_name, sp.price, sp.stock, 'New', NOW());"
                    }
                ]
            },
            {
                "case_id": "24",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"24\", \"difficulty_level\": \"3\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"SELECT p.product_id, xt.* FROM products_xml p, XMLTABLE('/product_data/product_details/item[@category=\\\"Electronics\\\" and price > 100]' PASSING p.product_xml COLUMNS item_name VARCHAR2(255) PATH 'name', item_quantity NUMBER PATH 'quantity', item_price NUMBER PATH 'price', item_description XMLTYPE PATH 'description') xt WHERE XMLExists('/product_data/product_details/item[quantity > 10]' PASSING p.product_xml) AND XMLTRANSFORM(p.product_xml, '<?xml version=\\\"1.0\\\"?><xsl:stylesheet version=\\\"1.0\\\" xmlns:xsl=\\\"http://www.w3.org/1999/XSL/Transform\\\"><xsl:template match=\\\"/\\\"><root><xsl:value-of select=\\\"/product_data/product_details/item/name\\\"/></root></xsl:template></xsl:stylesheet>').getClobVal() LIKE '%Laptop%';\", \"create_table_statements\": [\"CREATE TABLE products_xml (product_id NUMBER PRIMARY KEY, product_xml XMLTYPE);\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE products_xml (product_id NUMBER PRIMARY KEY, product_xml XMLTYPE);\n\nSource SQL:\nSELECT p.product_id, xt.* FROM products_xml p, XMLTABLE('/product_data/product_details/item[@category=\"Electronics\" and price > 100]' PASSING p.product_xml COLUMNS item_name VARCHAR2(255) PATH 'name', item_quantity NUMBER PATH 'quantity', item_price NUMBER PATH 'price', item_description XMLTYPE PATH 'description') xt WHERE XMLExists('/product_data/product_details/item[quantity > 10]' PASSING p.product_xml) AND XMLTRANSFORM(p.product_xml, '<?xml version=\"1.0\"?><xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"><xsl:template match=\"/\"><root><xsl:value-of select=\"/product_data/product_details/item/name\"/></root></xsl:template></xsl:stylesheet>').getClobVal() LIKE '%Laptop%';\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT p.product_id, xt.*\nFROM products_xml p\nCROSS JOIN LATERAL xmltable(\n  '/product_data/product_details/item[@category=\"Electronics\" and price > 100]'\n  PASSING p.product_xml\n  COLUMNS\n    item_name    text   PATH 'name',\n    item_quantity integer PATH 'quantity',\n    item_price   numeric PATH 'price',\n    item_description xml  PATH 'description'\n) AS xt\nWHERE xml_exists(\n  '/product_data/product_details/item[quantity > 10]'\n  PASSING p.product_xml\n)\nAND xmlserialize(\n  CONTENT xmltransform(\n    p.product_xml,\n    xml '<?xml version=\"1.0\"?><xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"><xsl:template match=\"/\"><root><xsl:value-of select=\"/product_data/product_details/item/name\"/></root></xsl:template></xsl:stylesheet>'\n  ) AS text\n) LIKE '%Laptop%';"
                    }
                ]
            },
            {
                "case_id": "25",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"25\", \"difficulty_level\": \"3\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"CREATE OR REPLACE FUNCTION calculate_bonus (p_employee_id IN NUMBER) RETURN NUMBER IS    v_salary employees.salary%TYPE;    v_bonus_rate NUMBER;BEGIN    SELECT salary INTO v_salary FROM employees WHERE employee_id = p_employee_id;     SELECT bonus_rate INTO v_bonus_rate FROM bonus_rules WHERE v_salary BETWEEN min_salary AND max_salary;     RETURN v_salary * v_bonus_rate;EXCEPTION    WHEN NO_DATA_FOUND THEN        RAISE_APPLICATION_ERROR(-20002, 'Employee or bonus rule not found.');    WHEN OTHERS THEN        RAISE_APPLICATION_ERROR(-20003, 'An unexpected error occurred: ' || SQLERRM);END;\", \"create_table_statements\": [\"CREATE TABLE employees (employee_id NUMBER PRIMARY KEY, salary DECIMAL(10,2));\", \"CREATE TABLE bonus_rules (rule_id NUMBER PRIMARY KEY, min_salary DECIMAL(10,2), max_salary DECIMAL(10,2), bonus_rate DECIMAL(5,2));\"]}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nTable Definitions:\nCREATE TABLE employees (employee_id NUMBER PRIMARY KEY, salary DECIMAL(10,2));\nCREATE TABLE bonus_rules (rule_id NUMBER PRIMARY KEY, min_salary DECIMAL(10,2), max_salary DECIMAL(10,2), bonus_rate DECIMAL(5,2));\n\nSource SQL:\nCREATE OR REPLACE FUNCTION calculate_bonus (p_employee_id IN NUMBER) RETURN NUMBER IS    v_salary employees.salary%TYPE;    v_bonus_rate NUMBER;BEGIN    SELECT salary INTO v_salary FROM employees WHERE employee_id = p_employee_id;     SELECT bonus_rate INTO v_bonus_rate FROM bonus_rules WHERE v_salary BETWEEN min_salary AND max_salary;     RETURN v_salary * v_bonus_rate;EXCEPTION    WHEN NO_DATA_FOUND THEN        RAISE_APPLICATION_ERROR(-20002, 'Employee or bonus rule not found.');    WHEN OTHERS THEN        RAISE_APPLICATION_ERROR(-20003, 'An unexpected error occurred: ' || SQLERRM);END;\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION calculate_bonus(p_employee_id integer) RETURNS numeric AS\n$$\nDECLARE\n    v_salary employees.salary%TYPE;\n    v_bonus_rate bonus_rules.bonus_rate%TYPE;\nBEGIN\n    SELECT salary INTO v_salary\n    FROM employees\n    WHERE employee_id = p_employee_id;\n\n    SELECT bonus_rate INTO v_bonus_rate\n    FROM bonus_rules\n    WHERE v_salary BETWEEN min_salary AND max_salary;\n\n    RETURN v_salary * v_bonus_rate;\nEXCEPTION\n    WHEN no_data_found THEN\n        RAISE EXCEPTION 'Employee or bonus rule not found.';\n    WHEN OTHERS THEN\n        RAISE EXCEPTION 'An unexpected error occurred: %', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            }
        ]
    },
    {
        "indicator_name": "syntax_error_detection.jsonl",
        "indicator_weight": 2,
        "evaluation_type": "hybrid",
        "case_pass_count": 23,
        "case_wrong_count": 2,
        "correct_rate": 0.92,
        "case_datas": [
            {
                "case_id": "1",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"1\", \"difficulty_level\": \"1\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT name, id FROM students WHERE age > 10;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT name, id FROM students WHERE age > 10;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT name, id FROM students WHERE age > 10;"
                    }
                ]
            },
            {
                "case_id": "2",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"2\", \"difficulty_level\": \"1\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"INSERT INTO products (product_name, price) VALUES ('Laptop', 1200);\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nINSERT INTO products (product_name, price) VALUES ('Laptop', 1200);\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "INSERT INTO products (product_name, price) VALUES ('Laptop', 1200);"
                    }
                ]
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"difficulty_level\": \"1\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"UPDATE employees SET salary = 60000 WHERE employee_id = 101;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nUPDATE employees SET salary = 60000 WHERE employee_id = 101;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "UPDATE employees SET salary = 60000 WHERE employee_id = 101;"
                    }
                ]
            },
            {
                "case_id": "4",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"4\", \"difficulty_level\": \"1\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"DELETE FROM orders WHERE order_date < '2023-01-01';\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nDELETE FROM orders WHERE order_date < '2023-01-01';\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DELETE FROM orders WHERE order_date < TO_DATE('2023-01-01','YYYY-MM-DD');"
                    }
                ]
            },
            {
                "case_id": "5",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"5\", \"difficulty_level\": \"1\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"CREATE TABLE users (user_id INT PRIMARY KEY AUTO_INCREMENT, username VARCHAR(50) NOT NULL);\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE TABLE users (user_id INT PRIMARY KEY AUTO_INCREMENT, username VARCHAR(50) NOT NULL);\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TABLE users (user_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, username VARCHAR2(50) NOT NULL);"
                    }
                ]
            },
            {
                "case_id": "6",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"6\", \"difficulty_level\": \"1\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"ALTER TABLE products ADD COLUMN description TEXT;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nALTER TABLE products ADD COLUMN description TEXT;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "ALTER TABLE products ADD (description CLOB);"
                    }
                ]
            },
            {
                "case_id": "7",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"7\", \"difficulty_level\": \"1\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"DROP TABLE old_data;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nDROP TABLE old_data;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DROP TABLE old_data;"
                    }
                ]
            },
            {
                "case_id": "8",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"8\", \"difficulty_level\": \"2\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT max(weight) FROM fruits;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT max(weight) FROM fruits;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT MAX(weight) FROM fruits;"
                    }
                ]
            },
            {
                "case_id": "9",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"9\", \"difficulty_level\": \"2\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT product_id, product_name, price FROM products ORDER BY price DESC LIMIT 10 OFFSET 5;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT product_id, product_name, price FROM products ORDER BY price DESC LIMIT 10 OFFSET 5;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT product_id, product_name, price FROM products ORDER BY price DESC OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;"
                    }
                ]
            },
            {
                "case_id": "10",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"10\", \"difficulty_level\": \"2\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT COUNT(DISTINCT city) FROM customers;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT COUNT(DISTINCT city) FROM customers;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT COUNT(DISTINCT city) FROM customers;"
                    }
                ]
            },
            {
                "case_id": "11",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"11\", \"difficulty_level\": \"2\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 100;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT SUM(quantity) AS total_quantity FROM order_items GROUP BY product_id HAVING SUM(quantity) > 100;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT SUM(quantity) AS total_quantity\nFROM order_items\nGROUP BY product_id\nHAVING SUM(quantity) > 100;"
                    }
                ]
            },
            {
                "case_id": "12",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"12\", \"difficulty_level\": \"2\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"CREATE TABLE audit_log (\\n    log_id INT AUTO_INCREMENT PRIMARY KEY,\\n    action_type VARCHAR(50),\\n    log_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP\\n);\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE TABLE audit_log (\n    log_id INT AUTO_INCREMENT PRIMARY KEY,\n    action_type VARCHAR(50),\n    log_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TABLE audit_log (\n  log_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n  action_type VARCHAR2(50),\n  log_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);"
                    }
                ]
            },
            {
                "case_id": "13",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"13\", \"difficulty_level\": \"2\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"ALTER TABLE articles MODIFY COLUMN content LONGTEXT;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nALTER TABLE articles MODIFY COLUMN content LONGTEXT;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "ALTER TABLE articles MODIFY (content CLOB);"
                    }
                ]
            },
            {
                "case_id": "14",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"14\", \"difficulty_level\": \"2\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT IFNULL(commission, 0) FROM sales_reps WHERE rep_id = 1;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT IFNULL(commission, 0) FROM sales_reps WHERE rep_id = 1;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT NVL(commission, 0) FROM sales_reps WHERE rep_id = 1;"
                    }
                ]
            },
            {
                "case_id": "15",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"15\", \"difficulty_level\": \"2\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT DATE_FORMAT(order_date, '%Y-%m-%d') FROM orders WHERE order_id = 1001;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT DATE_FORMAT(order_date, '%Y-%m-%d') FROM orders WHERE order_id = 1001;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT TO_CHAR(order_date, 'YYYY-MM-DD') FROM orders WHERE order_id = 1001;"
                    }
                ]
            },
            {
                "case_id": "16",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"16\", \"difficulty_level\": \"2\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT CONCAT(first_name, ' ', last_name) FROM employees WHERE employee_id = 10;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT CONCAT(first_name, ' ', last_name) FROM employees WHERE employee_id = 10;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT first_name || ' ' || last_name FROM employees WHERE employee_id = 10;"
                    }
                ]
            },
            {
                "case_id": "17",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"17\", \"difficulty_level\": \"3\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"DELIMITER $$\\nCREATE PROCEDURE GetCustomerOrderCount(IN customer_id_param INT, OUT order_count INT)\\nBEGIN\\n    SELECT COUNT(*) INTO order_count FROM orders WHERE customer_id = customer_id_param;\\nEND $$\\nDELIMITER ;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$\nCREATE PROCEDURE GetCustomerOrderCount(IN customer_id_param INT, OUT order_count INT)\nBEGIN\n    SELECT COUNT(*) INTO order_count FROM orders WHERE customer_id = customer_id_param;\nEND $$\nDELIMITER ;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE GetCustomerOrderCount (\n  customer_id_param IN NUMBER,\n  order_count OUT NUMBER\n) AS\nBEGIN\n  SELECT COUNT(*) INTO order_count\n  FROM orders\n  WHERE customer_id = customer_id_param;\nEND GetCustomerOrderCount; \n/"
                    }
                ]
            },
            {
                "case_id": "18",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"18\", \"difficulty_level\": \"3\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"CREATE TABLE products_with_uuid (\\n    product_id BINARY(16) PRIMARY KEY DEFAULT (UUID_TO_BIN(UUID())),\\n    product_name VARCHAR(255)\\n);\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE TABLE products_with_uuid (\n    product_id BINARY(16) PRIMARY KEY DEFAULT (UUID_TO_BIN(UUID())),\n    product_name VARCHAR(255)\n);\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TABLE products_with_uuid (\n    product_id RAW(16) DEFAULT SYS_GUID() PRIMARY KEY,\n    product_name VARCHAR2(255)\n);"
                    }
                ]
            },
            {
                "case_id": "19",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"19\", \"difficulty_level\": \"3\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"SELECT\\n    e.employee_name,\\n    CASE\\n        WHEN e.salary < 50000 THEN 'Junior'\\n        WHEN e.salary BETWEEN 50000 AND 80000 THEN 'Mid-level'\\n        ELSE 'Senior'\\n    END AS salary_level\\nFROM\\n    employees e;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nSELECT\n    e.employee_name,\n    CASE\n        WHEN e.salary < 50000 THEN 'Junior'\n        WHEN e.salary BETWEEN 50000 AND 80000 THEN 'Mid-level'\n        ELSE 'Senior'\n    END AS salary_level\nFROM\n    employees e;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT e.employee_name,\n       CASE\n         WHEN e.salary < 50000 THEN 'Junior'\n         WHEN e.salary BETWEEN 50000 AND 80000 THEN 'Mid-level'\n         ELSE 'Senior'\n       END AS salary_level\nFROM employees e;"
                    }
                ]
            },
            {
                "case_id": "20",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"20\", \"difficulty_level\": \"3\", \"source_dialect\": \"MySQL\", \"target_dialect\": \"Oracle\", \"sql\": \"DELIMITER $$\\nCREATE TRIGGER before_employee_update\\nBEFORE UPDATE ON employees\\nFOR EACH ROW\\nBEGIN\\n    IF NEW.salary < OLD.salary THEN\\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot decrease employee salary!';\\n    END IF;\\nEND $$\\nDELIMITER ;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from MySQL syntax to Oracle syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$\nCREATE TRIGGER before_employee_update\nBEFORE UPDATE ON employees\nFOR EACH ROW\nBEGIN\n    IF NEW.salary < OLD.salary THEN\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot decrease employee salary!';\n    END IF;\nEND $$\nDELIMITER ;\n\nTranslated SQL (Oracle):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE TRIGGER before_employee_update\nBEFORE UPDATE ON employees\nFOR EACH ROW\nBEGIN\n  IF :NEW.salary < :OLD.salary THEN\n    RAISE_APPLICATION_ERROR(-20001, 'Cannot decrease employee salary!');\n  END IF;\nEND;"
                    }
                ]
            },
            {
                "case_id": "21",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"21\", \"difficulty_level\": \"3\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"MySQL\", \"sql\": \"CREATE OR REPLACE PROCEDURE \\\"SP_KSH_PERSON_FEE\\\" (V_USER_ID IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS V_TEMP_COMPANY VARCHAR(20); BEGIN SELECT HP.COMPANY_CODE INTO V_TEMP_COMPANY FROM KSH_USER_HOME_PAGE HP WHERE HP.USER_ID =V_USER_ID; IF V_TEMP_COMPANY<>'00000000' THEN OPEN OUTCURSOR FOR SELECT SYS_GUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT FROM ( SELECT FD.INVOICE_SORT_NAME,FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE, SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT FROM KSH_CSCE_VESSEL_FEE VC INNER JOIN KSH_FEE_INVOICE_DEFINE FD ON NVL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL AND FD.COMPANY_CODE= VC.COMPANY_CODE WHERE VC.TARGET_YEAR = TO_CHAR(SYSDATE, 'YYYY') AND EXISTS (select 1 from ksh_user_manage_ship um where um.user_id = V_USER_ID and um.vessel_code = VC.vessel_code) GROUP BY FD.INVOICE_SORT_NAME,FD.COMPANY_SORT_SEQ,VC.VESSEL_CODE) TEMP GROUP BY TEMP.INVOICE_SORT_NAME; ELSE OPEN OUTCURSOR FOR SELECT SYS_GUID AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT FROM ( SELECT FD.GROUP_SORT_NAME AS INVOICE_SORT_NAME,FD.Group_Sort_Seq, VC.VESSEL_CODE, SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT FROM KSH_CSCE_VESSEL_FEE VC INNER JOIN KSH_FEE_INVOICE_DEFINE FD ON NVL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL AND FD.GROUP_SORT IS NOT NULL WHERE VC.TARGET_YEAR = TO_CHAR(SYSDATE, 'YYYY') AND EXISTS (select 1 from ksh_user_manage_ship um where um.user_id = V_USER_ID and um.vessel_code = VC.vessel_code) GROUP BY FD.GROUP_SORT_NAME,FD.Group_Sort_Seq,VC.VESSEL_CODE) TEMP GROUP BY TEMP.INVOICE_SORT_NAME, TEMP.Group_Sort_Seq ORDER BY TEMP.Group_Sort_Seq; END IF; END SP_KSH_PERSON_FEE;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to MySQL syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE \"SP_KSH_PERSON_FEE\" (V_USER_ID IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS V_TEMP_COMPANY VARCHAR(20); BEGIN SELECT HP.COMPANY_CODE INTO V_TEMP_COMPANY FROM KSH_USER_HOME_PAGE HP WHERE HP.USER_ID =V_USER_ID; IF V_TEMP_COMPANY<>'00000000' THEN OPEN OUTCURSOR FOR SELECT SYS_GUID() AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT FROM ( SELECT FD.INVOICE_SORT_NAME,FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE, SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT FROM KSH_CSCE_VESSEL_FEE VC INNER JOIN KSH_FEE_INVOICE_DEFINE FD ON NVL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL AND FD.COMPANY_CODE= VC.COMPANY_CODE WHERE VC.TARGET_YEAR = TO_CHAR(SYSDATE, 'YYYY') AND EXISTS (select 1 from ksh_user_manage_ship um where um.user_id = V_USER_ID and um.vessel_code = VC.vessel_code) GROUP BY FD.INVOICE_SORT_NAME,FD.COMPANY_SORT_SEQ,VC.VESSEL_CODE) TEMP GROUP BY TEMP.INVOICE_SORT_NAME; ELSE OPEN OUTCURSOR FOR SELECT SYS_GUID AS UUID, TEMP.INVOICE_SORT_NAME, SUM(TEMP.TARGET_FEE) AS TARGET_FEE, SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TEMP.TARGET_FEE)= 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END) AS RATE, SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT FROM ( SELECT FD.GROUP_SORT_NAME AS INVOICE_SORT_NAME,FD.Group_Sort_Seq, VC.VESSEL_CODE, SUM(VC.TARGET_FEE) AS TARGET_FEE, SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT, (CASE WHEN SUM(TARGET_FEE)<SUM(BASE_AMOUNT) THEN 1 ELSE 0 END) AS OVERDUE_CNT FROM KSH_CSCE_VESSEL_FEE VC INNER JOIN KSH_FEE_INVOICE_DEFINE FD ON NVL(VC.GROUP_SORT_DETAIL, VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL AND FD.GROUP_SORT IS NOT NULL WHERE VC.TARGET_YEAR = TO_CHAR(SYSDATE, 'YYYY') AND EXISTS (select 1 from ksh_user_manage_ship um where um.user_id = V_USER_ID and um.vessel_code = VC.vessel_code) GROUP BY FD.GROUP_SORT_NAME,FD.Group_Sort_Seq,VC.VESSEL_CODE) TEMP GROUP BY TEMP.INVOICE_SORT_NAME, TEMP.Group_Sort_Seq ORDER BY TEMP.Group_Sort_Seq; END IF; END SP_KSH_PERSON_FEE;\n\nTranslated SQL (MySQL):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DELIMITER //\nCREATE PROCEDURE SP_KSH_PERSON_FEE(IN V_USER_ID VARCHAR(20))\nBEGIN\n  DECLARE V_TEMP_COMPANY VARCHAR(20);\n  SELECT HP.COMPANY_CODE INTO V_TEMP_COMPANY\n    FROM KSH_USER_HOME_PAGE HP\n   WHERE HP.USER_ID = V_USER_ID;\n  IF V_TEMP_COMPANY <> '00000000' THEN\n    SELECT UUID() AS UUID,\n           TEMP.INVOICE_SORT_NAME,\n           SUM(TEMP.TARGET_FEE) AS TARGET_FEE,\n           SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT,\n           CASE WHEN SUM(TEMP.TARGET_FEE) = 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END AS RATE,\n           SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT\n      FROM (\n        SELECT FD.INVOICE_SORT_NAME,\n               FD.COMPANY_SORT_SEQ,\n               VC.VESSEL_CODE,\n               SUM(VC.TARGET_FEE) AS TARGET_FEE,\n               SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT,\n               CASE WHEN SUM(VC.TARGET_FEE) < SUM(VC.BASE_AMOUNT) THEN 1 ELSE 0 END AS OVERDUE_CNT\n          FROM KSH_CSCE_VESSEL_FEE VC\n          JOIN KSH_FEE_INVOICE_DEFINE FD\n            ON IFNULL(VC.GROUP_SORT_DETAIL,VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL\n           AND FD.COMPANY_CODE = VC.COMPANY_CODE\n         WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), '%Y')\n           AND EXISTS (\n             SELECT 1\n               FROM ksh_user_manage_ship um\n              WHERE um.user_id = V_USER_ID\n                AND um.vessel_code = VC.vessel_code\n           )\n         GROUP BY FD.INVOICE_SORT_NAME, FD.COMPANY_SORT_SEQ, VC.VESSEL_CODE\n      ) AS TEMP\n    GROUP BY TEMP.INVOICE_SORT_NAME;\n  ELSE\n    SELECT UUID() AS UUID,\n           TEMP.INVOICE_SORT_NAME,\n           SUM(TEMP.TARGET_FEE) AS TARGET_FEE,\n           SUM(TEMP.BASE_AMOUNT) AS BASE_AMOUNT,\n           CASE WHEN SUM(TEMP.TARGET_FEE) = 0 THEN 0 ELSE ROUND(SUM(TEMP.BASE_AMOUNT)/SUM(TEMP.TARGET_FEE),2) END AS RATE,\n           SUM(TEMP.OVERDUE_CNT) AS OVERDUE_CNT\n      FROM (\n        SELECT FD.GROUP_SORT_NAME AS INVOICE_SORT_NAME,\n               FD.Group_Sort_Seq,\n               VC.VESSEL_CODE,\n               SUM(VC.TARGET_FEE) AS TARGET_FEE,\n               SUM(VC.BASE_AMOUNT) AS BASE_AMOUNT,\n               CASE WHEN SUM(VC.TARGET_FEE) < SUM(VC.BASE_AMOUNT) THEN 1 ELSE 0 END AS OVERDUE_CNT\n          FROM KSH_CSCE_VESSEL_FEE VC\n          JOIN KSH_FEE_INVOICE_DEFINE FD\n            ON IFNULL(VC.GROUP_SORT_DETAIL,VC.GROUP_SORT) = FD.INVOICE_SORT_DETAIL\n           AND FD.GROUP_SORT IS NOT NULL\n         WHERE VC.TARGET_YEAR = DATE_FORMAT(CURDATE(), '%Y')\n           AND EXISTS (\n             SELECT 1\n               FROM ksh_user_manage_ship um\n              WHERE um.user_id = V_USER_ID\n                AND um.vessel_code = VC.vessel_code\n           )\n         GROUP BY FD.GROUP_SORT_NAME, FD.Group_Sort_Seq, VC.VESSEL_CODE\n      ) AS TEMP\n    GROUP BY TEMP.INVOICE_SORT_NAME, TEMP.Group_Sort_Seq\n    ORDER BY TEMP.Group_Sort_Seq;\n  END IF;\nEND//\nDELIMITER ;"
                    }
                ]
            },
            {
                "case_id": "22",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"22\", \"difficulty_level\": \"3\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"CREATE OR REPLACE PROCEDURE \\\"SP_SYNC_R_CHECK\\\"( I_VESSEL_CODE VARCHAR2, I_CHECK_GRADE VARCHAR2, I_DEPT VARCHAR2, I_RESPONSIBLE_PERSON VARCHAR2, I_CHECK_NAME VARCHAR2, I_CHECK_DATE VARCHAR2 ) IS CURSOR CUR(I_BEGIN_DATE DATE, I_END_DATE DATE) IS SELECT CWBT_NAME, I.CWBT_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.CHECK_GRADE, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.CHECK_GRADE = I_CHECK_GRADE AND I.VESSEL_CODE = I_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND ( I_DEPT IS NULL OR I.DEPT = I_DEPT ) AND ( I_RESPONSIBLE_PERSON IS NULL OR I.RESPONSIBLE_PERSON = I_RESPONSIBLE_PERSON ) AND ( I_CHECK_NAME IS NULL OR ( I_CHECK_NAME IS NOT NULL AND I.CHECK_NAME LIKE '%' || I_CHECK_NAME || '%' ) ) AND I.DATA_TYPE = 'S'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR2(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO'; IF I_CHECK_DATE IS NULL THEN DAT_BEGIN: = TO_DATE( TO_CHAR(SYSDATE(), 'YYYY') || '-01-01', 'YYYY-MM-DD' ); DAT_END: = TO_DATE( TO_CHAR(SYSDATE(), 'YYYY') || '-12-31', 'YYYY-MM-DD' ); ELSIF LENGTH(I_CHECK_DATE) = 4 THEN DAT_BEGIN: = TO_DATE(I_CHECK_DATE || '-01-01' ， 'YYYY-MM-DD'); DAT_END: = TO_DATE （ I_CHECK_DATE || '-12-31', 'YYYY-MM-DD' ); ELSE DAT_BEGIN: = TO_DATE(I_CHECK_DATE || '-01', 'YYYY-MM-DD'); DAT_END: = LAST_DAY(DAT_BEGIN); END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO ( PID, CWBT_NAME, CWBT_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, CHECK_GRADE, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE ) SELECT REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.CWBT_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.CHECK_GRADE, TRUNC(REC.CHECK_DATE, 'MM'), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE FROM DUAL; END IF; SELECT CASE I_CHECK_GRADE WHEN 'A' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'DD') AS NUMBER) WHEN 'B' THEN CAST( TO_CHAR( PKG_DATE_UTIL.GET_1ST_M( REC.CHECK_DATE, DECODE(LENGTH(I_CHECK_DATE), 4, 'YY', 'MM') ), DECODE(LENGTH(I_CHECK_DATE), 4, 'WW', 'W') ) AS NUMBER ) WHEN 'C' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'MM') AS NUMBER) END INTO VAR_SUFFIX FROM DUAL; EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || VAR_SUFFIX || ' = :1 WHERE I.PID = :2' USING CASE REC.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; DBMS_OUTPUT.ENABLE(10000); DBMS_OUTPUT.PUT_LINE(SQLERRM); END SP_PMS_SYNC_ROUTINE_CHECK;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE \"SP_SYNC_R_CHECK\"( I_VESSEL_CODE VARCHAR2, I_CHECK_GRADE VARCHAR2, I_DEPT VARCHAR2, I_RESPONSIBLE_PERSON VARCHAR2, I_CHECK_NAME VARCHAR2, I_CHECK_DATE VARCHAR2 ) IS CURSOR CUR(I_BEGIN_DATE DATE, I_END_DATE DATE) IS SELECT CWBT_NAME, I.CWBT_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.CHECK_GRADE, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.CHECK_GRADE = I_CHECK_GRADE AND I.VESSEL_CODE = I_VESSEL_CODE AND I.CHECK_DATE >= I_BEGIN_DATE AND I.CHECK_DATE <= I_END_DATE AND ( I_DEPT IS NULL OR I.DEPT = I_DEPT ) AND ( I_RESPONSIBLE_PERSON IS NULL OR I.RESPONSIBLE_PERSON = I_RESPONSIBLE_PERSON ) AND ( I_CHECK_NAME IS NULL OR ( I_CHECK_NAME IS NOT NULL AND I.CHECK_NAME LIKE '%' || I_CHECK_NAME || '%' ) ) AND I.DATA_TYPE = 'S'; INT_COUNT INTEGER; INT_COUNT1 INTEGER; VAR_SUFFIX VARCHAR2(2); DAT_BEGIN DATE; DAT_END DATE; BEGIN EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO'; IF I_CHECK_DATE IS NULL THEN DAT_BEGIN: = TO_DATE( TO_CHAR(SYSDATE(), 'YYYY') || '-01-01', 'YYYY-MM-DD' ); DAT_END: = TO_DATE( TO_CHAR(SYSDATE(), 'YYYY') || '-12-31', 'YYYY-MM-DD' ); ELSIF LENGTH(I_CHECK_DATE) = 4 THEN DAT_BEGIN: = TO_DATE(I_CHECK_DATE || '-01-01' ， 'YYYY-MM-DD'); DAT_END: = TO_DATE （ I_CHECK_DATE || '-12-31', 'YYYY-MM-DD' ); ELSE DAT_BEGIN: = TO_DATE(I_CHECK_DATE || '-01', 'YYYY-MM-DD'); DAT_END: = LAST_DAY(DAT_BEGIN); END IF; FOR REC IN CUR(DAT_BEGIN, DAT_END) LOOP SELECT COUNT(1) INTO INT_COUNT FROM G_R_CHECK_INFO I WHERE I.PID = REC.ROUTINE_CHECK_ITEM_ID; IF INT_COUNT = 0 THEN INSERT INTO G_R_CHECK_INFO ( PID, CWBT_NAME, CWBT_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, CHECK_GRADE, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE ) SELECT REC.ROUTINE_CHECK_ITEM_ID, REC.CWBT_NAME, REC.CWBT_CODE, REC.CHECK_NAME, REC.DEPT_NAME, REC.DEPT, REC.RESPONSIBLE_PERSON_NAME, REC.RESPONSIBLE_PERSON, REC.CHECK_GRADE, TRUNC(REC.CHECK_DATE, 'MM'), REC.VESSEL_CODE, REC.VESSEL_NAME, REC.COMPANY_CODE, REC.CREATED_BY_USER, REC.CREATED_OFFICE, REC.CREATED_DTM_LOC, REC.CREATED_TIME_ZONE, REC.UPDATED_BY_USER, REC.UPDATED_OFFICE, REC.UPDATED_DTM_LOC, REC.UPDATED_TIME_ZONE, REC.RECORD_VERSION, REC.PRINCIPAL_GROUP_CODE FROM DUAL; END IF; SELECT CASE I_CHECK_GRADE WHEN 'A' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'DD') AS NUMBER) WHEN 'B' THEN CAST( TO_CHAR( PKG_DATE_UTIL.GET_1ST_M( REC.CHECK_DATE, DECODE(LENGTH(I_CHECK_DATE), 4, 'YY', 'MM') ), DECODE(LENGTH(I_CHECK_DATE), 4, 'WW', 'W') ) AS NUMBER ) WHEN 'C' THEN CAST(TO_CHAR(REC.CHECK_DATE, 'MM') AS NUMBER) END INTO VAR_SUFFIX FROM DUAL; EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || VAR_SUFFIX || ' = :1 WHERE I.PID = :2' USING CASE REC.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(REC.REMARK, 1, 50), REC.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO INT_COUNT1 FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; DBMS_OUTPUT.ENABLE(10000); DBMS_OUTPUT.PUT_LINE(SQLERRM); END SP_PMS_SYNC_ROUTINE_CHECK;\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE sp_sync_r_check(i_vessel_code text, i_check_grade text, i_dept text, i_responsible_person text, i_check_name text, i_check_date text)\nLANGUAGE plpgsql\nAS $$\nDECLARE\n  rec record;\n  int_count int;\n  int_count1 int;\n  var_suffix text;\n  dat_begin date;\n  dat_end date;\nBEGIN\n  TRUNCATE TABLE g_r_check_info;\n  IF i_check_date IS NULL THEN\n    dat_begin := to_date(to_char(current_date,'YYYY')||'-01-01','YYYY-MM-DD');\n    dat_end   := to_date(to_char(current_date,'YYYY')||'-12-31','YYYY-MM-DD');\n  ELSIF length(i_check_date)=4 THEN\n    dat_begin := to_date(i_check_date||'-01-01','YYYY-MM-DD');\n    dat_end   := to_date(i_check_date||'-12-31','YYYY-MM-DD');\n  ELSE\n    dat_begin := to_date(i_check_date||'-01','YYYY-MM-DD');\n    dat_end   := (date_trunc('month',dat_begin) + interval '1 month - 1 day')::date;\n  END IF;\n  FOR rec IN\n    SELECT cwbt_name, cwbt_code, check_name, dept_name, dept, responsible_person_name, responsible_person, check_result, check_result_name, check_grade, check_date, vessel_code, vessel_name, routine_check_item_id, remark, created_by_user, created_office, created_dtm_loc, created_time_zone, updated_by_user, updated_office, updated_dtm_loc, updated_time_zone, company_code, record_version, principal_group_code\n      FROM vw_r_check_info\n     WHERE check_grade = i_check_grade\n       AND vessel_code = i_vessel_code\n       AND check_date BETWEEN dat_begin AND dat_end\n       AND (i_dept IS NULL OR dept = i_dept)\n       AND (i_responsible_person IS NULL OR responsible_person = i_responsible_person)\n       AND (i_check_name IS NULL OR check_name LIKE '%'||i_check_name||'%')\n       AND data_type = 'S'\n  LOOP\n    SELECT COUNT(*) INTO int_count FROM g_r_check_info WHERE pid = rec.routine_check_item_id;\n    IF int_count = 0 THEN\n      INSERT INTO g_r_check_info(pid, cwbt_name, cwbt_code, check_name, dept_name, dept, responsible_person_name, responsible_person, check_grade, check_date, vessel_code, vessel_name, company_code, created_by_user, created_office, created_dtm_loc, created_time_zone, updated_by_user, updated_office, updated_dtm_loc, updated_time_zone, record_version, principal_group_code)\n      VALUES(rec.routine_check_item_id, rec.cwbt_name, rec.cwbt_code, rec.check_name, rec.dept_name, rec.dept, rec.responsible_person_name, rec.responsible_person, rec.check_grade, date_trunc('month',rec.check_date)::date, rec.vessel_code, rec.vessel_name, rec.company_code, rec.created_by_user, rec.created_office, rec.created_dtm_loc, rec.created_time_zone, rec.updated_by_user, rec.updated_office, rec.updated_dtm_loc, rec.updated_time_zone, rec.record_version, rec.principal_group_code);\n    END IF;\n    var_suffix := CASE\n      WHEN i_check_grade='A' THEN to_char(rec.check_date,'DD')\n      WHEN i_check_grade='B' THEN to_char(pkg_date_util.get_1st_m(rec.check_date, CASE WHEN length(i_check_date)=4 THEN 'YY' ELSE 'MM' END), CASE WHEN length(i_check_date)=4 THEN 'WW' ELSE 'W' END)\n      WHEN i_check_grade='C' THEN to_char(rec.check_date,'MM')\n    END;\n    EXECUTE format('UPDATE g_r_check_info SET n%s = $1 WHERE pid = $2',var_suffix)\n    USING (CASE rec.check_result WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END)||coalesce(substr(rec.remark,1,50),''), rec.routine_check_item_id;\n  END LOOP;\n  SELECT COUNT(*) INTO int_count1 FROM g_r_check_info WHERE vessel_code = '0336';\n  COMMIT;\nEXCEPTION\n  WHEN OTHERS THEN\n    ROLLBACK;\n    RAISE NOTICE '%', SQLERRM;\nEND;\n$$;"
                    }
                ]
            },
            {
                "case_id": "23",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"23\", \"difficulty_level\": \"3\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"CREATE OR REPLACE PROCEDURE \\\"SP_FEE_CSBC_HOUR_JOB\\\" IS V_FLAG varchar2(50); V_HOUR VARCHAR2(50); BEGIN select open_mode into V_FLAG from v$database; SELECT TO_CHAR(SYSDATE,'HH24') INTO V_HOUR FROM DUAL; IF V_FLAG = 'READ WRITE' AND (V_HOUR ='12') then P_LOG_EXCEPTION('开始时间:' || sysdate, 'SP_FEE_CSBC_HOUR_JOB'); commit; delete from fmm_csbc_middle_esti es where es.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_esti select * from vw_csbc_middle_esti es where es.audit_date>=trunc(sysdate); delete from FMM_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=trunc(sysdate); insert into FMM_CSBC_RBT_MIDDLE_ESTI select * from VW_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=trunc(sysdate); commit; delete from FMM_CSBC_MAINTENANCE_CONSUME mc where exists (select 1 from VW_CSBC_MAINTENANCE_CONSUME mc2 where mc2.BIZ_UUID = mc.biz_uuid and mc2.update_time>=trunc(sysdate)); insert into FMM_CSBC_MAINTENANCE_CONSUME select * from VW_CSBC_MAINTENANCE_CONSUME mc where mc.update_time>=trunc(sysdate); delete from fmm_csbc_maintenance_esti_rpt es where exists (select 1 from vw_csbc_maintenance_esti_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=trunc(sysdate)); insert into fmm_csbc_maintenance_esti_rpt select * from vw_csbc_maintenance_esti_rpt es where es.update_time>=trunc(sysdate); delete from Fmm_Csbc_Maintenance_Invo_Rp5 es where exists (select 1 from vw_Csbc_Maintenance_Invo_Rp5 es2 where es2.FEE_INVOICE_ID = es.FEE_INVOICE_ID and es2.update_time>=trunc(sysdate)); insert into Fmm_Csbc_Maintenance_Invo_Rp5 select * from vw_Csbc_Maintenance_Invo_Rp5 es where es.update_time>=trunc(sysdate); delete from FMM_csbc_maintenance_expec_rpt es where exists (select 1 from vw_csbc_maintenance_expec_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=trunc(sysdate)); insert into FMM_csbc_maintenance_expec_rpt select * from vw_csbc_maintenance_expec_rpt es where es.update_time>=trunc(sysdate); commit; delete from fmm_csbc_middle_estt2 tt where tt.process_code ='INV_CX' and tt.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_estt2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN ES.BASE_AMOUNT>0 THEN -1 ELSE 1 END) *FN_GET_CSBC_FEE_CHARGE(es.rec_uuid,es.db_table,es.vessel_code), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es where process_code ='INV_CX' and es.audit_date>=trunc(sysdate); commit; delete from fmm_csbc_middle_esti es where es.process_code ='INV_CX'; insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_estt2 fc WHERE FC.process_code ='INV_CX'; commit; delete from fmm_csbc_middle_esti3 tt where tt.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, nvl(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es left join fmm_csbc_middle_esti es2 on FN_GET_CSBC_EST_CHARGE_AP(es.rec_uuid||es.apply_no)= es2.rec_uuid||es2.apply_no where es.base_amount<0 and es.process_code ='EST' and es.audit_date>=trunc(sysdate); delete from fmm_csbc_middle_esti es where base_amount<0 and es.process_code ='EST'; insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_esti3 fc; commit; EXECUTE IMMEDIATE 'truncate table fmm_csbc_rbt_middle_esti2'; insert into fmm_csbc_rbt_middle_esti2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN es.DB_TABLE ='SJ11_F' THEN -1 ELSE 1 END)* FN_GET_CSBC_FEE_CHARGE_AP(es.rec_uuid,replace(es.db_table,'_F',''),nvl(vv.corporate_code,vv.vessel_code),ES.APPLY_NO), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es inner join vop_vessel vv on es.vessel_code = vv.vessel_code where process_code ='INV_CX' and nvl(es.sap_imp_status,'T') <>'F'; commit; delete from fmm_csbc_rbt_middle_esti es where es.process_code ='INV_CX' and nvl(es.sap_imp_status,'T') <>'F'; insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti2 fc; commit; EXECUTE IMMEDIATE 'truncate table fmm_csbc_rbt_middle_esti3'; insert into fmm_csbc_rbt_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, nvl(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es left join fmm_csbc_rbt_middle_esti es2 on FN_GET_CSBC_EST_RBT_AP(ES.REC_UUID||ES.APPLY_NO||ES.BASE_AMOUNT)= es2.rec_uuid||es2.apply_no||es2.base_amount where es.base_amount<0 and es.process_code ='EST'; delete from fmm_csbc_rbt_middle_esti es where base_amount<0 and es.process_code ='EST'; insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti3 fc; commit; EXECUTE IMMEDIATE 'truncate table FMM_CSBC_MAINTENANCE_ESTI_MID'; INSERT INTO FMM_CSBC_MAINTENANCE_ESTI_MID SELECT * FROM VW_CSBC_MAINTENANCE_ESTI_MID; COMMIT; DELETE FROM FMM_CSBC_MAINTENANCE_TZ_DETAIL MD WHERE MD.UPDATE_TIME>=TRUNC(SYSDATE); INSERT INTO FMM_CSBC_MAINTENANCE_TZ_DETAIL select * from VW_CSBC_MAINTENANCE_TZ_DETAIL WHERE UPDATE_TIME>=TRUNC(SYSDATE); P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || sysdate, 'SP_FEE_CSBC_HOUR_JOB'); COMMIT; delete from fmm_maintenance_expec_rpt WHERE RELATED_ID IN (SELECT RELATED_ID FROM vw_fmm_maintenance_expec_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_expec_rpt select * from vw_fmm_maintenance_expec_rp0 where trunc(update_time) = trunc(sysdate); commit; delete FROM FMM_MAINTENANCE_ESTI_RPT WHERE RELATED_ID IN (SELECT RELATED_ID FROM VW_FMM_MAINTENANCE_ESTI_RP0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_ESTI_RPT select * from VW_FMM_MAINTENANCE_ESTI_RP0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_fee_payee pay where (order_no,payee,vessel_code) in (select order_no,payee,vessel_code from vw_fmm_maintenance_fee_payee0 where trunc(updated_dtm_loc) = trunc(sysdate)); insert into fmm_maintenance_fee_payee select * from vw_fmm_maintenance_fee_payee0 where trunc(updated_dtm_loc) = trunc(sysdate); commit; delete from fmm_maintenance_fee_payee f where (NVL(F.ORDER_NO, 'AAA'),F.VESSEL_CODE) in (select apply_no,vessel_code from VW_FMM_MAINTENANCE_NO_PAYALL) ; delete from FMM_MAINTENANCE_INVOICE_DEL where fee_invoice_id in (select fee_invoice_id from VW_FMM_MAINTENANCE_INVOICE_DE0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_INVOICE_DEL select * from VW_FMM_MAINTENANCE_INVOICE_DE0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_invoice_rpt where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_invoice_rpt select * from vw_fmm_maintenance_invoice_rp0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_invoice_rp5 where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp6 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_invoice_rp5 select * from vw_fmm_maintenance_invoice_rp6 where trunc(update_time) = trunc(sysdate); commit; delete from FMM_MAINTENANCE_ORDER_RPT where RELATED_ID in (select RELATED_ID from VW_FMM_MAINTENANCE_ORDER_RP0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_ORDER_RPT select * from VW_FMM_MAINTENANCE_ORDER_RP0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_supply_rpt where RELATED_ID in (select RELATED_ID from vw_fmm_maintenance_supply_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_supply_rpt select * from vw_fmm_maintenance_supply_rp0 where trunc(update_time) = trunc(sysdate); commit; P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间2:' || sysdate, 'SP_FEE_CSBC_HOUR_JOB'); commit; END IF; END SP_FEE_CSBC_HOUR_JOB;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE \"SP_FEE_CSBC_HOUR_JOB\" IS V_FLAG varchar2(50); V_HOUR VARCHAR2(50); BEGIN select open_mode into V_FLAG from v$database; SELECT TO_CHAR(SYSDATE,'HH24') INTO V_HOUR FROM DUAL; IF V_FLAG = 'READ WRITE' AND (V_HOUR ='12') then P_LOG_EXCEPTION('开始时间:' || sysdate, 'SP_FEE_CSBC_HOUR_JOB'); commit; delete from fmm_csbc_middle_esti es where es.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_esti select * from vw_csbc_middle_esti es where es.audit_date>=trunc(sysdate); delete from FMM_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=trunc(sysdate); insert into FMM_CSBC_RBT_MIDDLE_ESTI select * from VW_CSBC_RBT_MIDDLE_ESTI es where es.audit_date>=trunc(sysdate); commit; delete from FMM_CSBC_MAINTENANCE_CONSUME mc where exists (select 1 from VW_CSBC_MAINTENANCE_CONSUME mc2 where mc2.BIZ_UUID = mc.biz_uuid and mc2.update_time>=trunc(sysdate)); insert into FMM_CSBC_MAINTENANCE_CONSUME select * from VW_CSBC_MAINTENANCE_CONSUME mc where mc.update_time>=trunc(sysdate); delete from fmm_csbc_maintenance_esti_rpt es where exists (select 1 from vw_csbc_maintenance_esti_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=trunc(sysdate)); insert into fmm_csbc_maintenance_esti_rpt select * from vw_csbc_maintenance_esti_rpt es where es.update_time>=trunc(sysdate); delete from Fmm_Csbc_Maintenance_Invo_Rp5 es where exists (select 1 from vw_Csbc_Maintenance_Invo_Rp5 es2 where es2.FEE_INVOICE_ID = es.FEE_INVOICE_ID and es2.update_time>=trunc(sysdate)); insert into Fmm_Csbc_Maintenance_Invo_Rp5 select * from vw_Csbc_Maintenance_Invo_Rp5 es where es.update_time>=trunc(sysdate); delete from FMM_csbc_maintenance_expec_rpt es where exists (select 1 from vw_csbc_maintenance_expec_rpt es2 where es2.RELATED_ID = es.RELATED_ID and es2.update_time>=trunc(sysdate)); insert into FMM_csbc_maintenance_expec_rpt select * from vw_csbc_maintenance_expec_rpt es where es.update_time>=trunc(sysdate); commit; delete from fmm_csbc_middle_estt2 tt where tt.process_code ='INV_CX' and tt.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_estt2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN ES.BASE_AMOUNT>0 THEN -1 ELSE 1 END) *FN_GET_CSBC_FEE_CHARGE(es.rec_uuid,es.db_table,es.vessel_code), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es where process_code ='INV_CX' and es.audit_date>=trunc(sysdate); commit; delete from fmm_csbc_middle_esti es where es.process_code ='INV_CX'; insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_estt2 fc WHERE FC.process_code ='INV_CX'; commit; delete from fmm_csbc_middle_esti3 tt where tt.audit_date>=trunc(sysdate); insert into fmm_csbc_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, nvl(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid from fmm_csbc_middle_esti es left join fmm_csbc_middle_esti es2 on FN_GET_CSBC_EST_CHARGE_AP(es.rec_uuid||es.apply_no)= es2.rec_uuid||es2.apply_no where es.base_amount<0 and es.process_code ='EST' and es.audit_date>=trunc(sysdate); delete from fmm_csbc_middle_esti es where base_amount<0 and es.process_code ='EST'; insert into fmm_csbc_middle_esti select * from fmm_csbc_middle_esti3 fc; commit; EXECUTE IMMEDIATE 'truncate table fmm_csbc_rbt_middle_esti2'; insert into fmm_csbc_rbt_middle_esti2 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, es.cny_exchange_rate, es.process_code, es.db_table, (CASE WHEN es.DB_TABLE ='SJ11_F' THEN -1 ELSE 1 END)* FN_GET_CSBC_FEE_CHARGE_AP(es.rec_uuid,replace(es.db_table,'_F',''),nvl(vv.corporate_code,vv.vessel_code),ES.APPLY_NO), es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es inner join vop_vessel vv on es.vessel_code = vv.vessel_code where process_code ='INV_CX' and nvl(es.sap_imp_status,'T') <>'F'; commit; delete from fmm_csbc_rbt_middle_esti es where es.process_code ='INV_CX' and nvl(es.sap_imp_status,'T') <>'F'; insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti2 fc; commit; EXECUTE IMMEDIATE 'truncate table fmm_csbc_rbt_middle_esti3'; insert into fmm_csbc_rbt_middle_esti3 select es.vessel_code, es.currency, es.base_amount, es.apply_no, es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat, nvl(es2.cny_exchange_rate,es.cny_exchange_rate) as cny_exchange_rate, es.process_code, es.db_table, (case when es2.cny_fee is not null then -1*es2.cny_fee else es.cny_fee end) as cny_fee, es.vessel_name, es.feetype_name, es.invoice_sort, es.invoice_sort_detail, es.is_storaged, es.invoice_no, es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid, es.aufnr from fmm_csbc_rbt_middle_esti es left join fmm_csbc_rbt_middle_esti es2 on FN_GET_CSBC_EST_RBT_AP(ES.REC_UUID||ES.APPLY_NO||ES.BASE_AMOUNT)= es2.rec_uuid||es2.apply_no||es2.base_amount where es.base_amount<0 and es.process_code ='EST'; delete from fmm_csbc_rbt_middle_esti es where base_amount<0 and es.process_code ='EST'; insert into fmm_csbc_rbt_middle_esti select * from fmm_csbc_rbt_middle_esti3 fc; commit; EXECUTE IMMEDIATE 'truncate table FMM_CSBC_MAINTENANCE_ESTI_MID'; INSERT INTO FMM_CSBC_MAINTENANCE_ESTI_MID SELECT * FROM VW_CSBC_MAINTENANCE_ESTI_MID; COMMIT; DELETE FROM FMM_CSBC_MAINTENANCE_TZ_DETAIL MD WHERE MD.UPDATE_TIME>=TRUNC(SYSDATE); INSERT INTO FMM_CSBC_MAINTENANCE_TZ_DETAIL select * from VW_CSBC_MAINTENANCE_TZ_DETAIL WHERE UPDATE_TIME>=TRUNC(SYSDATE); P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || sysdate, 'SP_FEE_CSBC_HOUR_JOB'); COMMIT; delete from fmm_maintenance_expec_rpt WHERE RELATED_ID IN (SELECT RELATED_ID FROM vw_fmm_maintenance_expec_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_expec_rpt select * from vw_fmm_maintenance_expec_rp0 where trunc(update_time) = trunc(sysdate); commit; delete FROM FMM_MAINTENANCE_ESTI_RPT WHERE RELATED_ID IN (SELECT RELATED_ID FROM VW_FMM_MAINTENANCE_ESTI_RP0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_ESTI_RPT select * from VW_FMM_MAINTENANCE_ESTI_RP0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_fee_payee pay where (order_no,payee,vessel_code) in (select order_no,payee,vessel_code from vw_fmm_maintenance_fee_payee0 where trunc(updated_dtm_loc) = trunc(sysdate)); insert into fmm_maintenance_fee_payee select * from vw_fmm_maintenance_fee_payee0 where trunc(updated_dtm_loc) = trunc(sysdate); commit; delete from fmm_maintenance_fee_payee f where (NVL(F.ORDER_NO, 'AAA'),F.VESSEL_CODE) in (select apply_no,vessel_code from VW_FMM_MAINTENANCE_NO_PAYALL) ; delete from FMM_MAINTENANCE_INVOICE_DEL where fee_invoice_id in (select fee_invoice_id from VW_FMM_MAINTENANCE_INVOICE_DE0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_INVOICE_DEL select * from VW_FMM_MAINTENANCE_INVOICE_DE0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_invoice_rpt where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_invoice_rpt select * from vw_fmm_maintenance_invoice_rp0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_invoice_rp5 where fee_invoice_id in (select fee_invoice_id from vw_fmm_maintenance_invoice_rp6 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_invoice_rp5 select * from vw_fmm_maintenance_invoice_rp6 where trunc(update_time) = trunc(sysdate); commit; delete from FMM_MAINTENANCE_ORDER_RPT where RELATED_ID in (select RELATED_ID from VW_FMM_MAINTENANCE_ORDER_RP0 where trunc(update_time) = trunc(sysdate)); insert into FMM_MAINTENANCE_ORDER_RPT select * from VW_FMM_MAINTENANCE_ORDER_RP0 where trunc(update_time) = trunc(sysdate); commit; delete from fmm_maintenance_supply_rpt where RELATED_ID in (select RELATED_ID from vw_fmm_maintenance_supply_rp0 where trunc(update_time) = trunc(sysdate)); insert into fmm_maintenance_supply_rpt select * from vw_fmm_maintenance_supply_rp0 where trunc(update_time) = trunc(sysdate); commit; P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间2:' || sysdate, 'SP_FEE_CSBC_HOUR_JOB'); commit; END IF; END SP_FEE_CSBC_HOUR_JOB;\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_FEE_CSBC_HOUR_JOB()\nLANGUAGE plpgsql\nAS $$\nDECLARE\n  v_flag varchar(50);\n  v_hour varchar(50);\nBEGIN\n  SELECT open_mode INTO v_flag FROM v$database;\n  SELECT to_char(now(),'HH24') INTO v_hour;\n  IF v_flag = 'READ WRITE' AND v_hour = '12' THEN\n    PERFORM P_LOG_EXCEPTION('开始时间:' || now(), 'SP_FEE_CSBC_HOUR_JOB');\n    COMMIT;\n    DELETE FROM fmm_csbc_middle_esti es WHERE es.audit_date >= date_trunc('day', now());\n    INSERT INTO fmm_csbc_middle_esti\n      SELECT * FROM vw_csbc_middle_esti es WHERE es.audit_date >= date_trunc('day', now());\n    DELETE FROM fmm_csbc_rbt_middle_esti es WHERE es.audit_date >= date_trunc('day', now());\n    INSERT INTO fmm_csbc_rbt_middle_esti\n      SELECT * FROM vw_csbc_rbt_middle_esti es WHERE es.audit_date >= date_trunc('day', now());\n    COMMIT;\n    DELETE FROM fmm_csbc_maintenance_consume mc\n      WHERE EXISTS (\n        SELECT 1 FROM vw_csbc_maintenance_consume mc2\n        WHERE mc2.biz_uuid = mc.biz_uuid\n          AND mc2.update_time >= date_trunc('day', now())\n      );\n    INSERT INTO fmm_csbc_maintenance_consume\n      SELECT * FROM vw_csbc_maintenance_consume mc\n      WHERE mc.update_time >= date_trunc('day', now());\n    DELETE FROM fmm_csbc_maintenance_esti_rpt es\n      WHERE EXISTS (\n        SELECT 1 FROM vw_csbc_maintenance_esti_rpt es2\n        WHERE es2.related_id = es.related_id\n          AND es2.update_time >= date_trunc('day', now())\n      );\n    INSERT INTO fmm_csbc_maintenance_esti_rpt\n      SELECT * FROM vw_csbc_maintenance_esti_rpt es\n      WHERE es.update_time >= date_trunc('day', now());\n    DELETE FROM fmm_csbc_maintenance_invo_rp5 es\n      WHERE EXISTS (\n        SELECT 1 FROM vw_csbc_maintenance_invo_rp5 es2\n        WHERE es2.fee_invoice_id = es.fee_invoice_id\n          AND es2.update_time >= date_trunc('day', now())\n      );\n    INSERT INTO fmm_csbc_maintenance_invo_rp5\n      SELECT * FROM vw_csbc_maintenance_invo_rp5 es\n      WHERE es.update_time >= date_trunc('day', now());\n    DELETE FROM fmm_csbc_maintenance_expec_rpt es\n      WHERE EXISTS (\n        SELECT 1 FROM vw_csbc_maintenance_expec_rpt es2\n        WHERE es2.related_id = es.related_id\n          AND es2.update_time >= date_trunc('day', now())\n      );\n    INSERT INTO fmm_csbc_maintenance_expec_rpt\n      SELECT * FROM vw_csbc_maintenance_expec_rpt es\n      WHERE es.update_time >= date_trunc('day', now());\n    COMMIT;\n    DELETE FROM fmm_csbc_middle_estt2 tt\n      WHERE tt.process_code = 'INV_CX'\n        AND tt.audit_date >= date_trunc('day', now());\n    INSERT INTO fmm_csbc_middle_estt2\n      SELECT es.vessel_code, es.currency, es.base_amount, es.apply_no,\n             es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat,\n             es.cny_exchange_rate, es.process_code, es.db_table,\n             (CASE WHEN es.base_amount>0 THEN -1 ELSE 1 END)\n               * fn_get_csbc_fee_charge(es.rec_uuid, es.db_table, es.vessel_code),\n             es.vessel_name, es.feetype_name, es.invoice_sort,\n             es.invoice_sort_detail, es.is_storaged, es.invoice_no,\n             es.owner_manager, es.dept, es.sap_imp_status,\n             es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id,\n             es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid\n      FROM fmm_csbc_middle_esti es\n      WHERE process_code = 'INV_CX'\n        AND es.audit_date >= date_trunc('day', now());\n    COMMIT;\n    DELETE FROM fmm_csbc_middle_esti es WHERE es.process_code = 'INV_CX';\n    INSERT INTO fmm_csbc_middle_esti\n      SELECT * FROM fmm_csbc_middle_estt2 fc WHERE fc.process_code = 'INV_CX';\n    COMMIT;\n    DELETE FROM fmm_csbc_middle_esti3 tt\n      WHERE tt.audit_date >= date_trunc('day', now());\n    INSERT INTO fmm_csbc_middle_esti3\n      SELECT es.vessel_code, es.currency, es.base_amount, es.apply_no,\n             es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat,\n             COALESCE(es2.cny_exchange_rate, es.cny_exchange_rate) AS cny_exchange_rate,\n             es.process_code, es.db_table,\n             (CASE WHEN es2.cny_fee IS NOT NULL THEN -1*es2.cny_fee ELSE es.cny_fee END)\n               AS cny_fee,\n             es.vessel_name, es.feetype_name, es.invoice_sort,\n             es.invoice_sort_detail, es.is_storaged, es.invoice_no,\n             es.owner_manager, es.dept, es.sap_imp_status,\n             es.sap_result_date, es.sap_voucher, es.related_id, es.ref_id,\n             es.invoice_sort_detail_name, es.invoice_sort_name, es.rec_uuid\n      FROM fmm_csbc_middle_esti es\n      LEFT JOIN fmm_csbc_middle_esti es2\n        ON fn_get_csbc_est_charge_ap(es.rec_uuid||es.apply_no) =\n           es2.rec_uuid||es2.apply_no\n      WHERE es.base_amount<0\n        AND es.process_code = 'EST'\n        AND es.audit_date >= date_trunc('day', now());\n    DELETE FROM fmm_csbc_middle_esti es\n      WHERE base_amount<0\n        AND es.process_code = 'EST';\n    INSERT INTO fmm_csbc_middle_esti\n      SELECT * FROM fmm_csbc_middle_esti3 fc;\n    COMMIT;\n    EXECUTE 'TRUNCATE TABLE fmm_csbc_rbt_middle_esti2';\n    INSERT INTO fmm_csbc_rbt_middle_esti2\n      SELECT es.vessel_code, es.currency, es.base_amount, es.apply_no,\n             es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat,\n             es.cny_exchange_rate, es.process_code, es.db_table,\n             (CASE WHEN es.db_table = 'SJ11_F' THEN -1 ELSE 1 END)\n               * fn_get_csbc_fee_charge_ap(es.rec_uuid, replace(es.db_table,'_F',''),\n                                            COALESCE(vv.corporate_code, vv.vessel_code), es.apply_no),\n             es.vessel_name, es.feetype_name, es.invoice_sort,\n             es.invoice_sort_detail, es.is_storaged, es.invoice_no,\n             es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date,\n             es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name,\n             es.invoice_sort_name, es.rec_uuid, es.aufnr\n      FROM fmm_csbc_rbt_middle_esti es\n      INNER JOIN vop_vessel vv ON es.vessel_code = vv.vessel_code\n      WHERE process_code = 'INV_CX'\n        AND COALESCE(es.sap_imp_status,'T') <> 'F';\n    COMMIT;\n    DELETE FROM fmm_csbc_rbt_middle_esti es\n      WHERE es.process_code = 'INV_CX'\n        AND COALESCE(es.sap_imp_status,'T') <> 'F';\n    INSERT INTO fmm_csbc_rbt_middle_esti\n      SELECT * FROM fmm_csbc_rbt_middle_esti2 fc;\n    COMMIT;\n    EXECUTE 'TRUNCATE TABLE fmm_csbc_rbt_middle_esti3';\n    INSERT INTO fmm_csbc_rbt_middle_esti3\n      SELECT es.vessel_code, es.currency, es.base_amount, es.apply_no,\n             es.biz_uuid, es.audit_date, es.operate_user, es.rec_cat,\n             COALESCE(es2.cny_exchange_rate, es.cny_exchange_rate) AS cny_exchange_rate,\n             es.process_code, es.db_table,\n             (CASE WHEN es2.cny_fee IS NOT NULL THEN -1*es2.cny_fee ELSE es.cny_fee END)\n               AS cny_fee,\n             es.vessel_name, es.feetype_name, es.invoice_sort,\n             es.invoice_sort_detail, es.is_storaged, es.invoice_no,\n             es.owner_manager, es.dept, es.sap_imp_status, es.sap_result_date,\n             es.sap_voucher, es.related_id, es.ref_id, es.invoice_sort_detail_name,\n             es.invoice_sort_name, es.rec_uuid, es.aufnr\n      FROM fmm_csbc_rbt_middle_esti es\n      LEFT JOIN fmm_csbc_rbt_middle_esti es2\n        ON fn_get_csbc_est_rbt_ap(es.rec_uuid||es.apply_no||es.base_amount) =\n           es2.rec_uuid||es2.apply_no||es2.base_amount\n      WHERE es.base_amount<0\n        AND es.process_code = 'EST';\n    DELETE FROM fmm_csbc_rbt_middle_esti es\n      WHERE base_amount<0\n        AND es.process_code = 'EST';\n    INSERT INTO fmm_csbc_rbt_middle_esti\n      SELECT * FROM fmm_csbc_rbt_middle_esti3 fc;\n    COMMIT;\n    EXECUTE 'TRUNCATE TABLE fmm_csbc_maintenance_esti_mid';\n    INSERT INTO fmm_csbc_maintenance_esti_mid\n      SELECT * FROM vw_csbc_maintenance_esti_mid;\n    COMMIT;\n    DELETE FROM fmm_csbc_maintenance_tz_detail md\n      WHERE md.update_time >= date_trunc('day', now());\n    INSERT INTO fmm_csbc_maintenance_tz_detail\n      SELECT * FROM vw_csbc_maintenance_tz_detail\n      WHERE update_time >= date_trunc('day', now());\n    PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || 'insert 结束时间:' || now(),\n                           'SP_FEE_CSBC_HOUR_JOB');\n    COMMIT;\n    DELETE FROM fmm_maintenance_expec_rpt\n      WHERE related_id IN (\n        SELECT related_id FROM vw_fmm_maintenance_expec_rp0\n        WHERE date_trunc('day', update_time) = date_trunc('day', now())\n      );\n    INSERT INTO fmm_maintenance_expec_rpt\n      SELECT * FROM vw_fmm_maintenance_expec_rp0\n      WHERE date_trunc('day', update_time) = date_trunc('day', now());\n    COMMIT;\n    DELETE FROM fmm_maintenance_esti_rpt\n      WHERE related_id IN (\n        SELECT related_id FROM vw_fmm_maintenance_esti_rp0\n        WHERE date_trunc('day', update_time) = date_trunc('day', now())\n      );\n    INSERT INTO fmm_maintenance_esti_rpt\n      SELECT * FROM vw_fmm_maintenance_esti_rp0\n      WHERE date_trunc('day', update_time) = date_trunc('day', now());\n    COMMIT;\n    DELETE FROM fmm_maintenance_fee_payee pay\n      WHERE (order_no,payee,vessel_code) IN (\n        SELECT order_no,payee,vessel_code FROM vw_fmm_maintenance_fee_payee0\n        WHERE date_trunc('day', updated_dtm_loc) = date_trunc('day', now())\n      );\n    INSERT INTO fmm_maintenance_fee_payee\n      SELECT * FROM vw_fmm_maintenance_fee_payee0\n      WHERE date_trunc('day', updated_dtm_loc) = date_trunc('day', now());\n    COMMIT;\n    DELETE FROM fmm_maintenance_fee_payee f\n      WHERE (COALESCE(f.order_no,'AAA'),f.vessel_code) IN (\n        SELECT apply_no,vessel_code FROM vw_fmm_maintenance_no_payall\n      );\n    DELETE FROM fmm_maintenance_invoice_del\n      WHERE fee_invoice_id IN (\n        SELECT fee_invoice_id FROM vw_fmm_maintenance_invoice_de0\n        WHERE date_trunc('day', update_time) = date_trunc('day', now())\n      );\n    INSERT INTO fmm_maintenance_invoice_del\n      SELECT * FROM vw_fmm_maintenance_invoice_de0\n      WHERE date_trunc('day', update_time) = date_trunc('day', now());\n    COMMIT;\n    DELETE FROM fmm_maintenance_invoice_rpt\n      WHERE fee_invoice_id IN (\n        SELECT fee_invoice_id FROM vw_fmm_maintenance_invoice_rp0\n        WHERE date_trunc('day', update_time) = date_trunc('day', now())\n      );\n    INSERT INTO fmm_maintenance_invoice_rpt\n      SELECT * FROM vw_fmm_maintenance_invoice_rp0\n      WHERE date_trunc('day', update_time) = date_trunc('day', now());\n    COMMIT;\n    DELETE FROM fmm_maintenance_invoice_rp5\n      WHERE fee_invoice_id IN (\n        SELECT fee_invoice_id FROM vw_fmm_maintenance_invoice_rp6\n        WHERE date_trunc('day', update_time) = date_trunc('day', now())\n      );\n    INSERT INTO fmm_maintenance_invoice_rp5\n      SELECT * FROM vw_fmm_maintenance_invoice_rp6\n      WHERE date_trunc('day', update_time) = date_trunc('day', now());\n    COMMIT;\n    DELETE FROM fmm_maintenance_order_rpt\n      WHERE related_id IN (\n        SELECT related_id FROM vw_fmm_maintenance_order_rp0\n        WHERE date_trunc('day', update_time) = date_trunc('day', now())\n      );\n    INSERT INTO fmm_maintenance_order_rpt\n      SELECT * FROM vw_fmm_maintenance_order_rp0\n      WHERE date_trunc('day', update_time) = date_trunc('day', now());\n    COMMIT;\n    DELETE FROM fmm_maintenance_supply_rpt\n      WHERE related_id IN (\n        SELECT related_id FROM vw_fmm_maintenance_supply_rp0\n        WHERE date_trunc('day', update_time) = date_trunc('day', now())\n      );\n    INSERT INTO fmm_maintenance_supply_rpt\n      SELECT * FROM vw_fmm_maintenance_supply_rp0\n      WHERE date_trunc('day', update_time) = date_trunc('day', now());\n    PERFORM P_LOG_EXCEPTION(SQLSTATE || SQLERRM || 'insert 结束时间2:' || now(),\n                           'SP_FEE_CSBC_HOUR_JOB');\n    COMMIT;\n  END IF;\nEND;\n$$;"
                    }
                ]
            },
            {
                "case_id": "24",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"24\", \"difficulty_level\": \"3\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"CREATE OR REPLACE PROCEDURE SP_FHD_ALERT_IMT (I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR ) IS OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); I NUMBER; BEGIN I:=1; FOR M IN (SELECT VESSEL_CODE, VESSEL_NAME, SAFETY_COMPANY, FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE, FVIA.POSI_DATE, '5', '0') as SAFETY_COMPANY_CODE, MMSI, POSI_DATE, POSI_LAT, POSI_LONG, AREA_NAME FROM FHD_VESSEL_IN_AREA FVIA WHERE FVIA.SORTCODE=(SELECT MAX(SORTCODE) AS SORTCODE FROM FHD_VESSEL_IN_AREA) AND FVIA.CREATED_DTM_LOC > SYSDATE-1/24 AND (I_VESSEL_CODE IS NULL OR FVIA.VESSEL_CODE=I_VESSEL_CODE) AND (I_MANAGER IS NULL OR FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE,FVIA.CREATED_DTM_LOC,'5', '0')=I_MANAGER) ) LOOP OBJ_TAB_TYPE.EXTEND; OBJ_TAB_TYPE(I) := OBJECTTABTYPE(M.VESSEL_CODE, M.VESSEL_NAME, NULL, NULL, NULL, NULL, M.POSI_LONG, M.POSI_LAT, M.POSI_DATE, M.AREA_NAME, M.SAFETY_COMPANY, SYS_GUID, M.SAFETY_COMPANY_CODE, M.MMSI); I := I + 1; END LOOP; UPDATE imt_monitor_main IMM SET IMM.STATUS=1, IMM.MONITOR_ENDDATE=null WHERE ROUND(TO_NUMBER(SYSDATE - IMM.MONITOR_ENDDATE) * 24,2)<47 AND IMM.MONITOR_ENDDATE IS NOT NULL AND IMM.MONITOR_CONF_ID='FHD_ALERT' AND IMM.VESSEL_CODE IN ( SELECT VESSEL_CODE FROM TABLE(OBJ_TAB_TYPE) AA WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=0); insert into imt_monitor_detail（monitor_detail_id,monitor_main_id,vessel_code,feedback_mode,feedback_user,feedback_explain,feedback_date,MONITOR_DETAIL_MODE, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE) select SYS_GUID,AA.ETA_PORT_NAME,AA.VESSEL_CODE,'自动记录','系统','船舶驶入防海盗区，监控启动',sysdate,'1.1', '00000000','YLZ','00000000',SYSDATE(),0,0 FROM TABLE(OBJ_TAB_TYPE) AA WHERE AA.VESSEL_CODE IN ( SELECT IMM.VESSEL_CODE FROM imt_monitor_main IMM WHERE MONITOR_CONF_ID='FHD_ALERT' AND MONITOR_STARTDATE IS NOT NULL AND MONITOR_ENDDATE IS NULL); INSERT INTO imt_monitor_main(MONITOR_MAIN_ID,MONITOR_CONF_ID,VESSEL_CODE,Manage_Company_Code,STATUS, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE, MONITOR_STARTDATE) SELECT AA.ETA_PORT_NAME,'FHD_ALERT' AS MONITOR_CONF_ID,AA.VESSEL_CODE,ETA_TIME AS MANAGER_NAME,1, '00000000','YLZ','00000000',SYSDATE(),0,0,AA.ACTIVITY_DATE FROM TABLE(OBJ_TAB_TYPE) AA WHERE AA.VESSEL_CODE IN ( SELECT IMM.VESSEL_CODE FROM imt_monitor_main IMM WHERE MONITOR_CONF_ID='FHD_ALERT' AND MONITOR_STARTDATE IS NOT NULL AND MONITOR_ENDDATE IS NULL); OPEN OUT_CURSOR FOR SELECT VESSEL_CODE, VESSEL_NAME, AA.MANAGER_NAME AS SAFETY_COMPANY, AA.MMSI AS MMSI, AA.ACTIVITY_DATE AS POSI_DATE, AA.LATITUDE AS POSI_LAT, AA.LONGTITUDE AS POSI_LONG, AREA_NAME FROM TABLE(OBJ_TAB_TYPE) AA WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=1; EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM); END SP_FHD_ALERT_IMT;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE SP_FHD_ALERT_IMT (I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR ) IS OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); I NUMBER; BEGIN I:=1; FOR M IN (SELECT VESSEL_CODE, VESSEL_NAME, SAFETY_COMPANY, FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE, FVIA.POSI_DATE, '5', '0') as SAFETY_COMPANY_CODE, MMSI, POSI_DATE, POSI_LAT, POSI_LONG, AREA_NAME FROM FHD_VESSEL_IN_AREA FVIA WHERE FVIA.SORTCODE=(SELECT MAX(SORTCODE) AS SORTCODE FROM FHD_VESSEL_IN_AREA) AND FVIA.CREATED_DTM_LOC > SYSDATE-1/24 AND (I_VESSEL_CODE IS NULL OR FVIA.VESSEL_CODE=I_VESSEL_CODE) AND (I_MANAGER IS NULL OR FN_GET_VESSEL_MNT_CODE(FVIA.VESSEL_CODE,FVIA.CREATED_DTM_LOC,'5', '0')=I_MANAGER) ) LOOP OBJ_TAB_TYPE.EXTEND; OBJ_TAB_TYPE(I) := OBJECTTABTYPE(M.VESSEL_CODE, M.VESSEL_NAME, NULL, NULL, NULL, NULL, M.POSI_LONG, M.POSI_LAT, M.POSI_DATE, M.AREA_NAME, M.SAFETY_COMPANY, SYS_GUID, M.SAFETY_COMPANY_CODE, M.MMSI); I := I + 1; END LOOP; UPDATE imt_monitor_main IMM SET IMM.STATUS=1, IMM.MONITOR_ENDDATE=null WHERE ROUND(TO_NUMBER(SYSDATE - IMM.MONITOR_ENDDATE) * 24,2)<47 AND IMM.MONITOR_ENDDATE IS NOT NULL AND IMM.MONITOR_CONF_ID='FHD_ALERT' AND IMM.VESSEL_CODE IN ( SELECT VESSEL_CODE FROM TABLE(OBJ_TAB_TYPE) AA WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=0); insert into imt_monitor_detail（monitor_detail_id,monitor_main_id,vessel_code,feedback_mode,feedback_user,feedback_explain,feedback_date,MONITOR_DETAIL_MODE, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE) select SYS_GUID,AA.ETA_PORT_NAME,AA.VESSEL_CODE,'自动记录','系统','船舶驶入防海盗区，监控启动',sysdate,'1.1', '00000000','YLZ','00000000',SYSDATE(),0,0 FROM TABLE(OBJ_TAB_TYPE) AA WHERE AA.VESSEL_CODE IN ( SELECT IMM.VESSEL_CODE FROM imt_monitor_main IMM WHERE MONITOR_CONF_ID='FHD_ALERT' AND MONITOR_STARTDATE IS NOT NULL AND MONITOR_ENDDATE IS NULL); INSERT INTO imt_monitor_main(MONITOR_MAIN_ID,MONITOR_CONF_ID,VESSEL_CODE,Manage_Company_Code,STATUS, COMPANY_CODE,Created_By_User,CREATED_OFFICE,CREATED_DTM_LOC,RECORD_VERSION,PRINCIPAL_GROUP_CODE, MONITOR_STARTDATE) SELECT AA.ETA_PORT_NAME,'FHD_ALERT' AS MONITOR_CONF_ID,AA.VESSEL_CODE,ETA_TIME AS MANAGER_NAME,1, '00000000','YLZ','00000000',SYSDATE(),0,0,AA.ACTIVITY_DATE FROM TABLE(OBJ_TAB_TYPE) AA WHERE AA.VESSEL_CODE IN ( SELECT IMM.VESSEL_CODE FROM imt_monitor_main IMM WHERE MONITOR_CONF_ID='FHD_ALERT' AND MONITOR_STARTDATE IS NOT NULL AND MONITOR_ENDDATE IS NULL); OPEN OUT_CURSOR FOR SELECT VESSEL_CODE, VESSEL_NAME, AA.MANAGER_NAME AS SAFETY_COMPANY, AA.MMSI AS MMSI, AA.ACTIVITY_DATE AS POSI_DATE, AA.LATITUDE AS POSI_LAT, AA.LONGTITUDE AS POSI_LONG, AREA_NAME FROM TABLE(OBJ_TAB_TYPE) AA WHERE fn_fhd_alert_is_send(AA.VESSEL_CODE)=1; EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM); END SP_FHD_ALERT_IMT;\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE sp_fhd_alert_imt(i_vessel_code TEXT, i_manager TEXT, OUT out_cursor REFCURSOR)\nLANGUAGE plpgsql AS\n$$\nDECLARE\n  obj_tab_type OBJECTTABTYPE[] := ARRAY[]::OBJECTTABTYPE[];\n  m RECORD;\nBEGIN\n  FOR m IN\n    SELECT vessel_code,\n           vessel_name,\n           safety_company,\n           fn_get_vessel_mnt_code(fvia.vessel_code, fvia.posi_date, '5', '0') AS safety_company_code,\n           mmsi,\n           posi_date,\n           posi_lat,\n           posi_long,\n           area_name\n    FROM fhd_vessel_in_area fvia\n    WHERE fvia.sortcode = (SELECT MAX(sortcode) FROM fhd_vessel_in_area)\n      AND fvia.created_dtm_loc > now() - INTERVAL '1 hour'\n      AND (i_vessel_code IS NULL OR fvia.vessel_code = i_vessel_code)\n      AND (i_manager IS NULL OR fn_get_vessel_mnt_code(fvia.vessel_code, fvia.created_dtm_loc, '5', '0') = i_manager)\n  LOOP\n    obj_tab_type := obj_tab_type\n      || OBJECTTABTYPE(\n           m.vessel_code,\n           m.vessel_name,\n           NULL,\n           NULL,\n           NULL,\n           NULL,\n           m.posi_long,\n           m.posi_lat,\n           m.posi_date,\n           m.area_name,\n           m.safety_company,\n           uuid_generate_v4(),\n           m.safety_company_code,\n           m.mmsi\n         );\n  END LOOP;\n\n  UPDATE imt_monitor_main imm\n  SET status = 1,\n      monitor_enddate = NULL\n  WHERE EXTRACT(EPOCH FROM (now() - imm.monitor_enddate)) / 3600 < 47\n    AND imm.monitor_enddate IS NOT NULL\n    AND imm.monitor_conf_id = 'FHD_ALERT'\n    AND imm.vessel_code IN (\n      SELECT aa.vessel_code\n      FROM unnest(obj_tab_type) AS aa\n      WHERE fn_fhd_alert_is_send(aa.vessel_code) = 0\n    );\n\n  INSERT INTO imt_monitor_detail (\n    monitor_detail_id,\n    monitor_main_id,\n    vessel_code,\n    feedback_mode,\n    feedback_user,\n    feedback_explain,\n    feedback_date,\n    monitor_detail_mode,\n    company_code,\n    created_by_user,\n    created_office,\n    created_dtm_loc,\n    record_version,\n    principal_group_code\n  )\n  SELECT\n    uuid_generate_v4(),\n    aa.eta_port_name,\n    aa.vessel_code,\n    '自动记录',\n    '系统',\n    '船舶驶入防海盗区，监控启动',\n    now(),\n    '1.1',\n    '00000000',\n    'YLZ',\n    '00000000',\n    now(),\n    0,\n    0\n  FROM unnest(obj_tab_type) AS aa\n  WHERE aa.vessel_code IN (\n    SELECT imm.vessel_code\n    FROM imt_monitor_main imm\n    WHERE imm.monitor_conf_id = 'FHD_ALERT'\n      AND imm.monitor_startdate IS NOT NULL\n      AND imm.monitor_enddate IS NULL\n  );\n\n  INSERT INTO imt_monitor_main (\n    monitor_main_id,\n    monitor_conf_id,\n    vessel_code,\n    manage_company_code,\n    status,\n    company_code,\n    created_by_user,\n    created_office,\n    created_dtm_loc,\n    record_version,\n    principal_group_code,\n    monitor_startdate\n  )\n  SELECT\n    aa.eta_port_name,\n    'FHD_ALERT',\n    aa.vessel_code,\n    eta_time AS manager_name,\n    1,\n    '00000000',\n    'YLZ',\n    '00000000',\n    now(),\n    0,\n    0,\n    aa.activity_date\n  FROM unnest(obj_tab_type) AS aa\n  WHERE aa.vessel_code IN (\n    SELECT imm.vessel_code\n    FROM imt_monitor_main imm\n    WHERE imm.monitor_conf_id = 'FHD_ALERT'\n      AND imm.monitor_startdate IS NOT NULL\n      AND imm.monitor_enddate IS NULL\n  );\n\n  OPEN out_cursor FOR\n    SELECT\n      vessel_code,\n      vessel_name,\n      aa.manager_name AS safety_company,\n      aa.mmsi,\n      aa.activity_date AS posi_date,\n      aa.latitude AS posi_lat,\n      aa.longtitude AS posi_long,\n      area_name\n    FROM unnest(obj_tab_type) AS aa\n    WHERE fn_fhd_alert_is_send(aa.vessel_code) = 1;\n\nEXCEPTION\n  WHEN OTHERS THEN\n    RAISE NOTICE '错误: %', SQLERRM;\nEND;\n$$;"
                    }
                ]
            },
            {
                "case_id": "25",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"25\", \"difficulty_level\": \"3\", \"source_dialect\": \"Oracle\", \"target_dialect\": \"PG\", \"sql\": \"CREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR2, V_CHARGE_DEPT IN VARCHAR2, V_FEE_TYPE IN VARCHAR2, V_DTLPROJECT IN VARCHAR2, V_APPLY_USER IN VARCHAR2, V_HOST_PERSON IN VARCHAR2, V_CLAIM_NO IN VARCHAR2, V_CLAIM_DATE_F IN VARCHAR2, V_CLAIM_DATE_T IN VARCHAR2, V_SUBMIT_IND IN VARCHAR2, V_AUDIT_PROGRESS IN VARCHAR2, V_INVOICE_TYPE IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_INVOICE_NO IN VARCHAR2, V_CURSOR_TJ OUT SYS_REFCURSOR ) AS BEGIN OPEN V_CURSOR_TJ FOR WITH LS_CURSOR AS ( SELECT REGEXP_SUBSTR (V_AUDIT_PROGRESS, '[^,]+', 1,ROWNUM) AS COLUMN_VALUE FROM DUAL CONNECT BY ROWNUM <= LENGTH (V_AUDIT_PROGRESS) - LENGTH (REPLACE (V_AUDIT_PROGRESS, ',', ''))+1), LS_CURSOR2 AS ( SELECT REGEXP_SUBSTR (V_COST_CONTROL_COMPANY, '[^,]+', 1,ROWNUM) AS COLUMN_VALUE FROM DUAL CONNECT BY ROWNUM <= LENGTH (V_COST_CONTROL_COMPANY) - LENGTH (REPLACE (V_COST_CONTROL_COMPANY, ',', ''))+1 ) SELECT * FROM ( SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID, MAX(FH.CLAIM_NO), MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY, MAX(FR.REL_OFFICE_NAME), MAX(SU1.USR_NAME) AS APPLY_USER, MAX(FU.USR_NAME) AS HOST_PERSON, MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY, MAX(OFF.OFFICE_NAME) AS HOST_DEPT, MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE, MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND, MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS, MAX(FH.AUDIT_DATE), MAX(SU2.USR_NAME), MAX(FH.APPROVE_IND2), MAX(FH.HIGHER_DEPT), LISTAGG(SU2.POSITION_DESCRIBE, ',') WITHIN GROUP(ORDER BY ROWNUM) SU_POSITION_DESCRIBE, MAX(FH.CLAIM_DATE), MAX(CC.CURRENCY_NAME) AS CURRENCY, MAX(FH.AMOUNT), MAX(FH.REAL_AMOUNT), MAX('银行转账') AS PAY_TYPE, MAX(FH.REMARK), MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE FROM FC_ORGAN_FEE_HEADER FH LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_FEE_TYPE' AND C5.CODE_VALUE = FH.Project_Code LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = 'SFC_COST_BODY' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = 'SFC_COST_BODY' AND C1.CODE_VALUE = FH.COST_BODY LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = 'SFC_AUDIT_PROGRESS' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_SUBMIT_IND' AND C4.CODE_VALUE = FH.SUBMIT_IND LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL) AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL) AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL) AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL) AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL) AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL) AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, 'YYYY-MM-DD') OR V_CLAIM_DATE_F IS NULL) AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, 'YYYY-MM-DD') OR V_CLAIM_DATE_T IS NULL) AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL) AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR)OR V_AUDIT_PROGRESS IS NULL) AND EXISTS (SELECT 1 FROM FC_ORGAN_FEE_DTL FFD WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL) AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL) AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL) AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)) GROUP BY FH.ORGAN_FEE_HEADER_ID ORDER BY MAX(FH.CLAIM_NO) DESC ) T LEFT JOIN ( SELECT FD.ORGAN_FEE_HEADER_ID, FF.FREIGHT_NAME, C3.DISPLAY_VALUE_CN AS INVOICE_TYPE, C4.DISPLAY_VALUE_CN AS FEE_PROPERTY, C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE, FD.AMOUNT, FD.AMOUNT_NO_TAX, FD.TAX_RATE, FD.TAX_AMOUNT, FD.INVOICE_NO, FD.INVOICE_CODE, FD.BILLING_DATE, FD.HOUSE_INFO, FD.CHECKCODE_6, FD.BEGIN_DATE, FD.END_DATE, FD.QTY, C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM FROM FC_ORGAN_FEE_DTL FD LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = 'SFC_INVOICE_TYPE' AND C3.CODE_VALUE = FD.INVOICE_TYPE LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_FEE_PROPERTY' AND C4.CODE_VALUE = FD.FEE_PROPERTY LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_CUST_TYPE' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = 'SFC_PURCHASE_ITEM' AND C6.CODE_VALUE = FD.PURCHASE_ITEM where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL) AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL) AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL) AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID; END SP_OFFSET_INFORMATION;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from Oracle syntax to PG syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE SP_OFFSET_INFORMATION(V_COST_CONTROL_COMPANY IN VARCHAR2, V_CHARGE_DEPT IN VARCHAR2, V_FEE_TYPE IN VARCHAR2, V_DTLPROJECT IN VARCHAR2, V_APPLY_USER IN VARCHAR2, V_HOST_PERSON IN VARCHAR2, V_CLAIM_NO IN VARCHAR2, V_CLAIM_DATE_F IN VARCHAR2, V_CLAIM_DATE_T IN VARCHAR2, V_SUBMIT_IND IN VARCHAR2, V_AUDIT_PROGRESS IN VARCHAR2, V_INVOICE_TYPE IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_INVOICE_NO IN VARCHAR2, V_CURSOR_TJ OUT SYS_REFCURSOR ) AS BEGIN OPEN V_CURSOR_TJ FOR WITH LS_CURSOR AS ( SELECT REGEXP_SUBSTR (V_AUDIT_PROGRESS, '[^,]+', 1,ROWNUM) AS COLUMN_VALUE FROM DUAL CONNECT BY ROWNUM <= LENGTH (V_AUDIT_PROGRESS) - LENGTH (REPLACE (V_AUDIT_PROGRESS, ',', ''))+1), LS_CURSOR2 AS ( SELECT REGEXP_SUBSTR (V_COST_CONTROL_COMPANY, '[^,]+', 1,ROWNUM) AS COLUMN_VALUE FROM DUAL CONNECT BY ROWNUM <= LENGTH (V_COST_CONTROL_COMPANY) - LENGTH (REPLACE (V_COST_CONTROL_COMPANY, ',', ''))+1 ) SELECT * FROM ( SELECT MAX(FH.ORGAN_FEE_HEADER_ID) AS ORGAN_FEE_HEADER_ID, MAX(FH.CLAIM_NO), MAX(C.DISPLAY_VALUE_CN) AS COST_CONTROL_COMPANY, MAX(FR.REL_OFFICE_NAME), MAX(SU1.USR_NAME) AS APPLY_USER, MAX(FU.USR_NAME) AS HOST_PERSON, MAX(C1.DISPLAY_VALUE_CN) AS COST_BODY, MAX(OFF.OFFICE_NAME) AS HOST_DEPT, MAX(SU.POSITION_DESCRIBE) POSITION_DESCRIBE, MAX(C4.DISPLAY_VALUE_CN) AS SUBMIT_IND, MAX(C2.DISPLAY_VALUE_CN) AS AUDIT_PROGRESS, MAX(FH.AUDIT_DATE), MAX(SU2.USR_NAME), MAX(FH.APPROVE_IND2), MAX(FH.HIGHER_DEPT), LISTAGG(SU2.POSITION_DESCRIBE, ',') WITHIN GROUP(ORDER BY ROWNUM) SU_POSITION_DESCRIBE, MAX(FH.CLAIM_DATE), MAX(CC.CURRENCY_NAME) AS CURRENCY, MAX(FH.AMOUNT), MAX(FH.REAL_AMOUNT), MAX('银行转账') AS PAY_TYPE, MAX(FH.REMARK), MAX(C5.DISPLAY_VALUE_CN) AS FEE_TYPE FROM FC_ORGAN_FEE_HEADER FH LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_FEE_TYPE' AND C5.CODE_VALUE = FH.Project_Code LEFT JOIN SYS_USER SU ON SU.USR_CODE = FH.HOST_PERSON LEFT JOIN CDM_CODEDICT C ON C.CODE_TYPE = 'SFC_COST_BODY' AND C.CODE_VALUE = FH.COST_CONTROL_COMPANY LEFT JOIN FC_RELEVANT_OFFICE FR ON FR.REL_OFFICE_CODE = FH.CHARGE_DEPT LEFT JOIN SYS_USER SU1 ON SU1.USR_CODE = FH.APPLY_USER LEFT JOIN FC_USER_INFO FU ON FU.USR_CODE = FH.HOST_PERSON LEFT JOIN CDM_CODEDICT C1 ON C1.CODE_TYPE = 'SFC_COST_BODY' AND C1.CODE_VALUE = FH.COST_BODY LEFT JOIN SYS_OFFICE OFF ON OFF.OFFICE_CODE=FH.HOST_DEPT LEFT JOIN SYS_USER SU2 ON SU2.USR_CODE = FH.AUDIT_USER LEFT JOIN CDM_CURRENCY CC ON CC.CURRENCY = FH.CURRENCY LEFT JOIN CDM_CODEDICT C2 ON C2.CODE_TYPE = 'SFC_AUDIT_PROGRESS' AND C2.CODE_VALUE = FH.AUDIT_PROGRESS LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_SUBMIT_IND' AND C4.CODE_VALUE = FH.SUBMIT_IND LEFT JOIN WFL_TODO W ON W.BUSINESS_ID = FH.ORGAN_FEE_HEADER_ID LEFT JOIN SYS_USER SU2 ON W.USER_ID = SU2.USR_ID WHERE (FH.COST_CONTROL_COMPANY IN (SELECT COLUMN_VALUE FROM LS_CURSOR2) OR V_COST_CONTROL_COMPANY IS NULL) AND (FH.CHARGE_DEPT = V_CHARGE_DEPT OR V_CHARGE_DEPT IS NULL) AND (FH.PROJECT_CODE = V_FEE_TYPE OR V_FEE_TYPE IS NULL) AND (FH.APPLY_USER = V_APPLY_USER OR V_APPLY_USER IS NULL) AND (FH.HOST_PERSON = V_HOST_PERSON OR V_HOST_PERSON IS NULL) AND (FH.CLAIM_NO = V_CLAIM_NO OR V_CLAIM_NO IS NULL) AND (FH.CLAIM_DATE >= TO_DATE(V_CLAIM_DATE_F, 'YYYY-MM-DD') OR V_CLAIM_DATE_F IS NULL) AND (FH.CLAIM_DATE <= TO_DATE(V_CLAIM_DATE_T, 'YYYY-MM-DD') OR V_CLAIM_DATE_T IS NULL) AND (FH.SUBMIT_IND = V_SUBMIT_IND OR V_SUBMIT_IND IS NULL) AND (FH.AUDIT_PROGRESS in(SELECT COLUMN_VALUE FROM LS_CURSOR)OR V_AUDIT_PROGRESS IS NULL) AND EXISTS (SELECT 1 FROM FC_ORGAN_FEE_DTL FFD WHERE FH.ORGAN_FEE_HEADER_ID=FFD.ORGAN_FEE_HEADER_ID AND (FFD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL) AND (FFD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL) AND (FFD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL) AND (FFD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)) GROUP BY FH.ORGAN_FEE_HEADER_ID ORDER BY MAX(FH.CLAIM_NO) DESC ) T LEFT JOIN ( SELECT FD.ORGAN_FEE_HEADER_ID, FF.FREIGHT_NAME, C3.DISPLAY_VALUE_CN AS INVOICE_TYPE, C4.DISPLAY_VALUE_CN AS FEE_PROPERTY, C5.DISPLAY_VALUE_CN AS CUSTOMER_TYPE, FD.AMOUNT, FD.AMOUNT_NO_TAX, FD.TAX_RATE, FD.TAX_AMOUNT, FD.INVOICE_NO, FD.INVOICE_CODE, FD.BILLING_DATE, FD.HOUSE_INFO, FD.CHECKCODE_6, FD.BEGIN_DATE, FD.END_DATE, FD.QTY, C6.DISPLAY_VALUE_CN AS PURCHASE_ITEM FROM FC_ORGAN_FEE_DTL FD LEFT JOIN FC_FREIGHT FF ON FF.FREIGHT_CODE = FD.DTL_PROJECT_CODE LEFT JOIN CDM_CODEDICT C3 ON C3.CODE_TYPE = 'SFC_INVOICE_TYPE' AND C3.CODE_VALUE = FD.INVOICE_TYPE LEFT JOIN CDM_CODEDICT C4 ON C4.CODE_TYPE = 'SFC_FEE_PROPERTY' AND C4.CODE_VALUE = FD.FEE_PROPERTY LEFT JOIN CDM_CODEDICT C5 ON C5.CODE_TYPE = 'SFC_CUST_TYPE' AND C5.CODE_VALUE = FD.CUSTOMER_TYPE LEFT JOIN CDM_CODEDICT C6 ON C6.CODE_TYPE = 'SFC_PURCHASE_ITEM' AND C6.CODE_VALUE = FD.PURCHASE_ITEM where (FD.INVOICE_TYPE = V_INVOICE_TYPE OR V_INVOICE_TYPE IS NULL) AND (FD.INVOICE_CODE = V_INVOICE_CODE OR V_INVOICE_CODE IS NULL) AND (FD.INVOICE_NO = V_INVOICE_NO OR V_INVOICE_NO IS NULL) AND (FD.DTL_PROJECT_CODE = V_DTLPROJECT OR V_DTLPROJECT IS NULL)) T2 ON T.ORGAN_FEE_HEADER_ID=T2.ORGAN_FEE_HEADER_ID; END SP_OFFSET_INFORMATION;\n\nTranslated SQL (PG):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION sp_offset_information(\n  v_cost_control_company text,\n  v_charge_dept text,\n  v_fee_type text,\n  v_dtlproject text,\n  v_apply_user text,\n  v_host_person text,\n  v_claim_no text,\n  v_claim_date_f text,\n  v_claim_date_t text,\n  v_submit_ind text,\n  v_audit_progress text,\n  v_invoice_type text,\n  v_invoice_code text,\n  v_invoice_no text,\n  OUT v_cursor_tj refcursor\n)\nLANGUAGE plpgsql AS\n$$\nBEGIN\n  OPEN v_cursor_tj FOR\n    WITH ls_cursor AS (\n      SELECT regexp_split_to_table(v_audit_progress, ',') AS column_value\n    ), ls_cursor2 AS (\n      SELECT regexp_split_to_table(v_cost_control_company, ',') AS column_value\n    )\n    SELECT * FROM (\n      SELECT\n        MAX(fh.organ_fee_header_id) AS organ_fee_header_id,\n        MAX(fh.claim_no) AS claim_no,\n        MAX(c.display_value_cn) AS cost_control_company,\n        MAX(fr.rel_office_name) AS rel_office_name,\n        MAX(su1.usr_name) AS apply_user,\n        MAX(fu.usr_name) AS host_person,\n        MAX(c1.display_value_cn) AS cost_body,\n        MAX(off.office_name) AS host_dept,\n        MAX(su.position_describe) AS position_describe,\n        MAX(c4.display_value_cn) AS submit_ind,\n        MAX(c2.display_value_cn) AS audit_progress,\n        MAX(fh.audit_date) AS audit_date,\n        MAX(su2.usr_name) AS usr_name,\n        MAX(fh.approve_ind2) AS approve_ind2,\n        MAX(fh.higher_dept) AS higher_dept,\n        string_agg(su2.position_describe, ',' ORDER BY su2.position_describe) AS su_position_describe,\n        MAX(fh.claim_date) AS claim_date,\n        MAX(cc.currency_name) AS currency,\n        MAX(fh.amount) AS amount,\n        MAX(fh.real_amount) AS real_amount,\n        MAX('银行转账') AS pay_type,\n        MAX(fh.remark) AS remark,\n        MAX(c5.display_value_cn) AS fee_type\n      FROM fc_organ_fee_header fh\n      LEFT JOIN cdm_codedict c5 ON c5.code_type = 'SFC_FEE_TYPE' AND c5.code_value = fh.project_code\n      LEFT JOIN sys_user su ON su.usr_code = fh.host_person\n      LEFT JOIN cdm_codedict c ON c.code_type = 'SFC_COST_BODY' AND c.code_value = fh.cost_control_company\n      LEFT JOIN fc_relevant_office fr ON fr.rel_office_code = fh.charge_dept\n      LEFT JOIN sys_user su1 ON su1.usr_code = fh.apply_user\n      LEFT JOIN fc_user_info fu ON fu.usr_code = fh.host_person\n      LEFT JOIN cdm_codedict c1 ON c1.code_type = 'SFC_COST_BODY' AND c1.code_value = fh.cost_body\n      LEFT JOIN sys_office off ON off.office_code = fh.host_dept\n      LEFT JOIN cdm_currency cc ON cc.currency = fh.currency\n      LEFT JOIN cdm_codedict c2 ON c2.code_type = 'SFC_AUDIT_PROGRESS' AND c2.code_value = fh.audit_progress\n      LEFT JOIN cdm_codedict c4 ON c4.code_type = 'SFC_SUBMIT_IND' AND c4.code_value = fh.submit_ind\n      LEFT JOIN wfl_todo w ON w.business_id = fh.organ_fee_header_id\n      LEFT JOIN sys_user su2 ON w.user_id = su2.usr_id\n      WHERE (fh.cost_control_company = ANY (SELECT column_value FROM ls_cursor2) OR v_cost_control_company IS NULL)\n        AND (fh.charge_dept = v_charge_dept OR v_charge_dept IS NULL)\n        AND (fh.project_code = v_fee_type OR v_fee_type IS NULL)\n        AND (fh.apply_user = v_apply_user OR v_apply_user IS NULL)\n        AND (fh.host_person = v_host_person OR v_host_person IS NULL)\n        AND (fh.claim_no = v_claim_no OR v_claim_no IS NULL)\n        AND (fh.claim_date >= v_claim_date_f::date OR v_claim_date_f IS NULL)\n        AND (fh.claim_date <= v_claim_date_t::date OR v_claim_date_t IS NULL)\n        AND (fh.submit_ind = v_submit_ind OR v_submit_ind IS NULL)\n        AND (fh.audit_progress = ANY (SELECT column_value FROM ls_cursor) OR v_audit_progress IS NULL)\n        AND EXISTS (\n          SELECT 1\n          FROM fc_organ_fee_dtl ffd\n          WHERE fh.organ_fee_header_id = ffd.organ_fee_header_id\n            AND (ffd.invoice_code = v_invoice_code OR v_invoice_code IS NULL)\n            AND (ffd.invoice_type = v_invoice_type OR v_invoice_type IS NULL)\n            AND (ffd.invoice_no = v_invoice_no OR v_invoice_no IS NULL)\n            AND (ffd.dtl_project_code = v_dtlproject OR v_dtlproject IS NULL)\n        )\n      GROUP BY fh.organ_fee_header_id\n      ORDER BY MAX(fh.claim_no) DESC\n    ) t\n    LEFT JOIN (\n      SELECT\n        fd.organ_fee_header_id,\n        ff.freight_name,\n        c3.display_value_cn AS invoice_type,\n        c4.display_value_cn AS fee_property,\n        c5.display_value_cn AS customer_type,\n        fd.amount,\n        fd.amount_no_tax,\n        fd.tax_rate,\n        fd.tax_amount,\n        fd.invoice_no,\n        fd.invoice_code,\n        fd.billing_date,\n        fd.house_info,\n        fd.checkcode_6,\n        fd.begin_date,\n        fd.end_date,\n        fd.qty,\n        c6.display_value_cn AS purchase_item\n      FROM fc_organ_fee_dtl fd\n      LEFT JOIN fc_freight ff ON ff.freight_code = fd.dtl_project_code\n      LEFT JOIN cdm_codedict c3 ON c3.code_type = 'SFC_INVOICE_TYPE' AND c3.code_value = fd.invoice_type\n      LEFT JOIN cdm_codedict c4 ON c4.code_type = 'SFC_FEE_PROPERTY' AND c4.code_value = fd.fee_property\n      LEFT JOIN cdm_codedict c5 ON c5.code_type = 'SFC_CUST_TYPE' AND c5.code_value = fd.customer_type\n      LEFT JOIN cdm_codedict c6 ON c6.code_type = 'SFC_PURCHASE_ITEM' AND c6.code_value = fd.purchase_item\n      WHERE (fd.invoice_type = v_invoice_type OR v_invoice_type IS NULL)\n        AND (fd.invoice_code = v_invoice_code OR v_invoice_code IS NULL)\n        AND (fd.invoice_no = v_invoice_no OR v_invoice_no IS NULL)\n        AND (fd.dtl_project_code = v_dtlproject OR v_dtlproject IS NULL)\n    ) t2 ON t.organ_fee_header_id = t2.organ_fee_header_id;\nEND;\n$$;"
                    }
                ]
            }
        ]
    }
]