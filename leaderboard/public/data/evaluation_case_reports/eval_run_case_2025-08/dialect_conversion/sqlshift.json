[
    {
        "indicator_name": "big_sql_conversion.jsonl",
        "indicator_weight": 4,
        "evaluation_type": "hybrid",
        "case_pass_count": 10,
        "case_wrong_count": 5,
        "correct_rate": 0.67,
        "case_datas": [
            {
                "case_id": "1",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"1\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"TO_DATE\", \"TO_CHAR\", \"SYSDATE\", \"LENGTH\", \"LAST_DAY\", \"COUNT\", \"TRUNC\", \"CASE\", \"CAST\", \"CURSOR\", \"DECODE\", \"SUBSTR\", \"EXECUTE IMMEDIATE\", \"COMMIT\", \"ROLLBACK\", \"DBMS_OUTPUT.ENABLE\", \"DBMS_OUTPUT.PUT_LINE\", \"SQLERRM\"]}, \"sql\": \"DELIMITER $$ CREATE PROCEDURE \\\"LFBB_BVC_VHG_CHECK\\\"( P_VESSEL_CODE VARCHAR2, P_BRANCH_CODE VARCHAR2, P_DEPT_DEPTH VARCHAR2, P_RESP_PERSON VARCHAR2, P_CHECK_NAME_PART VARCHAR2, P_CHECK_DATE_STR VARCHAR2 ) IS CURSOR cur_range(p_start_date DATE,p_end_date DATE) IS SELECT CWBT_NAME, I.HCJI_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.BCGDK_SS2, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.BCGDK_SS2 = P_BRANCH_CODE AND I.VESSEL_CODE = P_VESSEL_CODE AND I.CHECK_DATE >= p_start_date AND I.CHECK_DATE <= p_end_date AND (P_DEPT_DEPTH IS NULL OR I.DEPT = P_DEPT_DEPTH) AND (P_RESP_PERSON IS NULL OR I.RESPONSIBLE_PERSON = P_RESP_PERSON) AND (P_CHECK_NAME_PART IS NULL OR (P_CHECK_NAME_PART IS NOT NULL AND I.CHECK_NAME LIKE '%' || P_CHECK_NAME_PART || '%')) AND I.DATA_TYPE = 'S'; v_count INTEGER; v_total_count INTEGER; v_col_suffix VARCHAR2(2); v_start_date DATE; v_end_date DATE; BEGIN EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO'; IF P_CHECK_DATE_STR IS NULL THEN v_start_date := TO_DATE(TO_CHAR(SYSDATE(), 'YYYY') || '-01-01', 'YYYY-MM-DD'); v_end_date := TO_DATE(TO_CHAR(SYSDATE(), 'YYYY') || '-12-31', 'YYYY-MM-DD'); ELSIF LENGTH(P_CHECK_DATE_STR) = 4 THEN v_start_date := TO_DATE(P_CHECK_DATE_STR || '-06-24', 'YYYY-MM-DD'); v_end_date := TO_DATE(P_CHECK_DATE_STR || '-10-24', 'YYYY-MM-DD'); ELSE v_start_date := TO_DATE(P_CHECK_DATE_STR || '-03', 'YYYY-MM-DD'); v_end_date := LAST_DAY(v_start_date); END IF; FOR r_row IN cur_range(v_start_date, v_end_date) LOOP SELECT COUNT(1) INTO v_count FROM G_R_CHECK_INFO I WHERE I.PID = r_row.ROUTINE_CHECK_ITEM_ID; IF v_count = 0 THEN INSERT INTO G_R_CHECK_INFO (PID, CWBT_NAME, HCJI_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, BCGDK_SS2, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE) SELECT r_row.ROUTINE_CHECK_ITEM_ID, r_row.CWBT_NAME, r_row.HCJI_CODE, r_row.CHECK_NAME, r_row.DEPT_NAME, r_row.DEPT, r_row.RESPONSIBLE_PERSON_NAME, r_row.RESPONSIBLE_PERSON, r_row.BCGDK_SS2, TRUNC(r_row.CHECK_DATE, 'MM'), r_row.VESSEL_CODE, r_row.VESSEL_NAME, r_row.COMPANY_CODE, r_row.CREATED_BY_USER, r_row.CREATED_OFFICE, r_row.CREATED_DTM_LOC, r_row.CREATED_TIME_ZONE, r_row.UPDATED_BY_USER, r_row.UPDATED_OFFICE, r_row.UPDATED_DTM_LOC, r_row.UPDATED_TIME_ZONE, r_row.RECORD_VERSION, r_row.PRINCIPAL_GROUP_CODE FROM DUAL; END IF; SELECT CASE P_BRANCH_CODE WHEN 'A' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'DD') AS NUMBER) WHEN 'B' THEN CAST(TO_CHAR(PKG_DATE_UTIL.GET_1ST_M(r_row.CHECK_DATE, DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'YY', 'MM')), DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'WW', 'W')) AS NUMBER) WHEN 'C' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'MM') AS NUMBER) END INTO v_col_suffix FROM DUAL; EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || v_col_suffix || ' = :1 WHERE I.PID = :2' USING CASE r_row.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(r_row.REMARK, 1, 50), r_row.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO v_total_count FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; DBMS_OUTPUT.ENABLE(10000); DBMS_OUTPUT.PUT_LINE(SQLERRM); END SP_PMS_SYNC_ROUTINE_CHECK; $$\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE PROCEDURE \"LFBB_BVC_VHG_CHECK\"( P_VESSEL_CODE VARCHAR2, P_BRANCH_CODE VARCHAR2, P_DEPT_DEPTH VARCHAR2, P_RESP_PERSON VARCHAR2, P_CHECK_NAME_PART VARCHAR2, P_CHECK_DATE_STR VARCHAR2 ) IS CURSOR cur_range(p_start_date DATE,p_end_date DATE) IS SELECT CWBT_NAME, I.HCJI_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.BCGDK_SS2, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.BCGDK_SS2 = P_BRANCH_CODE AND I.VESSEL_CODE = P_VESSEL_CODE AND I.CHECK_DATE >= p_start_date AND I.CHECK_DATE <= p_end_date AND (P_DEPT_DEPTH IS NULL OR I.DEPT = P_DEPT_DEPTH) AND (P_RESP_PERSON IS NULL OR I.RESPONSIBLE_PERSON = P_RESP_PERSON) AND (P_CHECK_NAME_PART IS NULL OR (P_CHECK_NAME_PART IS NOT NULL AND I.CHECK_NAME LIKE '%' || P_CHECK_NAME_PART || '%')) AND I.DATA_TYPE = 'S'; v_count INTEGER; v_total_count INTEGER; v_col_suffix VARCHAR2(2); v_start_date DATE; v_end_date DATE; BEGIN EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO'; IF P_CHECK_DATE_STR IS NULL THEN v_start_date := TO_DATE(TO_CHAR(SYSDATE(), 'YYYY') || '-01-01', 'YYYY-MM-DD'); v_end_date := TO_DATE(TO_CHAR(SYSDATE(), 'YYYY') || '-12-31', 'YYYY-MM-DD'); ELSIF LENGTH(P_CHECK_DATE_STR) = 4 THEN v_start_date := TO_DATE(P_CHECK_DATE_STR || '-06-24', 'YYYY-MM-DD'); v_end_date := TO_DATE(P_CHECK_DATE_STR || '-10-24', 'YYYY-MM-DD'); ELSE v_start_date := TO_DATE(P_CHECK_DATE_STR || '-03', 'YYYY-MM-DD'); v_end_date := LAST_DAY(v_start_date); END IF; FOR r_row IN cur_range(v_start_date, v_end_date) LOOP SELECT COUNT(1) INTO v_count FROM G_R_CHECK_INFO I WHERE I.PID = r_row.ROUTINE_CHECK_ITEM_ID; IF v_count = 0 THEN INSERT INTO G_R_CHECK_INFO (PID, CWBT_NAME, HCJI_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, BCGDK_SS2, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE) SELECT r_row.ROUTINE_CHECK_ITEM_ID, r_row.CWBT_NAME, r_row.HCJI_CODE, r_row.CHECK_NAME, r_row.DEPT_NAME, r_row.DEPT, r_row.RESPONSIBLE_PERSON_NAME, r_row.RESPONSIBLE_PERSON, r_row.BCGDK_SS2, TRUNC(r_row.CHECK_DATE, 'MM'), r_row.VESSEL_CODE, r_row.VESSEL_NAME, r_row.COMPANY_CODE, r_row.CREATED_BY_USER, r_row.CREATED_OFFICE, r_row.CREATED_DTM_LOC, r_row.CREATED_TIME_ZONE, r_row.UPDATED_BY_USER, r_row.UPDATED_OFFICE, r_row.UPDATED_DTM_LOC, r_row.UPDATED_TIME_ZONE, r_row.RECORD_VERSION, r_row.PRINCIPAL_GROUP_CODE FROM DUAL; END IF; SELECT CASE P_BRANCH_CODE WHEN 'A' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'DD') AS NUMBER) WHEN 'B' THEN CAST(TO_CHAR(PKG_DATE_UTIL.GET_1ST_M(r_row.CHECK_DATE, DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'YY', 'MM')), DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'WW', 'W')) AS NUMBER) WHEN 'C' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'MM') AS NUMBER) END INTO v_col_suffix FROM DUAL; EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || v_col_suffix || ' = :1 WHERE I.PID = :2' USING CASE r_row.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(r_row.REMARK, 1, 50), r_row.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO v_total_count FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; DBMS_OUTPUT.ENABLE(10000); DBMS_OUTPUT.PUT_LINE(SQLERRM); END SP_PMS_SYNC_ROUTINE_CHECK; $$\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DELIMITER $$\nCREATE PROCEDURE \"LFBB_BVC_VHG_CHECK\"( P_VESSEL_CODE VARCHAR2, P_BRANCH_CODE VARCHAR2, P_DEPT_DEPTH VARCHAR2, P_RESP_PERSON VARCHAR2, P_CHECK_NAME_PART VARCHAR2, P_CHECK_DATE_STR VARCHAR2 ) IS\n  CURSOR cur_range(p_start_date DATE,p_end_date DATE) IS\n    SELECT CWBT_NAME, I.HCJI_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.BCGDK_SS2, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE\n      FROM VW_R_CHECK_INFO I\n     WHERE I.BCGDK_SS2 = P_BRANCH_CODE\n       AND I.VESSEL_CODE = P_VESSEL_CODE\n       AND I.CHECK_DATE >= p_start_date\n       AND I.CHECK_DATE <= p_end_date\n       AND (P_DEPT_DEPTH IS NULL OR I.DEPT = P_DEPT_DEPTH)\n       AND (P_RESP_PERSON IS NULL OR I.RESPONSIBLE_PERSON = P_RESP_PERSON)\n       AND (P_CHECK_NAME_PART IS NULL OR (P_CHECK_NAME_PART IS NOT NULL AND I.CHECK_NAME LIKE '%' || P_CHECK_NAME_PART || '%'))\n       AND I.DATA_TYPE = 'S';\n  v_count INTEGER;\n  v_total_count INTEGER;\n  v_col_suffix VARCHAR2(2);\n  v_start_date DATE;\n  v_end_date DATE;\n  update_val VARCHAR2(50);\nBEGIN\n  EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO';\n  IF P_CHECK_DATE_STR IS NULL THEN\n    v_start_date := TO_DATE(TO_CHAR(SYSDATE, 'YYYY') || '-01-01', 'YYYY-MM-DD');\n    v_end_date   := TO_DATE(TO_CHAR(SYSDATE, 'YYYY') || '-12-31', 'YYYY-MM-DD');\n  ELSIF LENGTH(P_CHECK_DATE_STR) = 4 THEN\n    v_start_date := TO_DATE(P_CHECK_DATE_STR || '-06-24', 'YYYY-MM-DD');\n    v_end_date   := TO_DATE(P_CHECK_DATE_STR || '-10-24', 'YYYY-MM-DD');\n  ELSE\n    v_start_date := TO_DATE(P_CHECK_DATE_STR || '-03', 'YYYY-MM-DD');\n    v_end_date   := LAST_DAY(v_start_date);\n  END IF;\n  FOR r_row IN cur_range(v_start_date, v_end_date) LOOP\n    SELECT COUNT(1) INTO v_count\n      FROM G_R_CHECK_INFO I\n     WHERE I.PID = r_row.ROUTINE_CHECK_ITEM_ID;\n    IF v_count = 0 THEN\n      INSERT INTO G_R_CHECK_INFO (PID, CWBT_NAME, HCJI_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, BCGDK_SS2, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE)\n      SELECT r_row.ROUTINE_CHECK_ITEM_ID, r_row.CWBT_NAME, r_row.HCJI_CODE, r_row.CHECK_NAME, r_row.DEPT_NAME, r_row.DEPT, r_row.RESPONSIBLE_PERSON_NAME, r_row.RESPONSIBLE_PERSON, r_row.BCGDK_SS2, TRUNC(r_row.CHECK_DATE, 'MM'), r_row.VESSEL_CODE, r_row.VESSEL_NAME, r_row.COMPANY_CODE, r_row.CREATED_BY_USER, r_row.CREATED_OFFICE, r_row.CREATED_DTM_LOC, r_row.CREATED_TIME_ZONE, r_row.UPDATED_BY_USER, r_row.UPDATED_OFFICE, r_row.UPDATED_DTM_LOC, r_row.UPDATED_TIME_ZONE, r_row.RECORD_VERSION, r_row.PRINCIPAL_GROUP_CODE\n        FROM DUAL;\n    END IF;\n    SELECT CASE P_BRANCH_CODE\n             WHEN 'A' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'DD') AS NUMBER)\n             WHEN 'B' THEN CAST(TO_CHAR(PKG_DATE_UTIL.GET_1ST_M(r_row.CHECK_DATE, DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'YY', 'MM')), DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'WW', 'W')) AS NUMBER)\n             WHEN 'C' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'MM') AS NUMBER)\n           END\n      INTO v_col_suffix\n      FROM DUAL;\n    update_val := CASE r_row.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(r_row.REMARK, 1, 50);\n    EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || v_col_suffix || ' = :1 WHERE I.PID = :2'\n      USING update_val, r_row.ROUTINE_CHECK_ITEM_ID;\n  END LOOP;\n  SELECT COUNT(*) INTO v_total_count FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336';\n  COMMIT;\nEXCEPTION\n  WHEN OTHERS THEN\n    ROLLBACK;\n    DBMS_OUTPUT.ENABLE(10000);\n    DBMS_OUTPUT.PUT_LINE(SQLERRM);\nEND SP_PMS_SYNC_ROUTINE_CHECK;\n$$"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "DELIMITER $$\nCREATE PROCEDURE \"LFBB_BVC_VHG_CHECK\"(\n    P_VESSEL_CODE VARCHAR2,\n    P_BRANCH_CODE VARCHAR2,\n    P_DEPT_DEPTH VARCHAR2,\n    P_RESP_PERSON VARCHAR2,\n    P_CHECK_NAME_PART VARCHAR2,\n    P_CHECK_DATE_STR VARCHAR2\n) IS\n    CURSOR cur_range(p_start_date DATE, p_end_date DATE) IS\n        SELECT CWBT_NAME, I.HCJI_CODE, CHECK_NAME, DEPT_NAME, I.DEPT,\n               RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT,\n               I.CHECK_RESULT_NAME, I.BCGDK_SS2, I.CHECK_DATE, I.VESSEL_CODE,\n               I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK,\n               I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC,\n               I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE,\n               I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE,\n               I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE\n          FROM VW_R_CHECK_INFO I\n         WHERE I.BCGDK_SS2 = P_BRANCH_CODE\n           AND I.VESSEL_CODE = P_VESSEL_CODE\n           AND I.CHECK_DATE >= p_start_date\n           AND I.CHECK_DATE <= p_end_date\n           AND (P_DEPT_DEPTH IS NULL OR I.DEPT = P_DEPT_DEPTH)\n           AND (P_RESP_PERSON IS NULL OR I.RESPONSIBLE_PERSON = P_RESP_PERSON)\n           AND (P_CHECK_NAME_PART IS NULL OR (P_CHECK_NAME_PART IS NOT NULL\n                                            AND I.CHECK_NAME LIKE '%' || P_CHECK_NAME_PART || '%'))\n           AND I.DATA_TYPE = 'S';\n    v_count INTEGER;\n    v_total_count INTEGER;\n    v_col_suffix VARCHAR2(2);\n    v_start_date DATE;\n    v_end_date DATE;\n    v_update_val VARCHAR2(100);\nBEGIN\n    EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO';\n    IF P_CHECK_DATE_STR IS NULL THEN\n        v_start_date := TO_DATE(TO_CHAR(SYSDATE, 'YYYY') || '-01-01', 'YYYY-MM-DD');\n        v_end_date := TO_DATE(TO_CHAR(SYSDATE, 'YYYY') || '-12-31', 'YYYY-MM-DD');\n    ELSIF LENGTH(P_CHECK_DATE_STR) = 4 THEN\n        v_start_date := TO_DATE(P_CHECK_DATE_STR || '-06-24', 'YYYY-MM-DD');\n        v_end_date := TO_DATE(P_CHECK_DATE_STR || '-10-24', 'YYYY-MM-DD');\n    ELSE\n        v_start_date := TO_DATE(P_CHECK_DATE_STR || '-03', 'YYYY-MM-DD');\n        v_end_date := LAST_DAY(v_start_date);\n    END IF;\n    FOR r_row IN cur_range(v_start_date, v_end_date) LOOP\n        SELECT COUNT(1) INTO v_count\n          FROM G_R_CHECK_INFO I\n         WHERE I.PID = r_row.ROUTINE_CHECK_ITEM_ID;\n        IF v_count = 0 THEN\n            INSERT INTO G_R_CHECK_INFO (\n                PID, CWBT_NAME, HCJI_CODE, CHECK_NAME, DEPT_NAME, DEPT,\n                RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, BCGDK_SS2,\n                CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE,\n                CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC,\n                CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE,\n                UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION,\n                PRINCIPAL_GROUP_CODE\n            )\n            SELECT r_row.ROUTINE_CHECK_ITEM_ID, r_row.CWBT_NAME, r_row.HCJI_CODE,\n                   r_row.CHECK_NAME, r_row.DEPT_NAME, r_row.DEPT,\n                   r_row.RESPONSIBLE_PERSON_NAME, r_row.RESPONSIBLE_PERSON,\n                   r_row.BCGDK_SS2, TRUNC(r_row.CHECK_DATE, 'MM'),\n                   r_row.VESSEL_CODE, r_row.VESSEL_NAME, r_row.COMPANY_CODE,\n                   r_row.CREATED_BY_USER, r_row.CREATED_OFFICE,\n                   r_row.CREATED_DTM_LOC, r_row.CREATED_TIME_ZONE,\n                   r_row.UPDATED_BY_USER, r_row.UPDATED_OFFICE,\n                   r_row.UPDATED_DTM_LOC, r_row.UPDATED_TIME_ZONE,\n                   r_row.RECORD_VERSION, r_row.PRINCIPAL_GROUP_CODE\n              FROM DUAL;\n        END IF;\n        SELECT CASE P_BRANCH_CODE\n                   WHEN 'A' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'DD') AS NUMBER)\n                   WHEN 'B' THEN CAST(TO_CHAR(PKG_DATE_UTIL.GET_1ST_M(\n                                   r_row.CHECK_DATE,\n                                   DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'YY', 'MM')\n                               ),\n                               DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'WW', 'W')\n                           ) AS NUMBER)\n                   WHEN 'C' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'MM') AS NUMBER)\n               END\n          INTO v_col_suffix\n          FROM DUAL;\n        v_update_val := CASE r_row.CHECK_RESULT\n                            WHEN '0' THEN '√'\n                            WHEN '1' THEN '×'\n                            WHEN '2' THEN 'O'\n                            WHEN '3' THEN '—'\n                        END\n                        || SUBSTR(r_row.REMARK, 1, 50);\n        EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N'\n                          || v_col_suffix\n                          || ' = :1 WHERE I.PID = :2'\n                          USING v_update_val, r_row.ROUTINE_CHECK_ITEM_ID;\n    END LOOP;\n    SELECT COUNT(*) INTO v_total_count\n      FROM G_R_CHECK_INFO\n     WHERE VESSEL_CODE = '0336';\n    COMMIT;\nEXCEPTION\n    WHEN OTHERS THEN\n        ROLLBACK;\n        DBMS_OUTPUT.ENABLE(10000);\n        DBMS_OUTPUT.PUT_LINE(SQLERRM);\nEND \"LFBB_BVC_VHG_CHECK\";\n$$"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "DELIMITER $$\nCREATE PROCEDURE \"LFBB_BVC_VHG_CHECK\"( P_VESSEL_CODE VARCHAR2, P_BRANCH_CODE VARCHAR2, P_DEPT_DEPTH VARCHAR2, P_RESP_PERSON VARCHAR2, P_CHECK_NAME_PART VARCHAR2, P_CHECK_DATE_STR VARCHAR2 ) IS\n  CURSOR cur_range(p_start_date DATE,p_end_date DATE) IS\n    SELECT CWBT_NAME, I.HCJI_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.BCGDK_SS2, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE\n    FROM VW_R_CHECK_INFO I\n    WHERE I.BCGDK_SS2 = P_BRANCH_CODE\n      AND I.VESSEL_CODE = P_VESSEL_CODE\n      AND I.CHECK_DATE >= p_start_date\n      AND I.CHECK_DATE <= p_end_date\n      AND (P_DEPT_DEPTH IS NULL OR I.DEPT = P_DEPT_DEPTH)\n      AND (P_RESP_PERSON IS NULL OR I.RESPONSIBLE_PERSON = P_RESP_PERSON)\n      AND (P_CHECK_NAME_PART IS NULL OR (P_CHECK_NAME_PART IS NOT NULL AND I.CHECK_NAME LIKE '%' || P_CHECK_NAME_PART || '%'))\n      AND I.DATA_TYPE = 'S';\n  v_count INTEGER;\n  v_total_count INTEGER;\n  v_col_suffix VARCHAR2(2);\n  v_start_date DATE;\n  v_end_date DATE;\n  v_update_val VARCHAR2(100);\nBEGIN\n  EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO';\n  IF P_CHECK_DATE_STR IS NULL THEN\n    v_start_date := TO_DATE(TO_CHAR(SYSDATE, 'YYYY') || '-01-01', 'YYYY-MM-DD');\n    v_end_date := TO_DATE(TO_CHAR(SYSDATE, 'YYYY') || '-12-31', 'YYYY-MM-DD');\n  ELSIF LENGTH(P_CHECK_DATE_STR) = 4 THEN\n    v_start_date := TO_DATE(P_CHECK_DATE_STR || '-06-24', 'YYYY-MM-DD');\n    v_end_date := TO_DATE(P_CHECK_DATE_STR || '-10-24', 'YYYY-MM-DD');\n  ELSE\n    v_start_date := TO_DATE(P_CHECK_DATE_STR || '-03', 'YYYY-MM-DD');\n    v_end_date := LAST_DAY(v_start_date);\n  END IF;\n  FOR r_row IN cur_range(v_start_date, v_end_date) LOOP\n    SELECT COUNT(1) INTO v_count FROM G_R_CHECK_INFO I WHERE I.PID = r_row.ROUTINE_CHECK_ITEM_ID;\n    IF v_count = 0 THEN\n      INSERT INTO G_R_CHECK_INFO (PID, CWBT_NAME, HCJI_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, BCGDK_SS2, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE)\n      SELECT r_row.ROUTINE_CHECK_ITEM_ID, r_row.CWBT_NAME, r_row.HCJI_CODE, r_row.CHECK_NAME, r_row.DEPT_NAME, r_row.DEPT, r_row.RESPONSIBLE_PERSON_NAME, r_row.RESPONSIBLE_PERSON, r_row.BCGDK_SS2, TRUNC(r_row.CHECK_DATE, 'MM'), r_row.VESSEL_CODE, r_row.VESSEL_NAME, r_row.COMPANY_CODE, r_row.CREATED_BY_USER, r_row.CREATED_OFFICE, r_row.CREATED_DTM_LOC, r_row.CREATED_TIME_ZONE, r_row.UPDATED_BY_USER, r_row.UPDATED_OFFICE, r_row.UPDATED_DTM_LOC, r_row.UPDATED_TIME_ZONE, r_row.RECORD_VERSION, r_row.PRINCIPAL_GROUP_CODE\n      FROM DUAL;\n    END IF;\n    SELECT CASE P_BRANCH_CODE WHEN 'A' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'DD') AS NUMBER) WHEN 'B' THEN CAST(TO_CHAR(PKG_DATE_UTIL.GET_1ST_M(r_row.CHECK_DATE, DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'YY', 'MM')), DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'WW', 'W')) AS NUMBER) WHEN 'C' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'MM') AS NUMBER) END INTO v_col_suffix FROM DUAL;\n    v_update_val := CASE r_row.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(r_row.REMARK, 1, 50);\n    EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || v_col_suffix || ' = :1 WHERE I.PID = :2' USING v_update_val, r_row.ROUTINE_CHECK_ITEM_ID;\n  END LOOP;\n  SELECT COUNT(*) INTO v_total_count FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336';\n  COMMIT;\nEXCEPTION WHEN OTHERS THEN\n  ROLLBACK;\n  DBMS_OUTPUT.ENABLE(10000);\n  DBMS_OUTPUT.PUT_LINE(SQLERRM);\nEND \"LFBB_BVC_VHG_CHECK\"; $$"
                    }
                ]
            },
            {
                "case_id": "2",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"2\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CASE\", \"LIKE\", \"ROUND\", \"ABS\", \"WM_CONCAT\", \"REPLACE\", \"DBMS_LOB.SUBSTR\", \"NVL\", \"MAX\", \"SUM\", \"ROWNUM\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE \\\"SP_FMM_PAYMENT_NOTICE_RPT\\\"( V_PAYMENT_NOTICE_ID IN FMM_FEE_PAYMENT_NOTICE.PAYMENT_NOTICE_ID%TYPE DEFAULT NULL, V_USER IN FMM_FEE_INVOICE.INVOICE_NO%TYPE DEFAULT NULL, OUTCURSOR OUT PKG_CURSOR.T_CURSOR ) IS BEGIN OPEN OUTCURSOR FOR SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO,C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_NO(P.PAYMENT_NOTICE_ID) ELSE A.INVOICE_NO END AS INVOICE_NO,A.INVOICE_DESC, A.OCCUR_TIME_FROM,A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT,A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_TAX_AMOUNT') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT_WITHOUT_TAX') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1,'' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE=V_USER AND ROWNUM=1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL,2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL <0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL),2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT,2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, P.APPLY_PAYER, P.APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, A.BILL_NO, CASE WHEN P.PAYMENT_TYPE='FY56' THEN (SELECT GG.RD_PROJECT FROM RBT_RD_ACTIVITY GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) ELSE (SELECT GG.PROJECT_NAME FROM FMM_JG_INNER_ORDER GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) END AS PROJECT_NAME, P.DELIVERY_NO AS PPM_APPLY_NO FROM FMM_FEE_PAYMENT_NOTICE P INNER JOIN FMM_FEE_INVOICE A ON P.PAYMENT_NOTICE_ID=A.PAYMENT_NOTICE_ID LEFT JOIN CRM_CUSTOMER C ON P.PAYEE=C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAYER=C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE=V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL=F.FREIGHT_CODE AND A.INVOICE_SORT=F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT=FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY=CY.CURRENCY LEFT JOIN SYS_USER SU ON SU.USR_CODE=V_USER WHERE P.PAYMENT_NOTICE_ID=V_PAYMENT_NOTICE_ID UNION ALL SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO, C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN dbms_lob.substr(REPLACE((SELECT WM_CONCAT(DE.INVOICE_NUM) FROM (SELECT D.PAYMENT_NO,D.INVOICE_NUM FROM BFM_INVOICE_DETAIL D GROUP BY D.PAYMENT_NO,D.INVOICE_NUM) DE WHERE DE.PAYMENT_NO = P.PAYMENT_NO), ',', '\\\\'),4000,1) ELSE A.INVOICE_NUM END AS INVOICE_NO, '' AS INVOICE_DESC, NVL((SELECT MAX(PO.SUPPLY_DATE) FROM BFM_INVOICE_DETAIL I LEFT JOIN BFM_PURCHASE_ORDER_DETAIL OD ON I.PO_NUMBER = OD.SUB_PO_NUMBER LEFT JOIN BFM_PURCHASE_ORDER PO ON OD.PO_NUMBER = PO.PO_NUMBER WHERE I.PAYMENT_NO = P.PAYMENT_NO),P.APPLY_DATE) AS OCCUR_TIME_FROM, A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT, A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D1.DTL_AMOUNT) FROM BFM_INVOICE_DETAIL D1 WHERE D1.PAYMENT_NO = P.PAYMENT_NO AND NVL(D1.IS_DELETE,'0') <> '1') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D2.DTL_TAX_AMOUNT) FROM BFM_INVOICE_DETAIL D2 WHERE D2.PAYMENT_NO = P.PAYMENT_NO AND NVL(D2.IS_DELETE,'0') <> '1') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D3.DTL_AMOUNT_WITHOUT_TAX) FROM BFM_INVOICE_DETAIL D3 WHERE D3.PAYMENT_NO = P.PAYMENT_NO AND NVL(D3.IS_DELETE,'0') <> '1') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1, '' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE = V_USER AND ROWNUM = 1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL, 2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL < 0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL), 2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT, 2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, NVL(F1.OFFICE_NAME,P.APPLY_PAYER) AS APPLY_PAYER, NVL(S.USR_NAME,P.APPLYER_USER) AS APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, NULL AS BILL_NO, NULL AS PROJECT_NAME, NULL AS PPM_APPLY_NO FROM BFM_PAYMENT_NOTICE P INNER JOIN BFM_INVOICE_DETAIL A ON P.PAYMENT_NO = A.PAYMENT_NO LEFT JOIN CRM_CUSTOMER C ON P.PAYEE = C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAY_FEE_NAME = C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE = V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL = F.FREIGHT_CODE AND A.INVOICE_SORT = F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT = FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY = CY.CURRENCY LEFT JOIN SYS_USER S ON P.APPLYER_USER = S.USR_CODE LEFT JOIN SYS_OFFICE F1 ON P.APPLY_PAYER = F1.OFFICE_CODE LEFT JOIN SYS_USER SU ON SU.USR_CODE = V_USER WHERE P.PAYMENT_NOTICE_ID = V_PAYMENT_NOTICE_ID; END SP_FMM_PAYMENT_NOTICE_RPT; $$\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE \"SP_FMM_PAYMENT_NOTICE_RPT\"( V_PAYMENT_NOTICE_ID IN FMM_FEE_PAYMENT_NOTICE.PAYMENT_NOTICE_ID%TYPE DEFAULT NULL, V_USER IN FMM_FEE_INVOICE.INVOICE_NO%TYPE DEFAULT NULL, OUTCURSOR OUT PKG_CURSOR.T_CURSOR ) IS BEGIN OPEN OUTCURSOR FOR SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO,C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_NO(P.PAYMENT_NOTICE_ID) ELSE A.INVOICE_NO END AS INVOICE_NO,A.INVOICE_DESC, A.OCCUR_TIME_FROM,A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT,A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_TAX_AMOUNT') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT_WITHOUT_TAX') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1,'' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE=V_USER AND ROWNUM=1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL,2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL <0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL),2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT,2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, P.APPLY_PAYER, P.APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, A.BILL_NO, CASE WHEN P.PAYMENT_TYPE='FY56' THEN (SELECT GG.RD_PROJECT FROM RBT_RD_ACTIVITY GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) ELSE (SELECT GG.PROJECT_NAME FROM FMM_JG_INNER_ORDER GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) END AS PROJECT_NAME, P.DELIVERY_NO AS PPM_APPLY_NO FROM FMM_FEE_PAYMENT_NOTICE P INNER JOIN FMM_FEE_INVOICE A ON P.PAYMENT_NOTICE_ID=A.PAYMENT_NOTICE_ID LEFT JOIN CRM_CUSTOMER C ON P.PAYEE=C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAYER=C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE=V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL=F.FREIGHT_CODE AND A.INVOICE_SORT=F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT=FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY=CY.CURRENCY LEFT JOIN SYS_USER SU ON SU.USR_CODE=V_USER WHERE P.PAYMENT_NOTICE_ID=V_PAYMENT_NOTICE_ID UNION ALL SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO, C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN dbms_lob.substr(REPLACE((SELECT WM_CONCAT(DE.INVOICE_NUM) FROM (SELECT D.PAYMENT_NO,D.INVOICE_NUM FROM BFM_INVOICE_DETAIL D GROUP BY D.PAYMENT_NO,D.INVOICE_NUM) DE WHERE DE.PAYMENT_NO = P.PAYMENT_NO), ',', '\\'),4000,1) ELSE A.INVOICE_NUM END AS INVOICE_NO, '' AS INVOICE_DESC, NVL((SELECT MAX(PO.SUPPLY_DATE) FROM BFM_INVOICE_DETAIL I LEFT JOIN BFM_PURCHASE_ORDER_DETAIL OD ON I.PO_NUMBER = OD.SUB_PO_NUMBER LEFT JOIN BFM_PURCHASE_ORDER PO ON OD.PO_NUMBER = PO.PO_NUMBER WHERE I.PAYMENT_NO = P.PAYMENT_NO),P.APPLY_DATE) AS OCCUR_TIME_FROM, A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT, A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D1.DTL_AMOUNT) FROM BFM_INVOICE_DETAIL D1 WHERE D1.PAYMENT_NO = P.PAYMENT_NO AND NVL(D1.IS_DELETE,'0') <> '1') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D2.DTL_TAX_AMOUNT) FROM BFM_INVOICE_DETAIL D2 WHERE D2.PAYMENT_NO = P.PAYMENT_NO AND NVL(D2.IS_DELETE,'0') <> '1') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D3.DTL_AMOUNT_WITHOUT_TAX) FROM BFM_INVOICE_DETAIL D3 WHERE D3.PAYMENT_NO = P.PAYMENT_NO AND NVL(D3.IS_DELETE,'0') <> '1') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1, '' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE = V_USER AND ROWNUM = 1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL, 2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL < 0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL), 2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT, 2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, NVL(F1.OFFICE_NAME,P.APPLY_PAYER) AS APPLY_PAYER, NVL(S.USR_NAME,P.APPLYER_USER) AS APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, NULL AS BILL_NO, NULL AS PROJECT_NAME, NULL AS PPM_APPLY_NO FROM BFM_PAYMENT_NOTICE P INNER JOIN BFM_INVOICE_DETAIL A ON P.PAYMENT_NO = A.PAYMENT_NO LEFT JOIN CRM_CUSTOMER C ON P.PAYEE = C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAY_FEE_NAME = C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE = V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL = F.FREIGHT_CODE AND A.INVOICE_SORT = F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT = FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY = CY.CURRENCY LEFT JOIN SYS_USER S ON P.APPLYER_USER = S.USR_CODE LEFT JOIN SYS_OFFICE F1 ON P.APPLY_PAYER = F1.OFFICE_CODE LEFT JOIN SYS_USER SU ON SU.USR_CODE = V_USER WHERE P.PAYMENT_NOTICE_ID = V_PAYMENT_NOTICE_ID; END SP_FMM_PAYMENT_NOTICE_RPT; $$\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DELIMITER $$ CREATE OR REPLACE PROCEDURE \"SP_FMM_PAYMENT_NOTICE_RPT\"( V_PAYMENT_NOTICE_ID IN FMM_FEE_PAYMENT_NOTICE.PAYMENT_NOTICE_ID%TYPE DEFAULT NULL, V_USER IN FMM_FEE_INVOICE.INVOICE_NO%TYPE DEFAULT NULL, OUTCURSOR OUT PKG_CURSOR.T_CURSOR ) IS BEGIN OPEN OUTCURSOR FOR SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO,C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_NO(P.PAYMENT_NOTICE_ID) ELSE A.INVOICE_NO END AS INVOICE_NO,A.INVOICE_DESC, A.OCCUR_TIME_FROM,A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT,A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_TAX_AMOUNT') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT_WITHOUT_TAX') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1,'' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE=V_USER AND ROWNUM=1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL,2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL <0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL),2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT,2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, P.APPLY_PAYER, P.APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, A.BILL_NO, CASE WHEN P.PAYMENT_TYPE='FY56' THEN (SELECT GG.RD_PROJECT FROM RBT_RD_ACTIVITY GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) ELSE (SELECT GG.PROJECT_NAME FROM FMM_JG_INNER_ORDER GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) END AS PROJECT_NAME, P.DELIVERY_NO AS PPM_APPLY_NO FROM FMM_FEE_PAYMENT_NOTICE P INNER JOIN FMM_FEE_INVOICE A ON P.PAYMENT_NOTICE_ID=A.PAYMENT_NOTICE_ID LEFT JOIN CRM_CUSTOMER C ON P.PAYEE=C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAYER=C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE=V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL=F.FREIGHT_CODE AND A.INVOICE_SORT=F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT=FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY=CY.CURRENCY LEFT JOIN SYS_USER SU ON SU.USR_CODE=V_USER WHERE P.PAYMENT_NOTICE_ID=V_PAYMENT_NOTICE_ID UNION ALL SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO, C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN DBMS_LOB.SUBSTR(REPLACE((SELECT WM_CONCAT(DE.INVOICE_NUM) FROM (SELECT D.PAYMENT_NO, D.INVOICE_NUM FROM BFM_INVOICE_DETAIL D GROUP BY D.PAYMENT_NO, D.INVOICE_NUM) DE WHERE DE.PAYMENT_NO = P.PAYMENT_NO), ',', '\\\\'), 4000, 1) ELSE A.INVOICE_NUM END AS INVOICE_NO, '' AS INVOICE_DESC, NVL((SELECT MAX(PO.SUPPLY_DATE) FROM BFM_INVOICE_DETAIL I LEFT JOIN BFM_PURCHASE_ORDER_DETAIL OD ON I.PO_NUMBER = OD.SUB_PO_NUMBER LEFT JOIN BFM_PURCHASE_ORDER PO ON OD.PO_NUMBER = PO.PO_NUMBER WHERE I.PAYMENT_NO = P.PAYMENT_NO), P.APPLY_DATE) AS OCCUR_TIME_FROM, A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT, A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D1.DTL_AMOUNT) FROM BFM_INVOICE_DETAIL D1 WHERE D1.PAYMENT_NO = P.PAYMENT_NO AND NVL(D1.IS_DELETE, '0') <> '1') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D2.DTL_TAX_AMOUNT) FROM BFM_INVOICE_DETAIL D2 WHERE D2.PAYMENT_NO = P.PAYMENT_NO AND NVL(D2.IS_DELETE, '0') <> '1') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D3.DTL_AMOUNT_WITHOUT_TAX) FROM BFM_INVOICE_DETAIL D3 WHERE D3.PAYMENT_NO = P.PAYMENT_NO AND NVL(D3.IS_DELETE, '0') <> '1') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1, '' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE = V_USER AND ROWNUM = 1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL, 2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL < 0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL), 2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT, 2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, NVL(F1.OFFICE_NAME, P.APPLY_PAYER) AS APPLY_PAYER, NVL(S.USR_NAME, P.APPLYER_USER) AS APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER, A.VESSEL_CODE, 'COSCO_SAP') AS SAP_CODE, NULL AS BILL_NO, NULL AS PROJECT_NAME, NULL AS PPM_APPLY_NO FROM BFM_PAYMENT_NOTICE P INNER JOIN BFM_INVOICE_DETAIL A ON P.PAYMENT_NO = A.PAYMENT_NO LEFT JOIN CRM_CUSTOMER C ON P.PAYEE = C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAY_FEE_NAME = C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE = V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL = F.FREIGHT_CODE AND A.INVOICE_SORT = F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT = FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY = CY.CURRENCY LEFT JOIN SYS_USER S ON P.APPLYER_USER = S.USR_CODE LEFT JOIN SYS_OFFICE F1 ON P.APPLY_PAYER = F1.OFFICE_CODE LEFT JOIN SYS_USER SU ON SU.USR_CODE = V_USER WHERE P.PAYMENT_NOTICE_ID = V_PAYMENT_NOTICE_ID; END SP_FMM_PAYMENT_NOTICE_RPT; $$"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "DELIMITER $$ CREATE OR REPLACE PROCEDURE \"SP_FMM_PAYMENT_NOTICE_RPT\"( V_PAYMENT_NOTICE_ID IN FMM_FEE_PAYMENT_NOTICE.PAYMENT_NOTICE_ID%TYPE DEFAULT NULL, V_USER IN FMM_FEE_INVOICE.INVOICE_NO%TYPE DEFAULT NULL, OUTCURSOR OUT PKG_CURSOR.T_CURSOR ) IS BEGIN OPEN OUTCURSOR FOR SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO,C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_NO(P.PAYMENT_NOTICE_ID) ELSE A.INVOICE_NO END AS INVOICE_NO,A.INVOICE_DESC, A.OCCUR_TIME_FROM,A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT,A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_TAX_AMOUNT') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT_WITHOUT_TAX') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1,'' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE=V_USER AND ROWNUM=1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL,2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL <0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL),2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT,2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, P.APPLY_PAYER, P.APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, A.BILL_NO, CASE WHEN P.PAYMENT_TYPE='FY56' THEN (SELECT GG.RD_PROJECT FROM RBT_RD_ACTIVITY GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) ELSE (SELECT GG.PROJECT_NAME FROM FMM_JG_INNER_ORDER GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) END AS PROJECT_NAME, P.DELIVERY_NO AS PPM_APPLY_NO FROM FMM_FEE_PAYMENT_NOTICE P INNER JOIN FMM_FEE_INVOICE A ON P.PAYMENT_NOTICE_ID=A.PAYMENT_NOTICE_ID LEFT JOIN CRM_CUSTOMER C ON P.PAYEE=C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAYER=C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE=V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL=F.FREIGHT_CODE AND A.INVOICE_SORT=F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT=FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY=CY.CURRENCY LEFT JOIN SYS_USER SU ON SU.USR_CODE=V_USER WHERE P.PAYMENT_NOTICE_ID=V_PAYMENT_NOTICE_ID UNION ALL SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO, C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN dbms_lob.substr(REPLACE((SELECT WM_CONCAT(DE.INVOICE_NUM) FROM (SELECT D.PAYMENT_NO,D.INVOICE_NUM FROM BFM_INVOICE_DETAIL D GROUP BY D.PAYMENT_NO,D.INVOICE_NUM) DE WHERE DE.PAYMENT_NO = P.PAYMENT_NO), ',', '\\\\'),4000,1) ELSE A.INVOICE_NUM END AS INVOICE_NO, '' AS INVOICE_DESC, NVL((SELECT MAX(PO.SUPPLY_DATE) FROM BFM_INVOICE_DETAIL I LEFT JOIN BFM_PURCHASE_ORDER_DETAIL OD ON I.PO_NUMBER = OD.SUB_PO_NUMBER LEFT JOIN BFM_PURCHASE_ORDER PO ON OD.PO_NUMBER = PO.PO_NUMBER WHERE I.PAYMENT_NO = P.PAYMENT_NO),P.APPLY_DATE) AS OCCUR_TIME_FROM, A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT, A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D1.DTL_AMOUNT) FROM BFM_INVOICE_DETAIL D1 WHERE D1.PAYMENT_NO = P.PAYMENT_NO AND NVL(D1.IS_DELETE,'0') <> '1') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D2.DTL_TAX_AMOUNT) FROM BFM_INVOICE_DETAIL D2 WHERE D2.PAYMENT_NO = P.PAYMENT_NO AND NVL(D2.IS_DELETE,'0') <> '1') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D3.DTL_AMOUNT_WITHOUT_TAX) FROM BFM_INVOICE_DETAIL D3 WHERE D3.PAYMENT_NO = P.PAYMENT_NO AND NVL(D3.IS_DELETE,'0') <> '1') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1, '' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE = V_USER AND ROWNUM = 1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL, 2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL < 0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL), 2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT, 2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, NVL(F1.OFFICE_NAME,P.APPLY_PAYER) AS APPLY_PAYER, NVL(S.USR_NAME,P.APPLYER_USER) AS APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, NULL AS BILL_NO, NULL AS PROJECT_NAME, NULL AS PPM_APPLY_NO FROM BFM_PAYMENT_NOTICE P INNER JOIN BFM_INVOICE_DETAIL A ON P.PAYMENT_NO = A.PAYMENT_NO LEFT JOIN CRM_CUSTOMER C ON P.PAYEE = C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAY_FEE_NAME = C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE = V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL = F.FREIGHT_CODE AND A.INVOICE_SORT = F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT = FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY = CY.CURRENCY LEFT JOIN SYS_USER S ON P.APPLYER_USER = S.USR_CODE LEFT JOIN SYS_OFFICE F1 ON P.APPLY_PAYER = F1.OFFICE_CODE LEFT JOIN SYS_USER SU ON SU.USR_CODE = V_USER WHERE P.PAYMENT_NOTICE_ID = V_PAYMENT_NOTICE_ID; END SP_FMM_PAYMENT_NOTICE_RPT; $$"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "DELIMITER $$ CREATE OR REPLACE PROCEDURE \"SP_FMM_PAYMENT_NOTICE_RPT\"( V_PAYMENT_NOTICE_ID IN FMM_FEE_PAYMENT_NOTICE.PAYMENT_NOTICE_ID%TYPE DEFAULT NULL, V_USER IN FMM_FEE_INVOICE.INVOICE_NO%TYPE DEFAULT NULL, OUTCURSOR OUT PKG_CURSOR.T_CURSOR ) IS BEGIN OPEN OUTCURSOR FOR SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO,C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_NO(P.PAYMENT_NOTICE_ID) ELSE A.INVOICE_NO END AS INVOICE_NO,A.INVOICE_DESC, A.OCCUR_TIME_FROM,A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT,A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_TAX_AMOUNT') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT_WITHOUT_TAX') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1,'' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE=V_USER AND ROWNUM=1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL,2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL <0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL),2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT,2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, P.APPLY_PAYER, P.APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, A.BILL_NO, CASE WHEN P.PAYMENT_TYPE='FY56' THEN (SELECT GG.RD_PROJECT FROM RBT_RD_ACTIVITY GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) ELSE (SELECT GG.PROJECT_NAME FROM FMM_JG_INNER_ORDER GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) END AS PROJECT_NAME, P.DELIVERY_NO AS PPM_APPLY_NO FROM FMM_FEE_PAYMENT_NOTICE P INNER JOIN FMM_FEE_INVOICE A ON P.PAYMENT_NOTICE_ID=A.PAYMENT_NOTICE_ID LEFT JOIN CRM_CUSTOMER C ON P.PAYEE=C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAYER=C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE=V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL=F.FREIGHT_CODE AND A.INVOICE_SORT=F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT=FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY=CY.CURRENCY LEFT JOIN SYS_USER SU ON SU.USR_CODE=V_USER WHERE P.PAYMENT_NOTICE_ID=V_PAYMENT_NOTICE_ID UNION ALL SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO, C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN dbms_lob.substr(REPLACE((SELECT WM_CONCAT(DE.INVOICE_NUM) FROM (SELECT D.PAYMENT_NO,D.INVOICE_NUM FROM BFM_INVOICE_DETAIL D GROUP BY D.PAYMENT_NO,D.INVOICE_NUM) DE WHERE DE.PAYMENT_NO = P.PAYMENT_NO), ',', '\\'),4000,1) ELSE A.INVOICE_NUM END AS INVOICE_NO, '' AS INVOICE_DESC, NVL((SELECT MAX(PO.SUPPLY_DATE) FROM BFM_INVOICE_DETAIL I LEFT JOIN BFM_PURCHASE_ORDER_DETAIL OD ON I.PO_NUMBER = OD.SUB_PO_NUMBER LEFT JOIN BFM_PURCHASE_ORDER PO ON OD.PO_NUMBER = PO.PO_NUMBER WHERE I.PAYMENT_NO = P.PAYMENT_NO),P.APPLY_DATE) AS OCCUR_TIME_FROM, A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT, A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D1.DTL_AMOUNT) FROM BFM_INVOICE_DETAIL D1 WHERE D1.PAYMENT_NO = P.PAYMENT_NO AND NVL(D1.IS_DELETE,'0') <> '1') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D2.DTL_TAX_AMOUNT) FROM BFM_INVOICE_DETAIL D2 WHERE D2.PAYMENT_NO = P.PAYMENT_NO AND NVL(D2.IS_DELETE,'0') <> '1') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D3.DTL_AMOUNT_WITHOUT_TAX) FROM BFM_INVOICE_DETAIL D3 WHERE D3.PAYMENT_NO = P.PAYMENT_NO AND NVL(D3.IS_DELETE,'0') <> '1') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1, '' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE = V_USER AND ROWNUM = 1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL, 2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL < 0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL), 2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT, 2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, NVL(F1.OFFICE_NAME,P.APPLY_PAYER) AS APPLY_PAYER, NVL(S.USR_NAME,P.APPLYER_USER) AS APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, NULL AS BILL_NO, NULL AS PROJECT_NAME, NULL AS PPM_APPLY_NO FROM BFM_PAYMENT_NOTICE P INNER JOIN BFM_INVOICE_DETAIL A ON P.PAYMENT_NO = A.PAYMENT_NO LEFT JOIN CRM_CUSTOMER C ON P.PAYEE = C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAY_FEE_NAME = C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE = V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL = F.FREIGHT_CODE AND A.INVOICE_SORT = F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT = FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY = CY.CURRENCY LEFT JOIN SYS_USER S ON P.APPLYER_USER = S.USR_CODE LEFT JOIN SYS_OFFICE F1 ON P.APPLY_PAYER = F1.OFFICE_CODE LEFT JOIN SYS_USER SU ON SU.USR_CODE = V_USER WHERE P.PAYMENT_NOTICE_ID = V_PAYMENT_NOTICE_ID; END SP_FMM_PAYMENT_NOTICE_RPT; $$"
                    }
                ]
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"TO_DATE\", \"SUBSTR\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE SP_FMM_AUTINV_CONTRAST_STATINV(V_PURCHASER_TAX_NO IN VARCHAR2, V_INVOICE_NUM IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_DEDU_PERIOD IN VARCHAR2, V_OPERATOR IN VARCHAR2, V_DEDU_DATE_FROM IN VARCHAR2, V_DEDU_DATE_TO IN VARCHAR2, V_PURCHASER_NAME IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR select FAI.authed_invoice_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, '' AS PURCHASER_TAX_NO_STAT, '' AS PURCHASER_NAME_STAT, '' AS INVOICE_CODE_STAT, NULL AS BILLING_DATE_STAT, '' AS INVOICE_NUM_STAT, NULL AS AMOUNT_TAX_STAT, NULL AS TOTAL_AMOUNT_STAT, '1' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, '' AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, '' AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, NULL AS DEDU_DATE_STAT from FMM_AUTHED_INVOICE FAI LEFT JOIN sys_user su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FAI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FAI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FAI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FAI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR SU.USR_NAME = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FAI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_STAT_INV FASI WHERE FASI.PURCHASER_TAX_NO = FAI.PURCHASER_TAX_NO AND FASI.INVOICE_NUM = FAI.INVOICE_NUM AND FASI.INVOICE_CODE = FAI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, '' AS PURCHASER_TAX_NO_AUT, '' AS PURCHASER_NAME_AUT, '' AS INVOICE_CODE_AUT, NULL AS BILLING_DATE_AUT, '' AS INVOICE_NUM_AUT, NULL AS AMOUNT_TAX_AUT, NULL AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '2' AS DIFFERENCE_CAUSE, '' AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, '' AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, NULL AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_INVOICE FAI WHERE FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO AND FAI.INVOICE_NUM = FASI.INVOICE_NUM AND FAI.INVOICE_CODE = FASI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '3' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI inner join FMM_AUTHED_INVOICE FAI on FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO and FAI.INVOICE_NUM = FASI.INVOICE_NUM and FAI.INVOICE_CODE = FASI.INVOICE_CODE LEFT JOIN Sys_User su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND (FASI.Total_Tax <> FAI.Total_Tax OR FASI.Total_Amount <> FAI.Total_Amount); END SP_FMM_AUTINV_CONTRAST_STATINV; $$\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE SP_FMM_AUTINV_CONTRAST_STATINV(V_PURCHASER_TAX_NO IN VARCHAR2, V_INVOICE_NUM IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_DEDU_PERIOD IN VARCHAR2, V_OPERATOR IN VARCHAR2, V_DEDU_DATE_FROM IN VARCHAR2, V_DEDU_DATE_TO IN VARCHAR2, V_PURCHASER_NAME IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR select FAI.authed_invoice_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, '' AS PURCHASER_TAX_NO_STAT, '' AS PURCHASER_NAME_STAT, '' AS INVOICE_CODE_STAT, NULL AS BILLING_DATE_STAT, '' AS INVOICE_NUM_STAT, NULL AS AMOUNT_TAX_STAT, NULL AS TOTAL_AMOUNT_STAT, '1' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, '' AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, '' AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, NULL AS DEDU_DATE_STAT from FMM_AUTHED_INVOICE FAI LEFT JOIN sys_user su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FAI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FAI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FAI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FAI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR SU.USR_NAME = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FAI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_STAT_INV FASI WHERE FASI.PURCHASER_TAX_NO = FAI.PURCHASER_TAX_NO AND FASI.INVOICE_NUM = FAI.INVOICE_NUM AND FASI.INVOICE_CODE = FAI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, '' AS PURCHASER_TAX_NO_AUT, '' AS PURCHASER_NAME_AUT, '' AS INVOICE_CODE_AUT, NULL AS BILLING_DATE_AUT, '' AS INVOICE_NUM_AUT, NULL AS AMOUNT_TAX_AUT, NULL AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '2' AS DIFFERENCE_CAUSE, '' AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, '' AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, NULL AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_INVOICE FAI WHERE FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO AND FAI.INVOICE_NUM = FASI.INVOICE_NUM AND FAI.INVOICE_CODE = FASI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '3' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI inner join FMM_AUTHED_INVOICE FAI on FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO and FAI.INVOICE_NUM = FASI.INVOICE_NUM and FAI.INVOICE_CODE = FASI.INVOICE_CODE LEFT JOIN Sys_User su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND (FASI.Total_Tax <> FAI.Total_Tax OR FASI.Total_Amount <> FAI.Total_Amount); END SP_FMM_AUTINV_CONTRAST_STATINV; $$\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DELIMITER $$ CREATE OR REPLACE PROCEDURE SP_FMM_AUTINV_CONTRAST_STATINV(V_PURCHASER_TAX_NO IN VARCHAR2, V_INVOICE_NUM IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_DEDU_PERIOD IN VARCHAR2, V_OPERATOR IN VARCHAR2, V_DEDU_DATE_FROM IN VARCHAR2, V_DEDU_DATE_TO IN VARCHAR2, V_PURCHASER_NAME IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR select FAI.authed_invoice_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, '' AS PURCHASER_TAX_NO_STAT, '' AS PURCHASER_NAME_STAT, '' AS INVOICE_CODE_STAT, NULL AS BILLING_DATE_STAT, '' AS INVOICE_NUM_STAT, NULL AS AMOUNT_TAX_STAT, NULL AS TOTAL_AMOUNT_STAT, '1' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, '' AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, '' AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, NULL AS DEDU_DATE_STAT from FMM_AUTHED_INVOICE FAI LEFT JOIN sys_user su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FAI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FAI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FAI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FAI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR SU.USR_NAME = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FAI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_STAT_INV FASI WHERE FASI.PURCHASER_TAX_NO = FAI.PURCHASER_TAX_NO AND FASI.INVOICE_NUM = FAI.INVOICE_NUM AND FASI.INVOICE_CODE = FAI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, '' AS PURCHASER_TAX_NO_AUT, '' AS PURCHASER_NAME_AUT, '' AS INVOICE_CODE_AUT, NULL AS BILLING_DATE_AUT, '' AS INVOICE_NUM_AUT, NULL AS AMOUNT_TAX_AUT, NULL AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '2' AS DIFFERENCE_CAUSE, '' AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, '' AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, NULL AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_INVOICE FAI WHERE FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO AND FAI.INVOICE_NUM = FASI.INVOICE_NUM AND FAI.INVOICE_CODE = FASI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '3' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI inner join FMM_AUTHED_INVOICE FAI on FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO and FAI.INVOICE_NUM = FASI.INVOICE_NUM and FAI.INVOICE_CODE = FASI.INVOICE_CODE LEFT JOIN Sys_User su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND (FASI.Total_Tax <> FAI.Total_Tax OR FASI.Total_Amount <> FAI.Total_Amount); END SP_FMM_AUTINV_CONTRAST_STATINV; $$"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "DELIMITER $$ CREATE OR REPLACE PROCEDURE SP_FMM_AUTINV_CONTRAST_STATINV(V_PURCHASER_TAX_NO IN VARCHAR2, V_INVOICE_NUM IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_DEDU_PERIOD IN VARCHAR2, V_OPERATOR IN VARCHAR2, V_DEDU_DATE_FROM IN VARCHAR2, V_DEDU_DATE_TO IN VARCHAR2, V_PURCHASER_NAME IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR select FAI.authed_invoice_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, '' AS PURCHASER_TAX_NO_STAT, '' AS PURCHASER_NAME_STAT, '' AS INVOICE_CODE_STAT, NULL AS BILLING_DATE_STAT, '' AS INVOICE_NUM_STAT, NULL AS AMOUNT_TAX_STAT, NULL AS TOTAL_AMOUNT_STAT, '1' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, '' AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, '' AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, NULL AS DEDU_DATE_STAT from FMM_AUTHED_INVOICE FAI LEFT JOIN sys_user su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FAI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FAI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FAI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FAI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR SU.USR_NAME = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FAI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_STAT_INV FASI WHERE FASI.PURCHASER_TAX_NO = FAI.PURCHASER_TAX_NO AND FASI.INVOICE_NUM = FAI.INVOICE_NUM AND FASI.INVOICE_CODE = FAI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, '' AS PURCHASER_TAX_NO_AUT, '' AS PURCHASER_NAME_AUT, '' AS INVOICE_CODE_AUT, NULL AS BILLING_DATE_AUT, '' AS INVOICE_NUM_AUT, NULL AS AMOUNT_TAX_AUT, NULL AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '2' AS DIFFERENCE_CAUSE, '' AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, '' AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, NULL AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_INVOICE FAI WHERE FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO AND FAI.INVOICE_NUM = FASI.INVOICE_NUM AND FAI.INVOICE_CODE = FASI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '3' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI inner join FMM_AUTHED_INVOICE FAI on FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO and FAI.INVOICE_NUM = FASI.INVOICE_NUM and FAI.INVOICE_CODE = FASI.INVOICE_CODE LEFT JOIN Sys_User su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND (FASI.Total_Tax <> FAI.Total_Tax OR FASI.Total_Amount <> FAI.Total_Amount); END SP_FMM_AUTINV_CONTRAST_STATINV; $$"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "DELIMITER $$ CREATE OR REPLACE PROCEDURE SP_FMM_AUTINV_CONTRAST_STATINV(V_PURCHASER_TAX_NO IN VARCHAR2, V_INVOICE_NUM IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_DEDU_PERIOD IN VARCHAR2, V_OPERATOR IN VARCHAR2, V_DEDU_DATE_FROM IN VARCHAR2, V_DEDU_DATE_TO IN VARCHAR2, V_PURCHASER_NAME IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR select FAI.authed_invoice_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, '' AS PURCHASER_TAX_NO_STAT, '' AS PURCHASER_NAME_STAT, '' AS INVOICE_CODE_STAT, NULL AS BILLING_DATE_STAT, '' AS INVOICE_NUM_STAT, NULL AS AMOUNT_TAX_STAT, NULL AS TOTAL_AMOUNT_STAT, '1' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, '' AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, '' AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, NULL AS DEDU_DATE_STAT from FMM_AUTHED_INVOICE FAI LEFT JOIN sys_user su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FAI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FAI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FAI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FAI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR SU.USR_NAME = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FAI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_STAT_INV FASI WHERE FASI.PURCHASER_TAX_NO = FAI.PURCHASER_TAX_NO AND FASI.INVOICE_NUM = FAI.INVOICE_NUM AND FASI.INVOICE_CODE = FAI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, '' AS PURCHASER_TAX_NO_AUT, '' AS PURCHASER_NAME_AUT, '' AS INVOICE_CODE_AUT, NULL AS BILLING_DATE_AUT, '' AS INVOICE_NUM_AUT, NULL AS AMOUNT_TAX_AUT, NULL AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '2' AS DIFFERENCE_CAUSE, '' AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, '' AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, NULL AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_INVOICE FAI WHERE FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO AND FAI.INVOICE_NUM = FASI.INVOICE_NUM AND FAI.INVOICE_CODE = FASI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '3' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI inner join FMM_AUTHED_INVOICE FAI on FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO and FAI.INVOICE_NUM = FASI.INVOICE_NUM and FAI.INVOICE_CODE = FASI.INVOICE_CODE LEFT JOIN Sys_User su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND (FASI.Total_Tax <> FAI.Total_Tax OR FASI.Total_Amount <> FAI.Total_Amount); END SP_FMM_AUTINV_CONTRAST_STATINV; $$"
                    }
                ]
            },
            {
                "case_id": "4",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"4\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"NVL\", \"TO_DATE\", \"SUBSTR\", \"TO_CHAR\", \"SYSDATE\", \"CASE\", \"SYS_GUID\", \"LPAD\", \"TRUNC\", \"ABS\", \"TO_NUMBER\", \"ROUND\", \"ROWNUM\", \"EXTEND\", \"TABLE(\", \"MAX\", \"START WITH\", \"CONNECT BY\", \"NOCYCLE\", \"PRIOR\", \"DBMS_OUTPUT.PUT_LINE\", \"SQLERRM\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE SP_TSA_WARNING3(I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, I_DURATION IN VARCHAR2, I_SOG IN VARCHAR2, I_AREA IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR) IS OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); OFFICE_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); I NUMBER; LN NUMBER; V_MANAGER VARCHAR2(50); V_SOG VARCHAR2(50); V_DURATION VARCHAR2(50); V_SORTCODE NUMBER; BEGIN I:=1; LN:=1; IF NVL(I_MANAGER,'00000000')='00000000' THEN V_MANAGER:=NULL; ELSE V_MANAGER:=I_MANAGER; FOR LS IN (select OFFICE_CODE from sys_office where nvl(is_dept,1)=0 start with OFFICE_CODE=V_MANAGER connect by NOCYCLE supperior_office_CODE=prior office_CODE) LOOP OFFICE_TAB_TYPE.EXTEND; OFFICE_TAB_TYPE(LN) := OBJECTTABTYPE(LS.OFFICE_CODE,'','','','','','', '', NULL,'','','','',''); LN:=LN+1; END LOOP; END IF; select PARA_VALUE INTO V_SOG from TSA_MONITOR_CONF WHERE PARA_TYPE='MAXSPEED'; select PARA_VALUE INTO V_DURATION from TSA_MONITOR_CONF WHERE PARA_TYPE='MONITOR_DURATION'; FOR X IN (SELECT * FROM (SELECT VW.VESSEL_MMSI, V.VESSEL_ID, TO_DATE(SUBSTR(VW.VESSEL_POSIDATE,1,19),'YYYY-MM-DD HH24:MI:SS') AS ACTIVITY_DATE, VW.VESSEL_LAT AS LAT, VW.VESSEL_LON AS LON, V.VESSEL_CODE, V.VESSEL_NAME, VW.VESSEL_SPEED, CASE WHEN VW.VESSEL_STATE IN ('0','8') THEN '1' ELSE '0' END AS SAILING_STATUS, VM.MANAGER AS OFFICE_CODE, VM.manager_dept AS OFFICE_DEPT_CODE, (SELECT AA.OFFICE_NAME FROM SYS_OFFICE AA, VOP_VESSEL_MANAGEMENT BB WHERE AA.OFFICE_CODE=BB.MANAGER AND BB.VESSEL_ID=V.VESSEL_ID AND BB.MANAGEMENT_TYPE=1 AND ((sysdate >= BB.DEFINITION_DATE AND sysdate <= BB.END_DATE) OR (sysdate >= BB.DEFINITION_DATE AND BB.END_DATE IS NULL)) AND ROWNUM=1) AS manager_name, VW.VESSEL_ETA AS ETA_TIME, VW.VESSEL_DEST AS ETA_PORT_NAME, VW.VESSEL_COURSE FROM ZDWEB.VM_ZYHY2_ALLSHIPDYNAMIC@CSBC_TO_XE1 VW, VOP_VESSEL V, VOP_VESSEL_MANAGEMENT VM WHERE NVL(to_char(VW.VESSEL_MMSI),'无')=to_char(V.MMSI) AND V.VESSEL_ID=VM.VESSEL_ID AND (v.is_delete <> '1' OR v.is_delete IS NULL) AND V.VESSEL_CODE NOT IN (SELECT VESSEL_CODE FROM TSA_VESSEL_EXCLUDE) AND NVL(VM.IS_DELETE,'0')<>'1' AND v.trade_type='0' AND v.mmsi IS NOT NULL AND NVL(V.TETIRED_FLAG,'0')='1' AND VM.MANAGEMENT_TYPE=1 AND ((sysdate >= VM.DEFINITION_DATE AND sysdate <= VM.END_DATE) OR (sysdate >= VM.DEFINITION_DATE AND VM.END_DATE IS NULL))) MM INNER JOIN SYS_OFFICE_RELATION_TREE SORT ON MM.OFFICE_CODE=SORT.CHILD_CODE AND sort.office_code=nvl(V_MANAGER,'ABC') WHERE (I_VESSEL_CODE IS NULL OR MM.VESSEL_CODE IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_VESSEL_CODE,','))))) LOOP FOR M IN (SELECT H.* FROM TSA_AREA H WHERE H.DATE_START <= SYSDATE AND AREA_NAME NOT IN ('其他海区','委内瑞拉监控区','马六甲海峡临时监控区') AND (I_AREA IS NULL OR AREA_ID IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_AREA,',')))) AND NVL(H.DATE_END, TO_DATE('2999-01-01','YYYY-MM-DD')) >= SYSDATE) LOOP IF FN_TSA_IS_IN_HD_AREA(X.LON, X.LAT, M.AREA_ID) THEN OBJ_TAB_TYPE.EXTEND; OBJ_TAB_TYPE(I) := OBJECTTABTYPE(X.VESSEL_CODE, X.VESSEL_NAME, X.VESSEL_SPEED, X.VESSEL_COURSE, X.SAILING_STATUS, X.VESSEL_ID, X.LON, X.LAT, X.ACTIVITY_DATE, M.AREA_NAME, X.MANAGER_NAME, X.ETA_PORT_NAME, X.ETA_TIME, X.VESSEL_MMSI); I := I + 1; END IF; END LOOP; END LOOP; select (select nvl(max(SORTCODE)+1,1) from TSA_VESSEL_IN_AREA) INTO V_SORTCODE from dual; OPEN OUT_CURSOR FOR SELECT * FROM (SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, AA.VESSEL_CODE \\\"VESSEL_CODE\\\", AA.VESSEL_NAME \\\"VESSEL_NAME\\\", AA.MANAGER_NAME \\\"MANAGER_NAME\\\", FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE(),1,0) AS MANAGER_CODE, FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE(),1,1) AS MANAGER_DEPT_CODE, FN_TSA_ALERT_IS_SEND(AA.VESSEL_CODE) AS IS_SEND, AA.MMSI \\\"MMSI\\\", AA.ACTIVITY_DATE \\\"ACTIVITY_DATE\\\", CASE WHEN AA.LONGTITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'E' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'W' END AS \\\"LONGTITUDE\\\", CASE WHEN AA.LATITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'N' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'S' END AS \\\"LATITUDE\\\", AA.VESSEL_SPPED \\\"VESSEL_SPPED\\\", AA.VESSEL_COURSE \\\"VESSEL_COURSE\\\", FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION) AS \\\"AVERAGE_SPPED\\\", CASE WHEN NVL(AA.SAILING_STATUS,'0')='1' THEN '在航' ELSE '非在航' END AS \\\"SAILING_STATUS\\\", AA.AREA_NAME \\\"AREA_NAME\\\", AA.ETA_PORT_NAME \\\"ETA_PORT_NAME\\\", AA.ETA_TIME \\\"ETA_TIME\\\", V_SORTCODE AS SORTCODE, 'AUTO' AS created_by_user, sysdate AS created_dtm_loc, 0 AS record_version, 0 AS principal_group_code FROM TABLE(OBJ_TAB_TYPE) AA WHERE FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION)<=TO_NUMBER(NVL(V_SOG,'10')) UNION ALL SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, 'RUN......' AS VESSEL_CODE, '仍在执行' AS VESSEL_NAME, '00000000' AS SAFETY_COMPANY, '080200000000' AS MANAGER_CODE, '00000000' AS MANAGER_DEPT_CODE, 99 AS IS_SEND, '00000000' AS MMSI, sysdate AS POSI_DATE, '' AS POSI_LONG, '' AS POSI_LAT, '' AS VESSEL_SPPED, '' AS VESSEL_COURSE, 0 AS AVERAGE_SPPED, '' AS SAILING_STATUS, '' AS AREA_NAME, '' AS ETA_PORT_NAME, '' AS ETA_TIME, V_SORTCODE AS SORTCODE, 'AUTO' AS created_by_user, sysdate AS created_dtm_loc, 0 AS record_version, 0 AS principal_group_code FROM dual); EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM); END SP_TSA_WARNING3; $$\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE SP_TSA_WARNING3(I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, I_DURATION IN VARCHAR2, I_SOG IN VARCHAR2, I_AREA IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR) IS OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); OFFICE_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); I NUMBER; LN NUMBER; V_MANAGER VARCHAR2(50); V_SOG VARCHAR2(50); V_DURATION VARCHAR2(50); V_SORTCODE NUMBER; BEGIN I:=1; LN:=1; IF NVL(I_MANAGER,'00000000')='00000000' THEN V_MANAGER:=NULL; ELSE V_MANAGER:=I_MANAGER; FOR LS IN (select OFFICE_CODE from sys_office where nvl(is_dept,1)=0 start with OFFICE_CODE=V_MANAGER connect by NOCYCLE supperior_office_CODE=prior office_CODE) LOOP OFFICE_TAB_TYPE.EXTEND; OFFICE_TAB_TYPE(LN) := OBJECTTABTYPE(LS.OFFICE_CODE,'','','','','','', '', NULL,'','','','',''); LN:=LN+1; END LOOP; END IF; select PARA_VALUE INTO V_SOG from TSA_MONITOR_CONF WHERE PARA_TYPE='MAXSPEED'; select PARA_VALUE INTO V_DURATION from TSA_MONITOR_CONF WHERE PARA_TYPE='MONITOR_DURATION'; FOR X IN (SELECT * FROM (SELECT VW.VESSEL_MMSI, V.VESSEL_ID, TO_DATE(SUBSTR(VW.VESSEL_POSIDATE,1,19),'YYYY-MM-DD HH24:MI:SS') AS ACTIVITY_DATE, VW.VESSEL_LAT AS LAT, VW.VESSEL_LON AS LON, V.VESSEL_CODE, V.VESSEL_NAME, VW.VESSEL_SPEED, CASE WHEN VW.VESSEL_STATE IN ('0','8') THEN '1' ELSE '0' END AS SAILING_STATUS, VM.MANAGER AS OFFICE_CODE, VM.manager_dept AS OFFICE_DEPT_CODE, (SELECT AA.OFFICE_NAME FROM SYS_OFFICE AA, VOP_VESSEL_MANAGEMENT BB WHERE AA.OFFICE_CODE=BB.MANAGER AND BB.VESSEL_ID=V.VESSEL_ID AND BB.MANAGEMENT_TYPE=1 AND ((sysdate >= BB.DEFINITION_DATE AND sysdate <= BB.END_DATE) OR (sysdate >= BB.DEFINITION_DATE AND BB.END_DATE IS NULL)) AND ROWNUM=1) AS manager_name, VW.VESSEL_ETA AS ETA_TIME, VW.VESSEL_DEST AS ETA_PORT_NAME, VW.VESSEL_COURSE FROM ZDWEB.VM_ZYHY2_ALLSHIPDYNAMIC@CSBC_TO_XE1 VW, VOP_VESSEL V, VOP_VESSEL_MANAGEMENT VM WHERE NVL(to_char(VW.VESSEL_MMSI),'无')=to_char(V.MMSI) AND V.VESSEL_ID=VM.VESSEL_ID AND (v.is_delete <> '1' OR v.is_delete IS NULL) AND V.VESSEL_CODE NOT IN (SELECT VESSEL_CODE FROM TSA_VESSEL_EXCLUDE) AND NVL(VM.IS_DELETE,'0')<>'1' AND v.trade_type='0' AND v.mmsi IS NOT NULL AND NVL(V.TETIRED_FLAG,'0')='1' AND VM.MANAGEMENT_TYPE=1 AND ((sysdate >= VM.DEFINITION_DATE AND sysdate <= VM.END_DATE) OR (sysdate >= VM.DEFINITION_DATE AND VM.END_DATE IS NULL))) MM INNER JOIN SYS_OFFICE_RELATION_TREE SORT ON MM.OFFICE_CODE=SORT.CHILD_CODE AND sort.office_code=nvl(V_MANAGER,'ABC') WHERE (I_VESSEL_CODE IS NULL OR MM.VESSEL_CODE IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_VESSEL_CODE,','))))) LOOP FOR M IN (SELECT H.* FROM TSA_AREA H WHERE H.DATE_START <= SYSDATE AND AREA_NAME NOT IN ('其他海区','委内瑞拉监控区','马六甲海峡临时监控区') AND (I_AREA IS NULL OR AREA_ID IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_AREA,',')))) AND NVL(H.DATE_END, TO_DATE('2999-01-01','YYYY-MM-DD')) >= SYSDATE) LOOP IF FN_TSA_IS_IN_HD_AREA(X.LON, X.LAT, M.AREA_ID) THEN OBJ_TAB_TYPE.EXTEND; OBJ_TAB_TYPE(I) := OBJECTTABTYPE(X.VESSEL_CODE, X.VESSEL_NAME, X.VESSEL_SPEED, X.VESSEL_COURSE, X.SAILING_STATUS, X.VESSEL_ID, X.LON, X.LAT, X.ACTIVITY_DATE, M.AREA_NAME, X.MANAGER_NAME, X.ETA_PORT_NAME, X.ETA_TIME, X.VESSEL_MMSI); I := I + 1; END IF; END LOOP; END LOOP; select (select nvl(max(SORTCODE)+1,1) from TSA_VESSEL_IN_AREA) INTO V_SORTCODE from dual; OPEN OUT_CURSOR FOR SELECT * FROM (SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, AA.VESSEL_CODE \"VESSEL_CODE\", AA.VESSEL_NAME \"VESSEL_NAME\", AA.MANAGER_NAME \"MANAGER_NAME\", FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE(),1,0) AS MANAGER_CODE, FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE(),1,1) AS MANAGER_DEPT_CODE, FN_TSA_ALERT_IS_SEND(AA.VESSEL_CODE) AS IS_SEND, AA.MMSI \"MMSI\", AA.ACTIVITY_DATE \"ACTIVITY_DATE\", CASE WHEN AA.LONGTITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'E' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'W' END AS \"LONGTITUDE\", CASE WHEN AA.LATITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'N' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'S' END AS \"LATITUDE\", AA.VESSEL_SPPED \"VESSEL_SPPED\", AA.VESSEL_COURSE \"VESSEL_COURSE\", FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION) AS \"AVERAGE_SPPED\", CASE WHEN NVL(AA.SAILING_STATUS,'0')='1' THEN '在航' ELSE '非在航' END AS \"SAILING_STATUS\", AA.AREA_NAME \"AREA_NAME\", AA.ETA_PORT_NAME \"ETA_PORT_NAME\", AA.ETA_TIME \"ETA_TIME\", V_SORTCODE AS SORTCODE, 'AUTO' AS created_by_user, sysdate AS created_dtm_loc, 0 AS record_version, 0 AS principal_group_code FROM TABLE(OBJ_TAB_TYPE) AA WHERE FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION)<=TO_NUMBER(NVL(V_SOG,'10')) UNION ALL SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, 'RUN......' AS VESSEL_CODE, '仍在执行' AS VESSEL_NAME, '00000000' AS SAFETY_COMPANY, '080200000000' AS MANAGER_CODE, '00000000' AS MANAGER_DEPT_CODE, 99 AS IS_SEND, '00000000' AS MMSI, sysdate AS POSI_DATE, '' AS POSI_LONG, '' AS POSI_LAT, '' AS VESSEL_SPPED, '' AS VESSEL_COURSE, 0 AS AVERAGE_SPPED, '' AS SAILING_STATUS, '' AS AREA_NAME, '' AS ETA_PORT_NAME, '' AS ETA_TIME, V_SORTCODE AS SORTCODE, 'AUTO' AS created_by_user, sysdate AS created_dtm_loc, 0 AS record_version, 0 AS principal_group_code FROM dual); EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM); END SP_TSA_WARNING3; $$\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DELIMITER $$ CREATE OR REPLACE PROCEDURE SP_TSA_WARNING3(I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, I_DURATION IN VARCHAR2, I_SOG IN VARCHAR2, I_AREA IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR) IS OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); OFFICE_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); I NUMBER; LN NUMBER; V_MANAGER VARCHAR2(50); V_SOG VARCHAR2(50); V_DURATION VARCHAR2(50); V_SORTCODE NUMBER; BEGIN I:=1; LN:=1; IF NVL(I_MANAGER,'00000000')='00000000' THEN V_MANAGER:=NULL; ELSE V_MANAGER:=I_MANAGER; FOR LS IN (select OFFICE_CODE from sys_office where nvl(is_dept,1)=0 start with OFFICE_CODE=V_MANAGER connect by NOCYCLE supperior_office_CODE=prior office_CODE) LOOP OFFICE_TAB_TYPE.EXTEND; OFFICE_TAB_TYPE(LN) := OBJECTTABTYPE(LS.OFFICE_CODE,'','','','','','', '', NULL,'','','','',''); LN:=LN+1; END LOOP; END IF; select PARA_VALUE INTO V_SOG from TSA_MONITOR_CONF WHERE PARA_TYPE='MAXSPEED'; select PARA_VALUE INTO V_DURATION from TSA_MONITOR_CONF WHERE PARA_TYPE='MONITOR_DURATION'; FOR X IN (SELECT * FROM (SELECT VW.VESSEL_MMSI, V.VESSEL_ID, TO_DATE(SUBSTR(VW.VESSEL_POSIDATE,1,19),'YYYY-MM-DD HH24:MI:SS') AS ACTIVITY_DATE, VW.VESSEL_LAT AS LAT, VW.VESSEL_LON AS LON, V.VESSEL_CODE, V.VESSEL_NAME, VW.VESSEL_SPEED, CASE WHEN VW.VESSEL_STATE IN ('0','8') THEN '1' ELSE '0' END AS SAILING_STATUS, VM.MANAGER AS OFFICE_CODE, VM.manager_dept AS OFFICE_DEPT_CODE, (SELECT AA.OFFICE_NAME FROM SYS_OFFICE AA, VOP_VESSEL_MANAGEMENT BB WHERE AA.OFFICE_CODE=BB.MANAGER AND BB.VESSEL_ID=V.VESSEL_ID AND BB.MANAGEMENT_TYPE=1 AND ((sysdate >= BB.DEFINITION_DATE AND sysdate <= BB.END_DATE) OR (sysdate >= BB.DEFINITION_DATE AND BB.END_DATE IS NULL)) AND ROWNUM=1) AS manager_name, VW.VESSEL_ETA AS ETA_TIME, VW.VESSEL_DEST AS ETA_PORT_NAME, VW.VESSEL_COURSE FROM ZDWEB.VM_ZYHY2_ALLSHIPDYNAMIC@CSBC_TO_XE1 VW, VOP_VESSEL V, VOP_VESSEL_MANAGEMENT VM WHERE NVL(to_char(VW.VESSEL_MMSI),'无')=to_char(V.MMSI) AND V.VESSEL_ID=VM.VESSEL_ID AND (v.is_delete <> '1' OR v.is_delete IS NULL) AND V.VESSEL_CODE NOT IN (SELECT VESSEL_CODE FROM TSA_VESSEL_EXCLUDE) AND NVL(VM.IS_DELETE,'0')<>'1' AND v.trade_type='0' AND v.mmsi IS NOT NULL AND NVL(V.TETIRED_FLAG,'0')='1' AND VM.MANAGEMENT_TYPE=1 AND ((sysdate >= VM.DEFINITION_DATE AND sysdate <= VM.END_DATE) OR (sysdate >= VM.DEFINITION_DATE AND VM.END_DATE IS NULL))) MM INNER JOIN SYS_OFFICE_RELATION_TREE SORT ON MM.OFFICE_CODE=SORT.CHILD_CODE AND sort.office_code=nvl(V_MANAGER,'ABC') WHERE (I_VESSEL_CODE IS NULL OR MM.VESSEL_CODE IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_VESSEL_CODE,','))))) LOOP FOR M IN (SELECT H.* FROM TSA_AREA H WHERE H.DATE_START <= SYSDATE AND AREA_NAME NOT IN ('其他海区','委内瑞拉监控区','马六甲海峡临时监控区') AND (I_AREA IS NULL OR AREA_ID IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_AREA,',')))) AND NVL(H.DATE_END, TO_DATE('2999-01-01','YYYY-MM-DD')) >= SYSDATE) LOOP IF FN_TSA_IS_IN_HD_AREA(X.LON, X.LAT, M.AREA_ID) THEN OBJ_TAB_TYPE.EXTEND; OBJ_TAB_TYPE(I) := OBJECTTABTYPE(X.VESSEL_CODE, X.VESSEL_NAME, X.VESSEL_SPEED, X.VESSEL_COURSE, X.SAILING_STATUS, X.VESSEL_ID, X.LON, X.LAT, X.ACTIVITY_DATE, M.AREA_NAME, X.MANAGER_NAME, X.ETA_PORT_NAME, X.ETA_TIME, X.VESSEL_MMSI); I := I + 1; END IF; END LOOP; END LOOP; select (select nvl(max(SORTCODE)+1,1) from TSA_VESSEL_IN_AREA) INTO V_SORTCODE from dual; OPEN OUT_CURSOR FOR SELECT * FROM (SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, AA.VESSEL_CODE \"VESSEL_CODE\", AA.VESSEL_NAME \"VESSEL_NAME\", AA.MANAGER_NAME \"MANAGER_NAME\", FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE,1,0) AS MANAGER_CODE, FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE,1,1) AS MANAGER_DEPT_CODE, FN_TSA_ALERT_IS_SEND(AA.VESSEL_CODE) AS IS_SEND, AA.MMSI \"MMSI\", AA.ACTIVITY_DATE \"ACTIVITY_DATE\", CASE WHEN AA.LONGTITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'E' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'W' END AS \"LONGTITUDE\", CASE WHEN AA.LATITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'N' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'S' END AS \"LATITUDE\", AA.VESSEL_SPPED \"VESSEL_SPPED\", AA.VESSEL_COURSE \"VESSEL_COURSE\", FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION) AS \"AVERAGE_SPPED\", CASE WHEN NVL(AA.SAILING_STATUS,'0')='1' THEN '在航' ELSE '非在航' END AS \"SAILING_STATUS\", AA.AREA_NAME \"AREA_NAME\", AA.ETA_PORT_NAME \"ETA_PORT_NAME\", AA.ETA_TIME \"ETA_TIME\", V_SORTCODE AS SORTCODE, 'AUTO' AS created_by_user, sysdate AS created_dtm_loc, 0 AS record_version, 0 AS principal_group_code FROM TABLE(OBJ_TAB_TYPE) AA WHERE FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION)<=TO_NUMBER(NVL(V_SOG,'10')) UNION ALL SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, 'RUN......' AS VESSEL_CODE, '仍在执行' AS VESSEL_NAME, '00000000' AS SAFETY_COMPANY, '080200000000' AS MANAGER_CODE, '00000000' AS MANAGER_DEPT_CODE, 99 AS IS_SEND, '00000000' AS MMSI, sysdate AS POSI_DATE, '' AS POSI_LONG, '' AS POSI_LAT, '' AS VESSEL_SPPED, '' AS VESSEL_COURSE, 0 AS AVERAGE_SPPED, '' AS SAILING_STATUS, '' AS AREA_NAME, '' AS ETA_PORT_NAME, '' AS ETA_TIME, V_SORTCODE AS SORTCODE, 'AUTO' AS created_by_user, sysdate AS created_dtm_loc, 0 AS record_version, 0 AS principal_group_code FROM dual); EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM); END SP_TSA_WARNING3; $$"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "DELIMITER $$\nCREATE OR REPLACE PROCEDURE SP_TSA_WARNING3(I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, I_DURATION IN VARCHAR2, I_SOG IN VARCHAR2, I_AREA IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR) IS\n    OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();\n    OFFICE_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();\n    I NUMBER;\n    LN NUMBER;\n    V_MANAGER VARCHAR2(50);\n    V_SOG VARCHAR2(50);\n    V_DURATION VARCHAR2(50);\n    V_SORTCODE NUMBER;\nBEGIN\n    I := 1;\n    LN := 1;\n    IF NVL(I_MANAGER,'00000000') = '00000000' THEN\n        V_MANAGER := NULL;\n    ELSE\n        V_MANAGER := I_MANAGER;\n        FOR LS IN (\n            SELECT OFFICE_CODE\n            FROM sys_office\n            WHERE NVL(is_dept,1)=0\n            START WITH OFFICE_CODE = V_MANAGER\n            CONNECT BY NOCYCLE supperior_office_CODE = PRIOR office_CODE\n        ) LOOP\n            OFFICE_TAB_TYPE.EXTEND;\n            OFFICE_TAB_TYPE(LN) := OBJECTTABTYPE(LS.OFFICE_CODE,'','','','','','', '', NULL,'','','','','');\n            LN := LN + 1;\n        END LOOP;\n    END IF;\n    SELECT PARA_VALUE INTO V_SOG FROM TSA_MONITOR_CONF WHERE PARA_TYPE='MAXSPEED';\n    SELECT PARA_VALUE INTO V_DURATION FROM TSA_MONITOR_CONF WHERE PARA_TYPE='MONITOR_DURATION';\n    FOR X IN (\n        SELECT *\n        FROM (\n            SELECT\n                VW.VESSEL_MMSI,\n                V.VESSEL_ID,\n                TO_DATE(SUBSTR(VW.VESSEL_POSIDATE,1,19),'YYYY-MM-DD HH24:MI:SS') AS ACTIVITY_DATE,\n                VW.VESSEL_LAT AS LAT,\n                VW.VESSEL_LON AS LON,\n                V.VESSEL_CODE,\n                V.VESSEL_NAME,\n                VW.VESSEL_SPEED,\n                CASE WHEN VW.VESSEL_STATE IN ('0','8') THEN '1' ELSE '0' END AS SAILING_STATUS,\n                VM.MANAGER AS OFFICE_CODE,\n                VM.manager_dept AS OFFICE_DEPT_CODE,\n                (\n                    SELECT AA.OFFICE_NAME\n                    FROM SYS_OFFICE AA, VOP_VESSEL_MANAGEMENT BB\n                    WHERE AA.OFFICE_CODE = BB.MANAGER\n                      AND BB.VESSEL_ID = V.VESSEL_ID\n                      AND BB.MANAGEMENT_TYPE = 1\n                      AND ((SYSDATE >= BB.DEFINITION_DATE AND SYSDATE <= BB.END_DATE)\n                       OR (SYSDATE >= BB.DEFINITION_DATE AND BB.END_DATE IS NULL))\n                      AND ROWNUM = 1\n                ) AS manager_name,\n                VW.VESSEL_ETA AS ETA_TIME,\n                VW.VESSEL_DEST AS ETA_PORT_NAME,\n                VW.VESSEL_COURSE\n            FROM ZDWEB.VM_ZYHY2_ALLSHIPDYNAMIC@CSBC_TO_XE1 VW,\n                 VOP_VESSEL V,\n                 VOP_VESSEL_MANAGEMENT VM\n            WHERE NVL(TO_CHAR(VW.VESSEL_MMSI),'无') = TO_CHAR(V.MMSI)\n              AND V.VESSEL_ID = VM.VESSEL_ID\n              AND (V.IS_DELETE <> '1' OR V.IS_DELETE IS NULL)\n              AND V.VESSEL_CODE NOT IN (SELECT VESSEL_CODE FROM TSA_VESSEL_EXCLUDE)\n              AND NVL(VM.IS_DELETE,'0') <> '1'\n              AND V.TRADE_TYPE = '0'\n              AND V.MMSI IS NOT NULL\n              AND NVL(V.TETIRED_FLAG,'0') = '1'\n              AND VM.MANAGEMENT_TYPE = 1\n              AND ((SYSDATE >= VM.DEFINITION_DATE AND SYSDATE <= VM.END_DATE)\n               OR (SYSDATE >= VM.DEFINITION_DATE AND VM.END_DATE IS NULL))\n        ) MM\n        INNER JOIN SYS_OFFICE_RELATION_TREE SORT\n            ON MM.OFFICE_CODE = SORT.CHILD_CODE\n           AND SORT.OFFICE_CODE = NVL(V_MANAGER,'ABC')\n        WHERE (I_VESSEL_CODE IS NULL\n               OR MM.VESSEL_CODE IN (\n                   SELECT COLUMN_VALUE\n                   FROM TABLE(FN_STR2TYTABLE(I_VESSEL_CODE,','))\n               )\n        )\n    ) LOOP\n        FOR M IN (\n            SELECT H.*\n            FROM TSA_AREA H\n            WHERE H.DATE_START <= SYSDATE\n              AND AREA_NAME NOT IN ('其他海区','委内瑞拉监控区','马六甲海峡临时监控区')\n              AND (I_AREA IS NULL\n                   OR AREA_ID IN (\n                       SELECT COLUMN_VALUE\n                       FROM TABLE(FN_STR2TYTABLE(I_AREA,','))\n                   )\n              )\n              AND NVL(H.DATE_END, TO_DATE('2999-01-01','YYYY-MM-DD')) >= SYSDATE\n        ) LOOP\n            IF FN_TSA_IS_IN_HD_AREA(X.LON, X.LAT, M.AREA_ID) THEN\n                OBJ_TAB_TYPE.EXTEND;\n                OBJ_TAB_TYPE(I) := OBJECTTABTYPE(\n                    X.VESSEL_CODE,\n                    X.VESSEL_NAME,\n                    X.VESSEL_SPEED,\n                    X.VESSEL_COURSE,\n                    X.SAILING_STATUS,\n                    X.VESSEL_ID,\n                    X.LON,\n                    X.LAT,\n                    X.ACTIVITY_DATE,\n                    M.AREA_NAME,\n                    X.MANAGER_NAME,\n                    X.ETA_PORT_NAME,\n                    X.ETA_TIME,\n                    X.VESSEL_MMSI\n                );\n                I := I + 1;\n            END IF;\n        END LOOP;\n    END LOOP;\n    SELECT (SELECT NVL(MAX(SORTCODE)+1,1) FROM TSA_VESSEL_IN_AREA) INTO V_SORTCODE FROM DUAL;\n    OPEN OUT_CURSOR FOR\n    SELECT *\n    FROM (\n        SELECT\n            SYS_GUID() AS VESSEL_IN_AREA_ID,\n            AA.VESSEL_CODE \"VESSEL_CODE\",\n            AA.VESSEL_NAME \"VESSEL_NAME\",\n            AA.MANAGER_NAME \"MANAGER_NAME\",\n            FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE,1,0) AS MANAGER_CODE,\n            FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE,1,1) AS MANAGER_DEPT_CODE,\n            FN_TSA_ALERT_IS_SEND(AA.VESSEL_CODE) AS IS_SEND,\n            AA.MMSI \"MMSI\",\n            AA.ACTIVITY_DATE \"ACTIVITY_DATE\",\n            CASE\n                WHEN AA.LONGTITUDE > 0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')\n                     || LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')\n                     || 'E'\n                ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')\n                     || LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')\n                     || 'W'\n            END AS \"LONGTITUDE\",\n            CASE\n                WHEN AA.LATITUDE > 0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')\n                     || LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')\n                     || 'N'\n                ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')\n                     || LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')\n                     || 'S'\n            END AS \"LATITUDE\",\n            AA.VESSEL_SPPED \"VESSEL_SPPED\",\n            AA.VESSEL_COURSE \"VESSEL_COURSE\",\n            FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION) AS \"AVERAGE_SPPED\",\n            CASE WHEN NVL(AA.SAILING_STATUS,'0')='1' THEN '在航' ELSE '非在航' END AS \"SAILING_STATUS\",\n            AA.AREA_NAME \"AREA_NAME\",\n            AA.ETA_PORT_NAME \"ETA_PORT_NAME\",\n            AA.ETA_TIME \"ETA_TIME\",\n            V_SORTCODE AS SORTCODE,\n            'AUTO' AS created_by_user,\n            SYSDATE AS created_dtm_loc,\n            0 AS record_version,\n            0 AS principal_group_code\n        FROM TABLE(OBJ_TAB_TYPE) AA\n        WHERE FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION) <= TO_NUMBER(NVL(V_SOG,'10'))\n        UNION ALL\n        SELECT\n            SYS_GUID() AS VESSEL_IN_AREA_ID,\n            'RUN......' AS VESSEL_CODE,\n            '仍在执行' AS VESSEL_NAME,\n            '00000000' AS SAFETY_COMPANY,\n            '080200000000' AS MANAGER_CODE,\n            '00000000' AS MANAGER_DEPT_CODE,\n            99 AS IS_SEND,\n            '00000000' AS MMSI,\n            SYSDATE AS POSI_DATE,\n            '' AS POSI_LONG,\n            '' AS POSI_LAT,\n            '' AS VESSEL_SPPED,\n            '' AS VESSEL_COURSE,\n            0 AS AVERAGE_SPPED,\n            '' AS SAILING_STATUS,\n            '' AS AREA_NAME,\n            '' AS ETA_PORT_NAME,\n            '' AS ETA_TIME,\n            V_SORTCODE AS SORTCODE,\n            'AUTO' AS created_by_user,\n            SYSDATE AS created_dtm_loc,\n            0 AS record_version,\n            0 AS principal_group_code\n        FROM dual\n    );\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM);\nEND SP_TSA_WARNING3;\n$$"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "DELIMITER $$\nCREATE OR REPLACE PROCEDURE SP_TSA_WARNING3(I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, I_DURATION IN VARCHAR2, I_SOG IN VARCHAR2, I_AREA IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR) IS\n    OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();\n    OFFICE_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();\n    I NUMBER;\n    LN NUMBER;\n    V_MANAGER VARCHAR2(50);\n    V_SOG VARCHAR2(50);\n    V_DURATION VARCHAR2(50);\n    V_SORTCODE NUMBER;\nBEGIN\n    I:=1;\n    LN:=1;\n    IF NVL(I_MANAGER,'00000000')='00000000' THEN\n        V_MANAGER:=NULL;\n    ELSE\n        V_MANAGER:=I_MANAGER;\n        FOR LS IN (\n            select OFFICE_CODE from sys_office where nvl(is_dept,1)=0\n            start with OFFICE_CODE=V_MANAGER connect by NOCYCLE supperior_office_CODE=prior office_CODE\n        ) LOOP\n            OFFICE_TAB_TYPE.EXTEND;\n            OFFICE_TAB_TYPE(LN) := OBJECTTABTYPE(LS.OFFICE_CODE,'','','','','','', '', NULL,'','','','','');\n            LN:=LN+1;\n        END LOOP;\n    END IF;\n    select PARA_VALUE INTO V_SOG from TSA_MONITOR_CONF WHERE PARA_TYPE='MAXSPEED';\n    select PARA_VALUE INTO V_DURATION from TSA_MONITOR_CONF WHERE PARA_TYPE='MONITOR_DURATION';\n    FOR X IN (\n        SELECT * FROM (\n            SELECT VW.VESSEL_MMSI,\n                   V.VESSEL_ID,\n                   TO_DATE(SUBSTR(VW.VESSEL_POSIDATE,1,19),'YYYY-MM-DD HH24:MI:SS') AS ACTIVITY_DATE,\n                   VW.VESSEL_LAT AS LAT,\n                   VW.VESSEL_LON AS LON,\n                   V.VESSEL_CODE,\n                   V.VESSEL_NAME,\n                   VW.VESSEL_SPEED,\n                   CASE WHEN VW.VESSEL_STATE IN ('0','8') THEN '1' ELSE '0' END AS SAILING_STATUS,\n                   VM.MANAGER AS OFFICE_CODE,\n                   VM.manager_dept AS OFFICE_DEPT_CODE,\n                   (SELECT AA.OFFICE_NAME\n                      FROM SYS_OFFICE AA,\n                           VOP_VESSEL_MANAGEMENT BB\n                     WHERE AA.OFFICE_CODE=BB.MANAGER\n                       AND BB.VESSEL_ID=V.VESSEL_ID\n                       AND BB.MANAGEMENT_TYPE=1\n                       AND ((sysdate >= BB.DEFINITION_DATE AND sysdate <= BB.END_DATE)\n                            OR (sysdate >= BB.DEFINITION_DATE AND BB.END_DATE IS NULL))\n                       AND ROWNUM=1\n                   ) AS manager_name,\n                   VW.VESSEL_ETA AS ETA_TIME,\n                   VW.VESSEL_DEST AS ETA_PORT_NAME,\n                   VW.VESSEL_COURSE\n            FROM ZDWEB.VM_ZYHY2_ALLSHIPDYNAMIC@CSBC_TO_XE1 VW,\n                 VOP_VESSEL V,\n                 VOP_VESSEL_MANAGEMENT VM\n            WHERE NVL(to_char(VW.VESSEL_MMSI),'无')=to_char(V.MMSI)\n              AND V.VESSEL_ID=VM.VESSEL_ID\n              AND (v.is_delete <> '1' OR v.is_delete IS NULL)\n              AND V.VESSEL_CODE NOT IN (SELECT VESSEL_CODE FROM TSA_VESSEL_EXCLUDE)\n              AND NVL(VM.IS_DELETE,'0')<>'1'\n              AND v.trade_type='0'\n              AND v.mmsi IS NOT NULL\n              AND NVL(V.TETIRED_FLAG,'0')='1'\n              AND VM.MANAGEMENT_TYPE=1\n              AND ((sysdate >= VM.DEFINITION_DATE AND sysdate <= VM.END_DATE)\n                   OR (sysdate >= VM.DEFINITION_DATE AND VM.END_DATE IS NULL))\n        ) MM\n        INNER JOIN SYS_OFFICE_RELATION_TREE SORT\n            ON MM.OFFICE_CODE=SORT.CHILD_CODE\n           AND sort.office_code=nvl(V_MANAGER,'ABC')\n        WHERE (I_VESSEL_CODE IS NULL\n               OR MM.VESSEL_CODE IN (\n                   SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_VESSEL_CODE,','))\n               )\n        )\n    ) LOOP\n        FOR M IN (\n            SELECT H.* FROM TSA_AREA H\n             WHERE H.DATE_START <= SYSDATE\n               AND AREA_NAME NOT IN ('其他海区','委内瑞拉监控区','马六甲海峡临时监控区')\n               AND (I_AREA IS NULL OR AREA_ID IN (\n                   SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_AREA,','))\n               ))\n               AND NVL(H.DATE_END, TO_DATE('2999-01-01','YYYY-MM-DD')) >= SYSDATE\n        ) LOOP\n            IF FN_TSA_IS_IN_HD_AREA(X.LON, X.LAT, M.AREA_ID) THEN\n                OBJ_TAB_TYPE.EXTEND;\n                OBJ_TAB_TYPE(I) := OBJECTTABTYPE(X.VESSEL_CODE, X.VESSEL_NAME, X.VESSEL_SPEED, X.VESSEL_COURSE, X.SAILING_STATUS, X.VESSEL_ID, X.LON, X.LAT, X.ACTIVITY_DATE, M.AREA_NAME, X.MANAGER_NAME, X.ETA_PORT_NAME, X.ETA_TIME, X.VESSEL_MMSI);\n                I := I + 1;\n            END IF;\n        END LOOP;\n    END LOOP;\n    select (select nvl(max(SORTCODE)+1,1) from TSA_VESSEL_IN_AREA) INTO V_SORTCODE from dual;\n    OPEN OUT_CURSOR FOR\n    SELECT * FROM (\n        SELECT SYS_GUID() AS VESSEL_IN_AREA_ID,\n               AA.VESSEL_CODE \"VESSEL_CODE\",\n               AA.VESSEL_NAME \"VESSEL_NAME\",\n               AA.MANAGER_NAME \"MANAGER_NAME\",\n               FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE(),1,0) AS MANAGER_CODE,\n               FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE(),1,1) AS MANAGER_DEPT_CODE,\n               FN_TSA_ALERT_IS_SEND(AA.VESSEL_CODE) AS IS_SEND,\n               AA.MMSI \"MMSI\",\n               AA.ACTIVITY_DATE \"ACTIVITY_DATE\",\n               CASE WHEN AA.LONGTITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'E' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'W' END AS \"LONGTITUDE\",\n               CASE WHEN AA.LATITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'N' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'S' END AS \"LATITUDE\",\n               AA.VESSEL_SPPED \"VESSEL_SPPED\",\n               AA.VESSEL_COURSE \"VESSEL_COURSE\",\n               FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION) AS \"AVERAGE_SPPED\",\n               CASE WHEN NVL(AA.SAILING_STATUS,'0')='1' THEN '在航' ELSE '非在航' END AS \"SAILING_STATUS\",\n               AA.AREA_NAME \"AREA_NAME\",\n               AA.ETA_PORT_NAME \"ETA_PORT_NAME\",\n               AA.ETA_TIME \"ETA_TIME\",\n               V_SORTCODE AS SORTCODE,\n               'AUTO' AS created_by_user,\n               sysdate AS created_dtm_loc,\n               0 AS record_version,\n               0 AS principal_group_code\n        FROM TABLE(OBJ_TAB_TYPE) AA\n        WHERE FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION)<=TO_NUMBER(NVL(V_SOG,'10'))\n        UNION ALL\n        SELECT SYS_GUID() AS VESSEL_IN_AREA_ID,\n               'RUN......' AS VESSEL_CODE,\n               '仍在执行' AS VESSEL_NAME,\n               '00000000' AS SAFETY_COMPANY,\n               '080200000000' AS MANAGER_CODE,\n               '00000000' AS MANAGER_DEPT_CODE,\n               99 AS IS_SEND,\n               '00000000' AS MMSI,\n               sysdate AS POSI_DATE,\n               '' AS POSI_LONG,\n               '' AS POSI_LAT,\n               '' AS VESSEL_SPPED,\n               '' AS VESSEL_COURSE,\n               0 AS AVERAGE_SPPED,\n               '' AS SAILING_STATUS,\n               '' AS AREA_NAME,\n               '' AS ETA_PORT_NAME,\n               '' AS ETA_TIME,\n               V_SORTCODE AS SORTCODE,\n               'AUTO' AS created_by_user,\n               sysdate AS created_dtm_loc,\n               0 AS record_version,\n               0 AS principal_group_code\n        FROM dual\n    );\nEXCEPTION\nWHEN OTHERS THEN\n    DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM);\nEND SP_TSA_WARNING3;\n$$"
                    }
                ]
            },
            {
                "case_id": "5",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"5\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"SYSDATE\", \"NVL\", \"SUBSTR\", \"REPLACE\", \"LENGTH\", \"CASE\", \"ROW_NUMBER\", \"OVER\", \"PARTITION BY\", \"ROUND\", \"TRIM\", \"EXISTS\", \"EXECUTE IMMEDIATE\", \"COMMIT\", \"TRUNCATE TABLE\", \"SQLCODE\", \"SQLERRM\", \"ROWNUM\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE \\\"SP_FEE_CSC_DAILY_JOB\\\" /* -------------------------------------------------------------------- PROCEDURE: SP_FEE_CSC_DAILY_JOB Description: 能源每日定时任务 AUTHOR: liul(liul@cnshipping.com) 2015-09-09 9:31:00 ---------------------------------------------------------------------- */ IS V_FLAG varchar2(50); BEGIN select open_mode into V_FLAG from v$database; if V_FLAG = 'READ WRITE' then P_LOG_EXCEPTION('开始时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远业务口径船舶信息*/ /*delete from FMM_CSCL_BUSI_CALIBER where 1=1;*/ EXECUTE IMMEDIATE 'truncate table FMM_CSCL_BUSI_CALIBER'; insert into FMM_CSCL_BUSI_CALIBER select * from VOP_VESSEL_CSCL_BUSI_CALIBER; commit; P_LOG_EXCEPTION('FMM_CSCL_BUSI_CALIBER完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远预估费用*/ /*delete from fmm_csc_maintenance_esti;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_esti'; insert into fmm_csc_maintenance_esti select * from vw_csc_maintenance_esti; commit; P_LOG_EXCEPTION('fmm_csc_maintenance_esti 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新所有订单预估费用*/ /*delete from fmm_csc_maintenance_orders;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_orders'; insert into fmm_csc_maintenance_orders select * from VW_CSC_MAINTENANCE_ORDERS; commit; P_LOG_EXCEPTION('fmm_csc_maintenance_orders 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远账单费用*/ /*delete from fmm_csc_maintenance_invoice;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_invoice'; insert into fmm_csc_maintenance_invoice select * from vw_csc_maintenance_invoice; commit; INSERT INTO fmm_csc_maintenance_invoice SELECT TEMP.VESSEL_CODE, TEMP.SUPPLIER_CODE, TEMP.PAYER, NULL AS PORT_CODE, TEMP.INVOICE_STATUS, TEMP.INVOICE_SORT, TEMP.ORDER_NO, TEMP.PAYMENT_NO, TEMP.INVOICE_SORT_DETAIL, TEMP.INVOICE_DETAIL_ID, TEMP.BASE_AMOUNT_NOTAX, TEMP.INVOICE_DATE, TEMP.CURRENCY, TEMP.DTL_AMOUNT_NOTAX, TEMP.INVOICE_NUM, TEMP.PAYEE, TEMP.ACTIVITY_DATE, TEMP.FI_RECEIVEDATE, TEMP.INPUT_DATE, TEMP.UPDATE_TIME, TEMP.BASE_AMOUNT, TEMP.AMOUNT, 0 AS MISC_AMOUNT,/*运杂费*/ 0 AS BASE_MISC_AMOUNT, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'VEL_MANAGE_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'VEL_MANAGE_BODY') ) AS COMPANY_CODE, TEMP.SEND_FIN_DATE, TEMP.APPLY_TYPE, '2' AS BUSI_TYPE, TEMP.IS_ENERGY, TEMP.TYPE_NAME, TEMP.ORDER_CURRENCY, TEMP.EXCHANGE_RATE, NULL AS BILL_NO, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'COST_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'COST_BODY') ) AS OWNERSHIP_BODY, TEMP.OPRT_WAY, TEMP.USD_AMOUNT FROM (select /*已开票但未支付状态的费用明细*/ I.VESSEL_CODE, /*船舶*/ substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) AS ORDER_NO, /*定单号*/ BFM.CONFIRM_DATE AS ORDER_DATE, T.DISPLAY_VALUE_CN AS TYPE_NAME, /*定单种类*/ BFM.CURRENCY AS ORDER_CURRENCY, /*定单币种*/ BFM.AMOUNT AS TOTAL_FEE, /*定单金额*/ NVL(BFM.SUPPLIER,I.PAYEE) AS SUPPLIER_CODE, 'HY' AS APPLY_TYPE, I.PAYER, I.INVOICE_STATUS, 'FY33' AS INVOICE_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'FY33002' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'FY33003' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'FY33004' WHEN I.INVOICE_SORT_DETAIL = 'FY03004' THEN 'FY33005' WHEN I.INVOICE_SORT_DETAIL in ('FY03005', 'FY03006', 'FY03007') THEN 'FY33006' ELSE 'FY33006' END) AS INVOICE_SORT_DETAIL, 'RLF' AS GROUP_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'YZ30003' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'YZ30001' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'YZ30002' WHEN I.INVOICE_SORT_DETAIL in ('FY03004','FY03005', 'FY03006', 'FY03007') THEN 'YZ30004' ELSE 'YZ30004' END) AS GROUP_SORT_DETAIL, I.INVOICE_DETAIL_ID, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) / (1 + NVL(I.TAX_RATE,0)) AS BASE_AMOUNT_notax, I.INVOICE_DATE, I.CURRENCY, I.DTL_AMOUNT / (1 + I.TAX_RATE) AS DTL_AMOUNT_notax, I.INVOICE_NUM, I.PAYEE, /*(CASE WHEN I.COMPANY_CODE IN ('08010000', '66190000') THEN NVL(NVL(M.CREATED_DTM_LOC, BOS.ACTIVITY_DATE), I.SEND_FIN_DATE) ELSE BOS.ACTIVITY_DATE END) AS ACTIVITY_DATE,*/ (CASE WHEN I.COMPANY_CODE IN ('08020000','04000000','02000000','62000000') THEN I.CREATED_DTM_LOC WHEN I.PAYER LIKE '64%' THEN I.CREATED_DTM_LOC ELSE BFM.SUPPLY_DATE END) AS ACTIVITY_DATE, I.SEND_FIN_DATE AS FI_RECEIVEDATE, NULL AS IS_ENERGY, I.CREATED_DTM_LOC AS INPUT_DATE, NVL(NVL(I.UPDATED_DTM_LOC, I.CREATED_DTM_LOC), SYSDATE - 1) AS UPDATE_TIME, '3' as rpt_type, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) AS BASE_AMOUNT, I.DTL_AMOUNT AS AMOUNT, I.COMPANY_CODE, NVL(I.SEND_FIN_DATE, I.INVOICE_DATE) AS SEND_FIN_DATE, row_number() over(partition by I.INVOICE_DETAIL_ID order by BFM.SUPPLY_DATE desc) rn, I.PAYMENT_NO, I.RMB_EXCHANGE_RATE AS EXCHANGE_RATE, '1' AS OPRT_WAY, ROUND(I.DTL_AMOUNT*fn_get_exchange_rate(I.CURRENCY,'USD',BFM.SUPPLY_DATE),2) AS USD_AMOUNT FROM bfm_invoice_detail I LEFT JOIN BFM_PURCHASE_ORDER BFM ON substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) = BFM.PO_NUMBER LEFT JOIN BFM_OIL_STORAGE BOS ON BOS.operate = '10' AND substr(BOS.PO_NUMBER,1,replace(instr(BOS.PO_NUMBER,'-',-1)-1,-1,length(BOS.PO_NUMBER))) = BFM.PO_NUMBER AND BOS.oil_type = '002' LEFT JOIN CDM_CODEDICT T ON T.code_type = 'BFM_FILL_TYPE' AND BFM.FILL_OIL_TYPE = T.CODE_VALUE LEFT JOIN SAP_JA0012_MTR_MIDDLE M ON BOS.PO_NUMBER = M.TRD_ORDER WHERE I.INVOICE_SORT = 'FY03' AND NVL(I.IS_DELETE,'0')<>'1' AND I.PAYER LIKE '64%' ) TEMP WHERE RN = 1; P_LOG_EXCEPTION('fmm_csc_maintenance_invoice 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*根据主数据更新备件信息表是否库存标记*/ update sps_parts_info sp set sp.if_storaged = null where EXISTS(select trim(group_code) from SPS_PARTS_MASTER_DATA t where t.if_storaged is null AND trim(T.group_code)=SP.GROUP_CODE) AND (SP.VESSEL_CODE LIKE 'S%' OR SP.VESSEL_CODE LIKE 'E%'); /*更新上远虚拟预算数据*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_virtual_budget'; insert into fmm_csc_virtual_budget select * from vw_csc_virtual_budget; commit; P_LOG_EXCEPTION('fmm_csc_virtual_budget 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新集运备件申领设备ID为空的记录*/ update SPS_APPLY_main sam set (sam.equipment_info_id, sam.equipment_code) = (select sad.equipment_id, sad.equip_code from sps_apply_detail sad where sad.apply_main_id = SAM.APPLY_MAIN_ID and rownum = 1) where sam.apply_main_id IN (select SAM.apply_main_id from SPS_APPLY_main SAM where SAM.EQUIPMENT_INFO_ID is null and SAM.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0')); /*更新集运备件询价设备ID为空的记录*/ update SPS_ENQUIRE_MAIN SS set (SS.EQUIPMENT_INFO_ID, SS.EQUIPMENT_CODE) = (select SED.equipment_id, SED.EQUIP_CODE from SPS_ENQUIRE_DETAIL SED where SED.ENQUIRE_MAIN_ID = SS.ENQUIRE_MAIN_ID and rownum = 1) where SS.ENQUIRE_MAIN_ID IN (select SEM.ENQUIRE_MAIN_ID from sps_enquire_main sem where sem.equipment_info_id is null and sem.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0')); commit; P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); commit; END IF; END SP_FEE_CSC_DAILY_JOB; $$\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE \"SP_FEE_CSC_DAILY_JOB\" /* -------------------------------------------------------------------- PROCEDURE: SP_FEE_CSC_DAILY_JOB Description: 能源每日定时任务 AUTHOR: liul(liul@cnshipping.com) 2015-09-09 9:31:00 ---------------------------------------------------------------------- */ IS V_FLAG varchar2(50); BEGIN select open_mode into V_FLAG from v$database; if V_FLAG = 'READ WRITE' then P_LOG_EXCEPTION('开始时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远业务口径船舶信息*/ /*delete from FMM_CSCL_BUSI_CALIBER where 1=1;*/ EXECUTE IMMEDIATE 'truncate table FMM_CSCL_BUSI_CALIBER'; insert into FMM_CSCL_BUSI_CALIBER select * from VOP_VESSEL_CSCL_BUSI_CALIBER; commit; P_LOG_EXCEPTION('FMM_CSCL_BUSI_CALIBER完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远预估费用*/ /*delete from fmm_csc_maintenance_esti;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_esti'; insert into fmm_csc_maintenance_esti select * from vw_csc_maintenance_esti; commit; P_LOG_EXCEPTION('fmm_csc_maintenance_esti 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新所有订单预估费用*/ /*delete from fmm_csc_maintenance_orders;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_orders'; insert into fmm_csc_maintenance_orders select * from VW_CSC_MAINTENANCE_ORDERS; commit; P_LOG_EXCEPTION('fmm_csc_maintenance_orders 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远账单费用*/ /*delete from fmm_csc_maintenance_invoice;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_invoice'; insert into fmm_csc_maintenance_invoice select * from vw_csc_maintenance_invoice; commit; INSERT INTO fmm_csc_maintenance_invoice SELECT TEMP.VESSEL_CODE, TEMP.SUPPLIER_CODE, TEMP.PAYER, NULL AS PORT_CODE, TEMP.INVOICE_STATUS, TEMP.INVOICE_SORT, TEMP.ORDER_NO, TEMP.PAYMENT_NO, TEMP.INVOICE_SORT_DETAIL, TEMP.INVOICE_DETAIL_ID, TEMP.BASE_AMOUNT_NOTAX, TEMP.INVOICE_DATE, TEMP.CURRENCY, TEMP.DTL_AMOUNT_NOTAX, TEMP.INVOICE_NUM, TEMP.PAYEE, TEMP.ACTIVITY_DATE, TEMP.FI_RECEIVEDATE, TEMP.INPUT_DATE, TEMP.UPDATE_TIME, TEMP.BASE_AMOUNT, TEMP.AMOUNT, 0 AS MISC_AMOUNT,/*运杂费*/ 0 AS BASE_MISC_AMOUNT, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'VEL_MANAGE_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'VEL_MANAGE_BODY') ) AS COMPANY_CODE, TEMP.SEND_FIN_DATE, TEMP.APPLY_TYPE, '2' AS BUSI_TYPE, TEMP.IS_ENERGY, TEMP.TYPE_NAME, TEMP.ORDER_CURRENCY, TEMP.EXCHANGE_RATE, NULL AS BILL_NO, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'COST_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'COST_BODY') ) AS OWNERSHIP_BODY, TEMP.OPRT_WAY, TEMP.USD_AMOUNT FROM (select /*已开票但未支付状态的费用明细*/ I.VESSEL_CODE, /*船舶*/ substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) AS ORDER_NO, /*定单号*/ BFM.CONFIRM_DATE AS ORDER_DATE, T.DISPLAY_VALUE_CN AS TYPE_NAME, /*定单种类*/ BFM.CURRENCY AS ORDER_CURRENCY, /*定单币种*/ BFM.AMOUNT AS TOTAL_FEE, /*定单金额*/ NVL(BFM.SUPPLIER,I.PAYEE) AS SUPPLIER_CODE, 'HY' AS APPLY_TYPE, I.PAYER, I.INVOICE_STATUS, 'FY33' AS INVOICE_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'FY33002' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'FY33003' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'FY33004' WHEN I.INVOICE_SORT_DETAIL = 'FY03004' THEN 'FY33005' WHEN I.INVOICE_SORT_DETAIL in ('FY03005', 'FY03006', 'FY03007') THEN 'FY33006' ELSE 'FY33006' END) AS INVOICE_SORT_DETAIL, 'RLF' AS GROUP_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'YZ30003' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'YZ30001' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'YZ30002' WHEN I.INVOICE_SORT_DETAIL in ('FY03004','FY03005', 'FY03006', 'FY03007') THEN 'YZ30004' ELSE 'YZ30004' END) AS GROUP_SORT_DETAIL, I.INVOICE_DETAIL_ID, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) / (1 + NVL(I.TAX_RATE,0)) AS BASE_AMOUNT_notax, I.INVOICE_DATE, I.CURRENCY, I.DTL_AMOUNT / (1 + I.TAX_RATE) AS DTL_AMOUNT_notax, I.INVOICE_NUM, I.PAYEE, /*(CASE WHEN I.COMPANY_CODE IN ('08010000', '66190000') THEN NVL(NVL(M.CREATED_DTM_LOC, BOS.ACTIVITY_DATE), I.SEND_FIN_DATE) ELSE BOS.ACTIVITY_DATE END) AS ACTIVITY_DATE,*/ (CASE WHEN I.COMPANY_CODE IN ('08020000','04000000','02000000','62000000') THEN I.CREATED_DTM_LOC WHEN I.PAYER LIKE '64%' THEN I.CREATED_DTM_LOC ELSE BFM.SUPPLY_DATE END) AS ACTIVITY_DATE, I.SEND_FIN_DATE AS FI_RECEIVEDATE, NULL AS IS_ENERGY, I.CREATED_DTM_LOC AS INPUT_DATE, NVL(NVL(I.UPDATED_DTM_LOC, I.CREATED_DTM_LOC), SYSDATE - 1) AS UPDATE_TIME, '3' as rpt_type, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) AS BASE_AMOUNT, I.DTL_AMOUNT AS AMOUNT, I.COMPANY_CODE, NVL(I.SEND_FIN_DATE, I.INVOICE_DATE) AS SEND_FIN_DATE, row_number() over(partition by I.INVOICE_DETAIL_ID order by BFM.SUPPLY_DATE desc) rn, I.PAYMENT_NO, I.RMB_EXCHANGE_RATE AS EXCHANGE_RATE, '1' AS OPRT_WAY, ROUND(I.DTL_AMOUNT*fn_get_exchange_rate(I.CURRENCY,'USD',BFM.SUPPLY_DATE),2) AS USD_AMOUNT FROM bfm_invoice_detail I LEFT JOIN BFM_PURCHASE_ORDER BFM ON substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) = BFM.PO_NUMBER LEFT JOIN BFM_OIL_STORAGE BOS ON BOS.operate = '10' AND substr(BOS.PO_NUMBER,1,replace(instr(BOS.PO_NUMBER,'-',-1)-1,-1,length(BOS.PO_NUMBER))) = BFM.PO_NUMBER AND BOS.oil_type = '002' LEFT JOIN CDM_CODEDICT T ON T.code_type = 'BFM_FILL_TYPE' AND BFM.FILL_OIL_TYPE = T.CODE_VALUE LEFT JOIN SAP_JA0012_MTR_MIDDLE M ON BOS.PO_NUMBER = M.TRD_ORDER WHERE I.INVOICE_SORT = 'FY03' AND NVL(I.IS_DELETE,'0')<>'1' AND I.PAYER LIKE '64%' ) TEMP WHERE RN = 1; P_LOG_EXCEPTION('fmm_csc_maintenance_invoice 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*根据主数据更新备件信息表是否库存标记*/ update sps_parts_info sp set sp.if_storaged = null where EXISTS(select trim(group_code) from SPS_PARTS_MASTER_DATA t where t.if_storaged is null AND trim(T.group_code)=SP.GROUP_CODE) AND (SP.VESSEL_CODE LIKE 'S%' OR SP.VESSEL_CODE LIKE 'E%'); /*更新上远虚拟预算数据*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_virtual_budget'; insert into fmm_csc_virtual_budget select * from vw_csc_virtual_budget; commit; P_LOG_EXCEPTION('fmm_csc_virtual_budget 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新集运备件申领设备ID为空的记录*/ update SPS_APPLY_main sam set (sam.equipment_info_id, sam.equipment_code) = (select sad.equipment_id, sad.equip_code from sps_apply_detail sad where sad.apply_main_id = SAM.APPLY_MAIN_ID and rownum = 1) where sam.apply_main_id IN (select SAM.apply_main_id from SPS_APPLY_main SAM where SAM.EQUIPMENT_INFO_ID is null and SAM.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0')); /*更新集运备件询价设备ID为空的记录*/ update SPS_ENQUIRE_MAIN SS set (SS.EQUIPMENT_INFO_ID, SS.EQUIPMENT_CODE) = (select SED.equipment_id, SED.EQUIP_CODE from SPS_ENQUIRE_DETAIL SED where SED.ENQUIRE_MAIN_ID = SS.ENQUIRE_MAIN_ID and rownum = 1) where SS.ENQUIRE_MAIN_ID IN (select SEM.ENQUIRE_MAIN_ID from sps_enquire_main sem where sem.equipment_info_id is null and sem.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0')); commit; P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); commit; END IF; END SP_FEE_CSC_DAILY_JOB; $$\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DELIMITER $$\nCREATE OR REPLACE PROCEDURE \"SP_FEE_CSC_DAILY_JOB\" /* -------------------------------------------------------------------- PROCEDURE: SP_FEE_CSC_DAILY_JOB Description: 能源每日定时任务 AUTHOR: liul(liul@cnshipping.com) 2015-09-09 9:31:00 ---------------------------------------------------------------------- */ IS\n V_FLAG varchar2(50);\nBEGIN\n select VALUE into V_FLAG from SYS.TENANT_VIRTUAL_GLOBAL_VARIABLE where VARIABLE_NAME = 'read_only';\n if V_FLAG = 'OFF' then\n P_LOG_EXCEPTION('开始时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n /*更新上远业务口径船舶信息*/\n /*delete from FMM_CSCL_BUSI_CALIBER where 1=1;*/\n EXECUTE IMMEDIATE 'truncate table FMM_CSCL_BUSI_CALIBER';\n insert into FMM_CSCL_BUSI_CALIBER select * from VOP_VESSEL_CSCL_BUSI_CALIBER;\n commit;\n P_LOG_EXCEPTION('FMM_CSCL_BUSI_CALIBER完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n /*更新上远预估费用*/\n /*delete from fmm_csc_maintenance_esti;*/\n EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_esti';\n insert into fmm_csc_maintenance_esti select * from vw_csc_maintenance_esti;\n commit;\n P_LOG_EXCEPTION('fmm_csc_maintenance_esti 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n /*更新所有订单预估费用*/\n /*delete from fmm_csc_maintenance_orders;*/\n EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_orders';\n insert into fmm_csc_maintenance_orders select * from VW_CSC_MAINTENANCE_ORDERS;\n commit;\n P_LOG_EXCEPTION('fmm_csc_maintenance_orders 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n /*更新上远账单费用*/\n /*delete from fmm_csc_maintenance_invoice;*/\n EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_invoice';\n insert into fmm_csc_maintenance_invoice select * from vw_csc_maintenance_invoice;\n commit;\n INSERT INTO fmm_csc_maintenance_invoice\n SELECT TEMP.VESSEL_CODE, TEMP.SUPPLIER_CODE, TEMP.PAYER, NULL AS PORT_CODE, TEMP.INVOICE_STATUS, TEMP.INVOICE_SORT, TEMP.ORDER_NO, TEMP.PAYMENT_NO, TEMP.INVOICE_SORT_DETAIL, TEMP.INVOICE_DETAIL_ID, TEMP.BASE_AMOUNT_NOTAX, TEMP.INVOICE_DATE, TEMP.CURRENCY, TEMP.DTL_AMOUNT_NOTAX, TEMP.INVOICE_NUM, TEMP.PAYEE, TEMP.ACTIVITY_DATE, TEMP.FI_RECEIVEDATE, TEMP.INPUT_DATE, TEMP.UPDATE_TIME, TEMP.BASE_AMOUNT, TEMP.AMOUNT, 0 AS MISC_AMOUNT,/*运杂费*/ 0 AS BASE_MISC_AMOUNT, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'VEL_MANAGE_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'VEL_MANAGE_BODY') ) AS COMPANY_CODE, TEMP.SEND_FIN_DATE, TEMP.APPLY_TYPE, '2' AS BUSI_TYPE, TEMP.IS_ENERGY, TEMP.TYPE_NAME, TEMP.ORDER_CURRENCY, TEMP.EXCHANGE_RATE, NULL AS BILL_NO, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'COST_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'COST_BODY') ) AS OWNERSHIP_BODY, TEMP.OPRT_WAY, TEMP.USD_AMOUNT\n FROM (\n   select /*已开票但未支付状态的费用明细*/ I.VESSEL_CODE, /*船舶*/ substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) AS ORDER_NO, /*定单号*/ BFM.CONFIRM_DATE AS ORDER_DATE, T.DISPLAY_VALUE_CN AS TYPE_NAME, /*定单种类*/ BFM.CURRENCY AS ORDER_CURRENCY, /*定单币种*/ BFM.AMOUNT AS TOTAL_FEE, /*定单金额*/ NVL(BFM.SUPPLIER,I.PAYEE) AS SUPPLIER_CODE, 'HY' AS APPLY_TYPE, I.PAYER, I.INVOICE_STATUS, 'FY33' AS INVOICE_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'FY33002' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'FY33003' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'FY33004' WHEN I.INVOICE_SORT_DETAIL = 'FY03004' THEN 'FY33005' WHEN I.INVOICE_SORT_DETAIL in ('FY03005', 'FY03006', 'FY03007') THEN 'FY33006' ELSE 'FY33006' END) AS INVOICE_SORT_DETAIL, 'RLF' AS GROUP_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'YZ30003' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'YZ30001' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'YZ30002' WHEN I.INVOICE_SORT_DETAIL in ('FY03004','FY03005', 'FY03006', 'FY03007') THEN 'YZ30004' ELSE 'YZ30004' END) AS GROUP_SORT_DETAIL, I.INVOICE_DETAIL_ID, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) / (1 + NVL(I.TAX_RATE,0)) AS BASE_AMOUNT_notax, I.INVOICE_DATE, I.CURRENCY, I.DTL_AMOUNT / (1 + I.TAX_RATE) AS DTL_AMOUNT_notax, I.INVOICE_NUM, I.PAYEE, /*(CASE WHEN I.COMPANY_CODE IN ('08010000', '66190000') THEN NVL(NVL(M.CREATED_DTM_LOC, BOS.ACTIVITY_DATE), I.SEND_FIN_DATE) ELSE BOS.ACTIVITY_DATE END) AS ACTIVITY_DATE,*/ (CASE WHEN I.COMPANY_CODE IN ('08020000','04000000','02000000','62000000') THEN I.CREATED_DTM_LOC WHEN I.PAYER LIKE '64%' THEN I.CREATED_DTM_LOC ELSE BFM.SUPPLY_DATE END) AS ACTIVITY_DATE, I.SEND_FIN_DATE AS FI_RECEIVEDATE, NULL AS IS_ENERGY, I.CREATED_DTM_LOC AS INPUT_DATE, NVL(NVL(I.UPDATED_DTM_LOC, I.CREATED_DTM_LOC), SYSDATE - 1) AS UPDATE_TIME, '3' as rpt_type, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) AS BASE_AMOUNT, I.DTL_AMOUNT AS AMOUNT, I.COMPANY_CODE, NVL(I.SEND_FIN_DATE, I.INVOICE_DATE) AS SEND_FIN_DATE, row_number() over(partition by I.INVOICE_DETAIL_ID order by BFM.SUPPLY_DATE desc) rn, I.PAYMENT_NO, I.RMB_EXCHANGE_RATE AS EXCHANGE_RATE, '1' AS OPRT_WAY, ROUND(I.DTL_AMOUNT*fn_get_exchange_rate(I.CURRENCY,'USD',BFM.SUPPLY_DATE),2) AS USD_AMOUNT\n   FROM bfm_invoice_detail I\n     LEFT JOIN BFM_PURCHASE_ORDER BFM ON substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) = BFM.PO_NUMBER\n     LEFT JOIN BFM_OIL_STORAGE BOS ON BOS.operate = '10' AND substr(BOS.PO_NUMBER,1,replace(instr(BOS.PO_NUMBER,'-',-1)-1,-1,length(BOS.PO_NUMBER))) = BFM.PO_NUMBER AND BOS.oil_type = '002'\n     LEFT JOIN CDM_CODEDICT T ON T.code_type = 'BFM_FILL_TYPE' AND BFM.FILL_OIL_TYPE = T.CODE_VALUE\n     LEFT JOIN SAP_JA0012_MTR_MIDDLE M ON BOS.PO_NUMBER = M.TRD_ORDER\n   WHERE I.INVOICE_SORT = 'FY03' AND NVL(I.IS_DELETE,'0')<>'1' AND I.PAYER LIKE '64%'\n ) TEMP\n WHERE RN = 1;\n P_LOG_EXCEPTION('fmm_csc_maintenance_invoice 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n /*根据主数据更新备件信息表是否库存标记*/\n update sps_parts_info sp set sp.if_storaged = null where EXISTS(select trim(group_code) from SPS_PARTS_MASTER_DATA t where t.if_storaged is null AND trim(T.group_code)=SP.GROUP_CODE) AND (SP.VESSEL_CODE LIKE 'S%' OR SP.VESSEL_CODE LIKE 'E%');\n /*更新上远虚拟预算数据*/\n EXECUTE IMMEDIATE 'truncate table fmm_csc_virtual_budget';\n insert into fmm_csc_virtual_budget select * from vw_csc_virtual_budget;\n commit;\n P_LOG_EXCEPTION('fmm_csc_virtual_budget 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n /*更新集运备件申领设备ID为空的记录*/\n update SPS_APPLY_main sam set (sam.equipment_info_id, sam.equipment_code) = (select sad.equipment_id, sad.equip_code from sps_apply_detail sad where sad.apply_main_id = SAM.APPLY_MAIN_ID and rownum = 1) where sam.apply_main_id IN (select SAM.apply_main_id from SPS_APPLY_main SAM where SAM.EQUIPMENT_INFO_ID is null and SAM.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0'));\n /*更新集运备件询价设备ID为空的记录*/\n update SPS_ENQUIRE_MAIN SS set (SS.EQUIPMENT_INFO_ID, SS.EQUIPMENT_CODE) = (select SED.equipment_id, SED.EQUIP_CODE from SPS_ENQUIRE_DETAIL SED where SED.ENQUIRE_MAIN_ID = SS.ENQUIRE_MAIN_ID and rownum = 1) where SS.ENQUIRE_MAIN_ID IN (select SEM.ENQUIRE_MAIN_ID from sps_enquire_main sem where sem.equipment_info_id is null and sem.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0'));\n commit;\n P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n commit;\n END IF;\nEND SP_FEE_CSC_DAILY_JOB;\n$$"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "DELIMITER $$\nCREATE OR REPLACE PROCEDURE \"SP_FEE_CSC_DAILY_JOB\" /* --------------------------------------------------------------------\nPROCEDURE: SP_FEE_CSC_DAILY_JOB\nDescription: 能源每日定时任务\nAUTHOR: liul(liul@cnshipping.com) 2015-09-09 9:31:00\n---------------------------------------------------------------------- */ IS\n  V_FLAG varchar2(50);\nBEGIN\n  SELECT VALUE INTO V_FLAG FROM SYS.TENANT_VIRTUAL_GLOBAL_VARIABLE WHERE VARIABLE_NAME = 'read_only';\n  IF V_FLAG = 'OFF' THEN\n    P_LOG_EXCEPTION('开始时间:' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB');\n    /*更新上远业务口径船舶信息*/\n    /*delete from FMM_CSCL_BUSI_CALIBER where 1=1;*/\n    EXECUTE IMMEDIATE 'truncate table FMM_CSCL_BUSI_CALIBER';\n    insert into FMM_CSCL_BUSI_CALIBER select * from VOP_VESSEL_CSCL_BUSI_CALIBER;\n    commit;\n    P_LOG_EXCEPTION('FMM_CSCL_BUSI_CALIBER完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n    /*更新上远预估费用*/\n    /*delete from fmm_csc_maintenance_esti;*/\n    EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_esti';\n    insert into fmm_csc_maintenance_esti select * from vw_csc_maintenance_esti;\n    commit;\n    P_LOG_EXCEPTION('fmm_csc_maintenance_esti 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n    /*更新所有订单预估费用*/\n    /*delete from fmm_csc_maintenance_orders;*/\n    EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_orders';\n    insert into fmm_csc_maintenance_orders select * from VW_CSC_MAINTENANCE_ORDERS;\n    commit;\n    P_LOG_EXCEPTION('fmm_csc_maintenance_orders 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n    /*更新上远账单费用*/\n    /*delete from fmm_csc_maintenance_invoice;*/\n    EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_invoice';\n    insert into fmm_csc_maintenance_invoice select * from vw_csc_maintenance_invoice;\n    commit;\n    INSERT INTO fmm_csc_maintenance_invoice\n    SELECT TEMP.VESSEL_CODE, TEMP.SUPPLIER_CODE, TEMP.PAYER, NULL AS PORT_CODE, TEMP.INVOICE_STATUS, TEMP.INVOICE_SORT, TEMP.ORDER_NO, TEMP.PAYMENT_NO, TEMP.INVOICE_SORT_DETAIL, TEMP.INVOICE_DETAIL_ID, TEMP.BASE_AMOUNT_NOTAX, TEMP.INVOICE_DATE, TEMP.CURRENCY, TEMP.DTL_AMOUNT_NOTAX, TEMP.INVOICE_NUM, TEMP.PAYEE, TEMP.ACTIVITY_DATE, TEMP.FI_RECEIVEDATE, TEMP.INPUT_DATE, TEMP.UPDATE_TIME, TEMP.BASE_AMOUNT, TEMP.AMOUNT, 0 AS MISC_AMOUNT,/*运杂费*/ 0 AS BASE_MISC_AMOUNT, NVL(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'VEL_MANAGE_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'VEL_MANAGE_BODY')) AS COMPANY_CODE, TEMP.SEND_FIN_DATE, TEMP.APPLY_TYPE, '2' AS BUSI_TYPE, TEMP.IS_ENERGY, TEMP.TYPE_NAME, TEMP.ORDER_CURRENCY, TEMP.EXCHANGE_RATE, NULL AS BILL_NO, NVL(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'COST_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'COST_BODY')) AS OWNERSHIP_BODY, TEMP.OPRT_WAY, TEMP.USD_AMOUNT\n    FROM (\n      select /*已开票但未支付状态的费用明细*/ I.VESSEL_CODE, /*船舶*/ substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) AS ORDER_NO, /*定单号*/ BFM.CONFIRM_DATE AS ORDER_DATE, T.DISPLAY_VALUE_CN AS TYPE_NAME, /*定单种类*/ BFM.CURRENCY AS ORDER_CURRENCY, /*定单币种*/ BFM.AMOUNT AS TOTAL_FEE, /*定单金额*/ NVL(BFM.SUPPLIER,I.PAYEE) AS SUPPLIER_CODE, 'HY' AS APPLY_TYPE, I.PAYER, I.INVOICE_STATUS, 'FY33' AS INVOICE_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'FY33002' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'FY33003' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'FY33004' WHEN I.INVOICE_SORT_DETAIL = 'FY03004' THEN 'FY33005' WHEN I.INVOICE_SORT_DETAIL in ('FY03005', 'FY03006', 'FY03007') THEN 'FY33006' ELSE 'FY33006' END) AS INVOICE_SORT_DETAIL, 'RLF' AS GROUP_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'YZ30003' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'YZ30001' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'YZ30002' WHEN I.INVOICE_SORT_DETAIL in ('FY03004','FY03005', 'FY03006', 'FY03007') THEN 'YZ30004' ELSE 'YZ30004' END) AS GROUP_SORT_DETAIL, I.INVOICE_DETAIL_ID, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) / (1 + NVL(I.TAX_RATE,0)) AS BASE_AMOUNT_notax, I.INVOICE_DATE, I.CURRENCY, I.DTL_AMOUNT / (1 + I.TAX_RATE) AS DTL_AMOUNT_notax, I.INVOICE_NUM, I.PAYEE, /*(CASE WHEN I.COMPANY_CODE IN ('08010000', '66190000') THEN NVL(NVL(M.CREATED_DTM_LOC, BOS.ACTIVITY_DATE), I.SEND_FIN_DATE) ELSE BOS.ACTIVITY_DATE END) AS ACTIVITY_DATE,*/ (CASE WHEN I.COMPANY_CODE IN ('08020000','04000000','02000000','62000000') THEN I.CREATED_DTM_LOC WHEN I.PAYER LIKE '64%' THEN I.CREATED_DTM_LOC ELSE BFM.SUPPLY_DATE END) AS ACTIVITY_DATE, I.SEND_FIN_DATE AS FI_RECEIVEDATE, NULL AS IS_ENERGY, I.CREATED_DTM_LOC AS INPUT_DATE, NVL(NVL(I.UPDATED_DTM_LOC, I.CREATED_DTM_LOC), SYSDATE - 1) AS UPDATE_TIME, '3' as rpt_type, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) AS BASE_AMOUNT, I.DTL_AMOUNT AS AMOUNT, I.COMPANY_CODE, NVL(I.SEND_FIN_DATE, I.INVOICE_DATE) AS SEND_FIN_DATE, row_number() over(partition by I.INVOICE_DETAIL_ID order by BFM.SUPPLY_DATE desc) rn, I.PAYMENT_NO, I.RMB_EXCHANGE_RATE AS EXCHANGE_RATE, '1' AS OPRT_WAY, ROUND(I.DTL_AMOUNT*fn_get_exchange_rate(I.CURRENCY,'USD',BFM.SUPPLY_DATE),2) AS USD_AMOUNT\n      FROM bfm_invoice_detail I\n      LEFT JOIN BFM_PURCHASE_ORDER BFM ON substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) = BFM.PO_NUMBER\n      LEFT JOIN BFM_OIL_STORAGE BOS ON BOS.operate = '10' AND substr(BOS.PO_NUMBER,1,replace(instr(BOS.PO_NUMBER,'-',-1)-1,-1,length(BOS.PO_NUMBER))) = BFM.PO_NUMBER AND BOS.oil_type = '002'\n      LEFT JOIN CDM_CODEDICT T ON T.code_type = 'BFM_FILL_TYPE' AND BFM.FILL_OIL_TYPE = T.CODE_VALUE\n      LEFT JOIN SAP_JA0012_MTR_MIDDLE M ON BOS.PO_NUMBER = M.TRD_ORDER\n      WHERE I.INVOICE_SORT = 'FY03' AND NVL(I.IS_DELETE,'0')<>'1' AND I.PAYER LIKE '64%'\n    ) TEMP\n    WHERE RN = 1;\n    P_LOG_EXCEPTION('fmm_csc_maintenance_invoice 完成' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB');\n    /*根据主数据更新备件信息表是否库存标记*/\n    update sps_parts_info sp\n      set sp.if_storaged = null\n      where EXISTS(select trim(group_code) from SPS_PARTS_MASTER_DATA t where t.if_storaged is null AND trim(T.group_code)=SP.GROUP_CODE)\n        AND (SP.VESSEL_CODE LIKE 'S%' OR SP.VESSEL_CODE LIKE 'E%');\n    /*更新上远虚拟预算数据*/\n    EXECUTE IMMEDIATE 'truncate table fmm_csc_virtual_budget';\n    insert into fmm_csc_virtual_budget select * from vw_csc_virtual_budget;\n    commit;\n    P_LOG_EXCEPTION('fmm_csc_virtual_budget 完成' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB');\n    /*更新集运备件申领设备ID为空的记录*/\n    update SPS_APPLY_main sam set (sam.equipment_info_id, sam.equipment_code) = (\n      select sad.equipment_id, sad.equip_code from sps_apply_detail sad where sad.apply_main_id = SAM.APPLY_MAIN_ID and rownum = 1\n    ) where sam.apply_main_id IN (\n      select SAM.apply_main_id from SPS_APPLY_main SAM where SAM.EQUIPMENT_INFO_ID is null and SAM.vessel_code in (\n        select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0'\n      )\n    );\n    /*更新集运备件询价设备ID为空的记录*/\n    update SPS_ENQUIRE_MAIN SS set (SS.EQUIPMENT_INFO_ID, SS.EQUIPMENT_CODE) = (\n      select SED.equipment_id, SED.EQUIP_CODE from SPS_ENQUIRE_DETAIL SED where SED.ENQUIRE_MAIN_ID = SS.ENQUIRE_MAIN_ID and rownum = 1\n    ) where SS.ENQUIRE_MAIN_ID IN (\n      select SEM.ENQUIRE_MAIN_ID from sps_enquire_main sem where sem.equipment_info_id is null and sem.vessel_code in (\n        select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0'\n      )\n    );\n    commit;\n    P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB');\n    commit;\n  END IF;\nEND SP_FEE_CSC_DAILY_JOB;\n$$"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "DELIMITER $$\nCREATE OR REPLACE PROCEDURE \"SP_FEE_CSC_DAILY_JOB\" /* -------------------------------------------------------------------- PROCEDURE: SP_FEE_CSC_DAILY_JOB Description: 能源每日定时任务 AUTHOR: liul(liul@cnshipping.com) 2015-09-09 9:31:00 ---------------------------------------------------------------------- */ IS V_FLAG varchar2(50);\nBEGIN\n    SELECT VALUE INTO V_FLAG FROM SYS.TENANT_VIRTUAL_GLOBAL_VARIABLE WHERE VARIABLE_NAME='read_only';\n    IF V_FLAG = 'OFF' THEN\n        P_LOG_EXCEPTION('开始时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n        /*更新上远业务口径船舶信息*/\n        /*delete from FMM_CSCL_BUSI_CALIBER where 1=1;*/\n        EXECUTE IMMEDIATE 'truncate table FMM_CSCL_BUSI_CALIBER';\n        insert into FMM_CSCL_BUSI_CALIBER select * from VOP_VESSEL_CSCL_BUSI_CALIBER;\n        commit;\n        P_LOG_EXCEPTION('FMM_CSCL_BUSI_CALIBER完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n        /*更新上远预估费用*/\n        /*delete from fmm_csc_maintenance_esti;*/\n        EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_esti';\n        insert into fmm_csc_maintenance_esti select * from vw_csc_maintenance_esti;\n        commit;\n        P_LOG_EXCEPTION('fmm_csc_maintenance_esti 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n        /*更新所有订单预估费用*/\n        /*delete from fmm_csc_maintenance_orders;*/\n        EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_orders';\n        insert into fmm_csc_maintenance_orders select * from VW_CSC_MAINTENANCE_ORDERS;\n        commit;\n        P_LOG_EXCEPTION('fmm_csc_maintenance_orders 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n        /*更新上远账单费用*/\n        /*delete from fmm_csc_maintenance_invoice;*/\n        EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_invoice';\n        insert into fmm_csc_maintenance_invoice select * from vw_csc_maintenance_invoice;\n        commit;\n        INSERT INTO fmm_csc_maintenance_invoice SELECT TEMP.VESSEL_CODE, TEMP.SUPPLIER_CODE, TEMP.PAYER, NULL AS PORT_CODE, TEMP.INVOICE_STATUS, TEMP.INVOICE_SORT, TEMP.ORDER_NO, TEMP.PAYMENT_NO, TEMP.INVOICE_SORT_DETAIL, TEMP.INVOICE_DETAIL_ID, TEMP.BASE_AMOUNT_NOTAX, TEMP.INVOICE_DATE, TEMP.CURRENCY, TEMP.DTL_AMOUNT_NOTAX, TEMP.INVOICE_NUM, TEMP.PAYEE, TEMP.ACTIVITY_DATE, TEMP.FI_RECEIVEDATE, TEMP.INPUT_DATE, TEMP.UPDATE_TIME, TEMP.BASE_AMOUNT, TEMP.AMOUNT, 0 AS MISC_AMOUNT,/*运杂费*/ 0 AS BASE_MISC_AMOUNT, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'VEL_MANAGE_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'VEL_MANAGE_BODY') ) AS COMPANY_CODE, TEMP.SEND_FIN_DATE, TEMP.APPLY_TYPE, '2' AS BUSI_TYPE, TEMP.IS_ENERGY, TEMP.TYPE_NAME, TEMP.ORDER_CURRENCY, TEMP.EXCHANGE_RATE, NULL AS BILL_NO, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'COST_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'COST_BODY') ) AS OWNERSHIP_BODY, TEMP.OPRT_WAY, TEMP.USD_AMOUNT FROM (select /*已开票但未支付状态的费用明细*/ I.VESSEL_CODE, /*船舶*/ substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) AS ORDER_NO, /*定单号*/ BFM.CONFIRM_DATE AS ORDER_DATE, T.DISPLAY_VALUE_CN AS TYPE_NAME, /*定单种类*/ BFM.CURRENCY AS ORDER_CURRENCY, /*定单币种*/ BFM.AMOUNT AS TOTAL_FEE, /*定单金额*/ NVL(BFM.SUPPLIER,I.PAYEE) AS SUPPLIER_CODE, 'HY' AS APPLY_TYPE, I.PAYER, I.INVOICE_STATUS, 'FY33' AS INVOICE_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'FY33002' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'FY33003' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'FY33004' WHEN I.INVOICE_SORT_DETAIL = 'FY03004' THEN 'FY33005' WHEN I.INVOICE_SORT_DETAIL in ('FY03005', 'FY03006', 'FY03007') THEN 'FY33006' ELSE 'FY33006' END) AS INVOICE_SORT_DETAIL, 'RLF' AS GROUP_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'YZ30003' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'YZ30001' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'YZ30002' WHEN I.INVOICE_SORT_DETAIL in ('FY03004','FY03005', 'FY03006', 'FY03007') THEN 'YZ30004' ELSE 'YZ30004' END) AS GROUP_SORT_DETAIL, I.INVOICE_DETAIL_ID, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) / (1 + NVL(I.TAX_RATE,0)) AS BASE_AMOUNT_notax, I.INVOICE_DATE, I.CURRENCY, I.DTL_AMOUNT / (1 + I.TAX_RATE) AS DTL_AMOUNT_notax, I.INVOICE_NUM, I.PAYEE, /*(CASE WHEN I.COMPANY_CODE IN ('08010000', '66190000') THEN NVL(NVL(M.CREATED_DTM_LOC, BOS.ACTIVITY_DATE), I.SEND_FIN_DATE) ELSE BOS.ACTIVITY_DATE END) AS ACTIVITY_DATE,*/ (CASE WHEN I.COMPANY_CODE IN ('08020000','04000000','02000000','62000000') THEN I.CREATED_DTM_LOC WHEN I.PAYER LIKE '64%' THEN I.CREATED_DTM_LOC ELSE BFM.SUPPLY_DATE END) AS ACTIVITY_DATE, I.SEND_FIN_DATE AS FI_RECEIVEDATE, NULL AS IS_ENERGY, I.CREATED_DTM_LOC AS INPUT_DATE, NVL(NVL(I.UPDATED_DTM_LOC, I.CREATED_DTM_LOC), SYSDATE - 1) AS UPDATE_TIME, '3' as rpt_type, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) AS BASE_AMOUNT, I.DTL_AMOUNT AS AMOUNT, I.COMPANY_CODE, NVL(I.SEND_FIN_DATE, I.INVOICE_DATE) AS SEND_FIN_DATE, row_number() over(partition by I.INVOICE_DETAIL_ID order by BFM.SUPPLY_DATE desc) rn, I.PAYMENT_NO, I.RMB_EXCHANGE_RATE AS EXCHANGE_RATE, '1' AS OPRT_WAY, ROUND(I.DTL_AMOUNT*fn_get_exchange_rate(I.CURRENCY,'USD',BFM.SUPPLY_DATE),2) AS USD_AMOUNT FROM bfm_invoice_detail I LEFT JOIN BFM_PURCHASE_ORDER BFM ON substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) = BFM.PO_NUMBER LEFT JOIN BFM_OIL_STORAGE BOS ON BOS.operate = '10' AND substr(BOS.PO_NUMBER,1,replace(instr(BOS.PO_NUMBER,'-',-1)-1,-1,length(BOS.PO_NUMBER))) = BFM.PO_NUMBER AND BOS.oil_type = '002' LEFT JOIN CDM_CODEDICT T ON T.code_type = 'BFM_FILL_TYPE' AND BFM.FILL_OIL_TYPE = T.CODE_VALUE LEFT JOIN SAP_JA0012_MTR_MIDDLE M ON BOS.PO_NUMBER = M.TRD_ORDER WHERE I.INVOICE_SORT = 'FY03' AND NVL(I.IS_DELETE,'0')<>'1' AND I.PAYER LIKE '64%' ) TEMP WHERE RN = 1;\n        P_LOG_EXCEPTION('fmm_csc_maintenance_invoice 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n        /*根据主数据更新备件信息表是否库存标记*/\n        update sps_parts_info sp set sp.if_storaged = null where EXISTS(select trim(group_code) from SPS_PARTS_MASTER_DATA t where t.if_storaged is null AND trim(T.group_code)=SP.GROUP_CODE) AND (SP.VESSEL_CODE LIKE 'S%' OR SP.VESSEL_CODE LIKE 'E%');\n        /*更新上远虚拟预算数据*/\n        EXECUTE IMMEDIATE 'truncate table fmm_csc_virtual_budget';\n        insert into fmm_csc_virtual_budget select * from vw_csc_virtual_budget;\n        commit;\n        P_LOG_EXCEPTION('fmm_csc_virtual_budget 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n        /*更新集运备件申领设备ID为空的记录*/\n        update SPS_APPLY_main sam set (sam.equipment_info_id, sam.equipment_code) = (select sad.equipment_id, sad.equip_code from sps_apply_detail sad where sad.apply_main_id = SAM.APPLY_MAIN_ID and rownum = 1) where sam.apply_main_id IN (select SAM.apply_main_id from SPS_APPLY_main SAM where SAM.EQUIPMENT_INFO_ID is null and SAM.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0'));\n        /*更新集运备件询价设备ID为空的记录*/\n        update SPS_ENQUIRE_MAIN SS set (SS.EQUIPMENT_INFO_ID, SS.EQUIPMENT_CODE) = (select SED.equipment_id, SED.EQUIP_CODE from SPS_ENQUIRE_DETAIL SED where SED.ENQUIRE_MAIN_ID = SS.ENQUIRE_MAIN_ID and rownum = 1) where SS.ENQUIRE_MAIN_ID IN (select SEM.ENQUIRE_MAIN_ID from sps_enquire_main sem where sem.equipment_info_id is null and sem.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0'));\n        commit;\n        P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB');\n        commit;\n    END IF;\nEND SP_FEE_CSC_DAILY_JOB;\n$$"
                    }
                ]
            },
            {
                "case_id": "6",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"6\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"COUNT\", \"AVG\", \"MAX\", \"RTRIM\", \"COALESCE\", \"RAISE_APPLICATION_ERROR\", \"current_timestamp\", \"SQLERRM\", \"ROWNUM\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE CHECKANDUPDATESALARIES(p_dept_id IN NUMBER, p_result OUT CLOB, p_percent IN NUMBER, p_min_dept IN NUMBER DEFAULT NULL, p_max_dept IN NUMBER DEFAULT NULL) IS TYPE stats_rec IS RECORD ( total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER ); TYPE p_result_rec IS RECORD ( employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2) ); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); v_rows_updated NUMBER := 0; v_total_budget NUMBER := 0; CURSOR dept_cur IS SELECT department_id, budget FROM DEPARTMENTS WHERE (department_id >= p_min_dept OR p_min_dept IS NULL) AND (department_id <= p_max_dept OR p_max_dept IS NULL); BEGIN /* 部门验证 */ SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; /* 基础统计 */ SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; /* 动态SQL生成 */ v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees ' || 'WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; /* 构建JSON输出 */ p_result := '{ \\\"department\\\": \\\"' || v_dept_name || '\\\", \\\"total_employees\\\": ' || v_stats.total_emp || ', \\\"salary_stats\\\": { \\\"average\\\": ' || v_stats.avg_salary || ', \\\"max\\\": ' || v_stats.max_salary || ' }, \\\"top_earners\\\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || ' {\\\"id\\\": ' || v_result.employee_id || ', \\\"name\\\": \\\"' || v_result.last_name || '\\\", \\\"salary\\\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || ' ] }'; CLOSE v_cursor; FOR dept_rec IN dept_cur LOOP /* 薪资更新处理 */ UPDATE EMPLOYEES SET salary = NVL(salary, 3000) * (1 + p_percent/100) WHERE department_id = dept_rec.department_id; v_rows_updated := v_rows_updated + SQL%ROWCOUNT; /* 预算验证 */ SELECT SUM(salary) INTO v_total_budget FROM EMPLOYEES WHERE department_id = dept_rec.department_id; IF v_total_budget > dept_rec.budget THEN RAISE_APPLICATION_ERROR(-20001, 'Budget exceeded in department ' || dept_rec.department_id); END IF; END LOOP; /* 输出处理结果 */ DBMS_OUTPUT.PUT_LINE('Updated ' || v_rows_updated || ' records, Time ' || SYSDATE); EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\\\"error\\\": \\\"Department not found\\\"}'; WHEN OTHERS THEN p_result := '{\\\"error\\\": \\\"' || SQLERRM || '\\\"}'; END; $$\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE CHECKANDUPDATESALARIES(p_dept_id IN NUMBER, p_result OUT CLOB, p_percent IN NUMBER, p_min_dept IN NUMBER DEFAULT NULL, p_max_dept IN NUMBER DEFAULT NULL) IS TYPE stats_rec IS RECORD ( total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER ); TYPE p_result_rec IS RECORD ( employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2) ); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); v_rows_updated NUMBER := 0; v_total_budget NUMBER := 0; CURSOR dept_cur IS SELECT department_id, budget FROM DEPARTMENTS WHERE (department_id >= p_min_dept OR p_min_dept IS NULL) AND (department_id <= p_max_dept OR p_max_dept IS NULL); BEGIN /* 部门验证 */ SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; /* 基础统计 */ SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; /* 动态SQL生成 */ v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees ' || 'WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; /* 构建JSON输出 */ p_result := '{ \"department\": \"' || v_dept_name || '\", \"total_employees\": ' || v_stats.total_emp || ', \"salary_stats\": { \"average\": ' || v_stats.avg_salary || ', \"max\": ' || v_stats.max_salary || ' }, \"top_earners\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || ' {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || ' ] }'; CLOSE v_cursor; FOR dept_rec IN dept_cur LOOP /* 薪资更新处理 */ UPDATE EMPLOYEES SET salary = NVL(salary, 3000) * (1 + p_percent/100) WHERE department_id = dept_rec.department_id; v_rows_updated := v_rows_updated + SQL%ROWCOUNT; /* 预算验证 */ SELECT SUM(salary) INTO v_total_budget FROM EMPLOYEES WHERE department_id = dept_rec.department_id; IF v_total_budget > dept_rec.budget THEN RAISE_APPLICATION_ERROR(-20001, 'Budget exceeded in department ' || dept_rec.department_id); END IF; END LOOP; /* 输出处理结果 */ DBMS_OUTPUT.PUT_LINE('Updated ' || v_rows_updated || ' records, Time ' || SYSDATE); EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\"error\": \"Department not found\"}'; WHEN OTHERS THEN p_result := '{\"error\": \"' || SQLERRM || '\"}'; END; $$\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION CHECKANDUPDATESALARIES(\n    p_dept_id integer,\n    OUT p_result text,\n    p_percent numeric,\n    p_min_dept integer DEFAULT NULL,\n    p_max_dept integer DEFAULT NULL\n) AS $$\nDECLARE\n    v_stats RECORD;\n    v_result RECORD;\n    v_cursor REFCURSOR;\n    v_sql text;\n    v_dept_name varchar(50);\n    v_rows_updated integer := 0;\n    v_total_budget numeric := 0;\n    v_updated_count integer;\n    dept_rec RECORD;\nBEGIN\n    -- 部门验证\n    SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id;\n    -- 基础统计\n    SELECT COUNT(*) AS total_emp, AVG(salary) AS avg_salary, MAX(salary) AS max_salary\n      INTO v_stats\n    FROM EMPLOYEES WHERE department_id = p_dept_id;\n    -- 动态SQL生成\n    v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees WHERE department_id = $1 ORDER BY salary DESC LIMIT 5)';\n    OPEN v_cursor FOR EXECUTE v_sql USING p_dept_id;\n    -- 构建JSON输出\n    p_result := '{ \"department\": \"' || v_dept_name || '\", \"total_employees\": ' || v_stats.total_emp || ', \"salary_stats\": { \"average\": ' || v_stats.avg_salary || ', \"max\": ' || v_stats.max_salary || ' }, \"top_earners\": [';\n    LOOP\n        FETCH v_cursor INTO v_result;\n        EXIT WHEN NOT FOUND;\n        p_result := p_result || ' {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},';\n    END LOOP;\n    p_result := RTRIM(p_result, ',') || ' ] }';\n    CLOSE v_cursor;\n    FOR dept_rec IN\n        SELECT department_id, budget FROM DEPARTMENTS\n        WHERE (department_id >= p_min_dept OR p_min_dept IS NULL) AND (department_id <= p_max_dept OR p_max_dept IS NULL)\n    LOOP\n        -- 薪资更新处理\n        UPDATE EMPLOYEES SET salary = COALESCE(salary, 3000) * (1 + p_percent/100) WHERE department_id = dept_rec.department_id;\n        GET DIAGNOSTICS v_updated_count = ROW_COUNT;\n        v_rows_updated := v_rows_updated + v_updated_count;\n        -- 预算验证\n        SELECT SUM(salary) INTO v_total_budget FROM EMPLOYEES WHERE department_id = dept_rec.department_id;\n        IF v_total_budget > dept_rec.budget THEN\n            RAISE EXCEPTION 'Budget exceeded in department %', dept_rec.department_id;\n        END IF;\n    END LOOP;\n    -- 输出处理结果\n    RAISE NOTICE 'Updated % records, Time %', v_rows_updated, now();\nEXCEPTION\n    WHEN NO_DATA_FOUND THEN\n        p_result := '{\"error\": \"Department not found\"}';\n    WHEN OTHERS THEN\n        p_result := '{\"error\": \"' || SQLERRM || '\"}';\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE FUNCTION CHECKANDUPDATESALARIES(\n    p_dept_id numeric,\n    p_percent numeric,\n    p_min_dept numeric DEFAULT NULL,\n    p_max_dept numeric DEFAULT NULL,\n    OUT p_result text\n) AS $$\nDECLARE\n    v_stats record;\n    v_result record;\n    v_cursor refcursor;\n    v_sql text;\n    v_dept_name varchar(50);\n    v_rows_updated integer := 0;\n    v_total_budget numeric := 0;\n    v_count integer := 0;\nBEGIN\n    /* 部门验证 */\n    SELECT department_name INTO v_dept_name\n    FROM DEPARTMENTS\n    WHERE department_id = p_dept_id;\n    /* 基础统计 */\n    SELECT COUNT(*) AS total_emp, AVG(salary) AS avg_salary, MAX(salary) AS max_salary\n    INTO v_stats\n    FROM EMPLOYEES\n    WHERE department_id = p_dept_id;\n    /* 动态SQL生成 */\n    v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees '\n          || 'WHERE department_id = $1 ORDER BY salary DESC) AS sub LIMIT 5';\n    OPEN v_cursor FOR EXECUTE v_sql USING p_dept_id;\n    /* 构建JSON输出 */\n    p_result := '{ \"department\": \"' || v_dept_name || '\", \"total_employees\": ' || v_stats.total_emp || ', \"salary_stats\": { \"average\": ' || v_stats.avg_salary || ', \"max\": ' || v_stats.max_salary || ' }, \"top_earners\": [';\n    LOOP\n        FETCH v_cursor INTO v_result;\n        EXIT WHEN NOT FOUND;\n        p_result := p_result || ' {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},';\n    END LOOP;\n    p_result := RTRIM(p_result, ',') || ' ] }';\n    CLOSE v_cursor;\n    /* 薪资更新处理 */\n    FOR dept_rec IN\n        SELECT department_id, budget\n        FROM DEPARTMENTS\n        WHERE (department_id >= p_min_dept OR p_min_dept IS NULL)\n          AND (department_id <= p_max_dept OR p_max_dept IS NULL)\n    LOOP\n        UPDATE EMPLOYEES\n        SET salary = COALESCE(salary, 3000) * (1 + p_percent/100)\n        WHERE department_id = dept_rec.department_id;\n        GET DIAGNOSTICS v_count = ROW_COUNT;\n        v_rows_updated := v_rows_updated + v_count;\n        /* 预算验证 */\n        SELECT SUM(salary) INTO v_total_budget\n        FROM EMPLOYEES\n        WHERE department_id = dept_rec.department_id;\n        IF v_total_budget > dept_rec.budget THEN\n            RAISE EXCEPTION 'Budget exceeded in department %', dept_rec.department_id;\n        END IF;\n    END LOOP;\n    /* 输出处理结果 */\n    RAISE NOTICE 'Updated % records, Time %', v_rows_updated, now();\n    RETURN;\nEXCEPTION\n    WHEN no_data_found THEN\n        p_result := '{\"error\": \"Department not found\"}';\n        RETURN;\n    WHEN others THEN\n        p_result := format('{\"error\": \"%s\"}', sqlerrm);\n        RETURN;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE FUNCTION CHECKANDUPDATESALARIES(\n    p_dept_id numeric,\n    p_percent numeric,\n    p_min_dept numeric DEFAULT NULL,\n    p_max_dept numeric DEFAULT NULL,\n    OUT p_result text\n)\nLANGUAGE plpgsql\nAS $$\nDECLARE\n    v_stats RECORD;\n    v_result RECORD;\n    v_cursor refcursor;\n    v_sql text;\n    v_dept_name varchar(50);\n    v_rows_updated numeric := 0;\n    v_total_budget numeric := 0;\nBEGIN\n    /* 部门验证 */\n    SELECT department_name INTO v_dept_name FROM departments WHERE department_id = p_dept_id;\n\n    /* 基础统计 */\n    SELECT COUNT(*) AS total_emp, AVG(salary) AS avg_salary, MAX(salary) AS max_salary\n      INTO v_stats\n      FROM employees\n     WHERE department_id = p_dept_id;\n\n    /* 动态SQL生成 */\n    v_sql := 'SELECT employee_id, last_name, salary FROM employees WHERE department_id = $1 ORDER BY salary DESC LIMIT 5';\n    OPEN v_cursor FOR EXECUTE v_sql USING p_dept_id;\n\n    /* 构建JSON输出 */\n    p_result := '{ \"department\": \"' || v_dept_name || '\", \"total_employees\": ' || v_stats.total_emp\n                || ', \"salary_stats\": { \"average\": ' || v_stats.avg_salary || ', \"max\": ' || v_stats.max_salary\n                || ' }, \"top_earners\": [';\n    LOOP\n        FETCH v_cursor INTO v_result;\n        EXIT WHEN NOT FOUND;\n        p_result := p_result || ' {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name\n                   || '\", \"salary\": ' || v_result.salary || '},';\n    END LOOP;\n    CLOSE v_cursor;\n    p_result := rtrim(p_result, ',') || ' ] }';\n\n    /* 薪资更新处理和预算验证 */\n    FOR dept_rec IN\n        SELECT department_id, budget\n          FROM departments\n         WHERE (department_id >= p_min_dept OR p_min_dept IS NULL)\n           AND (department_id <= p_max_dept OR p_max_dept IS NULL)\n    LOOP\n        UPDATE employees\n           SET salary = COALESCE(salary, 3000) * (1 + p_percent/100)\n         WHERE department_id = dept_rec.department_id;\n        v_rows_updated := v_rows_updated + SQL%ROWCOUNT;\n\n        SELECT SUM(salary) INTO v_total_budget\n          FROM employees\n         WHERE department_id = dept_rec.department_id;\n        IF v_total_budget > dept_rec.budget THEN\n            RAISE EXCEPTION 'Budget exceeded in department %', dept_rec.department_id;\n        END IF;\n    END LOOP;\n\n    RAISE NOTICE 'Updated % records, Time %', v_rows_updated, NOW();\nEXCEPTION\n    WHEN NO_DATA_FOUND THEN\n        p_result := '{\"error\": \"Department not found\"}';\n    WHEN OTHERS THEN\n        p_result := '{\"error\": \"' || SQLERRM || '\"}';\nEND;\n$$;"
                    }
                ]
            },
            {
                "case_id": "7",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"7\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"NOW\", \"CURRENT_TIMESTAMP\", \"ARRAY\", \"CURSOR\", \"CASE\", \"SAVEPOINT\", \"ROLLBACK TO SAVEPOINT\", \"COUNT\", \"array_length\", \"FOR LOOP\", \"GREATEST\", \"current_user\", \"EXCEPTION\", \"SQLERRM\", \"CLOSE\", \"COMMIT\", \"RAISE NOTICE\", \"RAISE EXCEPTION\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE SP_BULK_UPDATE_INVENTORY(p_warehouse_id IN NUMBER, p_adjustment_type IN VARCHAR2, p_adjustment_date IN DATE DEFAULT SYSDATE) AS TYPE t_inventory_rec IS RECORD (product_id NUMBER, current_qty NUMBER, adjustment_qty NUMBER, new_qty NUMBER); TYPE t_inventory_tab IS TABLE OF t_inventory_rec INDEX BY BINARY_INTEGER; v_inventory t_inventory_tab; v_batch_size CONSTANT NUMBER := 1000; v_total_processed NUMBER := 0; v_error_count NUMBER := 0; CURSOR c_inventory IS SELECT product_id, quantity_on_hand, CASE p_adjustment_type WHEN 'RECOUNT' THEN physical_count - quantity_on_hand WHEN 'DAMAGE' THEN -damaged_quantity WHEN 'RETURN' THEN returned_quantity ELSE 0 END AS adjustment_qty FROM inventory_staging WHERE warehouse_id = p_warehouse_id AND status = 'PENDING' ORDER BY product_id; BEGIN SAVEPOINT bulk_update_start; OPEN c_inventory; LOOP FETCH c_inventory BULK COLLECT INTO v_inventory LIMIT v_batch_size; EXIT WHEN v_inventory.COUNT = 0; FOR i IN 1..v_inventory.COUNT LOOP BEGIN MERGE INTO inventory inv USING (SELECT v_inventory(i).product_id AS product_id, p_warehouse_id AS warehouse_id, v_inventory(i).adjustment_qty AS adj_qty FROM dual) src ON (inv.product_id = src.product_id AND inv.warehouse_id = src.warehouse_id) WHEN MATCHED THEN UPDATE SET inv.quantity_on_hand = inv.quantity_on_hand + src.adj_qty, inv.last_adjustment_date = p_adjustment_date, inv.last_adjustment_type = p_adjustment_type WHEN NOT MATCHED THEN INSERT (product_id, warehouse_id, quantity_on_hand, last_adjustment_date, last_adjustment_type) VALUES (src.product_id, src.warehouse_id, GREATEST(0, src.adj_qty), p_adjustment_date, p_adjustment_type); INSERT INTO inventory_audit_log (product_id, warehouse_id, adjustment_date, adjustment_type, old_quantity, adjustment_quantity, new_quantity, created_by) VALUES (v_inventory(i).product_id, p_warehouse_id, p_adjustment_date, p_adjustment_type, v_inventory(i).current_qty, v_inventory(i).adjustment_qty, v_inventory(i).current_qty + v_inventory(i).adjustment_qty, USER); v_total_processed := v_total_processed + 1; EXCEPTION WHEN OTHERS THEN v_error_count := v_error_count + 1; INSERT INTO error_log (error_date, error_message, product_id) VALUES (SYSDATE, 'Inventory update failed: ' || SQLERRM, v_inventory(i).product_id); END; END LOOP; END LOOP; CLOSE c_inventory; UPDATE inventory_staging SET status = 'PROCESSED', processed_date = SYSDATE WHERE warehouse_id = p_warehouse_id AND status = 'PENDING'; COMMIT; DBMS_OUTPUT.PUT_LINE('Bulk inventory update completed. Processed: ' || v_total_processed || ', Errors: ' || v_error_count); EXCEPTION WHEN OTHERS THEN ROLLBACK TO bulk_update_start; RAISE_APPLICATION_ERROR(-20001, 'Bulk inventory update failed: ' || SQLERRM); END SP_BULK_UPDATE_INVENTORY;\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE SP_BULK_UPDATE_INVENTORY(p_warehouse_id IN NUMBER, p_adjustment_type IN VARCHAR2, p_adjustment_date IN DATE DEFAULT SYSDATE) AS TYPE t_inventory_rec IS RECORD (product_id NUMBER, current_qty NUMBER, adjustment_qty NUMBER, new_qty NUMBER); TYPE t_inventory_tab IS TABLE OF t_inventory_rec INDEX BY BINARY_INTEGER; v_inventory t_inventory_tab; v_batch_size CONSTANT NUMBER := 1000; v_total_processed NUMBER := 0; v_error_count NUMBER := 0; CURSOR c_inventory IS SELECT product_id, quantity_on_hand, CASE p_adjustment_type WHEN 'RECOUNT' THEN physical_count - quantity_on_hand WHEN 'DAMAGE' THEN -damaged_quantity WHEN 'RETURN' THEN returned_quantity ELSE 0 END AS adjustment_qty FROM inventory_staging WHERE warehouse_id = p_warehouse_id AND status = 'PENDING' ORDER BY product_id; BEGIN SAVEPOINT bulk_update_start; OPEN c_inventory; LOOP FETCH c_inventory BULK COLLECT INTO v_inventory LIMIT v_batch_size; EXIT WHEN v_inventory.COUNT = 0; FOR i IN 1..v_inventory.COUNT LOOP BEGIN MERGE INTO inventory inv USING (SELECT v_inventory(i).product_id AS product_id, p_warehouse_id AS warehouse_id, v_inventory(i).adjustment_qty AS adj_qty FROM dual) src ON (inv.product_id = src.product_id AND inv.warehouse_id = src.warehouse_id) WHEN MATCHED THEN UPDATE SET inv.quantity_on_hand = inv.quantity_on_hand + src.adj_qty, inv.last_adjustment_date = p_adjustment_date, inv.last_adjustment_type = p_adjustment_type WHEN NOT MATCHED THEN INSERT (product_id, warehouse_id, quantity_on_hand, last_adjustment_date, last_adjustment_type) VALUES (src.product_id, src.warehouse_id, GREATEST(0, src.adj_qty), p_adjustment_date, p_adjustment_type); INSERT INTO inventory_audit_log (product_id, warehouse_id, adjustment_date, adjustment_type, old_quantity, adjustment_quantity, new_quantity, created_by) VALUES (v_inventory(i).product_id, p_warehouse_id, p_adjustment_date, p_adjustment_type, v_inventory(i).current_qty, v_inventory(i).adjustment_qty, v_inventory(i).current_qty + v_inventory(i).adjustment_qty, USER); v_total_processed := v_total_processed + 1; EXCEPTION WHEN OTHERS THEN v_error_count := v_error_count + 1; INSERT INTO error_log (error_date, error_message, product_id) VALUES (SYSDATE, 'Inventory update failed: ' || SQLERRM, v_inventory(i).product_id); END; END LOOP; END LOOP; CLOSE c_inventory; UPDATE inventory_staging SET status = 'PROCESSED', processed_date = SYSDATE WHERE warehouse_id = p_warehouse_id AND status = 'PENDING'; COMMIT; DBMS_OUTPUT.PUT_LINE('Bulk inventory update completed. Processed: ' || v_total_processed || ', Errors: ' || v_error_count); EXCEPTION WHEN OTHERS THEN ROLLBACK TO bulk_update_start; RAISE_APPLICATION_ERROR(-20001, 'Bulk inventory update failed: ' || SQLERRM); END SP_BULK_UPDATE_INVENTORY;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_BULK_UPDATE_INVENTORY(\n  p_warehouse_id integer,\n  p_adjustment_type varchar,\n  p_adjustment_date date DEFAULT now()\n)\nRETURNS void AS\n$$\nDECLARE\n  rec RECORD;\n  v_total_processed integer := 0;\n  v_error_count integer := 0;\nBEGIN\n  FOR rec IN\n    SELECT product_id, quantity_on_hand, CASE p_adjustment_type WHEN 'RECOUNT' THEN physical_count - quantity_on_hand WHEN 'DAMAGE' THEN -damaged_quantity WHEN 'RETURN' THEN returned_quantity ELSE 0 END AS adjustment_qty\n    FROM inventory_staging\n    WHERE warehouse_id = p_warehouse_id AND status = 'PENDING'\n    ORDER BY product_id\n  LOOP\n    BEGIN\n      WITH src AS (\n        SELECT rec.product_id AS product_id, p_warehouse_id AS warehouse_id, rec.adjustment_qty AS adj_qty\n      ),\n      upsert AS (\n        UPDATE inventory inv\n        SET quantity_on_hand = inv.quantity_on_hand + src.adj_qty,\n            last_adjustment_date = p_adjustment_date,\n            last_adjustment_type = p_adjustment_type\n        FROM src\n        WHERE inv.product_id = src.product_id AND inv.warehouse_id = src.warehouse_id\n        RETURNING inv.*\n      )\n      INSERT INTO inventory(product_id, warehouse_id, quantity_on_hand, last_adjustment_date, last_adjustment_type)\n      SELECT src.product_id, src.warehouse_id, GREATEST(0, src.adj_qty), p_adjustment_date, p_adjustment_type\n      FROM src\n      WHERE NOT EXISTS (SELECT 1 FROM upsert);\n\n      INSERT INTO inventory_audit_log(product_id, warehouse_id, adjustment_date, adjustment_type, old_quantity, adjustment_quantity, new_quantity, created_by)\n      VALUES (rec.product_id, p_warehouse_id, p_adjustment_date, p_adjustment_type, rec.quantity_on_hand, rec.adjustment_qty, rec.quantity_on_hand + rec.adjustment_qty, current_user);\n      v_total_processed := v_total_processed + 1;\n    EXCEPTION WHEN OTHERS THEN\n      v_error_count := v_error_count + 1;\n      INSERT INTO error_log(error_date, error_message, product_id)\n      VALUES (now(), 'Inventory update failed: ' || SQLERRM, rec.product_id);\n    END;\n  END LOOP;\n\n  UPDATE inventory_staging\n    SET status = 'PROCESSED', processed_date = now()\n    WHERE warehouse_id = p_warehouse_id AND status = 'PENDING';\n\n  RAISE NOTICE 'Bulk inventory update completed. Processed: %, Errors: %', v_total_processed, v_error_count;\nEXCEPTION WHEN OTHERS THEN\n  RAISE EXCEPTION 'Bulk inventory update failed: %', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_BULK_UPDATE_INVENTORY(p_warehouse_id numeric, p_adjustment_type varchar, p_adjustment_date timestamp DEFAULT now()) RETURNS void AS $$\nDECLARE\n    v_total_processed integer := 0;\n    v_error_count integer := 0;\n    v_rec record;\nBEGIN\n    FOR v_rec IN\n        SELECT product_id, quantity_on_hand, CASE p_adjustment_type WHEN 'RECOUNT' THEN physical_count - quantity_on_hand WHEN 'DAMAGE' THEN -damaged_quantity WHEN 'RETURN' THEN returned_quantity ELSE 0 END AS adjustment_qty\n        FROM inventory_staging\n        WHERE warehouse_id = p_warehouse_id AND status = 'PENDING'\n        ORDER BY product_id\n    LOOP\n        BEGIN\n            UPDATE inventory inv\n            SET quantity_on_hand = inv.quantity_on_hand + v_rec.adjustment_qty,\n                last_adjustment_date = p_adjustment_date,\n                last_adjustment_type = p_adjustment_type\n            WHERE inv.product_id = v_rec.product_id\n              AND inv.warehouse_id = p_warehouse_id;\n            IF NOT FOUND THEN\n                INSERT INTO inventory(product_id, warehouse_id, quantity_on_hand, last_adjustment_date, last_adjustment_type)\n                VALUES (v_rec.product_id, p_warehouse_id, GREATEST(0, v_rec.adjustment_qty), p_adjustment_date, p_adjustment_type);\n            END IF;\n            INSERT INTO inventory_audit_log(product_id, warehouse_id, adjustment_date, adjustment_type, old_quantity, adjustment_quantity, new_quantity, created_by)\n            VALUES (v_rec.product_id, p_warehouse_id, p_adjustment_date, p_adjustment_type, v_rec.quantity_on_hand, v_rec.adjustment_qty, v_rec.quantity_on_hand + v_rec.adjustment_qty, current_user);\n            v_total_processed := v_total_processed + 1;\n        EXCEPTION WHEN OTHERS THEN\n            v_error_count := v_error_count + 1;\n            INSERT INTO error_log(error_date, error_message, product_id)\n            VALUES (now(), 'Inventory update failed: ' || SQLERRM, v_rec.product_id);\n        END;\n    END LOOP;\n    UPDATE inventory_staging\n    SET status = 'PROCESSED', processed_date = p_adjustment_date\n    WHERE warehouse_id = p_warehouse_id AND status = 'PENDING';\n    RAISE NOTICE 'Bulk inventory update completed. Processed: %, Errors: %', v_total_processed, v_error_count;\nEXCEPTION WHEN OTHERS THEN\n    RAISE EXCEPTION 'Bulk inventory update failed: %', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_BULK_UPDATE_INVENTORY(\n    p_warehouse_id integer,\n    p_adjustment_type varchar,\n    p_adjustment_date date DEFAULT now()\n) RETURNS void LANGUAGE plpgsql AS $$\nDECLARE\n    v_total_processed integer := 0;\n    v_error_count integer := 0;\n    rec record;\nBEGIN\n    FOR rec IN\n        SELECT\n            product_id,\n            quantity_on_hand,\n            CASE p_adjustment_type\n                WHEN 'RECOUNT' THEN physical_count - quantity_on_hand\n                WHEN 'DAMAGE' THEN -damaged_quantity\n                WHEN 'RETURN' THEN returned_quantity\n                ELSE 0\n            END AS adjustment_qty\n        FROM inventory_staging\n        WHERE warehouse_id = p_warehouse_id\n          AND status = 'PENDING'\n        ORDER BY product_id\n    LOOP\n        BEGIN\n            UPDATE inventory\n               SET quantity_on_hand = inventory.quantity_on_hand + rec.adjustment_qty,\n                   last_adjustment_date = p_adjustment_date,\n                   last_adjustment_type = p_adjustment_type\n             WHERE product_id = rec.product_id\n               AND warehouse_id = p_warehouse_id;\n            IF NOT FOUND THEN\n                INSERT INTO inventory(\n                    product_id,\n                    warehouse_id,\n                    quantity_on_hand,\n                    last_adjustment_date,\n                    last_adjustment_type\n                ) VALUES (\n                    rec.product_id,\n                    p_warehouse_id,\n                    GREATEST(0, rec.adjustment_qty),\n                    p_adjustment_date,\n                    p_adjustment_type\n                );\n            END IF;\n            INSERT INTO inventory_audit_log(\n                product_id,\n                warehouse_id,\n                adjustment_date,\n                adjustment_type,\n                old_quantity,\n                adjustment_quantity,\n                new_quantity,\n                created_by\n            ) VALUES (\n                rec.product_id,\n                p_warehouse_id,\n                p_adjustment_date,\n                p_adjustment_type,\n                rec.quantity_on_hand,\n                rec.adjustment_qty,\n                rec.quantity_on_hand + rec.adjustment_qty,\n                current_user\n            );\n            v_total_processed := v_total_processed + 1;\n        EXCEPTION WHEN others THEN\n            v_error_count := v_error_count + 1;\n            INSERT INTO error_log(\n                error_date,\n                error_message,\n                product_id\n            ) VALUES (\n                now(),\n                'Inventory update failed: ' || SQLERRM,\n                rec.product_id\n            );\n        END;\n    END LOOP;\n\n    UPDATE inventory_staging\n       SET status = 'PROCESSED',\n           processed_date = now()\n     WHERE warehouse_id = p_warehouse_id\n       AND status = 'PENDING';\n\n    RAISE NOTICE 'Bulk inventory update completed. Processed: %, Errors: %', v_total_processed, v_error_count;\n\nEXCEPTION WHEN others THEN\n    RAISE EXCEPTION 'Bulk inventory update failed: %', SQLERRM;\nEND;\n$$;"
                    }
                ]
            },
            {
                "case_id": "8",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"8\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"TO_DATE\", \"LPAD\", \"DATE_TRUNC\", \"INTERVAL\", \"DATE\", \"NEXTVAL\", \"COALESCE\", \"EXECUTE\", \"NOW\", \"COUNT\", \"COMMIT\", \"ROLLBACK\", \"RAISE NOTICE\", \"RAISE EXCEPTION\", \"SQLERRM\", \"RECORD\", \"ARRAY\", \"varchar\", \"text\", \"numeric\", \"DATE\", \"TIMESTAMP\", \"USING\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE SP_GENERATE_SALES_REPORT(p_year IN NUMBER, p_quarter IN NUMBER, p_sales_rep_id IN NUMBER DEFAULT NULL) AS v_report_id NUMBER; v_total_sales NUMBER := 0; v_total_commission NUMBER := 0; v_report_sql VARCHAR2(4000); TYPE t_sales_summary IS RECORD (sales_rep_id NUMBER, sales_rep_name VARCHAR2(100), total_sales NUMBER, commission_rate NUMBER, commission_amount NUMBER); TYPE t_sales_tab IS TABLE OF t_sales_summary; v_sales_data t_sales_tab; v_start_date DATE; v_end_date DATE; BEGIN v_start_date := TO_DATE(p_year || '-' || LPAD((p_quarter - 1) * 3 + 1, 2, '0') || '-01', 'YYYY-MM-DD'); v_end_date := LAST_DAY(ADD_MONTHS(v_start_date, 2)); SELECT sales_report_seq.NEXTVAL INTO v_report_id FROM dual; v_report_sql := 'SELECT sr.sales_rep_id, sr.sales_rep_name, NVL(SUM(s.sale_amount), 0) as total_sales, sr.commission_rate, NVL(SUM(s.sale_amount), 0) * sr.commission_rate as commission_amount FROM sales_representatives sr LEFT JOIN sales s ON sr.sales_rep_id = s.sales_rep_id AND s.sale_date BETWEEN :1 AND :2 WHERE (:3 IS NULL OR sr.sales_rep_id = :3) GROUP BY sr.sales_rep_id, sr.sales_rep_name, sr.commission_rate ORDER BY total_sales DESC'; EXECUTE IMMEDIATE v_report_sql BULK COLLECT INTO v_sales_data USING v_start_date, v_end_date, p_sales_rep_id, p_sales_rep_id; INSERT INTO sales_report_header (report_id, report_year, report_quarter, created_date, total_reps) VALUES (v_report_id, p_year, p_quarter, SYSDATE, v_sales_data.COUNT); FOR i IN 1..v_sales_data.COUNT LOOP INSERT INTO sales_report_detail (report_id, sales_rep_id, sales_rep_name, total_sales, commission_rate, commission_amount) VALUES (v_report_id, v_sales_data(i).sales_rep_id, v_sales_data(i).sales_rep_name, v_sales_data(i).total_sales, v_sales_data(i).commission_rate, v_sales_data(i).commission_amount); v_total_sales := v_total_sales + v_sales_data(i).total_sales; v_total_commission := v_total_commission + v_sales_data(i).commission_amount; END LOOP; UPDATE sales_report_header SET total_sales = v_total_sales, total_commission = v_total_commission WHERE report_id = v_report_id; COMMIT; DBMS_OUTPUT.PUT_LINE('Sales report generated successfully. Report ID: ' || v_report_id); EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE_APPLICATION_ERROR(-20002, 'Sales report generation failed: ' || SQLERRM); END SP_GENERATE_SALES_REPORT;\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE SP_GENERATE_SALES_REPORT(p_year IN NUMBER, p_quarter IN NUMBER, p_sales_rep_id IN NUMBER DEFAULT NULL) AS v_report_id NUMBER; v_total_sales NUMBER := 0; v_total_commission NUMBER := 0; v_report_sql VARCHAR2(4000); TYPE t_sales_summary IS RECORD (sales_rep_id NUMBER, sales_rep_name VARCHAR2(100), total_sales NUMBER, commission_rate NUMBER, commission_amount NUMBER); TYPE t_sales_tab IS TABLE OF t_sales_summary; v_sales_data t_sales_tab; v_start_date DATE; v_end_date DATE; BEGIN v_start_date := TO_DATE(p_year || '-' || LPAD((p_quarter - 1) * 3 + 1, 2, '0') || '-01', 'YYYY-MM-DD'); v_end_date := LAST_DAY(ADD_MONTHS(v_start_date, 2)); SELECT sales_report_seq.NEXTVAL INTO v_report_id FROM dual; v_report_sql := 'SELECT sr.sales_rep_id, sr.sales_rep_name, NVL(SUM(s.sale_amount), 0) as total_sales, sr.commission_rate, NVL(SUM(s.sale_amount), 0) * sr.commission_rate as commission_amount FROM sales_representatives sr LEFT JOIN sales s ON sr.sales_rep_id = s.sales_rep_id AND s.sale_date BETWEEN :1 AND :2 WHERE (:3 IS NULL OR sr.sales_rep_id = :3) GROUP BY sr.sales_rep_id, sr.sales_rep_name, sr.commission_rate ORDER BY total_sales DESC'; EXECUTE IMMEDIATE v_report_sql BULK COLLECT INTO v_sales_data USING v_start_date, v_end_date, p_sales_rep_id, p_sales_rep_id; INSERT INTO sales_report_header (report_id, report_year, report_quarter, created_date, total_reps) VALUES (v_report_id, p_year, p_quarter, SYSDATE, v_sales_data.COUNT); FOR i IN 1..v_sales_data.COUNT LOOP INSERT INTO sales_report_detail (report_id, sales_rep_id, sales_rep_name, total_sales, commission_rate, commission_amount) VALUES (v_report_id, v_sales_data(i).sales_rep_id, v_sales_data(i).sales_rep_name, v_sales_data(i).total_sales, v_sales_data(i).commission_rate, v_sales_data(i).commission_amount); v_total_sales := v_total_sales + v_sales_data(i).total_sales; v_total_commission := v_total_commission + v_sales_data(i).commission_amount; END LOOP; UPDATE sales_report_header SET total_sales = v_total_sales, total_commission = v_total_commission WHERE report_id = v_report_id; COMMIT; DBMS_OUTPUT.PUT_LINE('Sales report generated successfully. Report ID: ' || v_report_id); EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE_APPLICATION_ERROR(-20002, 'Sales report generation failed: ' || SQLERRM); END SP_GENERATE_SALES_REPORT;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_GENERATE_SALES_REPORT(\n    p_year numeric,\n    p_quarter numeric,\n    p_sales_rep_id numeric DEFAULT NULL\n)\nRETURNS void\nLANGUAGE plpgsql\nAS $$\nDECLARE\n    v_report_id numeric;\n    v_total_sales numeric := 0;\n    v_total_commission numeric := 0;\n    v_report_sql text;\n    v_start_date date;\n    v_end_date date;\n    v_total_reps integer;\n    rec record;\nBEGIN\n    v_start_date := to_date(p_year::text || '-' || lpad(((p_quarter - 1) * 3 + 1)::text, 2, '0') || '-01', 'YYYY-MM-DD');\n    v_end_date := (date_trunc('month', v_start_date) + interval '3 month' - interval '1 day')::date;\n    v_report_id := nextval('sales_report_seq');\n\n    v_report_sql := \n        'SELECT sr.sales_rep_id, sr.sales_rep_name, ' ||\n        'COALESCE(SUM(s.sale_amount), 0) AS total_sales, ' ||\n        'sr.commission_rate, ' ||\n        'COALESCE(SUM(s.sale_amount), 0) * sr.commission_rate AS commission_amount ' ||\n        'FROM sales_representatives sr ' ||\n        'LEFT JOIN sales s ON sr.sales_rep_id = s.sales_rep_id ' ||\n        'AND s.sale_date BETWEEN $1 AND $2 ' ||\n        'WHERE ($3 IS NULL OR sr.sales_rep_id = $3) ' ||\n        'GROUP BY sr.sales_rep_id, sr.sales_rep_name, sr.commission_rate ' ||\n        'ORDER BY total_sales DESC';\n\n    EXECUTE format('SELECT COUNT(*) FROM (%s) t', v_report_sql)\n        INTO v_total_reps\n        USING v_start_date, v_end_date, p_sales_rep_id;\n\n    INSERT INTO sales_report_header(\n        report_id, report_year, report_quarter, created_date, total_reps\n    ) VALUES (\n        v_report_id, p_year, p_quarter, now(), v_total_reps\n    );\n\n    FOR rec IN EXECUTE v_report_sql USING v_start_date, v_end_date, p_sales_rep_id LOOP\n        INSERT INTO sales_report_detail(\n            report_id, sales_rep_id, sales_rep_name, total_sales, commission_rate, commission_amount\n        ) VALUES (\n            v_report_id,\n            rec.sales_rep_id,\n            rec.sales_rep_name,\n            rec.total_sales,\n            rec.commission_rate,\n            rec.commission_amount\n        );\n        v_total_sales := v_total_sales + rec.total_sales;\n        v_total_commission := v_total_commission + rec.commission_amount;\n    END LOOP;\n\n    UPDATE sales_report_header\n    SET\n        total_sales = v_total_sales,\n        total_commission = v_total_commission\n    WHERE report_id = v_report_id;\n\n    RAISE NOTICE 'Sales report generated successfully. Report ID: %', v_report_id;\n\nEXCEPTION WHEN OTHERS THEN\n    RAISE EXCEPTION 'Sales report generation failed: %', SQLERRM;\nEND;\n$$;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_GENERATE_SALES_REPORT(\n    p_year            INTEGER,\n    p_quarter         INTEGER,\n    p_sales_rep_id    INTEGER DEFAULT NULL\n) RETURNS void AS $$\nDECLARE\n    v_report_id       BIGINT;\n    v_total_sales     NUMERIC := 0;\n    v_total_commission NUMERIC := 0;\n    v_start_date      DATE;\n    v_end_date        DATE;\n    rec               RECORD;\nBEGIN\n    -- 计算季度起始和结束日期\n    v_start_date := TO_DATE(p_year::TEXT || '-' || LPAD(((p_quarter - 1) * 3 + 1)::TEXT, 2, '0') || '-01', 'YYYY-MM-DD');\n    v_end_date   := (DATE_TRUNC('MONTH', v_start_date) + INTERVAL '3 month' - INTERVAL '1 day')::DATE;\n\n    -- 获取报表ID\n    v_report_id := nextval('sales_report_seq');\n\n    -- 插入报表头（初始总记录数）\n    INSERT INTO sales_report_header(\n        report_id,\n        report_year,\n        report_quarter,\n        created_date,\n        total_reps\n    )\n    SELECT\n        v_report_id,\n        p_year,\n        p_quarter,\n        now(),\n        COUNT(*)\n    FROM sales_representatives sr\n    WHERE p_sales_rep_id IS NULL OR sr.sales_rep_id = p_sales_rep_id;\n\n    -- 遍历明细并累加汇总\n    FOR rec IN\n        EXECUTE\n        'SELECT sr.sales_rep_id,\n                sr.sales_rep_name,\n                COALESCE(SUM(s.sale_amount), 0) AS total_sales,\n                sr.commission_rate,\n                COALESCE(SUM(s.sale_amount), 0) * sr.commission_rate AS commission_amount\n         FROM sales_representatives sr\n         LEFT JOIN sales s\n           ON sr.sales_rep_id = s.sales_rep_id\n          AND s.sale_date BETWEEN $1 AND $2\n         WHERE ($3 IS NULL OR sr.sales_rep_id = $3)\n         GROUP BY sr.sales_rep_id, sr.sales_rep_name, sr.commission_rate\n         ORDER BY total_sales DESC'\n        USING v_start_date, v_end_date, p_sales_rep_id\n    LOOP\n        INSERT INTO sales_report_detail(\n            report_id,\n            sales_rep_id,\n            sales_rep_name,\n            total_sales,\n            commission_rate,\n            commission_amount\n        ) VALUES (\n            v_report_id,\n            rec.sales_rep_id,\n            rec.sales_rep_name,\n            rec.total_sales,\n            rec.commission_rate,\n            rec.commission_amount\n        );\n        v_total_sales     := v_total_sales + rec.total_sales;\n        v_total_commission := v_total_commission + rec.commission_amount;\n    END LOOP;\n\n    -- 更新报表头中的汇总数值\n    UPDATE sales_report_header\n       SET total_sales     = v_total_sales,\n           total_commission = v_total_commission\n     WHERE report_id = v_report_id;\n\n    -- 输出日志\n    RAISE NOTICE 'Sales report generated successfully. Report ID: %', v_report_id;\n\nEXCEPTION WHEN OTHERS THEN\n    -- 异常时抛出错误\n    RAISE EXCEPTION 'Sales report generation failed: %', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_GENERATE_SALES_REPORT(\n    p_year numeric,\n    p_quarter numeric,\n    p_sales_rep_id numeric DEFAULT NULL\n) RETURNS void AS $$\nDECLARE\n    v_report_id bigint;\n    v_total_sales numeric := 0;\n    v_total_commission numeric := 0;\n    v_report_sql text;\n    v_start_date date;\n    v_end_date date;\n    v_count integer := 0;\n    v_row record;\nBEGIN\n    v_start_date := to_date(p_year::text || '-' || lpad(((p_quarter - 1) * 3 + 1)::text, 2, '0') || '-01', 'YYYY-MM-DD');\n    v_end_date := (date_trunc('MONTH', v_start_date + interval '2 month') + interval '1 month' - interval '1 day')::date;\n    v_report_id := nextval('sales_report_seq');\n    v_report_sql := 'SELECT sr.sales_rep_id, sr.sales_rep_name, COALESCE(SUM(s.sale_amount), 0) AS total_sales, sr.commission_rate, COALESCE(SUM(s.sale_amount), 0) * sr.commission_rate AS commission_amount FROM sales_representatives sr LEFT JOIN sales s ON sr.sales_rep_id = s.sales_rep_id AND s.sale_date BETWEEN $1 AND $2 WHERE ($3 IS NULL OR sr.sales_rep_id = $3) GROUP BY sr.sales_rep_id, sr.sales_rep_name, sr.commission_rate ORDER BY total_sales DESC';\n    FOR v_row IN EXECUTE v_report_sql USING v_start_date, v_end_date, p_sales_rep_id LOOP\n        v_count := v_count + 1;\n        INSERT INTO sales_report_detail(report_id, sales_rep_id, sales_rep_name, total_sales, commission_rate, commission_amount)\n        VALUES (v_report_id, v_row.sales_rep_id, v_row.sales_rep_name, v_row.total_sales, v_row.commission_rate, v_row.commission_amount);\n        v_total_sales := v_total_sales + v_row.total_sales;\n        v_total_commission := v_total_commission + v_row.commission_amount;\n    END LOOP;\n    INSERT INTO sales_report_header(report_id, report_year, report_quarter, created_date, total_reps, total_sales, total_commission)\n    VALUES (v_report_id, p_year, p_quarter, now(), v_count, v_total_sales, v_total_commission);\n    RAISE NOTICE 'Sales report generated successfully. Report ID: %', v_report_id;\nEXCEPTION WHEN OTHERS THEN\n    RAISE EXCEPTION 'Sales report generation failed: %', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "9",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"9\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"ROW_NUMBER\", \"COALESCE\", \"NOW\", \"TRUNC\", \"string_agg\", \"REFCURSOR\", \"ROWNUM\", \"VARCHAR\", \"text\", \"EXCEPTION\", \"NOT FOUND\", \"RAISE\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE SP_VOP_VESSEL_MANAGE_BK1(V_BUSIMAIN_CODE IN VARCHAR2, V_VES_CALIBRE IN VARCHAR2, V_VESSEL_CODE IN VARCHAR2, V_CALL_SIGN IN VARCHAR2, V_BUSI_MAINBODY IN VARCHAR2, V_BUSI_CALIBRE IN VARCHAR2, V_VESSEL_TYPE_CODE IN VARCHAR2, V_COMPANY_CALIBRE IN VARCHAR2, V_VESMAN_CODE IN VARCHAR2, V_MANAGER_CALIBRE IN VARCHAR2, V_TRADE_TYPE IN VARCHAR2, V_TETIRED_FLAG IN VARCHAR2, V_ACCMAN_CODE IN VARCHAR2, V_ACCOUNT_CALIBRE IN VARCHAR2, V_FEE_TYPE IN VARCHAR2, V_FEE_SUBJECT IN VARCHAR2, V_SAFEMAN_CODE IN VARCHAR2, V_SAFE_CALIBRE IN VARCHAR2, V_CORPORATE_CALIBRE IN VARCHAR2, V_TEST_CALIBRE IN VARCHAR2, V_COSTMAN_CODE IN VARCHAR2, V_COST_CALIBRE IN VARCHAR2, IS_CORSUR OUT SYS_REFCURSOR) IS BEGIN OPEN IS_CORSUR FOR SELECT * FROM( SELECT KK.ROW_NO, KK.VESSEL_CODE, /*船舶代码*/ KK.VESSEL_NAME, /*船舶名称（中文名）*/ KK.VESSEL_NAME_EN, /*船舶名称（英文名）*/ KK.ANOTHER_NAME, /*BMS标准船名 0*/ NVL(S1.OFFICE_NAME,KK.VESMAN_CODE)AS VES_MANAGER, /*船东*/ KK.SHIP_OWNER_FLAG_NAME, /*船舶产权性质 0*/ KK.VESSEL_TYPE, /*船型*/ KK.AREA_NAME, /*航区*/ KK.SHIPYARD, /*建造国家或地区 0*/ KK.VESSEL_NATIONALITY, /*船旗国(地区)*/ KK.TOTAL_LENGTH, /*总长*/ KK.WIDE, /*型宽*/ KK.TYPE_DEEP, /*型深*/ KK.BARE_SPACING_DRINKING, /*吃水 0*/ KK.SHIP_PORT, /*船籍港*/ KK.TONNAGE, /*总吨（吨）*/ KK.MUTETON, /*净吨（吨）*/ KK.CALCULATELIGHTTON, /*轻吨（吨） 0*/ KK.SPEED, /*航速(节)*/ KK.PANAMA_CANAL_TONNAGE, /*总载重量（吨） 0*/ KK.PANAMA_CANAL_NET_TON, /*净载重量（吨） 0*/ KK.HOST_POWER, /*功 率（千瓦）*/ KK.CONSTRUCTION_DATE, /*建造年月*/ KK.CREATE_YEAR, /*船龄(年)*/ KK.OPERATION_DATE, /*接入时间*/ KK.RETIRED_DATE, /*退租/役船时间*/ KK.CALL_SIGN, /*呼号*/ KK.IMO_NO /*IMO编号*/ FROM ( SELECT ROW_NUMBER() OVER(ORDER BY MB.VESSEL_CODE)AS ROW_NO, MB.VESSEL_CODE, MB.VESSEL_NAME, MB.VESSEL_NAME_EN, MB.ANOTHER_NAME, FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'1')AS VESMAN_CODE, NVL(mb.ship_owner_flag,(SELECT c.display_value_cn FROM cdm_codedict c WHERE c.code_type = 'CDM_SHIP_WONER_FLAG' AND c.code_value = MB.ship_owner_flag and rownum = 1))AS SHIP_OWNER_FLAG_NAME, MB.VESSEL_TYPE, NVL(MB.AREA,(SELECT C.DISPLAY_VALUE_CN FROM CDM_CODEDICT C WHERE C.CODE_TYPE = 'CDM_NAVIGATING_ZONE' AND C.CODE_VALUE = MB.AREA))AS AREA_NAME, MB.SHIPYARD, NVL(MB.VESSEL_NATIONALITY,(SELECT COUNTRY_NAME FROM CDM_COUNTRY WHERE COUNTRY_CODE= MB.VESSEL_NATIONALITY))AS VESSEL_NATIONALITY, MB.TOTAL_LENGTH, MB.WIDE, MB.TYPE_DEEP, MB.BARE_SPACING_DRINKING, NVL(MB.SHIP_PORT,(SELECT PORT_NAME from CDM_PORT WHERE PORT_CODE=MB.SHIP_PORT))AS SHIP_PORT, MB.TONNAGE, MB.MUTETON, MB.CALCULATELIGHTTON, MB.SPEED, MB.PANAMA_CANAL_TONNAGE, MB.PANAMA_CANAL_NET_TON, MB.HOST_POWER, MB.CONSTRUCTION_DATE, TRUNC(MONTHS_BETWEEN(SYSDATE, MB.CONSTRUCTION_DATE) / 12)AS CREATE_YEAR, MB.OPERATION_DATE, MB.RETIRED_DATE, MB.CALL_SIGN, MB.IMO_NO FROM VOP_VESSEL MB LEFT JOIN (SELECT LISTAGG((V.TEST_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS TEST_CALIBRE, LISTAGG((V.FEE_TYPE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS FEE_TYPE, LISTAGG((V.FEE_SUBJECT), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS FEE_SUBJECT, LISTAGG((V.CORPORATE_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS CORPORATE_CALIBRE, LISTAGG((V.COMPANY_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS COMPANY_CALIBRE, V.VESSEL_ID FROM VOP_VESSEL_STATISTICS_CALIBRE V GROUP BY V.VESSEL_ID) VV ON MB.VESSEL_ID = VV.VESSEL_ID WHERE (V_BUSIMAIN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'2') = V_BUSIMAIN_CODE) AND (V_VES_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'1') = V_VES_CALIBRE) AND (V_VESSEL_CODE IS NULL OR MB.VESSEL_CODE = V_VESSEL_CODE) AND (V_CALL_SIGN IS NULL OR MB.CALL_SIGN = V_CALL_SIGN) AND (V_BUSI_MAINBODY IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'2') = V_BUSI_MAINBODY) AND (V_BUSI_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'2') = V_BUSI_CALIBRE) AND (V_VESSEL_TYPE_CODE IS NULL OR MB.VESSEL_TYPE_CODE = VESSEL_TYPE_CODE) AND (V_COMPANY_CALIBRE IS NULL OR VV.COMPANY_CALIBRE = V_COMPANY_CALIBRE) AND (V_VESMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'1') = V_VESMAN_CODE) AND (V_MANAGER_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'3') = V_MANAGER_CALIBRE) AND (V_TRADE_TYPE IS NULL OR MB.TRADE_TYPE = V_TRADE_TYPE) AND (V_TETIRED_FLAG IS NULL OR MB.TETIRED_FLAG = V_TETIRED_FLAG) AND (V_ACCMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'4') = V_ACCMAN_CODE) AND (V_ACCOUNT_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'4') = V_ACCOUNT_CALIBRE) AND (V_FEE_TYPE IS NULL OR VV.FEE_TYPE = V_FEE_TYPE) AND (V_FEE_SUBJECT IS NULL OR VV.FEE_SUBJECT = V_FEE_SUBJECT) AND (V_SAFEMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'5') = V_SAFEMAN_CODE) AND (V_SAFE_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'5') = V_SAFE_CALIBRE) AND (V_CORPORATE_CALIBRE IS NULL OR VV.CORPORATE_CALIBRE = V_CORPORATE_CALIBRE) AND (V_TEST_CALIBRE IS NULL OR VV.TEST_CALIBRE = V_TEST_CALIBRE) AND (V_COSTMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'6') = V_COSTMAN_CODE) AND (V_COST_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'6') = V_COST_CALIBRE) )KK LEFT JOIN SYS_OFFICE S1 ON S1.OFFICE_CODE = KK.VESMAN_CODE AND NVL(S1.IS_DELETE, '0') <> '1' )A; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; WHEN OTHERS THEN RAISE; END SP_VOP_VESSEL_MANAGE_BK1; $$\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE SP_VOP_VESSEL_MANAGE_BK1(V_BUSIMAIN_CODE IN VARCHAR2, V_VES_CALIBRE IN VARCHAR2, V_VESSEL_CODE IN VARCHAR2, V_CALL_SIGN IN VARCHAR2, V_BUSI_MAINBODY IN VARCHAR2, V_BUSI_CALIBRE IN VARCHAR2, V_VESSEL_TYPE_CODE IN VARCHAR2, V_COMPANY_CALIBRE IN VARCHAR2, V_VESMAN_CODE IN VARCHAR2, V_MANAGER_CALIBRE IN VARCHAR2, V_TRADE_TYPE IN VARCHAR2, V_TETIRED_FLAG IN VARCHAR2, V_ACCMAN_CODE IN VARCHAR2, V_ACCOUNT_CALIBRE IN VARCHAR2, V_FEE_TYPE IN VARCHAR2, V_FEE_SUBJECT IN VARCHAR2, V_SAFEMAN_CODE IN VARCHAR2, V_SAFE_CALIBRE IN VARCHAR2, V_CORPORATE_CALIBRE IN VARCHAR2, V_TEST_CALIBRE IN VARCHAR2, V_COSTMAN_CODE IN VARCHAR2, V_COST_CALIBRE IN VARCHAR2, IS_CORSUR OUT SYS_REFCURSOR) IS BEGIN OPEN IS_CORSUR FOR SELECT * FROM( SELECT KK.ROW_NO, KK.VESSEL_CODE, /*船舶代码*/ KK.VESSEL_NAME, /*船舶名称（中文名）*/ KK.VESSEL_NAME_EN, /*船舶名称（英文名）*/ KK.ANOTHER_NAME, /*BMS标准船名 0*/ NVL(S1.OFFICE_NAME,KK.VESMAN_CODE)AS VES_MANAGER, /*船东*/ KK.SHIP_OWNER_FLAG_NAME, /*船舶产权性质 0*/ KK.VESSEL_TYPE, /*船型*/ KK.AREA_NAME, /*航区*/ KK.SHIPYARD, /*建造国家或地区 0*/ KK.VESSEL_NATIONALITY, /*船旗国(地区)*/ KK.TOTAL_LENGTH, /*总长*/ KK.WIDE, /*型宽*/ KK.TYPE_DEEP, /*型深*/ KK.BARE_SPACING_DRINKING, /*吃水 0*/ KK.SHIP_PORT, /*船籍港*/ KK.TONNAGE, /*总吨（吨）*/ KK.MUTETON, /*净吨（吨）*/ KK.CALCULATELIGHTTON, /*轻吨（吨） 0*/ KK.SPEED, /*航速(节)*/ KK.PANAMA_CANAL_TONNAGE, /*总载重量（吨） 0*/ KK.PANAMA_CANAL_NET_TON, /*净载重量（吨） 0*/ KK.HOST_POWER, /*功 率（千瓦）*/ KK.CONSTRUCTION_DATE, /*建造年月*/ KK.CREATE_YEAR, /*船龄(年)*/ KK.OPERATION_DATE, /*接入时间*/ KK.RETIRED_DATE, /*退租/役船时间*/ KK.CALL_SIGN, /*呼号*/ KK.IMO_NO /*IMO编号*/ FROM ( SELECT ROW_NUMBER() OVER(ORDER BY MB.VESSEL_CODE)AS ROW_NO, MB.VESSEL_CODE, MB.VESSEL_NAME, MB.VESSEL_NAME_EN, MB.ANOTHER_NAME, FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'1')AS VESMAN_CODE, NVL(mb.ship_owner_flag,(SELECT c.display_value_cn FROM cdm_codedict c WHERE c.code_type = 'CDM_SHIP_WONER_FLAG' AND c.code_value = MB.ship_owner_flag and rownum = 1))AS SHIP_OWNER_FLAG_NAME, MB.VESSEL_TYPE, NVL(MB.AREA,(SELECT C.DISPLAY_VALUE_CN FROM CDM_CODEDICT C WHERE C.CODE_TYPE = 'CDM_NAVIGATING_ZONE' AND C.CODE_VALUE = MB.AREA))AS AREA_NAME, MB.SHIPYARD, NVL(MB.VESSEL_NATIONALITY,(SELECT COUNTRY_NAME FROM CDM_COUNTRY WHERE COUNTRY_CODE= MB.VESSEL_NATIONALITY))AS VESSEL_NATIONALITY, MB.TOTAL_LENGTH, MB.WIDE, MB.TYPE_DEEP, MB.BARE_SPACING_DRINKING, NVL(MB.SHIP_PORT,(SELECT PORT_NAME from CDM_PORT WHERE PORT_CODE=MB.SHIP_PORT))AS SHIP_PORT, MB.TONNAGE, MB.MUTETON, MB.CALCULATELIGHTTON, MB.SPEED, MB.PANAMA_CANAL_TONNAGE, MB.PANAMA_CANAL_NET_TON, MB.HOST_POWER, MB.CONSTRUCTION_DATE, TRUNC(MONTHS_BETWEEN(SYSDATE, MB.CONSTRUCTION_DATE) / 12)AS CREATE_YEAR, MB.OPERATION_DATE, MB.RETIRED_DATE, MB.CALL_SIGN, MB.IMO_NO FROM VOP_VESSEL MB LEFT JOIN (SELECT LISTAGG((V.TEST_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS TEST_CALIBRE, LISTAGG((V.FEE_TYPE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS FEE_TYPE, LISTAGG((V.FEE_SUBJECT), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS FEE_SUBJECT, LISTAGG((V.CORPORATE_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS CORPORATE_CALIBRE, LISTAGG((V.COMPANY_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS COMPANY_CALIBRE, V.VESSEL_ID FROM VOP_VESSEL_STATISTICS_CALIBRE V GROUP BY V.VESSEL_ID) VV ON MB.VESSEL_ID = VV.VESSEL_ID WHERE (V_BUSIMAIN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'2') = V_BUSIMAIN_CODE) AND (V_VES_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'1') = V_VES_CALIBRE) AND (V_VESSEL_CODE IS NULL OR MB.VESSEL_CODE = V_VESSEL_CODE) AND (V_CALL_SIGN IS NULL OR MB.CALL_SIGN = V_CALL_SIGN) AND (V_BUSI_MAINBODY IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'2') = V_BUSI_MAINBODY) AND (V_BUSI_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'2') = V_BUSI_CALIBRE) AND (V_VESSEL_TYPE_CODE IS NULL OR MB.VESSEL_TYPE_CODE = VESSEL_TYPE_CODE) AND (V_COMPANY_CALIBRE IS NULL OR VV.COMPANY_CALIBRE = V_COMPANY_CALIBRE) AND (V_VESMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'1') = V_VESMAN_CODE) AND (V_MANAGER_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'3') = V_MANAGER_CALIBRE) AND (V_TRADE_TYPE IS NULL OR MB.TRADE_TYPE = V_TRADE_TYPE) AND (V_TETIRED_FLAG IS NULL OR MB.TETIRED_FLAG = V_TETIRED_FLAG) AND (V_ACCMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'4') = V_ACCMAN_CODE) AND (V_ACCOUNT_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'4') = V_ACCOUNT_CALIBRE) AND (V_FEE_TYPE IS NULL OR VV.FEE_TYPE = V_FEE_TYPE) AND (V_FEE_SUBJECT IS NULL OR VV.FEE_SUBJECT = V_FEE_SUBJECT) AND (V_SAFEMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'5') = V_SAFEMAN_CODE) AND (V_SAFE_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'5') = V_SAFE_CALIBRE) AND (V_CORPORATE_CALIBRE IS NULL OR VV.CORPORATE_CALIBRE = V_CORPORATE_CALIBRE) AND (V_TEST_CALIBRE IS NULL OR VV.TEST_CALIBRE = V_TEST_CALIBRE) AND (V_COSTMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'6') = V_COSTMAN_CODE) AND (V_COST_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'6') = V_COST_CALIBRE) )KK LEFT JOIN SYS_OFFICE S1 ON S1.OFFICE_CODE = KK.VESMAN_CODE AND NVL(S1.IS_DELETE, '0') <> '1' )A; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; WHEN OTHERS THEN RAISE; END SP_VOP_VESSEL_MANAGE_BK1; $$\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_VOP_VESSEL_MANAGE_BK1(\n    V_BUSIMAIN_CODE IN varchar,\n    V_VES_CALIBRE IN varchar,\n    V_VESSEL_CODE IN varchar,\n    V_CALL_SIGN IN varchar,\n    V_BUSI_MAINBODY IN varchar,\n    V_BUSI_CALIBRE IN varchar,\n    V_VESSEL_TYPE_CODE IN varchar,\n    V_COMPANY_CALIBRE IN varchar,\n    V_VESMAN_CODE IN varchar,\n    V_MANAGER_CALIBRE IN varchar,\n    V_TRADE_TYPE IN varchar,\n    V_TETIRED_FLAG IN varchar,\n    V_ACCMAN_CODE IN varchar,\n    V_ACCOUNT_CALIBRE IN varchar,\n    V_FEE_TYPE IN varchar,\n    V_FEE_SUBJECT IN varchar,\n    V_SAFEMAN_CODE IN varchar,\n    V_SAFE_CALIBRE IN varchar,\n    V_CORPORATE_CALIBRE IN varchar,\n    V_TEST_CALIBRE IN varchar,\n    V_COSTMAN_CODE IN varchar,\n    V_COST_CALIBRE IN varchar,\n    OUT IS_CORSUR refcursor\n)\nLANGUAGE plpgsql\nAS $$\nBEGIN\n  OPEN IS_CORSUR FOR\n  SELECT * FROM (\n    SELECT KK.ROW_NO,\n           KK.VESSEL_CODE,\n           /*船舶代码*/ KK.VESSEL_NAME,\n           /*船舶名称（中文名）*/ KK.VESSEL_NAME_EN,\n           /*船舶名称（英文名）*/ KK.ANOTHER_NAME,\n           /*BMS标准船名 0*/ COALESCE(S1.OFFICE_NAME, KK.VESMAN_CODE) AS VES_MANAGER,\n           /*船东*/ KK.SHIP_OWNER_FLAG_NAME,\n           /*船舶产权性质 0*/ KK.VESSEL_TYPE,\n           /*船型*/ KK.AREA_NAME,\n           /*航区*/ KK.SHIPYARD,\n           /*建造国家或地区 0*/ KK.VESSEL_NATIONALITY,\n           /*船旗国(地区)*/ KK.TOTAL_LENGTH,\n           /*总长*/ KK.WIDE,\n           /*型宽*/ KK.TYPE_DEEP,\n           /*型深*/ KK.BARE_SPACING_DRINKING,\n           /*吃水 0*/ KK.SHIP_PORT,\n           /*船籍港*/ KK.TONNAGE,\n           /*总吨（吨）*/ KK.MUTETON,\n           /*净吨（吨）*/ KK.CALCULATELIGHTTON,\n           /*轻吨（吨） 0*/ KK.SPEED,\n           /*航速(节)*/ KK.PANAMA_CANAL_TONNAGE,\n           /*总载重量（吨） 0*/ KK.PANAMA_CANAL_NET_TON,\n           /*净载重量（吨） 0*/ KK.HOST_POWER,\n           /*功 率（千瓦）*/ KK.CONSTRUCTION_DATE,\n           /*建造年月*/ KK.CREATE_YEAR,\n           /*船龄(年)*/ KK.OPERATION_DATE,\n           /*接入时间*/ KK.RETIRED_DATE,\n           /*退租/役船时间*/ KK.CALL_SIGN,\n           /*呼号*/ KK.IMO_NO /*IMO编号*/\n    FROM (\n      SELECT\n        ROW_NUMBER() OVER(ORDER BY MB.VESSEL_CODE) AS ROW_NO,\n        MB.VESSEL_CODE,\n        MB.VESSEL_NAME,\n        MB.VESSEL_NAME_EN,\n        MB.ANOTHER_NAME,\n        FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '1') AS VESMAN_CODE,\n        COALESCE(\n          mb.ship_owner_flag,\n          (\n            SELECT c.display_value_cn\n            FROM cdm_codedict c\n            WHERE c.code_type = 'CDM_SHIP_WONER_FLAG'\n              AND c.code_value = MB.ship_owner_flag\n            LIMIT 1\n          )\n        ) AS SHIP_OWNER_FLAG_NAME,\n        MB.VESSEL_TYPE,\n        COALESCE(\n          MB.AREA,\n          (\n            SELECT C.DISPLAY_VALUE_CN\n            FROM CDM_CODEDICT C\n            WHERE C.CODE_TYPE = 'CDM_NAVIGATING_ZONE'\n              AND C.CODE_VALUE = MB.AREA\n            LIMIT 1\n          )\n        ) AS AREA_NAME,\n        MB.SHIPYARD,\n        COALESCE(\n          MB.VESSEL_NATIONALITY,\n          (\n            SELECT COUNTRY_NAME\n            FROM CDM_COUNTRY\n            WHERE COUNTRY_CODE = MB.VESSEL_NATIONALITY\n            LIMIT 1\n          )\n        ) AS VESSEL_NATIONALITY,\n        MB.TOTAL_LENGTH,\n        MB.WIDE,\n        MB.TYPE_DEEP,\n        MB.BARE_SPACING_DRINKING,\n        COALESCE(\n          MB.SHIP_PORT,\n          (\n            SELECT PORT_NAME\n            FROM CDM_PORT\n            WHERE PORT_CODE = MB.SHIP_PORT\n            LIMIT 1\n          )\n        ) AS SHIP_PORT,\n        MB.TONNAGE,\n        MB.MUTETON,\n        MB.CALCULATELIGHTTON,\n        MB.SPEED,\n        MB.PANAMA_CANAL_TONNAGE,\n        MB.PANAMA_CANAL_NET_TON,\n        MB.HOST_POWER,\n        MB.CONSTRUCTION_DATE,\n        date_part('year', age(now(), MB.CONSTRUCTION_DATE)) AS CREATE_YEAR,\n        MB.OPERATION_DATE,\n        MB.RETIRED_DATE,\n        MB.CALL_SIGN,\n        MB.IMO_NO\n      FROM VOP_VESSEL MB\n      LEFT JOIN (\n        SELECT\n          string_agg(V.TEST_CALIBRE, ',' ORDER BY V.VESSEL_ID) AS TEST_CALIBRE,\n          string_agg(V.FEE_TYPE, ',' ORDER BY V.VESSEL_ID) AS FEE_TYPE,\n          string_agg(V.FEE_SUBJECT, ',' ORDER BY V.VESSEL_ID) AS FEE_SUBJECT,\n          string_agg(V.CORPORATE_CALIBRE, ',' ORDER BY V.VESSEL_ID) AS CORPORATE_CALIBRE,\n          string_agg(V.COMPANY_CALIBRE, ',' ORDER BY V.VESSEL_ID) AS COMPANY_CALIBRE,\n          V.VESSEL_ID\n        FROM VOP_VESSEL_STATISTICS_CALIBRE V\n        GROUP BY V.VESSEL_ID\n      ) VV\n        ON MB.VESSEL_ID = VV.VESSEL_ID\n      WHERE (V_BUSIMAIN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '2') = V_BUSIMAIN_CODE)\n        AND (V_VES_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, now(), '1') = V_VES_CALIBRE)\n        AND (V_VESSEL_CODE IS NULL OR MB.VESSEL_CODE = V_VESSEL_CODE)\n        AND (V_CALL_SIGN IS NULL OR MB.CALL_SIGN = V_CALL_SIGN)\n        AND (V_BUSI_MAINBODY IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '2') = V_BUSI_MAINBODY)\n        AND (V_BUSI_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, now(), '2') = V_BUSI_CALIBRE)\n        AND (V_VESSEL_TYPE_CODE IS NULL OR MB.VESSEL_TYPE_CODE = VESSEL_TYPE_CODE)\n        AND (V_COMPANY_CALIBRE IS NULL OR VV.COMPANY_CALIBRE = V_COMPANY_CALIBRE)\n        AND (V_VESMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '1') = V_VESMAN_CODE)\n        AND (V_MANAGER_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, now(), '3') = V_MANAGER_CALIBRE)\n        AND (V_TRADE_TYPE IS NULL OR MB.TRADE_TYPE = V_TRADE_TYPE)\n        AND (V_TETIRED_FLAG IS NULL OR MB.TETIRED_FLAG = V_TETIRED_FLAG)\n        AND (V_ACCMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '4') = V_ACCMAN_CODE)\n        AND (V_ACCOUNT_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, now(), '4') = V_ACCOUNT_CALIBRE)\n        AND (V_FEE_TYPE IS NULL OR VV.FEE_TYPE = V_FEE_TYPE)\n        AND (V_FEE_SUBJECT IS NULL OR VV.FEE_SUBJECT = V_FEE_SUBJECT)\n        AND (V_SAFEMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '5') = V_SAFEMAN_CODE)\n        AND (V_SAFE_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, now(), '5') = V_SAFE_CALIBRE)\n        AND (V_CORPORATE_CALIBRE IS NULL OR VV.CORPORATE_CALIBRE = V_CORPORATE_CALIBRE)\n        AND (V_TEST_CALIBRE IS NULL OR VV.TEST_CALIBRE = V_TEST_CALIBRE)\n        AND (V_COSTMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '6') = V_COSTMAN_CODE)\n        AND (V_COST_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, now(), '6') = V_COST_CALIBRE)\n    ) KK\n    LEFT JOIN SYS_OFFICE S1\n      ON S1.OFFICE_CODE = KK.VESMAN_CODE\n     AND COALESCE(S1.IS_DELETE, '0') <> '1'\n  ) A;\nEXCEPTION\n  WHEN no_data_found THEN NULL;\n  WHEN others THEN RAISE;\nEND;\n$$;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_VOP_VESSEL_MANAGE_BK1(\n    IN V_BUSIMAIN_CODE TEXT,\n    IN V_VES_CALIBRE TEXT,\n    IN V_VESSEL_CODE TEXT,\n    IN V_CALL_SIGN TEXT,\n    IN V_BUSI_MAINBODY TEXT,\n    IN V_BUSI_CALIBRE TEXT,\n    IN V_VESSEL_TYPE_CODE TEXT,\n    IN V_COMPANY_CALIBRE TEXT,\n    IN V_VESMAN_CODE TEXT,\n    IN V_MANAGER_CALIBRE TEXT,\n    IN V_TRADE_TYPE TEXT,\n    IN V_TETIRED_FLAG TEXT,\n    IN V_ACCMAN_CODE TEXT,\n    IN V_ACCOUNT_CALIBRE TEXT,\n    IN V_FEE_TYPE TEXT,\n    IN V_FEE_SUBJECT TEXT,\n    IN V_SAFEMAN_CODE TEXT,\n    IN V_SAFE_CALIBRE TEXT,\n    IN V_CORPORATE_CALIBRE TEXT,\n    IN V_TEST_CALIBRE TEXT,\n    IN V_COSTMAN_CODE TEXT,\n    IN V_COST_CALIBRE TEXT,\n    OUT IS_CORSUR refcursor\n)\nAS $$\nBEGIN\n    OPEN IS_CORSUR FOR\n    SELECT *\n    FROM(\n        SELECT\n            KK.ROW_NO,\n            KK.VESSEL_CODE,\n            /*船舶代码*/ KK.VESSEL_NAME,\n            /*船舶名称（中文名）*/ KK.VESSEL_NAME_EN,\n            /*船舶名称（英文名）*/ KK.ANOTHER_NAME,\n            /*BMS标准船名 0*/ COALESCE(S1.OFFICE_NAME,KK.VESMAN_CODE) AS VES_MANAGER,\n            /*船东*/ KK.SHIP_OWNER_FLAG_NAME,\n            /*船舶产权性质 0*/ KK.VESSEL_TYPE,\n            /*船型*/ KK.AREA_NAME,\n            /*航区*/ KK.SHIPYARD,\n            /*建造国家或地区 0*/ KK.VESSEL_NATIONALITY,\n            /*船旗国(地区)*/ KK.TOTAL_LENGTH,\n            /*总长*/ KK.WIDE,\n            /*型宽*/ KK.TYPE_DEEP,\n            /*型深*/ KK.BARE_SPACING_DRINKING,\n            /*吃水 0*/ KK.SHIP_PORT,\n            /*船籍港*/ KK.TONNAGE,\n            /*总吨（吨）*/ KK.MUTETON,\n            /*净吨（吨）*/ KK.CALCULATELIGHTTON,\n            /*轻吨（吨） 0*/ KK.SPEED,\n            /*航速(节)*/ KK.PANAMA_CANAL_TONNAGE,\n            /*总载重量（吨） 0*/ KK.PANAMA_CANAL_NET_TON,\n            /*净载重量（吨） 0*/ KK.HOST_POWER,\n            /*功 率（千瓦）*/ KK.CONSTRUCTION_DATE,\n            /*船龄(年)*/ KK.CREATE_YEAR,\n            /*接入时间*/ KK.OPERATION_DATE,\n            /*退租/役船时间*/ KK.RETIRED_DATE,\n            /*呼号*/ KK.CALL_SIGN,\n            /*IMO编号*/ KK.IMO_NO\n        FROM (\n            SELECT\n                ROW_NUMBER() OVER(ORDER BY MB.VESSEL_CODE) AS ROW_NO,\n                MB.VESSEL_CODE,\n                MB.VESSEL_NAME,\n                MB.VESSEL_NAME_EN,\n                MB.ANOTHER_NAME,\n                FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '1') AS VESMAN_CODE,\n                COALESCE(\n                    MB.ship_owner_flag,\n                    (SELECT c.display_value_cn FROM cdm_codedict c\n                     WHERE c.code_type = 'CDM_SHIP_WONER_FLAG'\n                       AND c.code_value = MB.ship_owner_flag\n                     LIMIT 1)\n                ) AS SHIP_OWNER_FLAG_NAME,\n                MB.VESSEL_TYPE,\n                COALESCE(\n                    MB.AREA,\n                    (SELECT C.DISPLAY_VALUE_CN FROM CDM_CODEDICT C\n                     WHERE C.CODE_TYPE = 'CDM_NAVIGATING_ZONE'\n                       AND C.CODE_VALUE = MB.AREA\n                     LIMIT 1)\n                ) AS AREA_NAME,\n                MB.SHIPYARD,\n                COALESCE(\n                    MB.VESSEL_NATIONALITY,\n                    (SELECT COUNTRY_NAME FROM CDM_COUNTRY\n                     WHERE COUNTRY_CODE = MB.VESSEL_NATIONALITY\n                     LIMIT 1)\n                ) AS VESSEL_NATIONALITY,\n                MB.TOTAL_LENGTH,\n                MB.WIDE,\n                MB.TYPE_DEEP,\n                MB.BARE_SPACING_DRINKING,\n                COALESCE(\n                    MB.SHIP_PORT,\n                    (SELECT PORT_NAME FROM CDM_PORT WHERE PORT_CODE = MB.SHIP_PORT LIMIT 1)\n                ) AS SHIP_PORT,\n                MB.TONNAGE,\n                MB.MUTETON,\n                MB.CALCULATELIGHTTON,\n                MB.SPEED,\n                MB.PANAMA_CANAL_TONNAGE,\n                MB.PANAMA_CANAL_NET_TON,\n                MB.HOST_POWER,\n                MB.CONSTRUCTION_DATE,\n                TRUNC(EXTRACT(YEAR FROM age(now(), MB.CONSTRUCTION_DATE))) AS CREATE_YEAR,\n                MB.OPERATION_DATE,\n                MB.RETIRED_DATE,\n                MB.CALL_SIGN,\n                MB.IMO_NO\n            FROM VOP_VESSEL MB\n            LEFT JOIN (\n                SELECT\n                    V.VESSEL_ID,\n                    string_agg(V.TEST_CALIBRE, ',' ORDER BY V.VESSEL_ID) AS TEST_CALIBRE,\n                    string_agg(V.FEE_TYPE, ',' ORDER BY V.VESSEL_ID) AS FEE_TYPE,\n                    string_agg(V.FEE_SUBJECT, ',' ORDER BY V.VESSEL_ID) AS FEE_SUBJECT,\n                    string_agg(V.CORPORATE_CALIBRE, ',' ORDER BY V.VESSEL_ID) AS CORPORATE_CALIBRE,\n                    string_agg(V.COMPANY_CALIBRE, ',' ORDER BY V.VESSEL_ID) AS COMPANY_CALIBRE\n                FROM VOP_VESSEL_STATISTICS_CALIBRE V\n                GROUP BY V.VESSEL_ID\n            ) VV ON MB.VESSEL_ID = VV.VESSEL_ID\n            WHERE (V_BUSIMAIN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '2') = V_BUSIMAIN_CODE)\n              AND (V_VES_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, now(), '1') = V_VES_CALIBRE)\n              AND (V_VESSEL_CODE IS NULL OR MB.VESSEL_CODE = V_VESSEL_CODE)\n              AND (V_CALL_SIGN IS NULL OR MB.CALL_SIGN = V_CALL_SIGN)\n              AND (V_BUSI_MAINBODY IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '2') = V_BUSI_MAINBODY)\n              AND (V_BUSI_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, now(), '2') = V_BUSI_CALIBRE)\n              AND (V_VESSEL_TYPE_CODE IS NULL OR MB.VESSEL_TYPE_CODE = V_VESSEL_TYPE_CODE)\n              AND (V_COMPANY_CALIBRE IS NULL OR VV.COMPANY_CALIBRE = V_COMPANY_CALIBRE)\n              AND (V_VESMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '1') = V_VESMAN_CODE)\n              AND (V_MANAGER_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, now(), '3') = V_MANAGER_CALIBRE)\n              AND (V_TRADE_TYPE IS NULL OR MB.TRADE_TYPE = V_TRADE_TYPE)\n              AND (V_TETIRED_FLAG IS NULL OR MB.TETIRED_FLAG = V_TETIRED_FLAG)\n              AND (V_ACCMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '4') = V_ACCMAN_CODE)\n              AND (V_ACCOUNT_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, now(), '4') = V_ACCOUNT_CALIBRE)\n              AND (V_FEE_TYPE IS NULL OR VV.FEE_TYPE = V_FEE_TYPE)\n              AND (V_FEE_SUBJECT IS NULL OR VV.FEE_SUBJECT = V_FEE_SUBJECT)\n              AND (V_SAFEMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '5') = V_SAFEMAN_CODE)\n              AND (V_SAFE_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, now(), '5') = V_SAFE_CALIBRE)\n              AND (V_CORPORATE_CALIBRE IS NULL OR VV.CORPORATE_CALIBRE = V_CORPORATE_CALIBRE)\n              AND (V_TEST_CALIBRE IS NULL OR VV.TEST_CALIBRE = V_TEST_CALIBRE)\n              AND (V_COSTMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, now(), '6') = V_COSTMAN_CODE)\n              AND (V_COST_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, now(), '6') = V_COST_CALIBRE)\n        ) KK\n        LEFT JOIN SYS_OFFICE S1\n          ON S1.OFFICE_CODE = KK.VESMAN_CODE\n         AND COALESCE(S1.IS_DELETE, '0') <> '1'\n    ) A;\nEXCEPTION\n    WHEN no_data_found THEN\n        NULL;\n    WHEN OTHERS THEN\n        RAISE;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_VOP_VESSEL_MANAGE_BK1(\n    V_BUSIMAIN_CODE varchar,\n    V_VES_CALIBRE varchar,\n    V_VESSEL_CODE varchar,\n    V_CALL_SIGN varchar,\n    V_BUSI_MAINBODY varchar,\n    V_BUSI_CALIBRE varchar,\n    V_VESSEL_TYPE_CODE varchar,\n    V_COMPANY_CALIBRE varchar,\n    V_VESMAN_CODE varchar,\n    V_MANAGER_CALIBRE varchar,\n    V_TRADE_TYPE varchar,\n    V_TETIRED_FLAG varchar,\n    V_ACCMAN_CODE varchar,\n    V_ACCOUNT_CALIBRE varchar,\n    V_FEE_TYPE varchar,\n    V_FEE_SUBJECT varchar,\n    V_SAFEMAN_CODE varchar,\n    V_SAFE_CALIBRE varchar,\n    V_CORPORATE_CALIBRE varchar,\n    V_TEST_CALIBRE varchar,\n    V_COSTMAN_CODE varchar,\n    V_COST_CALIBRE varchar,\n    OUT IS_CORSUR refcursor\n)\nLANGUAGE plpgsql\nAS $$\nBEGIN\n    OPEN IS_CORSUR FOR\n    SELECT * FROM(\n        SELECT\n            KK.ROW_NO,\n            KK.VESSEL_CODE,\n            /*船舶代码*/ KK.VESSEL_NAME, /*船舶名称（中文名）*/ KK.VESSEL_NAME_EN, /*船舶名称（英文名）*/ KK.ANOTHER_NAME, /*BMS标准船名 0*/\n            COALESCE(S1.OFFICE_NAME, KK.VESMAN_CODE) AS VES_MANAGER, /*船东*/\n            KK.SHIP_OWNER_FLAG_NAME, /*船舶产权性质 0*/\n            KK.VESSEL_TYPE, /*船型*/\n            KK.AREA_NAME, /*航区*/\n            KK.SHIPYARD, /*建造国家或地区 0*/\n            KK.VESSEL_NATIONALITY, /*船旗国(地区)*/\n            KK.TOTAL_LENGTH, /*总长*/\n            KK.WIDE, /*型宽*/\n            KK.TYPE_DEEP, /*型深*/\n            KK.BARE_SPACING_DRINKING, /*吃水 0*/\n            KK.SHIP_PORT, /*船籍港*/\n            KK.TONNAGE, /*总吨（吨）*/\n            KK.MUTETON, /*净吨（吨）*/\n            KK.CALCULATELIGHTTON, /*轻吨（吨） 0*/\n            KK.SPEED, /*航速(节)*/\n            KK.PANAMA_CANAL_TONNAGE, /*总载重量（吨） 0*/\n            KK.PANAMA_CANAL_NET_TON, /*净载重量（吨） 0*/\n            KK.HOST_POWER, /*功 率（千瓦）*/\n            KK.CONSTRUCTION_DATE, /*建造年月*/\n            EXTRACT(YEAR FROM AGE(CURRENT_TIMESTAMP, KK.CONSTRUCTION_DATE)) AS CREATE_YEAR, /*船龄(年)*/\n            KK.OPERATION_DATE, /*接入时间*/\n            KK.RETIRED_DATE, /*退租/役船时间*/\n            KK.CALL_SIGN, /*呼号*/\n            KK.IMO_NO /*IMO编号*/\n        FROM (\n            SELECT\n                ROW_NUMBER() OVER (ORDER BY MB.VESSEL_CODE) AS ROW_NO,\n                MB.VESSEL_CODE,\n                MB.VESSEL_NAME,\n                MB.VESSEL_NAME_EN,\n                MB.ANOTHER_NAME,\n                FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_TIMESTAMP, '1') AS VESMAN_CODE,\n                COALESCE(\n                    MB.ship_owner_flag,\n                    (\n                        SELECT c.display_value_cn\n                        FROM cdm_codedict c\n                        WHERE c.code_type = 'CDM_SHIP_WONER_FLAG'\n                          AND c.code_value = MB.ship_owner_flag\n                        LIMIT 1\n                    )\n                ) AS SHIP_OWNER_FLAG_NAME,\n                MB.VESSEL_TYPE,\n                COALESCE(\n                    MB.AREA,\n                    (\n                        SELECT C.DISPLAY_VALUE_CN\n                        FROM CDM_CODEDICT C\n                        WHERE C.CODE_TYPE = 'CDM_NAVIGATING_ZONE'\n                          AND C.CODE_VALUE = MB.AREA\n                        LIMIT 1\n                    )\n                ) AS AREA_NAME,\n                MB.SHIPYARD,\n                COALESCE(\n                    MB.VESSEL_NATIONALITY,\n                    (\n                        SELECT COUNTRY_NAME\n                        FROM CDM_COUNTRY\n                        WHERE COUNTRY_CODE = MB.VESSEL_NATIONALITY\n                        LIMIT 1\n                    )\n                ) AS VESSEL_NATIONALITY,\n                MB.TOTAL_LENGTH,\n                MB.WIDE,\n                MB.TYPE_DEEP,\n                MB.BARE_SPACING_DRINKING,\n                COALESCE(\n                    MB.SHIP_PORT,\n                    (\n                        SELECT PORT_NAME\n                        FROM CDM_PORT\n                        WHERE PORT_CODE = MB.SHIP_PORT\n                        LIMIT 1\n                    )\n                ) AS SHIP_PORT,\n                MB.TONNAGE,\n                MB.MUTETON,\n                MB.CALCULATELIGHTTON,\n                MB.SPEED,\n                MB.PANAMA_CANAL_TONNAGE,\n                MB.PANAMA_CANAL_NET_TON,\n                MB.HOST_POWER,\n                MB.CONSTRUCTION_DATE,\n                MB.OPERATION_DATE,\n                MB.RETIRED_DATE,\n                MB.CALL_SIGN,\n                MB.IMO_NO\n            FROM VOP_VESSEL MB\n            LEFT JOIN (\n                SELECT\n                    string_agg(V.TEST_CALIBRE, ',') WITHIN GROUP (ORDER BY V.VESSEL_ID) AS TEST_CALIBRE,\n                    string_agg(V.FEE_TYPE, ',') WITHIN GROUP (ORDER BY V.VESSEL_ID) AS FEE_TYPE,\n                    string_agg(V.FEE_SUBJECT, ',') WITHIN GROUP (ORDER BY V.VESSEL_ID) AS FEE_SUBJECT,\n                    string_agg(V.CORPORATE_CALIBRE, ',') WITHIN GROUP (ORDER BY V.VESSEL_ID) AS CORPORATE_CALIBRE,\n                    string_agg(V.COMPANY_CALIBRE, ',') WITHIN GROUP (ORDER BY V.VESSEL_ID) AS COMPANY_CALIBRE,\n                    V.VESSEL_ID\n                FROM VOP_VESSEL_STATISTICS_CALIBRE V\n                GROUP BY V.VESSEL_ID\n            ) VV ON MB.VESSEL_ID = VV.VESSEL_ID\n            WHERE (V_BUSIMAIN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_TIMESTAMP, '2') = V_BUSIMAIN_CODE)\n              AND (V_VES_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, CURRENT_TIMESTAMP, '1') = V_VES_CALIBRE)\n              AND (V_VESSEL_CODE IS NULL OR MB.VESSEL_CODE = V_VESSEL_CODE)\n              AND (V_CALL_SIGN IS NULL OR MB.CALL_SIGN = V_CALL_SIGN)\n              AND (V_BUSI_MAINBODY IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_TIMESTAMP, '2') = V_BUSI_MAINBODY)\n              AND (V_BUSI_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, CURRENT_TIMESTAMP, '2') = V_BUSI_CALIBRE)\n              AND (V_VESSEL_TYPE_CODE IS NULL OR MB.VESSEL_TYPE_CODE = VESSEL_TYPE_CODE)\n              AND (V_COMPANY_CALIBRE IS NULL OR VV.COMPANY_CALIBRE = V_COMPANY_CALIBRE)\n              AND (V_VESMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_TIMESTAMP, '1') = V_VESMAN_CODE)\n              AND (V_MANAGER_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, CURRENT_TIMESTAMP, '3') = V_MANAGER_CALIBRE)\n              AND (V_TRADE_TYPE IS NULL OR MB.TRADE_TYPE = V_TRADE_TYPE)\n              AND (V_TETIRED_FLAG IS NULL OR MB.TETIRED_FLAG = V_TETIRED_FLAG)\n              AND (V_ACCMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_TIMESTAMP, '4') = V_ACCMAN_CODE)\n              AND (V_ACCOUNT_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, CURRENT_TIMESTAMP, '4') = V_ACCOUNT_CALIBRE)\n              AND (V_FEE_TYPE IS NULL OR VV.FEE_TYPE = V_FEE_TYPE)\n              AND (V_FEE_SUBJECT IS NULL OR VV.FEE_SUBJECT = V_FEE_SUBJECT)\n              AND (V_SAFEMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_TIMESTAMP, '5') = V_SAFEMAN_CODE)\n              AND (V_SAFE_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, CURRENT_TIMESTAMP, '5') = V_SAFE_CALIBRE)\n              AND (V_CORPORATE_CALIBRE IS NULL OR VV.CORPORATE_CALIBRE = V_CORPORATE_CALIBRE)\n              AND (V_TEST_CALIBRE IS NULL OR VV.TEST_CALIBRE = V_TEST_CALIBRE)\n              AND (V_COSTMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_TIMESTAMP, '6') = V_COSTMAN_CODE)\n              AND (V_COST_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, CURRENT_TIMESTAMP, '6') = V_COST_CALIBRE)\n        ) KK\n        LEFT JOIN SYS_OFFICE S1 ON S1.OFFICE_CODE = KK.VESMAN_CODE AND COALESCE(S1.IS_DELETE, '0') <> '1'\n    ) A;\nEXCEPTION\n    WHEN no_data_found THEN\n        NULL;\n    WHEN others THEN\n        RAISE;\nEND;\n$$"
                    }
                ]
            },
            {
                "case_id": "10",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"10\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"GETDATE\", \"DATEADD\", \"INTERVAL\", \"CURRENT_TIMESTAMP\", \"now\", \"convert\", \"MAX\", \"RTRIM\", \"replace\", \"LENGTH\", \"SUM\", \"@@ERROR\", \"RAISERROR\"]}, \"sql\": \"CREATE PROCEDURE [dbo].[RT_Tang_YW_MainC_InitAwb60Finish] AS /* 声明变量 */ DECLARE @Period60 INT /*60天维期*/ DECLARE @Period180 INT /*180天维期*/ DECLARE @Yw_Op_Date datetime /*当前业维日期*/ DECLARE @Yw_Start_Time datetime /*当前业维开始时间*/ DECLARE @tran_error INT /*用于检测是否存在异常*/ DECLARE @AwbYwDate60 datetime /*被业维日期*/ DECLARE @AwbYwDate180 datetime /*被业维日期*/ /*变量赋值*/ SET @Period60 =- 60 SET @Period180 =- 180 SET @Yw_Start_Time = Getdate( ) SET @tran_error = 0 SELECT @Yw_Op_Date = MAX ( Yw_Op_Date ) FROM Tbl_Yw_Log WHERE OPTRESULT = 'RUN' IF @Yw_Op_Date IS NULL BEGIN SELECT @Yw_Op_Date = Getdate( ) END SET @AwbYwDate60 = DateAdd( DAY,@Period60,@Yw_Op_Date ) SET @AwbYwDate180 = DateAdd( DAY,@Period180,@Yw_Op_Date ) /*定义隔离级别为最低*/ SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY DELETE FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix AS TmpFinishFlag FROM Tbl_Cargo WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix FROM Tbl_Awb_Basic WHERE ( Op_Date < CONVERT ( CHAR ( 10 ),@AwbYwDate60, 121 ) AND Op_Date > CONVERT ( CHAR ( 10 ),@AwbYwDate180, 121 ) ) ) AND FinishFlag != 0 /*Finished*/ AND Flight_Dep = Flight_Dest GROUP BY AwbPrefix, AwbNo, AwbPostfix ) /* 所有已完成运单 Finish: 0 Not Finished; <>0: Finished */ /* 1)60<Op_date<180, FinishFlag>0，并且有dep=dest的代提行段完成 */ INSERT INTO Cargo2YWTemp..Tbl_Awb_Basic_Temp ( AwbPrefix, AwbNo, AwbPostfix, YwTreate ) SELECT DISTINCT AwbPrefix, AwbNo, AwbPostfix, 1 FROM ( SELECT AwbPrefix, AwbNo, AwbPostfix, MIN ( FinishFlag ) AS TmpFinishFlag FROM Tbl_Cargo WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix FROM Tbl_Awb_Basic WHERE ( Op_Date < CONVERT ( CHAR ( 10 ),@AwbYwDate60, 121 ) AND Op_Date > CONVERT ( CHAR ( 10 ),@AwbYwDate180, 121 ) ) ) AND FinishFlag != 0 /*Finished*/ AND Flight_Dep = Flight_Dest GROUP BY AwbPrefix, AwbNo, AwbPostfix ) Tbl_Temp WHERE TmpFinishFlag > 0 SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY /*增加运单基本信息的件数*/ UPDATE Cargo2YWTemp..Tbl_Awb_Basic_Temp SET AwbDate = a.Op_Date, AwbDest = SUBSTRING ( a.routing, len( a.routing ) - 2, 3 ), Piece = a.Piece FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp t, Tbl_Awb_Basic a WHERE a.AwbNo= t.AwbNo AND a.AwbPrefix= t.AwbPrefix AND a.AwbPostfix= t.AwbPostfix SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY /*把运单件数相等并已完成的运单的YwTreate设为可以归档(YwTreate=0)*/ UPDATE Cargo2YWTemp..Tbl_Awb_Basic_Temp SET YwTreate = 0 FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp bt, ( SELECT SUM ( Piece ) AS Piece, AwbPrefix, AwbNo, AwbPostfix FROM ( SELECT c.Piece, c.AwbPrefix, c.AwbNo, c.AwbPostfix FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp t JOIN Tbl_Cargo c ON c.Flight_Dep= t.AwbDest AND c.Flight_Dest= t.AwbDest AND c.AwbNo= t.AwbNo AND c.AwbPrefix= t.AwbPrefix AND c.AwbPostfix= t.AwbPostfix ) b GROUP BY AwbPrefix, AwbNo, AwbPostfix ) a WHERE a.AwbNo= bt.AwbNo AND a.AwbPrefix= bt.AwbPrefix AND a.AwbPostfix= bt.AwbPostfix AND bt.Piece= a.Piece SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Cargo_ChargeCorrection_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY DELETE FROM Cargo2YWTemp..Tbl_Cargo_ChargeCorrection_Temp WHERE CCANo IN ( SELECT DISTINCT AwbNo FROM Tbl_Awb_Basic_Temp ) INSERT INTO Cargo2YWTemp..Tbl_Cargo_ChargeCorrection_Temp ( CCAPrefix, CCANo, CCAPostfix ) SELECT DISTINCT CCAPrefix, CCANo, CCAPostfix FROM Tbl_Cargo_ChargeCorrectionDetail a JOIN Cargo2YWTemp..Tbl_Awb_Basic_Temp t ON a.AwbPrefix = t.AwbPrefix AND a.AwbNo = t.AwbNo AND a.AwbPostfix = t.AwbPostfix SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Cargo_ChargeCorrection_Temp', getdate( ) ) RAISERROR ( N'Tbl_Cargo_ChargeCorrection_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE [dbo].[RT_Tang_YW_MainC_InitAwb60Finish] AS /* 声明变量 */ DECLARE @Period60 INT /*60天维期*/ DECLARE @Period180 INT /*180天维期*/ DECLARE @Yw_Op_Date datetime /*当前业维日期*/ DECLARE @Yw_Start_Time datetime /*当前业维开始时间*/ DECLARE @tran_error INT /*用于检测是否存在异常*/ DECLARE @AwbYwDate60 datetime /*被业维日期*/ DECLARE @AwbYwDate180 datetime /*被业维日期*/ /*变量赋值*/ SET @Period60 =- 60 SET @Period180 =- 180 SET @Yw_Start_Time = Getdate( ) SET @tran_error = 0 SELECT @Yw_Op_Date = MAX ( Yw_Op_Date ) FROM Tbl_Yw_Log WHERE OPTRESULT = 'RUN' IF @Yw_Op_Date IS NULL BEGIN SELECT @Yw_Op_Date = Getdate( ) END SET @AwbYwDate60 = DateAdd( DAY,@Period60,@Yw_Op_Date ) SET @AwbYwDate180 = DateAdd( DAY,@Period180,@Yw_Op_Date ) /*定义隔离级别为最低*/ SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY DELETE FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix AS TmpFinishFlag FROM Tbl_Cargo WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix FROM Tbl_Awb_Basic WHERE ( Op_Date < CONVERT ( CHAR ( 10 ),@AwbYwDate60, 121 ) AND Op_Date > CONVERT ( CHAR ( 10 ),@AwbYwDate180, 121 ) ) ) AND FinishFlag != 0 /*Finished*/ AND Flight_Dep = Flight_Dest GROUP BY AwbPrefix, AwbNo, AwbPostfix ) /* 所有已完成运单 Finish: 0 Not Finished; <>0: Finished */ /* 1)60<Op_date<180, FinishFlag>0，并且有dep=dest的代提行段完成 */ INSERT INTO Cargo2YWTemp..Tbl_Awb_Basic_Temp ( AwbPrefix, AwbNo, AwbPostfix, YwTreate ) SELECT DISTINCT AwbPrefix, AwbNo, AwbPostfix, 1 FROM ( SELECT AwbPrefix, AwbNo, AwbPostfix, MIN ( FinishFlag ) AS TmpFinishFlag FROM Tbl_Cargo WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix FROM Tbl_Awb_Basic WHERE ( Op_Date < CONVERT ( CHAR ( 10 ),@AwbYwDate60, 121 ) AND Op_Date > CONVERT ( CHAR ( 10 ),@AwbYwDate180, 121 ) ) ) AND FinishFlag != 0 /*Finished*/ AND Flight_Dep = Flight_Dest GROUP BY AwbPrefix, AwbNo, AwbPostfix ) Tbl_Temp WHERE TmpFinishFlag > 0 SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY /*增加运单基本信息的件数*/ UPDATE Cargo2YWTemp..Tbl_Awb_Basic_Temp SET AwbDate = a.Op_Date, AwbDest = SUBSTRING ( a.routing, len( a.routing ) - 2, 3 ), Piece = a.Piece FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp t, Tbl_Awb_Basic a WHERE a.AwbNo= t.AwbNo AND a.AwbPrefix= t.AwbPrefix AND a.AwbPostfix= t.AwbPostfix SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY /*把运单件数相等并已完成的运单的YwTreate设为可以归档(YwTreate=0)*/ UPDATE Cargo2YWTemp..Tbl_Awb_Basic_Temp SET YwTreate = 0 FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp bt, ( SELECT SUM ( Piece ) AS Piece, AwbPrefix, AwbNo, AwbPostfix FROM ( SELECT c.Piece, c.AwbPrefix, c.AwbNo, c.AwbPostfix FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp t JOIN Tbl_Cargo c ON c.Flight_Dep= t.AwbDest AND c.Flight_Dest= t.AwbDest AND c.AwbNo= t.AwbNo AND c.AwbPrefix= t.AwbPrefix AND c.AwbPostfix= t.AwbPostfix ) b GROUP BY AwbPrefix, AwbNo, AwbPostfix ) a WHERE a.AwbNo= bt.AwbNo AND a.AwbPrefix= bt.AwbPrefix AND a.AwbPostfix= bt.AwbPostfix AND bt.Piece= a.Piece SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Cargo_ChargeCorrection_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY DELETE FROM Cargo2YWTemp..Tbl_Cargo_ChargeCorrection_Temp WHERE CCANo IN ( SELECT DISTINCT AwbNo FROM Tbl_Awb_Basic_Temp ) INSERT INTO Cargo2YWTemp..Tbl_Cargo_ChargeCorrection_Temp ( CCAPrefix, CCANo, CCAPostfix ) SELECT DISTINCT CCAPrefix, CCANo, CCAPostfix FROM Tbl_Cargo_ChargeCorrectionDetail a JOIN Cargo2YWTemp..Tbl_Awb_Basic_Temp t ON a.AwbPrefix = t.AwbPrefix AND a.AwbNo = t.AwbNo AND a.AwbPostfix = t.AwbPostfix SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Cargo_ChargeCorrection_Temp', getdate( ) ) RAISERROR ( N'Tbl_Cargo_ChargeCorrection_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE PROCEDURE [dbo].[RT_Tang_YW_MainC_InitAwb60Finish] AS /* 声明变量 */ DECLARE @Period60 INT /*60天维期*/ DECLARE @Period180 INT /*180天维期*/ DECLARE @Yw_Op_Date datetime /*当前业维日期*/ DECLARE @Yw_Start_Time datetime /*当前业维开始时间*/ DECLARE @tran_error INT /*用于检测是否存在异常*/ DECLARE @AwbYwDate60 datetime /*被业维日期*/ DECLARE @AwbYwDate180 datetime /*被业维日期*/ /*变量赋值*/ SET @Period60 =- 60 SET @Period180 =- 180 SET @Yw_Start_Time = Getdate( ) SET @tran_error = 0 SELECT @Yw_Op_Date = MAX ( Yw_Op_Date ) FROM Tbl_Yw_Log WHERE OPTRESULT = 'RUN' IF @Yw_Op_Date IS NULL BEGIN SELECT @Yw_Op_Date = Getdate( ) END SET @AwbYwDate60 = DateAdd( DAY,@Period60,@Yw_Op_Date ) SET @AwbYwDate180 = DateAdd( DAY,@Period180,@Yw_Op_Date ) /*定义隔离级别为最低*/ SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY DELETE FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix AS TmpFinishFlag FROM Tbl_Cargo WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix FROM Tbl_Awb_Basic WHERE ( Op_Date < CONVERT ( CHAR ( 10 ),@AwbYwDate60, 121 ) AND Op_Date > CONVERT ( CHAR ( 10 ),@AwbYwDate180, 121 ) ) ) AND FinishFlag != 0 /*Finished*/ AND Flight_Dep = Flight_Dest GROUP BY AwbPrefix, AwbNo, AwbPostfix ) /* 所有已完成运单 Finish: 0 Not Finished; <>0: Finished */ /* 1)60<Op_date<180, FinishFlag>0，并且有dep=dest的代提行段完成 */ INSERT INTO Cargo2YWTemp..Tbl_Awb_Basic_Temp ( AwbPrefix, AwbNo, AwbPostfix, YwTreate ) SELECT DISTINCT AwbPrefix, AwbNo, AwbPostfix, 1 FROM ( SELECT AwbPrefix, AwbNo, AwbPostfix, MIN ( FinishFlag ) AS TmpFinishFlag FROM Tbl_Cargo WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix FROM Tbl_Awb_Basic WHERE ( Op_Date < CONVERT ( CHAR ( 10 ),@AwbYwDate60, 121 ) AND Op_Date > CONVERT ( CHAR ( 10 ),@AwbYwDate180, 121 ) ) ) AND FinishFlag != 0 /*Finished*/ AND Flight_Dep = Flight_Dest GROUP BY AwbPrefix, AwbNo, AwbPostfix ) Tbl_Temp WHERE TmpFinishFlag > 0 SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY /*增加运单基本信息的件数*/ UPDATE Cargo2YWTemp..Tbl_Awb_Basic_Temp SET AwbDate = a.Op_Date, AwbDest = SUBSTRING ( a.routing, len( a.routing ) - 2, 3 ), Piece = a.Piece FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp t, Tbl_Awb_Basic a WHERE a.AwbNo= t.AwbNo AND a.AwbPrefix= t.AwbPrefix AND a.AwbPostfix= t.AwbPostfix SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY /*把运单件数相等并已完成的运单的YwTreate设为可以归档(YwTreate=0)*/ UPDATE Cargo2YWTemp..Tbl_Awb_Basic_Temp SET YwTreate = 0 FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp bt, ( SELECT SUM ( Piece ) AS Piece, AwbPrefix, AwbNo, AwbPostfix FROM ( SELECT c.Piece, c.AwbPrefix, c.AwbNo, c.AwbPostfix FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp t JOIN Tbl_Cargo c ON c.Flight_Dep= t.AwbDest AND c.Flight_Dest= t.AwbDest AND c.AwbNo= t.AwbNo AND c.AwbPrefix= t.AwbPrefix AND c.AwbPostfix= t.AwbPostfix ) b GROUP BY AwbPrefix, AwbNo, AwbPostfix ) a WHERE a.AwbNo= bt.AwbNo AND a.AwbPrefix= bt.AwbPrefix AND a.AwbPostfix= bt.AwbPostfix AND bt.Piece= a.Piece SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Cargo_ChargeCorrection_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY DELETE FROM Cargo2YWTemp..Tbl_Cargo_ChargeCorrection_Temp WHERE CCANo IN ( SELECT DISTINCT AwbNo FROM Tbl_Awb_Basic_Temp ) INSERT INTO Cargo2YWTemp..Tbl_Cargo_ChargeCorrection_Temp ( CCAPrefix, CCANo, CCAPostfix ) SELECT DISTINCT CCAPrefix, CCANo, CCAPostfix FROM Tbl_Cargo_ChargeCorrectionDetail a JOIN Cargo2YWTemp..Tbl_Awb_Basic_Temp t ON a.AwbPrefix = t.AwbPrefix AND a.AwbNo = t.AwbNo AND a.AwbPostfix = t.AwbPostfix SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Cargo_ChargeCorrection_Temp', getdate( ) ) RAISERROR ( N'Tbl_Cargo_ChargeCorrection_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE PROCEDURE [dbo].[RT_Tang_YW_MainC_InitAwb60Finish] AS /* 声明变量 */ DECLARE @Period60 INT /*60天维期*/ DECLARE @Period180 INT /*180天维期*/ DECLARE @Yw_Op_Date datetime /*当前业维日期*/ DECLARE @Yw_Start_Time datetime /*当前业维开始时间*/ DECLARE @tran_error INT /*用于检测是否存在异常*/ DECLARE @AwbYwDate60 datetime /*被业维日期*/ DECLARE @AwbYwDate180 datetime /*被业维日期*/ /*变量赋值*/ SET @Period60 =- 60 SET @Period180 =- 180 SET @Yw_Start_Time = Getdate( ) SET @tran_error = 0 SELECT @Yw_Op_Date = MAX ( Yw_Op_Date ) FROM Tbl_Yw_Log WHERE OPTRESULT = 'RUN' IF @Yw_Op_Date IS NULL BEGIN SELECT @Yw_Op_Date = Getdate( ) END SET @AwbYwDate60 = DateAdd( DAY,@Period60,@Yw_Op_Date ) SET @AwbYwDate180 = DateAdd( DAY,@Period180,@Yw_Op_Date ) /*定义隔离级别为最低*/ SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY DELETE FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix AS TmpFinishFlag FROM Tbl_Cargo WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix FROM Tbl_Awb_Basic WHERE ( Op_Date < CONVERT ( CHAR ( 10 ),@AwbYwDate60, 121 ) AND Op_Date > CONVERT ( CHAR ( 10 ),@AwbYwDate180, 121 ) ) ) AND FinishFlag != 0 /*Finished*/ AND Flight_Dep = Flight_Dest GROUP BY AwbPrefix, AwbNo, AwbPostfix ) /* 所有已完成运单 Finish: 0 Not Finished; <>0: Finished */ /* 1)60<Op_date<180, FinishFlag>0，并且有dep=dest的代提行段完成 */ INSERT INTO Cargo2YWTemp..Tbl_Awb_Basic_Temp ( AwbPrefix, AwbNo, AwbPostfix, YwTreate ) SELECT DISTINCT AwbPrefix, AwbNo, AwbPostfix, 1 FROM ( SELECT AwbPrefix, AwbNo, AwbPostfix, MIN ( FinishFlag ) AS TmpFinishFlag FROM Tbl_Cargo WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix FROM Tbl_Awb_Basic WHERE ( Op_Date < CONVERT ( CHAR ( 10 ),@AwbYwDate60, 121 ) AND Op_Date > CONVERT ( CHAR ( 10 ),@AwbYwDate180, 121 ) ) ) AND FinishFlag != 0 /*Finished*/ AND Flight_Dep = Flight_Dest GROUP BY AwbPrefix, AwbNo, AwbPostfix ) Tbl_Temp WHERE TmpFinishFlag > 0 SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY /*增加运单基本信息的件数*/ UPDATE Cargo2YWTemp..Tbl_Awb_Basic_Temp SET AwbDate = a.Op_Date, AwbDest = SUBSTRING ( a.routing, len( a.routing ) - 2, 3 ), Piece = a.Piece FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp t, Tbl_Awb_Basic a WHERE a.AwbNo= t.AwbNo AND a.AwbPrefix= t.AwbPrefix AND a.AwbPostfix= t.AwbPostfix SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY /*把运单件数相等并已完成的运单的YwTreate设为可以归档(YwTreate=0)*/ UPDATE Cargo2YWTemp..Tbl_Awb_Basic_Temp SET YwTreate = 0 FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp bt, ( SELECT SUM ( Piece ) AS Piece, AwbPrefix, AwbNo, AwbPostfix FROM ( SELECT c.Piece, c.AwbPrefix, c.AwbNo, c.AwbPostfix FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp t JOIN Tbl_Cargo c ON c.Flight_Dep= t.AwbDest AND c.Flight_Dest= t.AwbDest AND c.AwbNo= t.AwbNo AND c.AwbPrefix= t.AwbPrefix AND c.AwbPostfix= t.AwbPostfix ) b GROUP BY AwbPrefix, AwbNo, AwbPostfix ) a WHERE a.AwbNo= bt.AwbNo AND a.AwbPrefix= bt.AwbPrefix AND a.AwbPostfix= bt.AwbPostfix AND bt.Piece= a.Piece SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Cargo_ChargeCorrection_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY DELETE FROM Cargo2YWTemp..Tbl_Cargo_ChargeCorrection_Temp WHERE CCANo IN ( SELECT DISTINCT AwbNo FROM Tbl_Awb_Basic_Temp ) INSERT INTO Cargo2YWTemp..Tbl_Cargo_ChargeCorrection_Temp ( CCAPrefix, CCANo, CCAPostfix ) SELECT DISTINCT CCAPrefix, CCANo, CCAPostfix FROM Tbl_Cargo_ChargeCorrectionDetail a JOIN Cargo2YWTemp..Tbl_Awb_Basic_Temp t ON a.AwbPrefix = t.AwbPrefix AND a.AwbNo = t.AwbNo AND a.AwbPostfix = t.AwbPostfix SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Cargo_ChargeCorrection_Temp', getdate( ) ) RAISERROR ( N'Tbl_Cargo_ChargeCorrection_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": ""
                    }
                ]
            },
            {
                "case_id": "11",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"11\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"datetime\", \"BEGIN\", \"GETDATE\", \"NOW\", \"CURRENT_TIMESTAMP\", \"DECLARE\", \"CURSOR\", \"BEGIN TRY\", \"CURRENT_USER\", \"SESSION_USER\", \"ERROR_MESSAGE\", \"CONCAT\", \"PRINT\", \"CAST\", \"RAISERROR\"]}, \"sql\": \"CREATE PROCEDURE SP_BulkInventoryUpdate @WarehouseID INT, @AdjustmentType NVARCHAR(50), @AdjustmentDate DATETIME = NULL AS BEGIN SET NOCOUNT ON; IF @AdjustmentDate IS NULL SET @AdjustmentDate = GETDATE(); DECLARE @ProductID INT, @CurrentQty INT, @AdjustmentQty INT, @NewQty INT; DECLARE @TotalProcessed INT = 0, @ErrorCount INT = 0; DECLARE @ErrorMessage NVARCHAR(4000); DECLARE inventory_cursor CURSOR FOR SELECT ProductID, QuantityOnHand, CASE @AdjustmentType WHEN 'RECOUNT' THEN PhysicalCount - QuantityOnHand WHEN 'DAMAGE' THEN -DamagedQuantity WHEN 'RETURN' THEN ReturnedQuantity ELSE 0 END AS AdjustmentQty FROM InventoryStaging WHERE WarehouseID = @WarehouseID AND Status = 'PENDING' ORDER BY ProductID; BEGIN TRANSACTION; BEGIN TRY OPEN inventory_cursor; FETCH NEXT FROM inventory_cursor INTO @ProductID, @CurrentQty, @AdjustmentQty; WHILE @@FETCH_STATUS = 0 BEGIN BEGIN TRY SET @NewQty = @CurrentQty + @AdjustmentQty; IF EXISTS (SELECT 1 FROM Inventory WHERE ProductID = @ProductID AND WarehouseID = @WarehouseID) UPDATE Inventory SET QuantityOnHand = @NewQty, LastAdjustmentDate = @AdjustmentDate, LastAdjustmentType = @AdjustmentType WHERE ProductID = @ProductID AND WarehouseID = @WarehouseID; ELSE INSERT INTO Inventory (ProductID, WarehouseID, QuantityOnHand, LastAdjustmentDate, LastAdjustmentType) VALUES (@ProductID, @WarehouseID, CASE WHEN @NewQty < 0 THEN 0 ELSE @NewQty END, @AdjustmentDate, @AdjustmentType); INSERT INTO InventoryAuditLog (ProductID, WarehouseID, AdjustmentDate, AdjustmentType, OldQuantity, AdjustmentQuantity, NewQuantity, CreatedBy) VALUES (@ProductID, @WarehouseID, @AdjustmentDate, @AdjustmentType, @CurrentQty, @AdjustmentQty, @NewQty, SUSER_SNAME()); SET @TotalProcessed = @TotalProcessed + 1; END TRY BEGIN CATCH SET @ErrorCount = @ErrorCount + 1; INSERT INTO ErrorLog (ErrorDate, ErrorMessage, ProductID) VALUES (GETDATE(), 'Inventory update failed: ' + ERROR_MESSAGE(), @ProductID); END CATCH; FETCH NEXT FROM inventory_cursor INTO @ProductID, @CurrentQty, @AdjustmentQty; END; CLOSE inventory_cursor; DEALLOCATE inventory_cursor; UPDATE InventoryStaging SET Status = 'PROCESSED', ProcessedDate = GETDATE() WHERE WarehouseID = @WarehouseID AND Status = 'PENDING'; COMMIT TRANSACTION; PRINT 'Bulk inventory update completed. Processed: ' + CAST(@TotalProcessed AS NVARCHAR(10)) + ', Errors: ' + CAST(@ErrorCount AS NVARCHAR(10)); END TRY BEGIN CATCH SET @ErrorMessage = ERROR_MESSAGE(); ROLLBACK TRANSACTION; IF CURSOR_STATUS('global', 'inventory_cursor') >= 0 BEGIN CLOSE inventory_cursor; DEALLOCATE inventory_cursor; END; RAISERROR('Bulk inventory update failed: %s', 16, 1, @ErrorMessage); END CATCH; END;\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE SP_BulkInventoryUpdate @WarehouseID INT, @AdjustmentType NVARCHAR(50), @AdjustmentDate DATETIME = NULL AS BEGIN SET NOCOUNT ON; IF @AdjustmentDate IS NULL SET @AdjustmentDate = GETDATE(); DECLARE @ProductID INT, @CurrentQty INT, @AdjustmentQty INT, @NewQty INT; DECLARE @TotalProcessed INT = 0, @ErrorCount INT = 0; DECLARE @ErrorMessage NVARCHAR(4000); DECLARE inventory_cursor CURSOR FOR SELECT ProductID, QuantityOnHand, CASE @AdjustmentType WHEN 'RECOUNT' THEN PhysicalCount - QuantityOnHand WHEN 'DAMAGE' THEN -DamagedQuantity WHEN 'RETURN' THEN ReturnedQuantity ELSE 0 END AS AdjustmentQty FROM InventoryStaging WHERE WarehouseID = @WarehouseID AND Status = 'PENDING' ORDER BY ProductID; BEGIN TRANSACTION; BEGIN TRY OPEN inventory_cursor; FETCH NEXT FROM inventory_cursor INTO @ProductID, @CurrentQty, @AdjustmentQty; WHILE @@FETCH_STATUS = 0 BEGIN BEGIN TRY SET @NewQty = @CurrentQty + @AdjustmentQty; IF EXISTS (SELECT 1 FROM Inventory WHERE ProductID = @ProductID AND WarehouseID = @WarehouseID) UPDATE Inventory SET QuantityOnHand = @NewQty, LastAdjustmentDate = @AdjustmentDate, LastAdjustmentType = @AdjustmentType WHERE ProductID = @ProductID AND WarehouseID = @WarehouseID; ELSE INSERT INTO Inventory (ProductID, WarehouseID, QuantityOnHand, LastAdjustmentDate, LastAdjustmentType) VALUES (@ProductID, @WarehouseID, CASE WHEN @NewQty < 0 THEN 0 ELSE @NewQty END, @AdjustmentDate, @AdjustmentType); INSERT INTO InventoryAuditLog (ProductID, WarehouseID, AdjustmentDate, AdjustmentType, OldQuantity, AdjustmentQuantity, NewQuantity, CreatedBy) VALUES (@ProductID, @WarehouseID, @AdjustmentDate, @AdjustmentType, @CurrentQty, @AdjustmentQty, @NewQty, SUSER_SNAME()); SET @TotalProcessed = @TotalProcessed + 1; END TRY BEGIN CATCH SET @ErrorCount = @ErrorCount + 1; INSERT INTO ErrorLog (ErrorDate, ErrorMessage, ProductID) VALUES (GETDATE(), 'Inventory update failed: ' + ERROR_MESSAGE(), @ProductID); END CATCH; FETCH NEXT FROM inventory_cursor INTO @ProductID, @CurrentQty, @AdjustmentQty; END; CLOSE inventory_cursor; DEALLOCATE inventory_cursor; UPDATE InventoryStaging SET Status = 'PROCESSED', ProcessedDate = GETDATE() WHERE WarehouseID = @WarehouseID AND Status = 'PENDING'; COMMIT TRANSACTION; PRINT 'Bulk inventory update completed. Processed: ' + CAST(@TotalProcessed AS NVARCHAR(10)) + ', Errors: ' + CAST(@ErrorCount AS NVARCHAR(10)); END TRY BEGIN CATCH SET @ErrorMessage = ERROR_MESSAGE(); ROLLBACK TRANSACTION; IF CURSOR_STATUS('global', 'inventory_cursor') >= 0 BEGIN CLOSE inventory_cursor; DEALLOCATE inventory_cursor; END; RAISERROR('Bulk inventory update failed: %s', 16, 1, @ErrorMessage); END CATCH; END;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_BulkInventoryUpdate(p_WarehouseID int, p_AdjustmentType varchar(50), p_AdjustmentDate timestamp DEFAULT NULL)\nRETURNS void AS $$\nDECLARE\n    v_AdjustmentDate timestamp := COALESCE(p_AdjustmentDate, CURRENT_TIMESTAMP);\n    v_ProductID int;\n    v_CurrentQty int;\n    v_AdjustmentQty int;\n    v_NewQty int;\n    v_TotalProcessed int := 0;\n    v_ErrorCount int := 0;\n    v_ErrorMessage text;\n    rec record;\nBEGIN\n    BEGIN\n        FOR rec IN\n            SELECT ProductID, QuantityOnHand,\n                CASE p_AdjustmentType\n                    WHEN 'RECOUNT' THEN PhysicalCount - QuantityOnHand\n                    WHEN 'DAMAGE' THEN -DamagedQuantity\n                    WHEN 'RETURN' THEN ReturnedQuantity\n                    ELSE 0\n                END AS AdjustmentQty\n            FROM InventoryStaging\n            WHERE WarehouseID = p_WarehouseID AND Status = 'PENDING'\n            ORDER BY ProductID\n        LOOP\n            BEGIN\n                v_ProductID := rec.ProductID;\n                v_CurrentQty := rec.QuantityOnHand;\n                v_AdjustmentQty := rec.AdjustmentQty;\n                v_NewQty := v_CurrentQty + v_AdjustmentQty;\n                IF EXISTS (\n                    SELECT 1 FROM Inventory WHERE ProductID = v_ProductID AND WarehouseID = p_WarehouseID\n                ) THEN\n                    UPDATE Inventory\n                    SET QuantityOnHand = v_NewQty,\n                        LastAdjustmentDate = v_AdjustmentDate,\n                        LastAdjustmentType = p_AdjustmentType\n                    WHERE ProductID = v_ProductID AND WarehouseID = p_WarehouseID;\n                ELSE\n                    INSERT INTO Inventory(ProductID, WarehouseID, QuantityOnHand, LastAdjustmentDate, LastAdjustmentType)\n                    VALUES(\n                        v_ProductID,\n                        p_WarehouseID,\n                        CASE WHEN v_NewQty < 0 THEN 0 ELSE v_NewQty END,\n                        v_AdjustmentDate,\n                        p_AdjustmentType\n                    );\n                END IF;\n                INSERT INTO InventoryAuditLog(\n                    ProductID, WarehouseID, AdjustmentDate, AdjustmentType, OldQuantity, AdjustmentQuantity, NewQuantity, CreatedBy\n                ) VALUES (\n                    v_ProductID,\n                    p_WarehouseID,\n                    v_AdjustmentDate,\n                    p_AdjustmentType,\n                    v_CurrentQty,\n                    v_AdjustmentQty,\n                    v_NewQty,\n                    session_user\n                );\n                v_TotalProcessed := v_TotalProcessed + 1;\n            EXCEPTION WHEN OTHERS THEN\n                v_ErrorCount := v_ErrorCount + 1;\n                INSERT INTO ErrorLog(ErrorDate, ErrorMessage, ProductID)\n                VALUES(\n                    CURRENT_TIMESTAMP,\n                    'Inventory update failed: ' || SQLERRM,\n                    v_ProductID\n                );\n            END;\n        END LOOP;\n\n        UPDATE InventoryStaging\n        SET Status = 'PROCESSED', ProcessedDate = CURRENT_TIMESTAMP\n        WHERE WarehouseID = p_WarehouseID AND Status = 'PENDING';\n\n        RAISE NOTICE 'Bulk inventory update completed. Processed: %, Errors: %', v_TotalProcessed, v_ErrorCount;\n    EXCEPTION WHEN OTHERS THEN\n        v_ErrorMessage := SQLERRM;\n        RAISE EXCEPTION 'Bulk inventory update failed: %', v_ErrorMessage;\n    END;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_BulkInventoryUpdate(\n    p_WarehouseID int,\n    p_AdjustmentType varchar(50),\n    p_AdjustmentDate timestamp default null\n)\nRETURNS void AS $$\nDECLARE\n    rec record;\n    newqty int;\n    total_processed int := 0;\n    error_count int := 0;\n    v_error_message varchar(4000);\nBEGIN\n    IF p_AdjustmentDate IS NULL THEN\n        p_AdjustmentDate := now();\n    END IF;\n\n    FOR rec IN\n        SELECT ProductID,\n               QuantityOnHand,\n               CASE p_AdjustmentType\n                   WHEN 'RECOUNT' THEN PhysicalCount - QuantityOnHand\n                   WHEN 'DAMAGE' THEN -DamagedQuantity\n                   WHEN 'RETURN' THEN ReturnedQuantity\n                   ELSE 0\n               END AS AdjustmentQty\n        FROM InventoryStaging\n        WHERE WarehouseID = p_WarehouseID\n          AND Status = 'PENDING'\n        ORDER BY ProductID\n    LOOP\n        BEGIN\n            newqty := rec.QuantityOnHand + rec.AdjustmentQty;\n            IF EXISTS (\n                SELECT 1\n                FROM Inventory\n                WHERE ProductID = rec.ProductID\n                  AND WarehouseID = p_WarehouseID\n            ) THEN\n                UPDATE Inventory\n                SET QuantityOnHand = newqty,\n                    LastAdjustmentDate = p_AdjustmentDate,\n                    LastAdjustmentType = p_AdjustmentType\n                WHERE ProductID = rec.ProductID\n                  AND WarehouseID = p_WarehouseID;\n            ELSE\n                INSERT INTO Inventory (\n                    ProductID, WarehouseID,\n                    QuantityOnHand, LastAdjustmentDate, LastAdjustmentType\n                )\n                VALUES (\n                    rec.ProductID,\n                    p_WarehouseID,\n                    CASE WHEN newqty < 0 THEN 0 ELSE newqty END,\n                    p_AdjustmentDate,\n                    p_AdjustmentType\n                );\n            END IF;\n            INSERT INTO InventoryAuditLog (\n                ProductID, WarehouseID,\n                AdjustmentDate, AdjustmentType,\n                OldQuantity, AdjustmentQuantity, NewQuantity,\n                CreatedBy\n            )\n            VALUES (\n                rec.ProductID,\n                p_WarehouseID,\n                p_AdjustmentDate,\n                p_AdjustmentType,\n                rec.QuantityOnHand,\n                rec.AdjustmentQty,\n                newqty,\n                current_user\n            );\n            total_processed := total_processed + 1;\n        EXCEPTION WHEN OTHERS THEN\n            error_count := error_count + 1;\n            INSERT INTO ErrorLog (\n                ErrorDate, ErrorMessage, ProductID\n            )\n            VALUES (\n                now(),\n                'Inventory update failed: ' || SQLERRM,\n                rec.ProductID\n            );\n        END;\n    END LOOP;\n\n    UPDATE InventoryStaging\n    SET Status = 'PROCESSED',\n        ProcessedDate = now()\n    WHERE WarehouseID = p_WarehouseID\n      AND Status = 'PENDING';\n\n    RAISE NOTICE\n        'Bulk inventory update completed. Processed: %, Errors: %',\n        total_processed, error_count;\n\n    RETURN;\nEXCEPTION WHEN OTHERS THEN\n    v_error_message := SQLERRM;\n    RAISE EXCEPTION 'Bulk inventory update failed: %', v_error_message;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_BulkInventoryUpdate(\n    p_WarehouseID INT,\n    p_AdjustmentType VARCHAR(50),\n    p_AdjustmentDate timestamp DEFAULT NULL\n)\nRETURNS void AS\n$$\nDECLARE\n    v_AdjustmentDate timestamp := p_AdjustmentDate;\n    v_ProductID INT;\n    v_CurrentQty INT;\n    v_AdjustmentQty INT;\n    v_NewQty INT;\n    v_TotalProcessed INT := 0;\n    v_ErrorCount INT := 0;\n    v_ErrorMessage VARCHAR(4000);\n    rec RECORD;\nBEGIN\n    -- 如果未传入调整日期，则设置为当前时间\n    IF v_AdjustmentDate IS NULL THEN\n        v_AdjustmentDate := CURRENT_TIMESTAMP;\n    END IF;\n\n    -- 遍历待处理的库存调整记录\n    FOR rec IN\n        SELECT ProductID,\n               QuantityOnHand,\n               CASE p_AdjustmentType\n                   WHEN 'RECOUNT' THEN PhysicalCount - QuantityOnHand\n                   WHEN 'DAMAGE' THEN -DamagedQuantity\n                   WHEN 'RETURN' THEN ReturnedQuantity\n                   ELSE 0\n               END AS AdjustmentQty\n        FROM InventoryStaging\n        WHERE WarehouseID = p_WarehouseID\n          AND Status = 'PENDING'\n        ORDER BY ProductID\n    LOOP\n        BEGIN\n            -- 计算新的库存数量\n            v_NewQty := rec.QuantityOnHand + rec.AdjustmentQty;\n            -- 更新或插入Inventory表\n            IF EXISTS (\n                SELECT 1\n                FROM Inventory\n                WHERE ProductID = rec.ProductID\n                  AND WarehouseID = p_WarehouseID\n            ) THEN\n                UPDATE Inventory\n                   SET QuantityOnHand    = v_NewQty,\n                       LastAdjustmentDate = v_AdjustmentDate,\n                       LastAdjustmentType = p_AdjustmentType\n                 WHERE ProductID = rec.ProductID\n                   AND WarehouseID = p_WarehouseID;\n            ELSE\n                INSERT INTO Inventory(\n                    ProductID,\n                    WarehouseID,\n                    QuantityOnHand,\n                    LastAdjustmentDate,\n                    LastAdjustmentType\n                ) VALUES (\n                    rec.ProductID,\n                    p_WarehouseID,\n                    CASE WHEN v_NewQty < 0 THEN 0 ELSE v_NewQty END,\n                    v_AdjustmentDate,\n                    p_AdjustmentType\n                );\n            END IF;\n            -- 插入审计日志\n            INSERT INTO InventoryAuditLog(\n                ProductID,\n                WarehouseID,\n                AdjustmentDate,\n                AdjustmentType,\n                OldQuantity,\n                AdjustmentQuantity,\n                NewQuantity,\n                CreatedBy\n            ) VALUES (\n                rec.ProductID,\n                p_WarehouseID,\n                v_AdjustmentDate,\n                p_AdjustmentType,\n                rec.QuantityOnHand,\n                rec.AdjustmentQty,\n                v_NewQty,\n                current_user\n            );\n            v_TotalProcessed := v_TotalProcessed + 1;\n        EXCEPTION WHEN OTHERS THEN\n            -- 捕获单条记录处理错误并记录\n            v_ErrorCount := v_ErrorCount + 1;\n            INSERT INTO ErrorLog(\n                ErrorDate,\n                ErrorMessage,\n                ProductID\n            ) VALUES (\n                CURRENT_TIMESTAMP,\n                'Inventory update failed: ' || SQLERRM,\n                rec.ProductID\n            );\n            -- 继续处理下一条\n        END;\n    END LOOP;\n\n    -- 更新暂存表状态\n    UPDATE InventoryStaging\n       SET Status        = 'PROCESSED',\n           ProcessedDate = CURRENT_TIMESTAMP\n     WHERE WarehouseID = p_WarehouseID\n       AND Status      = 'PENDING';\n\n    -- 输出处理结果\n    RAISE NOTICE 'Bulk inventory update completed. Processed: %, Errors: %',\n                 v_TotalProcessed,\n                 v_ErrorCount;\nEXCEPTION WHEN OTHERS THEN\n    -- 捕获整个过程异常并抛出\n    v_ErrorMessage := SQLERRM;\n    RAISE EXCEPTION 'Bulk inventory update failed: %', v_ErrorMessage;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "12",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"12\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"SET NOCOUNT ON\", \"DECLARE\", \"DECIMAL\", \"NUMERIC\", \"CURSOR\", \"ISNULL\", \"COALESCE\", \"SUM\", \"BEGIN TRY\", \"GETDATE\", \"NOW\", \"CURRENT_TIMESTAMP\", \"SCOPE_IDENTITY\", \"OPEN\", \"@@FETCH_STATUS\", \"WHILE\", \"CLOSE\", \"DEALLOCATE\", \"RAISE NOTICE\", \"PRINT\", \"CAST\", \"NVARCHAR2\", \"RAISERROR\", \"ERROR_MESSAGE\", \"RAISE EXCEPTION\", \"BETWEEN\"]}, \"sql\": \"CREATE PROCEDURE SP_ProcessPayroll @PayPeriodStart DATETIME, @PayPeriodEnd DATETIME, @DepartmentID INT = NULL AS BEGIN SET NOCOUNT ON; DECLARE @PayrollID INT; DECLARE @EmployeeID INT, @HourlyRate DECIMAL(10,2), @RegularHours DECIMAL(5,2), @OvertimeHours DECIMAL(5,2); DECLARE @GrossPay DECIMAL(10,2), @TaxDeduction DECIMAL(10,2), @NetPay DECIMAL(10,2); DECLARE @TotalGross DECIMAL(15,2) = 0, @TotalNet DECIMAL(15,2) = 0; DECLARE employee_cursor CURSOR FOR SELECT e.EmployeeID, e.HourlyRate, ISNULL(SUM(CASE WHEN t.Hours <= 8 THEN t.Hours ELSE 8 END), 0) AS RegularHours, ISNULL(SUM(CASE WHEN t.Hours > 8 THEN t.Hours - 8 ELSE 0 END), 0) AS OvertimeHours FROM Employees e LEFT JOIN Timesheet t ON e.EmployeeID = t.EmployeeID AND t.WorkDate BETWEEN @PayPeriodStart AND @PayPeriodEnd WHERE e.Status = 'ACTIVE' AND (@DepartmentID IS NULL OR e.DepartmentID = @DepartmentID) GROUP BY e.EmployeeID, e.HourlyRate ORDER BY e.EmployeeID; BEGIN TRY INSERT INTO PayrollHeader (PayPeriodStart, PayPeriodEnd, DepartmentID, CreatedDate, Status) VALUES (@PayPeriodStart, @PayPeriodEnd, @DepartmentID, GETDATE(), 'PROCESSING'); SET @PayrollID = SCOPE_IDENTITY(); OPEN employee_cursor; FETCH NEXT FROM employee_cursor INTO @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours; WHILE @@FETCH_STATUS = 0 BEGIN SET @GrossPay = (@RegularHours * @HourlyRate) + (@OvertimeHours * @HourlyRate * 1.5); SET @TaxDeduction = @GrossPay * 0.20; -- 20% tax rate SET @NetPay = @GrossPay - @TaxDeduction; INSERT INTO PayrollDetail (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay) VALUES (@PayrollID, @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours, @GrossPay, @TaxDeduction, @NetPay); SET @TotalGross = @TotalGross + @GrossPay; SET @TotalNet = @TotalNet + @NetPay; FETCH NEXT FROM employee_cursor INTO @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours; END; CLOSE employee_cursor; DEALLOCATE employee_cursor; UPDATE PayrollHeader SET TotalGrossPay = @TotalGross, TotalNetPay = @TotalNet, Status = 'COMPLETED', CompletedDate = GETDATE() WHERE PayrollID = @PayrollID; PRINT 'Payroll processing completed. Payroll ID: ' + CAST(@PayrollID AS NVARCHAR(10)); END TRY BEGIN CATCH IF CURSOR_STATUS('global', 'employee_cursor') >= 0 BEGIN CLOSE employee_cursor; DEALLOCATE employee_cursor; END; UPDATE PayrollHeader SET Status = 'FAILED', ErrorMessage = ERROR_MESSAGE() WHERE PayrollID = @PayrollID; RAISERROR('Payroll processing failed: %s', 16, 1, ERROR_MESSAGE()); END CATCH; END;\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE SP_ProcessPayroll @PayPeriodStart DATETIME, @PayPeriodEnd DATETIME, @DepartmentID INT = NULL AS BEGIN SET NOCOUNT ON; DECLARE @PayrollID INT; DECLARE @EmployeeID INT, @HourlyRate DECIMAL(10,2), @RegularHours DECIMAL(5,2), @OvertimeHours DECIMAL(5,2); DECLARE @GrossPay DECIMAL(10,2), @TaxDeduction DECIMAL(10,2), @NetPay DECIMAL(10,2); DECLARE @TotalGross DECIMAL(15,2) = 0, @TotalNet DECIMAL(15,2) = 0; DECLARE employee_cursor CURSOR FOR SELECT e.EmployeeID, e.HourlyRate, ISNULL(SUM(CASE WHEN t.Hours <= 8 THEN t.Hours ELSE 8 END), 0) AS RegularHours, ISNULL(SUM(CASE WHEN t.Hours > 8 THEN t.Hours - 8 ELSE 0 END), 0) AS OvertimeHours FROM Employees e LEFT JOIN Timesheet t ON e.EmployeeID = t.EmployeeID AND t.WorkDate BETWEEN @PayPeriodStart AND @PayPeriodEnd WHERE e.Status = 'ACTIVE' AND (@DepartmentID IS NULL OR e.DepartmentID = @DepartmentID) GROUP BY e.EmployeeID, e.HourlyRate ORDER BY e.EmployeeID; BEGIN TRY INSERT INTO PayrollHeader (PayPeriodStart, PayPeriodEnd, DepartmentID, CreatedDate, Status) VALUES (@PayPeriodStart, @PayPeriodEnd, @DepartmentID, GETDATE(), 'PROCESSING'); SET @PayrollID = SCOPE_IDENTITY(); OPEN employee_cursor; FETCH NEXT FROM employee_cursor INTO @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours; WHILE @@FETCH_STATUS = 0 BEGIN SET @GrossPay = (@RegularHours * @HourlyRate) + (@OvertimeHours * @HourlyRate * 1.5); SET @TaxDeduction = @GrossPay * 0.20; -- 20% tax rate SET @NetPay = @GrossPay - @TaxDeduction; INSERT INTO PayrollDetail (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay) VALUES (@PayrollID, @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours, @GrossPay, @TaxDeduction, @NetPay); SET @TotalGross = @TotalGross + @GrossPay; SET @TotalNet = @TotalNet + @NetPay; FETCH NEXT FROM employee_cursor INTO @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours; END; CLOSE employee_cursor; DEALLOCATE employee_cursor; UPDATE PayrollHeader SET TotalGrossPay = @TotalGross, TotalNetPay = @TotalNet, Status = 'COMPLETED', CompletedDate = GETDATE() WHERE PayrollID = @PayrollID; PRINT 'Payroll processing completed. Payroll ID: ' + CAST(@PayrollID AS NVARCHAR(10)); END TRY BEGIN CATCH IF CURSOR_STATUS('global', 'employee_cursor') >= 0 BEGIN CLOSE employee_cursor; DEALLOCATE employee_cursor; END; UPDATE PayrollHeader SET Status = 'FAILED', ErrorMessage = ERROR_MESSAGE() WHERE PayrollID = @PayrollID; RAISERROR('Payroll processing failed: %s', 16, 1, ERROR_MESSAGE()); END CATCH; END;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_ProcessPayroll(\n    p_PayPeriodStart timestamp,\n    p_PayPeriodEnd timestamp,\n    p_DepartmentID int DEFAULT NULL\n)\nRETURNS void AS $$\nDECLARE\n    v_payroll_id integer;\n    v_gross_pay numeric(10,2);\n    v_tax_deduction numeric(10,2);\n    v_net_pay numeric(10,2);\n    v_total_gross numeric(15,2) := 0;\n    v_total_net numeric(15,2) := 0;\n    rec record;\nBEGIN\n    -- 插入薪资头并获取PayrollID\n    INSERT INTO PayrollHeader (PayPeriodStart, PayPeriodEnd, DepartmentID, CreatedDate, Status)\n    VALUES (p_PayPeriodStart, p_PayPeriodEnd, p_DepartmentID, CURRENT_TIMESTAMP, 'PROCESSING')\n    RETURNING PayrollID INTO v_payroll_id;\n\n    -- 遍历员工计算薪资明细\n    FOR rec IN\n        SELECT e.EmployeeID,\n               e.HourlyRate,\n               COALESCE(SUM(CASE WHEN t.Hours <= 8 THEN t.Hours ELSE 8 END), 0) AS RegularHours,\n               COALESCE(SUM(CASE WHEN t.Hours > 8 THEN t.Hours - 8 ELSE 0 END), 0) AS OvertimeHours\n        FROM Employees e\n        LEFT JOIN Timesheet t\n            ON e.EmployeeID = t.EmployeeID\n           AND t.WorkDate BETWEEN p_PayPeriodStart AND p_PayPeriodEnd\n        WHERE e.Status = 'ACTIVE'\n          AND (p_DepartmentID IS NULL OR e.DepartmentID = p_DepartmentID)\n        GROUP BY e.EmployeeID, e.HourlyRate\n        ORDER BY e.EmployeeID\n    LOOP\n        v_gross_pay := (rec.RegularHours * rec.HourlyRate) + (rec.OvertimeHours * rec.HourlyRate * 1.5);\n        v_tax_deduction := v_gross_pay * 0.20; -- 20%税率\n        v_net_pay := v_gross_pay - v_tax_deduction;\n\n        INSERT INTO PayrollDetail\n            (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay)\n        VALUES\n            (v_payroll_id, rec.EmployeeID, rec.HourlyRate, rec.RegularHours, rec.OvertimeHours, v_gross_pay, v_tax_deduction, v_net_pay);\n\n        v_total_gross := v_total_gross + v_gross_pay;\n        v_total_net := v_total_net + v_net_pay;\n    END LOOP;\n\n    -- 更新薪资头状态\n    UPDATE PayrollHeader\n    SET TotalGrossPay = v_total_gross,\n        TotalNetPay = v_total_net,\n        Status = 'COMPLETED',\n        CompletedDate = CURRENT_TIMESTAMP\n    WHERE PayrollID = v_payroll_id;\n\n    RAISE NOTICE 'Payroll processing completed. Payroll ID: %', v_payroll_id;\n\nEXCEPTION\n    WHEN OTHERS THEN\n        -- 异常处理，更新失败状态并抛出异常\n        UPDATE PayrollHeader\n        SET Status = 'FAILED',\n            ErrorMessage = SQLERRM\n        WHERE PayrollID = v_payroll_id;\n        RAISE EXCEPTION 'Payroll processing failed: %', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_ProcessPayroll(\n    p_PayPeriodStart timestamp,\n    p_PayPeriodEnd timestamp,\n    p_DepartmentID int DEFAULT NULL\n) RETURNS void AS $$\nDECLARE\n    payroll_id int;\n    gross_pay decimal(10,2);\n    tax_deduction decimal(10,2);\n    net_pay decimal(10,2);\n    total_gross decimal(15,2) := 0;\n    total_net decimal(15,2) := 0;\n    rec record;\nBEGIN\n    INSERT INTO PayrollHeader (PayPeriodStart, PayPeriodEnd, DepartmentID, CreatedDate, Status)\n    VALUES (p_PayPeriodStart, p_PayPeriodEnd, p_DepartmentID, now(), 'PROCESSING')\n    RETURNING PayrollID INTO payroll_id;\n\n    FOR rec IN\n        SELECT\n            e.EmployeeID,\n            e.HourlyRate,\n            COALESCE(SUM(CASE WHEN t.Hours <= 8 THEN t.Hours ELSE 8 END), 0) AS RegularHours,\n            COALESCE(SUM(CASE WHEN t.Hours > 8 THEN t.Hours - 8 ELSE 0 END), 0) AS OvertimeHours\n        FROM Employees e\n        LEFT JOIN Timesheet t ON e.EmployeeID = t.EmployeeID\n            AND t.WorkDate BETWEEN p_PayPeriodStart AND p_PayPeriodEnd\n        WHERE e.Status = 'ACTIVE'\n            AND (p_DepartmentID IS NULL OR e.DepartmentID = p_DepartmentID)\n        GROUP BY e.EmployeeID, e.HourlyRate\n        ORDER BY e.EmployeeID\n    LOOP\n        gross_pay := (rec.RegularHours * rec.HourlyRate) + (rec.OvertimeHours * rec.HourlyRate * 1.5);\n        tax_deduction := gross_pay * 0.20;\n        net_pay := gross_pay - tax_deduction;\n\n        INSERT INTO PayrollDetail (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay)\n        VALUES (payroll_id, rec.EmployeeID, rec.HourlyRate, rec.RegularHours, rec.OvertimeHours, gross_pay, tax_deduction, net_pay);\n\n        total_gross := total_gross + gross_pay;\n        total_net := total_net + net_pay;\n    END LOOP;\n\n    UPDATE PayrollHeader\n    SET TotalGrossPay = total_gross,\n        TotalNetPay = total_net,\n        Status = 'COMPLETED',\n        CompletedDate = now()\n    WHERE PayrollID = payroll_id;\n\n    RAISE NOTICE 'Payroll processing completed. Payroll ID: %', payroll_id;\n\nEXCEPTION WHEN OTHERS THEN\n    UPDATE PayrollHeader\n    SET Status = 'FAILED',\n        ErrorMessage = SQLERRM\n    WHERE PayrollID = payroll_id;\n\n    RAISE EXCEPTION 'Payroll processing failed: %', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_ProcessPayroll(\n    p_PayPeriodStart timestamp,\n    p_PayPeriodEnd timestamp,\n    p_DepartmentID int DEFAULT NULL\n)\nRETURNS void\nLANGUAGE plpgsql\nAS $$\nDECLARE\n    v_payrollid int;\n    v_employeeid int;\n    v_hourlyrate decimal(10,2);\n    v_regularhours decimal(5,2);\n    v_overtimehours decimal(5,2);\n    v_grosspay decimal(10,2);\n    v_taxdeduction decimal(10,2);\n    v_netpay decimal(10,2);\n    v_totalgross decimal(15,2) := 0;\n    v_totalnet decimal(15,2) := 0;\nBEGIN\n    -- SET NOCOUNT ON 已移除\n    INSERT INTO PayrollHeader (PayPeriodStart, PayPeriodEnd, DepartmentID, CreatedDate, Status)\n    VALUES (p_PayPeriodStart, p_PayPeriodEnd, p_DepartmentID, now(), 'PROCESSING')\n    RETURNING PayrollID INTO v_payrollid;\n\n    FOR rec IN\n        SELECT e.EmployeeID,\n               e.HourlyRate,\n               COALESCE(SUM(CASE WHEN t.Hours <= 8 THEN t.Hours ELSE 8 END), 0) AS RegularHours,\n               COALESCE(SUM(CASE WHEN t.Hours > 8 THEN t.Hours - 8 ELSE 0 END), 0) AS OvertimeHours\n        FROM Employees e\n        LEFT JOIN Timesheet t\n            ON e.EmployeeID = t.EmployeeID\n           AND t.WorkDate BETWEEN p_PayPeriodStart AND p_PayPeriodEnd\n        WHERE e.Status = 'ACTIVE'\n          AND (p_DepartmentID IS NULL OR e.DepartmentID = p_DepartmentID)\n        GROUP BY e.EmployeeID, e.HourlyRate\n        ORDER BY e.EmployeeID\n    LOOP\n        v_employeeid := rec.EmployeeID;\n        v_hourlyrate := rec.HourlyRate;\n        v_regularhours := rec.RegularHours;\n        v_overtimehours := rec.OvertimeHours;\n\n        v_grosspay := (v_regularhours * v_hourlyrate) + (v_overtimehours * v_hourlyrate * 1.5);\n        v_taxdeduction := v_grosspay * 0.20;\n        v_netpay := v_grosspay - v_taxdeduction;\n\n        INSERT INTO PayrollDetail (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay)\n        VALUES (v_payrollid, v_employeeid, v_hourlyrate, v_regularhours, v_overtimehours, v_grosspay, v_taxdeduction, v_netpay);\n\n        v_totalgross := v_totalgross + v_grosspay;\n        v_totalnet := v_totalnet + v_netpay;\n    END LOOP;\n\n    UPDATE PayrollHeader\n    SET TotalGrossPay = v_totalgross,\n        TotalNetPay = v_totalnet,\n        Status = 'COMPLETED',\n        CompletedDate = now()\n    WHERE PayrollID = v_payrollid;\n\n    RAISE NOTICE 'Payroll processing completed. Payroll ID: %', v_payrollid;\n\nEXCEPTION\n    WHEN OTHERS THEN\n        UPDATE PayrollHeader\n        SET Status = 'FAILED',\n            ErrorMessage = SQLERRM\n        WHERE PayrollID = v_payrollid;\n        RAISE EXCEPTION 'Payroll processing failed: %', SQLERRM;\nEND;\n$$;"
                    }
                ]
            },
            {
                "case_id": "13",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"13\", \"difficulty_level\": \"1\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"GETDATE\", \"DATEADD\", \"INTERVAL\", \"CURRENT_TIMESTAMP\", \"now\", \"CONVERT\", \"CAST\", \"PRINT\", \"@@ERROR\", \"RAISERROR\"]}, \"sql\": \"CREATE PROCEDURE [dbo].[sp_YwA_DistillUllageReportDataAll] \\nAS\\n/*==============================================================*/\\n/*在A库中抽取前七天报表数据到临时表中( 未定在B中抽取还是在A中抽取*/\\n/* 该存储过程有连接到业维库的用户名密码，修改处 6 处 \\t\\t       */\\n/*==============================================================*/\\n/* 修改出港舱单的日期为出港航班日期*/\\ndeclare @sFdate1 AS varchar(20) \\ndeclare @sFdate2 AS varchar(20) \\ndeclare @Yw_Op_Date datetime  --当前业维日期\\ndeclare @YwUser varchar(10)\\ndeclare @StartTime datetime\\ndeclare @EndTime datetime\\ndeclare @iden int \\n\\n\\n\\t-- 删除日期重复数据\\n\\tSET ANSI_NULLS ON\\n\\tSET ANSI_WARNINGS ON\\n\\tSET XACT_ABORT ON\\n\\n\\t--定义隔离级别为最低\\n\\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED\\n\\t\\n\\tSet @StartTime =Getdate() --Cast('2007-03-14' As dateTime) -- ----Cast('2007-02-6' As dateTime)   --- --Cast('2004-08-14' As dateTime) --Getdate() -- --Getdate() --\\n\\tSet @YwUser ='YWUSER'\\n\\tSet @Yw_Op_Date = Null\\n\\n\\tSelect @Yw_Op_Date = @StartTime\\n\\n\\tPrint '新建开始抽取日期'\\n\\tEXEC sp_YwA_InsLog @Yw_Op_Date,@StartTime,NULL,0,'REPORTRUN','sp_YwA_DistillUllageReportDataAll--在A库中抽取前七天报表数据到临时表'\\n\\n\\tSet @sFdate1 = Convert(varchar(10),DateAdd(day,-1,@Yw_Op_Date),121) + '  23:59:59 '\\n\\tSet @sFdate2 = Convert(varchar(10),DateAdd(day,-7,@Yw_Op_Date),121) + '  00:00:00 '\\n\\n\\t-- 步骤开始\\n\\tSet @iden = @@IDENTITY\\n\\n\\tPrint '业维日期：'+ CONVERT(CHAR(10),@Yw_Op_Date,121)\\n\\tPrint '最早日期：' + @sFdate1\\n\\tPrint '最晚日期：' + @sFdate2\\n\\n\\tPrint '删除临时表记录'\\n\\n\\n\\n\\n\\n\\t--开始操作\\n\\t--Begin Transaction TransHandle\\n\\n\\t--删除动态航班数据 \\n\\t--Delete From OPENDATASOURCE(\\n\\t--'SQLOLEDB','Password=Admin@12341;Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=10.69.98.30\\\\CARGOYWDB,1433').CARGO2.DBO.TBL_Flight\\n\\tDelete From [10.69.98.30].CARGO2.DBO.TBL_Flight\\n\\tWhere FlightDate>=@sFdate2 and FlightDate<=@sFdate1\\n\\t--Where  Op_Date>=@sFdate2 AND Op_Date<=@sFdate1\\n             If @@error<>0 \\n\\tBegin\\n\\t\\tGoto ErrorHandler\\n\\tEnd\\n\\n\\t--插入动态航班数据\\n\\tINSERT [10.69.98.30].CARGO2.DBO.TBL_Flight\\n\\t(FlightNo,FlightDate,Flight_Dep,Flight_Dest,Manifest_ID,Flight_Dep_Time,Flight_Dest_Time,Flight_Dep_ActTime,Flight_Dest_ActTime,\\n\\tActype,AcNo,ControlFlag,FlightFlag,Flight_Dep_ID,Flight_Dest_ID,Area,FlightArea,MaxActypeLoad,\\n\\tMaxBookingWeight,MaxLoadedWeight,MaxLoadedVolume,ControlWeight,ControlVolume,InnerWeight,InnerVolume,FreeWeight,FreeVolume,\\n\\tMultiSegmentFlag,YwComRun,UpdateFlag,MaxBookingVolume,Delay_ID,Service_Type,Leg_Status,SocExisted,SocSame,YW_OP_TIME,YW_OWNER)\\n\\tSelect FlightNo,FlightDate,Flight_Dep,Flight_Dest,Manifest_ID,Flight_Dep_Time,Flight_Dest_Time,Flight_Dep_ActTime,Flight_Dest_ActTime,\\n\\tActype,AcNo,ControlFlag,FlightFlag,Flight_Dep_ID,Flight_Dest_ID,Area,FlightArea,MaxActypeLoad,\\n\\tMaxBookingWeight,MaxLoadedWeight,MaxLoadedVolume,ControlWeight,ControlVolume,InnerWeight,InnerVolume,FreeWeight,FreeVolume,\\n\\tMultiSegmentFlag,YwComRun,UpdateFlag,MaxBookingVolume,Delay_ID,Service_Type,Leg_Status,SocExisted,SocSame,GetDate(),'A'\\n\\tFrom CARGO2.DBO.TBL_Flight\\n\\twhere flightdate>=@sFdate2 AND flightdate<=@sFdate1\\n\\n--执行虚耗捕捉的存储过程\\n\\n\\texec TangForUllageArrCapture\\n\\n\\n\\t--删除虚耗数据\\n\\t--Delete From OPENDATASOURCE(\\n\\t--'SQLOLEDB','Password=Admin@12341;Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=10.69.98.30\\\\CARGOYWDB,1433').CARGO2.DBO.tbl_YW_ullage\\n\\tDelete From [10.69.98.30].CARGO2.DBO.tbl_YW_ullage\\n\\tWhere FlightDate>=@sFdate2 and FlightDate<=@sFdate1\\n\\t--Where  Op_Date>=@sFdate2 AND Op_Date<=@sFdate1\\n             If @@error<>0 \\n\\tBegin\\n\\t\\tGoto ErrorHandler\\n\\tEnd\\n\\n\\t--插 入虚耗数据\\n\\tINSERT [10.69.98.30].CARGO2.DBO.tbl_YW_ullage\\n\\t(OLDWEIGHT,OLDVOLUME,\\n\\t\\tFlightNo,FlightDate,Flight_Dep,Flight_Dest,RESER,AWBCITY,Goods,\\n\\t\\tOP_ID,\\n\\t\\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OP_DATE,\\n\\t\\tOLDBOOKWEIGHT,OLDBOOKVOLUME,NEWBOOKWEIGHT,\\n\\t\\tNEWBOOKVOLUME,NEWWEIGHT,NEWVOLUME)\\n\\tSelect OLDWEIGHT,OLDVOLUME,\\n\\t\\tFlightNo,FlightDate,Flight_Dep,Flight_Dest,RESER,AWBCITY,Goods,\\n\\t\\tOP_ID,\\n\\t\\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OP_DATE,\\n\\t\\tOLDBOOKWEIGHT,OLDBOOKVOLUME,NEWBOOKWEIGHT,\\n\\t\\tNEWBOOKVOLUME,NEWWEIGHT,NEWVOLUME\\n\\tFrom CARGO2.DBO.tbl_ullage\\n\\twhere flightdate>=@sFdate2 AND flightdate<=@sFdate1\\n\\n\\n\\t--删除到货虚耗数据\\n\\t--Delete From OPENDATASOURCE(\\n\\t--'SQLOLEDB','Password=Admin@12341;Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=10.69.98.19\\\\CARGOYWDB,1433').CARGO2.DBO.TBL_YW_ULLAGE_ARR\\n\\t--Where  OpDate>=@sFdate2 AND OpDate<=@sFdate1\\n             --If @@error<>0 \\n\\t--Begin\\n\\t--\\tGoto ErrorHandler\\n\\t--End\\n\\t--现在修改新的到货虚耗删除，使用航班日期\\n\\t--Delete From OPENDATASOURCE(\\n\\t--'SQLOLEDB','Password=Admin@12341;Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=10.69.98.30\\\\CARGOYWDB,1433').CARGO2.DBO.TBL_YW_ULLAGE_ARR\\n\\tDelete From [10.69.98.30].CARGO2.DBO.TBL_YW_ULLAGE_ARR\\n\\tWhere  FlightDate>=@sFdate2 AND FlightDate<=@sFdate1\\n             If @@error<>0 \\n\\tBegin\\n\\t\\tGoto ErrorHandler\\n\\tEnd\\n/*\\n\\t--插入到货虚耗数据\\n\\tINSERT [10.69.98.19].CARGO2.DBO.TBL_YW_ULLAGE_ARR\\n\\t(FlightNo,FlightDate,Flight_Dep,Flight_Dest,AgentCode,Goods,\\n\\t\\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OpDate,BookWeight,ActDepWeight,DrawbackWeight,\\n\\t\\tActDepBookWeight)\\n\\tSelect FlightNo,FlightDate,Flight_Dep,Flight_Dest,AgentCode,Goods,\\n\\t\\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OpDate,BookWeight,ActDepWeight,DrawbackWeight,\\n\\t\\tActDepBookWeight\\n\\tFrom CARGO2.DBO.tbl_ullage_arr\\n\\tWhere  OpDate>=@sFdate2 AND OpDate<=@sFdate1\\n*/\\n\\t-- 航班事务结束操作\\n\\t--Commit Transaction TransHandle\\n\\nSucHandler:\\n\\t-- 步骤完成\\n\\tUPDATE TBL_YW_LOG SET [ENDTIME]=GETDATE(),[OPTResult]='REPORTSUC'\\n\\tWHERE LOG_ID =@iden\\n\\tReturn\\nErrorHandler:\\n\\t-- 步骤错误\\n\\tPrint '操作事务回滚'\\n\\t--Rollback Transaction TransHandle\\n\\n\\tUPDATE TBL_YW_LOG SET [ENDTIME]=GETDATE(),[OPTResult]='REPORTERR'\\n\\tWHERE LOG_ID =@iden\\n\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE [dbo].[sp_YwA_DistillUllageReportDataAll] \nAS\n/*==============================================================*/\n/*在A库中抽取前七天报表数据到临时表中( 未定在B中抽取还是在A中抽取*/\n/* 该存储过程有连接到业维库的用户名密码，修改处 6 处 \t\t       */\n/*==============================================================*/\n/* 修改出港舱单的日期为出港航班日期*/\ndeclare @sFdate1 AS varchar(20) \ndeclare @sFdate2 AS varchar(20) \ndeclare @Yw_Op_Date datetime  --当前业维日期\ndeclare @YwUser varchar(10)\ndeclare @StartTime datetime\ndeclare @EndTime datetime\ndeclare @iden int \n\n\n\t-- 删除日期重复数据\n\tSET ANSI_NULLS ON\n\tSET ANSI_WARNINGS ON\n\tSET XACT_ABORT ON\n\n\t--定义隔离级别为最低\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED\n\t\n\tSet @StartTime =Getdate() --Cast('2007-03-14' As dateTime) -- ----Cast('2007-02-6' As dateTime)   --- --Cast('2004-08-14' As dateTime) --Getdate() -- --Getdate() --\n\tSet @YwUser ='YWUSER'\n\tSet @Yw_Op_Date = Null\n\n\tSelect @Yw_Op_Date = @StartTime\n\n\tPrint '新建开始抽取日期'\n\tEXEC sp_YwA_InsLog @Yw_Op_Date,@StartTime,NULL,0,'REPORTRUN','sp_YwA_DistillUllageReportDataAll--在A库中抽取前七天报表数据到临时表'\n\n\tSet @sFdate1 = Convert(varchar(10),DateAdd(day,-1,@Yw_Op_Date),121) + '  23:59:59 '\n\tSet @sFdate2 = Convert(varchar(10),DateAdd(day,-7,@Yw_Op_Date),121) + '  00:00:00 '\n\n\t-- 步骤开始\n\tSet @iden = @@IDENTITY\n\n\tPrint '业维日期：'+ CONVERT(CHAR(10),@Yw_Op_Date,121)\n\tPrint '最早日期：' + @sFdate1\n\tPrint '最晚日期：' + @sFdate2\n\n\tPrint '删除临时表记录'\n\n\n\n\n\n\t--开始操作\n\t--Begin Transaction TransHandle\n\n\t--删除动态航班数据 \n\t--Delete From OPENDATASOURCE(\n\t--'SQLOLEDB','Password=Admin@12341;Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=10.69.98.30\\CARGOYWDB,1433').CARGO2.DBO.TBL_Flight\n\tDelete From [10.69.98.30].CARGO2.DBO.TBL_Flight\n\tWhere FlightDate>=@sFdate2 and FlightDate<=@sFdate1\n\t--Where  Op_Date>=@sFdate2 AND Op_Date<=@sFdate1\n             If @@error<>0 \n\tBegin\n\t\tGoto ErrorHandler\n\tEnd\n\n\t--插入动态航班数据\n\tINSERT [10.69.98.30].CARGO2.DBO.TBL_Flight\n\t(FlightNo,FlightDate,Flight_Dep,Flight_Dest,Manifest_ID,Flight_Dep_Time,Flight_Dest_Time,Flight_Dep_ActTime,Flight_Dest_ActTime,\n\tActype,AcNo,ControlFlag,FlightFlag,Flight_Dep_ID,Flight_Dest_ID,Area,FlightArea,MaxActypeLoad,\n\tMaxBookingWeight,MaxLoadedWeight,MaxLoadedVolume,ControlWeight,ControlVolume,InnerWeight,InnerVolume,FreeWeight,FreeVolume,\n\tMultiSegmentFlag,YwComRun,UpdateFlag,MaxBookingVolume,Delay_ID,Service_Type,Leg_Status,SocExisted,SocSame,YW_OP_TIME,YW_OWNER)\n\tSelect FlightNo,FlightDate,Flight_Dep,Flight_Dest,Manifest_ID,Flight_Dep_Time,Flight_Dest_Time,Flight_Dep_ActTime,Flight_Dest_ActTime,\n\tActype,AcNo,ControlFlag,FlightFlag,Flight_Dep_ID,Flight_Dest_ID,Area,FlightArea,MaxActypeLoad,\n\tMaxBookingWeight,MaxLoadedWeight,MaxLoadedVolume,ControlWeight,ControlVolume,InnerWeight,InnerVolume,FreeWeight,FreeVolume,\n\tMultiSegmentFlag,YwComRun,UpdateFlag,MaxBookingVolume,Delay_ID,Service_Type,Leg_Status,SocExisted,SocSame,GetDate(),'A'\n\tFrom CARGO2.DBO.TBL_Flight\n\twhere flightdate>=@sFdate2 AND flightdate<=@sFdate1\n\n--执行虚耗捕捉的存储过程\n\n\texec TangForUllageArrCapture\n\n\n\t--删除虚耗数据\n\t--Delete From OPENDATASOURCE(\n\t--'SQLOLEDB','Password=Admin@12341;Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=10.69.98.30\\CARGOYWDB,1433').CARGO2.DBO.tbl_YW_ullage\n\tDelete From [10.69.98.30].CARGO2.DBO.tbl_YW_ullage\n\tWhere FlightDate>=@sFdate2 and FlightDate<=@sFdate1\n\t--Where  Op_Date>=@sFdate2 AND Op_Date<=@sFdate1\n             If @@error<>0 \n\tBegin\n\t\tGoto ErrorHandler\n\tEnd\n\n\t--插 入虚耗数据\n\tINSERT [10.69.98.30].CARGO2.DBO.tbl_YW_ullage\n\t(OLDWEIGHT,OLDVOLUME,\n\t\tFlightNo,FlightDate,Flight_Dep,Flight_Dest,RESER,AWBCITY,Goods,\n\t\tOP_ID,\n\t\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OP_DATE,\n\t\tOLDBOOKWEIGHT,OLDBOOKVOLUME,NEWBOOKWEIGHT,\n\t\tNEWBOOKVOLUME,NEWWEIGHT,NEWVOLUME)\n\tSelect OLDWEIGHT,OLDVOLUME,\n\t\tFlightNo,FlightDate,Flight_Dep,Flight_Dest,RESER,AWBCITY,Goods,\n\t\tOP_ID,\n\t\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OP_DATE,\n\t\tOLDBOOKWEIGHT,OLDBOOKVOLUME,NEWBOOKWEIGHT,\n\t\tNEWBOOKVOLUME,NEWWEIGHT,NEWVOLUME\n\tFrom CARGO2.DBO.tbl_ullage\n\twhere flightdate>=@sFdate2 AND flightdate<=@sFdate1\n\n\n\t--删除到货虚耗数据\n\t--Delete From OPENDATASOURCE(\n\t--'SQLOLEDB','Password=Admin@12341;Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=10.69.98.19\\CARGOYWDB,1433').CARGO2.DBO.TBL_YW_ULLAGE_ARR\n\t--Where  OpDate>=@sFdate2 AND OpDate<=@sFdate1\n             --If @@error<>0 \n\t--Begin\n\t--\tGoto ErrorHandler\n\t--End\n\t--现在修改新的到货虚耗删除，使用航班日期\n\t--Delete From OPENDATASOURCE(\n\t--'SQLOLEDB','Password=Admin@12341;Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=10.69.98.30\\CARGOYWDB,1433').CARGO2.DBO.TBL_YW_ULLAGE_ARR\n\tDelete From [10.69.98.30].CARGO2.DBO.TBL_YW_ULLAGE_ARR\n\tWhere  FlightDate>=@sFdate2 AND FlightDate<=@sFdate1\n             If @@error<>0 \n\tBegin\n\t\tGoto ErrorHandler\n\tEnd\n/*\n\t--插入到货虚耗数据\n\tINSERT [10.69.98.19].CARGO2.DBO.TBL_YW_ULLAGE_ARR\n\t(FlightNo,FlightDate,Flight_Dep,Flight_Dest,AgentCode,Goods,\n\t\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OpDate,BookWeight,ActDepWeight,DrawbackWeight,\n\t\tActDepBookWeight)\n\tSelect FlightNo,FlightDate,Flight_Dep,Flight_Dest,AgentCode,Goods,\n\t\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OpDate,BookWeight,ActDepWeight,DrawbackWeight,\n\t\tActDepBookWeight\n\tFrom CARGO2.DBO.tbl_ullage_arr\n\tWhere  OpDate>=@sFdate2 AND OpDate<=@sFdate1\n*/\n\t-- 航班事务结束操作\n\t--Commit Transaction TransHandle\n\nSucHandler:\n\t-- 步骤完成\n\tUPDATE TBL_YW_LOG SET [ENDTIME]=GETDATE(),[OPTResult]='REPORTSUC'\n\tWHERE LOG_ID =@iden\n\tReturn\nErrorHandler:\n\t-- 步骤错误\n\tPrint '操作事务回滚'\n\t--Rollback Transaction TransHandle\n\n\tUPDATE TBL_YW_LOG SET [ENDTIME]=GETDATE(),[OPTResult]='REPORTERR'\n\tWHERE LOG_ID =@iden\n\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": {
                            "status": "error",
                            "message": "HTTPConnectionPool(host='10.186.16.135', port=9000): Read timed out. (read timeout=None)",
                            "code": 500
                        }
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": {
                            "status": "error",
                            "message": "HTTPConnectionPool(host='10.186.16.135', port=9000): Read timed out. (read timeout=None)",
                            "code": 500
                        }
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": {
                            "status": "error",
                            "message": "HTTPConnectionPool(host='10.186.16.135', port=9000): Read timed out. (read timeout=None)",
                            "code": 500
                        }
                    }
                ]
            },
            {
                "case_id": "14",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"14\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"SET NOCOUNT ON\", \"DECLARE\", \"NVARCHAR2\", \"INT\", \"BEGIN TRY\", \"GETDATE\", \"NOW\", \"CURRENT_TIMESTAMP\", \"SCOPE_IDENTITY\", \"EXEC\", \"@@ROWCOUNT\", \"WHILE\", \"CAST\", \"TOP\", \"PRINT\", \"RAISERROR\", \"ERROR_MESSAGE\", \"RAISE EXCEPTION\", \"BREAK\", \"COUNT\", \"OUTPUT\", \"MAX\"]}, \"sql\": \"CREATE PROCEDURE SP_DataMigration @SourceTable NVARCHAR(128), @TargetTable NVARCHAR(128), @BatchSize INT = 10000 AS BEGIN SET NOCOUNT ON; DECLARE @SQL NVARCHAR(MAX); DECLARE @SourceCount INT, @TargetCount INT, @BatchCount INT = 0; DECLARE @MigrationID INT; DECLARE @ErrorMessage NVARCHAR(4000); BEGIN TRY INSERT INTO MigrationLog (SourceTable, TargetTable, StartTime, Status) VALUES (@SourceTable, @TargetTable, GETDATE(), 'RUNNING'); SET @MigrationID = SCOPE_IDENTITY(); SET @SQL = 'SELECT @Count = COUNT(*) FROM ' + @SourceTable; EXEC sp_executesql @SQL, N'@Count INT OUTPUT', @Count = @SourceCount OUTPUT; UPDATE MigrationLog SET SourceCount = @SourceCount WHERE MigrationID = @MigrationID; SET @SQL = 'DELETE FROM ' + @TargetTable; EXEC sp_executesql @SQL; WHILE @BatchCount < @SourceCount BEGIN SET @SQL = 'INSERT INTO ' + @TargetTable + ' SELECT TOP ' + CAST(@BatchSize AS NVARCHAR(10)) + ' * FROM ' + @SourceTable + ' WHERE NOT EXISTS (SELECT 1 FROM ' + @TargetTable + ' t WHERE t.ID = ' + @SourceTable + '.ID)'; EXEC sp_executesql @SQL; IF @@ROWCOUNT = 0 BREAK; SET @BatchCount = @BatchCount + @@ROWCOUNT; END; SET @SQL = 'SELECT @Count = COUNT(*) FROM ' + @TargetTable; EXEC sp_executesql @SQL, N'@Count INT OUTPUT', @Count = @TargetCount OUTPUT; UPDATE MigrationLog SET EndTime = GETDATE(), TargetCount = @TargetCount, Status = CASE WHEN @SourceCount = @TargetCount THEN 'SUCCESS' ELSE 'WARNING' END WHERE MigrationID = @MigrationID; PRINT 'Migration completed for ' + @SourceTable + '. Source: ' + CAST(@SourceCount AS NVARCHAR(10)) + ', Target: ' + CAST(@TargetCount AS NVARCHAR(10)); END TRY BEGIN CATCH SET @ErrorMessage = ERROR_MESSAGE(); UPDATE MigrationLog SET EndTime = GETDATE(), Status = 'FAILED', ErrorMessage = @ErrorMessage WHERE MigrationID = @MigrationID; RAISERROR('Data migration failed: %s', 16, 1, @ErrorMessage); END CATCH; END;\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE SP_DataMigration @SourceTable NVARCHAR(128), @TargetTable NVARCHAR(128), @BatchSize INT = 10000 AS BEGIN SET NOCOUNT ON; DECLARE @SQL NVARCHAR(MAX); DECLARE @SourceCount INT, @TargetCount INT, @BatchCount INT = 0; DECLARE @MigrationID INT; DECLARE @ErrorMessage NVARCHAR(4000); BEGIN TRY INSERT INTO MigrationLog (SourceTable, TargetTable, StartTime, Status) VALUES (@SourceTable, @TargetTable, GETDATE(), 'RUNNING'); SET @MigrationID = SCOPE_IDENTITY(); SET @SQL = 'SELECT @Count = COUNT(*) FROM ' + @SourceTable; EXEC sp_executesql @SQL, N'@Count INT OUTPUT', @Count = @SourceCount OUTPUT; UPDATE MigrationLog SET SourceCount = @SourceCount WHERE MigrationID = @MigrationID; SET @SQL = 'DELETE FROM ' + @TargetTable; EXEC sp_executesql @SQL; WHILE @BatchCount < @SourceCount BEGIN SET @SQL = 'INSERT INTO ' + @TargetTable + ' SELECT TOP ' + CAST(@BatchSize AS NVARCHAR(10)) + ' * FROM ' + @SourceTable + ' WHERE NOT EXISTS (SELECT 1 FROM ' + @TargetTable + ' t WHERE t.ID = ' + @SourceTable + '.ID)'; EXEC sp_executesql @SQL; IF @@ROWCOUNT = 0 BREAK; SET @BatchCount = @BatchCount + @@ROWCOUNT; END; SET @SQL = 'SELECT @Count = COUNT(*) FROM ' + @TargetTable; EXEC sp_executesql @SQL, N'@Count INT OUTPUT', @Count = @TargetCount OUTPUT; UPDATE MigrationLog SET EndTime = GETDATE(), TargetCount = @TargetCount, Status = CASE WHEN @SourceCount = @TargetCount THEN 'SUCCESS' ELSE 'WARNING' END WHERE MigrationID = @MigrationID; PRINT 'Migration completed for ' + @SourceTable + '. Source: ' + CAST(@SourceCount AS NVARCHAR(10)) + ', Target: ' + CAST(@TargetCount AS NVARCHAR(10)); END TRY BEGIN CATCH SET @ErrorMessage = ERROR_MESSAGE(); UPDATE MigrationLog SET EndTime = GETDATE(), Status = 'FAILED', ErrorMessage = @ErrorMessage WHERE MigrationID = @MigrationID; RAISERROR('Data migration failed: %s', 16, 1, @ErrorMessage); END CATCH; END;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_DataMigration(\n    p_SourceTable text,\n    p_TargetTable text,\n    p_BatchSize int DEFAULT 10000\n) RETURNS void\nLANGUAGE plpgsql\nAS $$\nDECLARE\n    v_SQL text;\n    v_SourceCount bigint;\n    v_TargetCount bigint;\n    v_BatchCount bigint := 0;\n    v_LastCount integer;\n    v_MigrationID bigint;\n    v_ErrorMessage text;\nBEGIN\n    -- 插入迁移日志并获取MigrationID\n    INSERT INTO MigrationLog(SourceTable, TargetTable, StartTime, Status)\n    VALUES(p_SourceTable, p_TargetTable, now(), 'RUNNING')\n    RETURNING MigrationID INTO v_MigrationID;\n\n    -- 获取源表记录数\n    v_SQL := CONCAT('SELECT COUNT(*) FROM ', p_SourceTable);\n    EXECUTE v_SQL INTO v_SourceCount;\n    UPDATE MigrationLog\n    SET SourceCount = v_SourceCount\n    WHERE MigrationID = v_MigrationID;\n\n    -- 清空目标表\n    v_SQL := CONCAT('DELETE FROM ', p_TargetTable);\n    EXECUTE v_SQL;\n\n    -- 分批插入数据\n    WHILE v_BatchCount < v_SourceCount LOOP\n        v_SQL := CONCAT(\n            'INSERT INTO ', p_TargetTable,\n            ' SELECT * FROM ', p_SourceTable,\n            ' WHERE NOT EXISTS (SELECT 1 FROM ', p_TargetTable, ' t WHERE t.ID = ', p_SourceTable, '.ID)',\n            ' LIMIT ', p_BatchSize\n        );\n        EXECUTE v_SQL;\n        GET DIAGNOSTICS v_LastCount = ROW_COUNT;\n        IF v_LastCount = 0 THEN\n            EXIT;\n        END IF;\n        v_BatchCount := v_BatchCount + v_LastCount;\n    END LOOP;\n\n    -- 获取目标表记录数\n    v_SQL := CONCAT('SELECT COUNT(*) FROM ', p_TargetTable);\n    EXECUTE v_SQL INTO v_TargetCount;\n    UPDATE MigrationLog\n    SET EndTime = now(),\n        TargetCount = v_TargetCount,\n        Status = CASE WHEN v_SourceCount = v_TargetCount THEN 'SUCCESS' ELSE 'WARNING' END\n    WHERE MigrationID = v_MigrationID;\n\n    -- 输出迁移完成信息\n    RAISE NOTICE 'Migration completed for % . Source: %, Target: %', p_SourceTable, v_SourceCount, v_TargetCount;\n\nEXCEPTION\n    WHEN OTHERS THEN\n        v_ErrorMessage := SQLERRM;\n        -- 更新迁移日志为失败并记录错误信息\n        UPDATE MigrationLog\n        SET EndTime = now(),\n            Status = 'FAILED',\n            ErrorMessage = v_ErrorMessage\n        WHERE MigrationID = v_MigrationID;\n        -- 抛出异常\n        RAISE EXCEPTION 'Data migration failed: %', v_ErrorMessage;\nEND;\n$$;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_DataMigration(p_SourceTable varchar(128), p_TargetTable varchar(128), p_BatchSize integer DEFAULT 10000)\nRETURNS void AS $$\nDECLARE\n    v_sql text;\n    v_sourcecount int;\n    v_targetcount int;\n    v_batchcount int := 0;\n    v_migrationid int;\n    v_rowcount int;\n    v_error_message varchar(4000);\nBEGIN\n    INSERT INTO MigrationLog (SourceTable, TargetTable, StartTime, Status)\n    VALUES (p_SourceTable, p_TargetTable, CURRENT_TIMESTAMP, 'RUNNING')\n    RETURNING MigrationID INTO v_migrationid;\n\n    v_sql := 'SELECT count(*) FROM ' || quote_ident(p_SourceTable);\n    EXECUTE v_sql INTO v_sourcecount;\n    UPDATE MigrationLog SET SourceCount = v_sourcecount WHERE MigrationID = v_migrationid;\n\n    v_sql := 'DELETE FROM ' || quote_ident(p_TargetTable);\n    EXECUTE v_sql;\n\n    WHILE v_batchcount < v_sourcecount LOOP\n        v_sql := 'INSERT INTO ' || quote_ident(p_TargetTable)\n                 || ' SELECT * FROM ' || quote_ident(p_SourceTable)\n                 || ' AS s WHERE NOT EXISTS (SELECT 1 FROM ' || quote_ident(p_TargetTable)\n                 || ' AS t WHERE t.ID = s.ID) LIMIT ' || p_BatchSize;\n        EXECUTE v_sql;\n        GET DIAGNOSTICS v_rowcount = ROW_COUNT;\n        IF v_rowcount = 0 THEN\n            EXIT;\n        END IF;\n        v_batchcount := v_batchcount + v_rowcount;\n    END LOOP;\n\n    v_sql := 'SELECT count(*) FROM ' || quote_ident(p_TargetTable);\n    EXECUTE v_sql INTO v_targetcount;\n    UPDATE MigrationLog\n    SET EndTime = CURRENT_TIMESTAMP,\n        TargetCount = v_targetcount,\n        Status = CASE WHEN v_sourcecount = v_targetcount THEN 'SUCCESS' ELSE 'WARNING' END\n    WHERE MigrationID = v_migrationid;\n\n    RAISE NOTICE 'Migration completed for %. Source: %, Target: %', p_SourceTable, v_sourcecount, v_targetcount;\n\nEXCEPTION WHEN OTHERS THEN\n    v_error_message := SQLERRM;\n    UPDATE MigrationLog\n    SET EndTime = CURRENT_TIMESTAMP,\n        Status = 'FAILED',\n        ErrorMessage = v_error_message\n    WHERE MigrationID = v_migrationid;\n    RAISE EXCEPTION 'Data migration failed: %', v_error_message;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_DataMigration(p_SourceTable text, p_TargetTable text, p_BatchSize int DEFAULT 10000)\nRETURNS void AS $$\nDECLARE\n    dynamic_sql text;\n    migration_id int;\n    source_count int;\n    target_count int;\n    batch_count int := 0;\n    row_count int;\nBEGIN\n    INSERT INTO MigrationLog (SourceTable, TargetTable, StartTime, Status)\n    VALUES (p_SourceTable, p_TargetTable, now(), 'RUNNING')\n    RETURNING MigrationID INTO migration_id;\n\n    dynamic_sql := CONCAT('SELECT COUNT(*) FROM ', p_SourceTable);\n    EXECUTE dynamic_sql INTO source_count;\n    UPDATE MigrationLog SET SourceCount = source_count WHERE MigrationID = migration_id;\n\n    dynamic_sql := CONCAT('DELETE FROM ', p_TargetTable);\n    EXECUTE dynamic_sql;\n\n    WHILE batch_count < source_count LOOP\n        dynamic_sql := CONCAT(\n            'INSERT INTO ', p_TargetTable,\n            ' SELECT * FROM ', p_SourceTable,\n            ' WHERE NOT EXISTS (SELECT 1 FROM ', p_TargetTable,\n            ' t WHERE t.ID = ', p_SourceTable, '.ID) LIMIT ', p_BatchSize\n        );\n        EXECUTE dynamic_sql;\n        GET DIAGNOSTICS row_count = ROW_COUNT;\n        IF row_count = 0 THEN\n            EXIT;\n        END IF;\n        batch_count := batch_count + row_count;\n    END LOOP;\n\n    dynamic_sql := CONCAT('SELECT COUNT(*) FROM ', p_TargetTable);\n    EXECUTE dynamic_sql INTO target_count;\n    UPDATE MigrationLog\n    SET EndTime = now(),\n        TargetCount = target_count,\n        Status = CASE WHEN source_count = target_count THEN 'SUCCESS' ELSE 'WARNING' END\n    WHERE MigrationID = migration_id;\n\n    RAISE NOTICE 'Migration completed for %. Source: %, Target: %', p_SourceTable, source_count, target_count;\n\nEXCEPTION WHEN OTHERS THEN\n    UPDATE MigrationLog\n    SET EndTime = now(),\n        Status = 'FAILED',\n        ErrorMessage = SQLERRM\n    WHERE MigrationID = migration_id;\n    RAISE EXCEPTION 'Data migration failed: %', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "15",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"15\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"SET NOCOUNT ON\", \"GETDATE\", \"NOW\", \"CURRENT_TIMESTAMP\", \"DECLARE\", \"NVARCHAR2\", \"CURSOR\", \"BEGIN TRY\", \"RAISERROR\", \"COUNT\", \"CAST\", \"OPEN\", \"FETCH NEXT\", \"@@FETCH_STATUS\", \"WHILE\", \"current_user\", \"session_user\", \"RAISERROR\", \"ERROR_MESSAGE\", \"RAISE EXCEPTION\", \"CLOSE\", \"DEALLOCATE\", \"PRINT\", \"INT\"]}, \"sql\": \"CREATE PROCEDURE SP_UpdateProductCategories @OldCategoryID INT, @NewCategoryID INT, @EffectiveDate DATETIME = NULL AS BEGIN SET NOCOUNT ON; IF @EffectiveDate IS NULL SET @EffectiveDate = GETDATE(); DECLARE @ProductCount INT, @UpdatedCount INT = 0; DECLARE @ProductID INT, @ProductName NVARCHAR(100); DECLARE product_cursor CURSOR FOR SELECT ProductID, ProductName FROM Products WHERE CategoryID = @OldCategoryID AND Status = 'ACTIVE'; BEGIN TRY IF @OldCategoryID = @NewCategoryID RAISERROR('Old and new category IDs cannot be the same', 16, 1); SELECT @ProductCount = COUNT(*) FROM Products WHERE CategoryID = @OldCategoryID AND Status = 'ACTIVE'; IF @ProductCount = 0 BEGIN PRINT 'No active products found in category ' + CAST(@OldCategoryID AS NVARCHAR(10)); RETURN; END; OPEN product_cursor; FETCH NEXT FROM product_cursor INTO @ProductID, @ProductName; WHILE @@FETCH_STATUS = 0 BEGIN BEGIN TRY INSERT INTO ProductCategoryHistory (ProductID, OldCategoryID, NewCategoryID, ChangeDate, ChangedBy) VALUES (@ProductID, @OldCategoryID, @NewCategoryID, @EffectiveDate, SUSER_SNAME()); UPDATE Products SET CategoryID = @NewCategoryID, LastModifiedDate = @EffectiveDate, LastModifiedBy = SUSER_SNAME() WHERE ProductID = @ProductID; SET @UpdatedCount = @UpdatedCount + 1; END TRY BEGIN CATCH INSERT INTO CategoryUpdateErrors (ProductID, ErrorMessage, ErrorDate) VALUES (@ProductID, ERROR_MESSAGE(), GETDATE()); END CATCH; FETCH NEXT FROM product_cursor INTO @ProductID, @ProductName; END; CLOSE product_cursor; DEALLOCATE product_cursor; UPDATE ProductCategories SET LastUpdateDate = @EffectiveDate WHERE CategoryID IN (@OldCategoryID, @NewCategoryID); PRINT 'Category update completed. ' + CAST(@UpdatedCount AS NVARCHAR(10)) + ' products updated out of ' + CAST(@ProductCount AS NVARCHAR(10)) + ' total.'; END TRY BEGIN CATCH IF CURSOR_STATUS('global', 'product_cursor') >= 0 BEGIN CLOSE product_cursor; DEALLOCATE product_cursor; END; RAISERROR('Category update failed: %s', 16, 1, ERROR_MESSAGE()); END CATCH; END;\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE SP_UpdateProductCategories @OldCategoryID INT, @NewCategoryID INT, @EffectiveDate DATETIME = NULL AS BEGIN SET NOCOUNT ON; IF @EffectiveDate IS NULL SET @EffectiveDate = GETDATE(); DECLARE @ProductCount INT, @UpdatedCount INT = 0; DECLARE @ProductID INT, @ProductName NVARCHAR(100); DECLARE product_cursor CURSOR FOR SELECT ProductID, ProductName FROM Products WHERE CategoryID = @OldCategoryID AND Status = 'ACTIVE'; BEGIN TRY IF @OldCategoryID = @NewCategoryID RAISERROR('Old and new category IDs cannot be the same', 16, 1); SELECT @ProductCount = COUNT(*) FROM Products WHERE CategoryID = @OldCategoryID AND Status = 'ACTIVE'; IF @ProductCount = 0 BEGIN PRINT 'No active products found in category ' + CAST(@OldCategoryID AS NVARCHAR(10)); RETURN; END; OPEN product_cursor; FETCH NEXT FROM product_cursor INTO @ProductID, @ProductName; WHILE @@FETCH_STATUS = 0 BEGIN BEGIN TRY INSERT INTO ProductCategoryHistory (ProductID, OldCategoryID, NewCategoryID, ChangeDate, ChangedBy) VALUES (@ProductID, @OldCategoryID, @NewCategoryID, @EffectiveDate, SUSER_SNAME()); UPDATE Products SET CategoryID = @NewCategoryID, LastModifiedDate = @EffectiveDate, LastModifiedBy = SUSER_SNAME() WHERE ProductID = @ProductID; SET @UpdatedCount = @UpdatedCount + 1; END TRY BEGIN CATCH INSERT INTO CategoryUpdateErrors (ProductID, ErrorMessage, ErrorDate) VALUES (@ProductID, ERROR_MESSAGE(), GETDATE()); END CATCH; FETCH NEXT FROM product_cursor INTO @ProductID, @ProductName; END; CLOSE product_cursor; DEALLOCATE product_cursor; UPDATE ProductCategories SET LastUpdateDate = @EffectiveDate WHERE CategoryID IN (@OldCategoryID, @NewCategoryID); PRINT 'Category update completed. ' + CAST(@UpdatedCount AS NVARCHAR(10)) + ' products updated out of ' + CAST(@ProductCount AS NVARCHAR(10)) + ' total.'; END TRY BEGIN CATCH IF CURSOR_STATUS('global', 'product_cursor') >= 0 BEGIN CLOSE product_cursor; DEALLOCATE product_cursor; END; RAISERROR('Category update failed: %s', 16, 1, ERROR_MESSAGE()); END CATCH; END;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_UpdateProductCategories(p_oldcategoryid INT, p_newcategoryid INT, p_effectivedate timestamp DEFAULT NULL)\nRETURNS void AS $$\nDECLARE\n    productcount INT;\n    updatedcount INT := 0;\n    rec RECORD;\nBEGIN\n    IF p_effectivedate IS NULL THEN\n        p_effectivedate := current_timestamp;\n    END IF;\n    IF p_oldcategoryid = p_newcategoryid THEN\n        RAISE EXCEPTION 'Old and new category IDs cannot be the same';\n    END IF;\n    SELECT COUNT(*) INTO productcount FROM Products WHERE CategoryID = p_oldcategoryid AND Status = 'ACTIVE';\n    IF productcount = 0 THEN\n        RAISE NOTICE 'No active products found in category %', p_oldcategoryid;\n        RETURN;\n    END IF;\n    FOR rec IN SELECT ProductID, ProductName FROM Products WHERE CategoryID = p_oldcategoryid AND Status = 'ACTIVE'\n    LOOP\n        BEGIN\n            INSERT INTO ProductCategoryHistory (ProductID, OldCategoryID, NewCategoryID, ChangeDate, ChangedBy)\n            VALUES (rec.ProductID, p_oldcategoryid, p_newcategoryid, p_effectivedate, current_user);\n            UPDATE Products\n            SET CategoryID = p_newcategoryid,\n                LastModifiedDate = p_effectivedate,\n                LastModifiedBy = current_user\n            WHERE ProductID = rec.ProductID;\n            updatedcount := updatedcount + 1;\n        EXCEPTION WHEN OTHERS THEN\n            INSERT INTO CategoryUpdateErrors (ProductID, ErrorMessage, ErrorDate)\n            VALUES (rec.ProductID, SQLERRM, current_timestamp);\n        END;\n    END LOOP;\n    UPDATE ProductCategories\n    SET LastUpdateDate = p_effectivedate\n    WHERE CategoryID IN (p_oldcategoryid, p_newcategoryid);\n    RAISE NOTICE 'Category update completed. % products updated out of % total.', updatedcount, productcount;\n    RETURN;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_UpdateProductCategories(\n    p_oldcategoryid INT,\n    p_newcategoryid INT,\n    p_effectivedate TIMESTAMP DEFAULT NULL\n) RETURNS void\nLANGUAGE plpgsql\nAS $$\nDECLARE\n    v_productcount BIGINT;\n    v_updatedcount BIGINT := 0;\n    rec RECORD;\nBEGIN\n    IF p_effectivedate IS NULL THEN\n        p_effectivedate := now();\n    END IF;\n    IF p_oldcategoryid = p_newcategoryid THEN\n        RAISE EXCEPTION 'Old and new category IDs cannot be the same';\n    END IF;\n    SELECT COUNT(*) INTO v_productcount\n      FROM Products\n     WHERE CategoryID = p_oldcategoryid\n       AND Status = 'ACTIVE';\n    IF v_productcount = 0 THEN\n        RAISE NOTICE 'No active products found in category %', p_oldcategoryid;\n        RETURN;\n    END IF;\n    FOR rec IN\n        SELECT ProductID, ProductName\n          FROM Products\n         WHERE CategoryID = p_oldcategoryid\n           AND Status = 'ACTIVE'\n    LOOP\n        BEGIN\n            INSERT INTO ProductCategoryHistory(\n                ProductID, OldCategoryID, NewCategoryID, ChangeDate, ChangedBy\n            ) VALUES(\n                rec.ProductID, p_oldcategoryid, p_newcategoryid, p_effectivedate, current_user\n            );\n            UPDATE Products\n               SET CategoryID = p_newcategoryid,\n                   LastModifiedDate = p_effectivedate,\n                   LastModifiedBy = current_user\n             WHERE ProductID = rec.ProductID;\n            v_updatedcount := v_updatedcount + 1;\n        EXCEPTION WHEN OTHERS THEN\n            INSERT INTO CategoryUpdateErrors(ProductID, ErrorMessage, ErrorDate)\n            VALUES(rec.ProductID, SQLERRM, now());\n        END;\n    END LOOP;\n    UPDATE ProductCategories\n       SET LastUpdateDate = p_effectivedate\n     WHERE CategoryID IN (p_oldcategoryid, p_newcategoryid);\n    RAISE NOTICE 'Category update completed. % products updated out of % total.', v_updatedcount, v_productcount;\nEND;\n$$;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_UpdateProductCategories(\n    p_OldCategoryID INT,\n    p_NewCategoryID INT,\n    p_EffectiveDate TIMESTAMP DEFAULT NULL\n)\nRETURNS void AS $$\nDECLARE\n    v_EffectiveDate TIMESTAMP := p_EffectiveDate;\n    v_ProductCount BIGINT;\n    v_UpdatedCount INT := 0;\n    v_ProductID INT;\n    v_ProductName VARCHAR(100);\nBEGIN\n    IF v_EffectiveDate IS NULL THEN\n        v_EffectiveDate := CURRENT_TIMESTAMP;\n    END IF;\n\n    IF p_OldCategoryID = p_NewCategoryID THEN\n        RAISE EXCEPTION 'Old and new category IDs cannot be the same';\n    END IF;\n\n    SELECT COUNT(*) INTO v_ProductCount\n    FROM Products\n    WHERE CategoryID = p_OldCategoryID\n      AND Status = 'ACTIVE';\n\n    IF v_ProductCount = 0 THEN\n        RAISE NOTICE '%', CONCAT('No active products found in category ', CAST(p_OldCategoryID AS VARCHAR(10)));\n        RETURN;\n    END IF;\n\n    FOR rec IN\n        SELECT ProductID, ProductName\n        FROM Products\n        WHERE CategoryID = p_OldCategoryID\n          AND Status = 'ACTIVE'\n    LOOP\n        BEGIN\n            INSERT INTO ProductCategoryHistory (ProductID, OldCategoryID, NewCategoryID, ChangeDate, ChangedBy)\n            VALUES (rec.ProductID, p_OldCategoryID, p_NewCategoryID, v_EffectiveDate, SESSION_USER);\n\n            UPDATE Products\n            SET CategoryID = p_NewCategoryID,\n                LastModifiedDate = v_EffectiveDate,\n                LastModifiedBy = SESSION_USER\n            WHERE ProductID = rec.ProductID;\n\n            v_UpdatedCount := v_UpdatedCount + 1;\n        EXCEPTION WHEN OTHERS THEN\n            INSERT INTO CategoryUpdateErrors (ProductID, ErrorMessage, ErrorDate)\n            VALUES (rec.ProductID, SQLERRM, CURRENT_TIMESTAMP);\n        END;\n    END LOOP;\n\n    UPDATE ProductCategories\n    SET LastUpdateDate = v_EffectiveDate\n    WHERE CategoryID IN (p_OldCategoryID, p_NewCategoryID);\n\n    RAISE NOTICE '%', CONCAT(\n        'Category update completed. ',\n        CAST(v_UpdatedCount AS VARCHAR(10)),\n        ' products updated out of ',\n        CAST(v_ProductCount AS VARCHAR(10)),\n        ' total.'\n    );\n\nEXCEPTION WHEN OTHERS THEN\n    RAISE EXCEPTION 'Category update failed: %', SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            }
        ]
    },
    {
        "indicator_name": "China-made_database.jsonl",
        "indicator_weight": 3,
        "evaluation_type": "hybrid",
        "case_pass_count": 19,
        "case_wrong_count": 0,
        "correct_rate": 1.0,
        "case_datas": [
            {
                "case_id": "1",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"1\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"COUNT\", \"AVG\", \"MAX\", \"LOOP\", \"%NOTFOUND\", \"RTRIM\", \"EXCEPTION\", \"SQLERRM\", \"NUMBER\", \"CLOB\", \"SYS_REFCURSOR\", \"ROWNUM\", \"OUT\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE GETEMPLOYEESTATS(p_dept_id IN NUMBER, p_result OUT CLOB) IS TYPE stats_rec IS RECORD (total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER, active_projects NUMBER); TYPE p_result_rec IS RECORD (employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2)); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); BEGIN SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; SELECT COUNT(*) INTO v_stats.active_projects FROM PROJECTS WHERE department_id = p_dept_id AND status = 'ACTIVE'; v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; p_result := '{  \\\"department\\\": \\\"' || v_dept_name || '\\\",  \\\"total_employees\\\": ' || v_stats.total_emp || ',  \\\"salary_stats\\\": {    \\\"average\\\": ' || v_stats.avg_salary || ',    \\\"max\\\": ' || v_stats.max_salary || '  },  \\\"active_projects\\\": ' || v_stats.active_projects || ',  \\\"top_earners\\\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || '    {\\\"id\\\": ' || v_result.employee_id || ', \\\"name\\\": \\\"' || v_result.last_name || '\\\", \\\"salary\\\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || '  ]}'; CLOSE v_cursor; EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\\\"error\\\": \\\"Department not found\\\"}'; WHEN OTHERS THEN p_result := '{\\\"error\\\": \\\"' || SQLERRM || '\\\"}'; END;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE GETEMPLOYEESTATS(p_dept_id IN NUMBER, p_result OUT CLOB) IS TYPE stats_rec IS RECORD (total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER, active_projects NUMBER); TYPE p_result_rec IS RECORD (employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2)); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); BEGIN SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; SELECT COUNT(*) INTO v_stats.active_projects FROM PROJECTS WHERE department_id = p_dept_id AND status = 'ACTIVE'; v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; p_result := '{  \"department\": \"' || v_dept_name || '\",  \"total_employees\": ' || v_stats.total_emp || ',  \"salary_stats\": {    \"average\": ' || v_stats.avg_salary || ',    \"max\": ' || v_stats.max_salary || '  },  \"active_projects\": ' || v_stats.active_projects || ',  \"top_earners\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || '    {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || '  ]}'; CLOSE v_cursor; EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\"error\": \"Department not found\"}'; WHEN OTHERS THEN p_result := '{\"error\": \"' || SQLERRM || '\"}'; END;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE GETEMPLOYEESTATS(p_dept_id IN NUMBER, p_result OUT CLOB) IS TYPE stats_rec IS RECORD (total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER, active_projects NUMBER); TYPE p_result_rec IS RECORD (employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2)); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); BEGIN SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; SELECT COUNT(*) INTO v_stats.active_projects FROM PROJECTS WHERE department_id = p_dept_id AND status = 'ACTIVE'; v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; p_result := '{  \"department\": \"' || v_dept_name || '\",  \"total_employees\": ' || v_stats.total_emp || ',  \"salary_stats\": {    \"average\": ' || v_stats.avg_salary || ',    \"max\": ' || v_stats.max_salary || '  },  \"active_projects\": ' || v_stats.active_projects || ',  \"top_earners\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || '    {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || '  ]}'; CLOSE v_cursor; EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\"error\": \"Department not found\"}'; WHEN OTHERS THEN p_result := '{\"error\": \"' || SQLERRM || '\"}'; END;"
                    }
                ]
            },
            {
                "case_id": "2",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"2\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": []}, \"sql\": \"CREATE TABLE t1 (c1 NUMBER, c2 VARCHAR2(100), c3 DATE);\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nCREATE TABLE t1 (c1 NUMBER, c2 VARCHAR2(100), c3 DATE);\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_2 AS\nBEGIN\n    EXECUTE IMMEDIATE 'CREATE TABLE t1 (c1 NUMBER, c2 VARCHAR2(100), c3 DATE)';\nEND p_universal_case_2;"
                    }
                ]
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"TO_DATE\"]}, \"sql\": \"INSERT INTO t1 VALUES (1, 'Hello OceanBase', TO_DATE('2025-01-01', 'yyyy-mm-dd'));\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nINSERT INTO t1 VALUES (1, 'Hello OceanBase', TO_DATE('2025-01-01', 'yyyy-mm-dd'));\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_3 AS\nBEGIN\n    EXECUTE IMMEDIATE 'INSERT INTO t1 VALUES (1, ''Hello OceanBase'', TO_DATE(''2025-01-01'', ''yyyy-mm-dd''))';\nEND p_universal_case_3;"
                    }
                ]
            },
            {
                "case_id": "4",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"4\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"NVL\"]}, \"sql\": \"SELECT c1, NVL(c2, 'is null') FROM t1;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT c1, NVL(c2, 'is null') FROM t1;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_4 AS\nBEGIN\n    EXECUTE IMMEDIATE 'SELECT c1, NVL(c2, ''is null'') FROM t1';\nEND p_universal_case_4;"
                    }
                ]
            },
            {
                "case_id": "5",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"5\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CREATE USER\"]}, \"sql\": \"CREATE USER ob_user IDENTIFIED BY \\\"Password123\\\";\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nCREATE USER ob_user IDENTIFIED BY \"Password123\";\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_5 AS\nBEGIN\n    EXECUTE IMMEDIATE 'CREATE USER ob_user IDENTIFIED BY \"Password123\"';\nEND p_universal_case_5;"
                    }
                ]
            },
            {
                "case_id": "6",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"6\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"RANK\"]}, \"sql\": \"SELECT ename, sal, RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) FROM emp;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT ename, sal, RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) FROM emp;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_6 AS\nBEGIN\n    EXECUTE IMMEDIATE 'SELECT ename, sal, RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) FROM emp';\nEND p_universal_case_6;"
                    }
                ]
            },
            {
                "case_id": "7",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"7\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": []}, \"sql\": \"CREATE OR REPLACE PROCEDURE p_test (p_id IN NUMBER, p_name OUT VARCHAR2) AS BEGIN SELECT ename INTO p_name FROM emp WHERE empno = p_id; END;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE p_test (p_id IN NUMBER, p_name OUT VARCHAR2) AS BEGIN SELECT ename INTO p_name FROM emp WHERE empno = p_id; END;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_test (p_id IN NUMBER, p_name OUT VARCHAR2) AS BEGIN SELECT ename INTO p_name FROM emp WHERE empno = p_id; END;"
                    }
                ]
            },
            {
                "case_id": "8",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"8\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"MINUS\"]}, \"sql\": \"SELECT employee_id, start_date, end_date, job_id FROM job_history MINUS SELECT employee_id, hire_date, NULL, job_id FROM employees;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT employee_id, start_date, end_date, job_id FROM job_history MINUS SELECT employee_id, hire_date, NULL, job_id FROM employees;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_8 AS\nBEGIN\n    EXECUTE IMMEDIATE 'SELECT employee_id, start_date, end_date, job_id FROM job_history MINUS SELECT employee_id, hire_date, NULL, job_id FROM employees';\nEND p_universal_case_8;"
                    }
                ]
            },
            {
                "case_id": "9",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"9\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": []}, \"sql\": \"CREATE PUBLIC SYNONYM emp_synonym FOR scott.emp;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nCREATE PUBLIC SYNONYM emp_synonym FOR scott.emp;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_9 AS\nBEGIN\n    EXECUTE IMMEDIATE 'CREATE PUBLIC SYNONYM emp_synonym FOR scott.emp';\nEND p_universal_case_9;"
                    }
                ]
            },
            {
                "case_id": "10",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"10\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"INDEX\"]}, \"sql\": \"SELECT /*+ INDEX(employees emp_department_ix) */ * FROM employees WHERE department_id = 10;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT /*+ INDEX(employees emp_department_ix) */ * FROM employees WHERE department_id = 10;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_10 AS\nBEGIN\n    EXECUTE IMMEDIATE 'SELECT /*+ INDEX(employees emp_department_ix) */ * FROM employees WHERE department_id = 10';\nEND p_universal_case_10;"
                    }
                ]
            },
            {
                "case_id": "11",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"11\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"DBMS_OUTPUT.PUT_LINE\"]}, \"sql\": \"DECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM user_tables WHERE table_name = 'EMP'; DBMS_OUTPUT.PUT_LINE('Count is: ' || v_count); END;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nDECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM user_tables WHERE table_name = 'EMP'; DBMS_OUTPUT.PUT_LINE('Count is: ' || v_count); END;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_11 AS\nBEGIN\n    EXECUTE IMMEDIATE 'DECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM user_tables WHERE table_name = ''EMP''; DBMS_OUTPUT.PUT_LINE(''Count is: '' || v_count); END';\nEND p_universal_case_11;"
                    }
                ]
            },
            {
                "case_id": "12",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"12\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"LISTAGG\"]}, \"sql\": \"SELECT listagg(ename, ';') WITHIN GROUP (ORDER BY hiredate) FROM emp WHERE deptno = 30;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT listagg(ename, ';') WITHIN GROUP (ORDER BY hiredate) FROM emp WHERE deptno = 30;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_12 AS\nBEGIN\n    EXECUTE IMMEDIATE 'SELECT listagg(ename, '';'') WITHIN GROUP (ORDER BY hiredate) FROM emp WHERE deptno = 30';\nEND p_universal_case_12;"
                    }
                ]
            },
            {
                "case_id": "13",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"13\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"LPAD\"]}, \"sql\": \"SELECT LPAD(' ', 2 * (LEVEL - 1)) || ename FROM emp START WITH mgr IS NULL CONNECT BY PRIOR empno = mgr;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT LPAD(' ', 2 * (LEVEL - 1)) || ename FROM emp START WITH mgr IS NULL CONNECT BY PRIOR empno = mgr;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_13 AS\nBEGIN\n    EXECUTE IMMEDIATE 'SELECT LPAD('' '', 2 * (LEVEL - 1)) || ename FROM emp START WITH mgr IS NULL CONNECT BY PRIOR empno = mgr';\nEND p_universal_case_13;"
                    }
                ]
            },
            {
                "case_id": "14",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"14\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"AUTONOMOUS_TRANSACTION\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE autonomous_proc IS PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO audit_log (log_msg) VALUES ('An autonomous action occurred'); COMMIT; END;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE autonomous_proc IS PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO audit_log (log_msg) VALUES ('An autonomous action occurred'); COMMIT; END;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE autonomous_proc IS PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO audit_log (log_msg) VALUES ('An autonomous action occurred'); COMMIT; END;"
                    }
                ]
            },
            {
                "case_id": "15",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"15\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CREATE PARTITION TABLE\", \"TO_DATE\"]}, \"sql\": \"CREATE TABLE range_partitioned_sales (sale_id NUMBER, sale_date DATE) PARTITION BY RANGE (sale_date) (PARTITION p1 VALUES LESS THAN (TO_DATE('2024-01-01','YYYY-MM-DD')), PARTITION p2 VALUES LESS THAN (MAXVALUE));\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nCREATE TABLE range_partitioned_sales (sale_id NUMBER, sale_date DATE) PARTITION BY RANGE (sale_date) (PARTITION p1 VALUES LESS THAN (TO_DATE('2024-01-01','YYYY-MM-DD')), PARTITION p2 VALUES LESS THAN (MAXVALUE));\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_15 AS\nBEGIN\n    EXECUTE IMMEDIATE 'CREATE TABLE range_partitioned_sales (sale_id NUMBER, sale_date DATE) PARTITION BY RANGE (sale_date) (PARTITION p1 VALUES LESS THAN (TO_DATE(''2024-01-01'',''YYYY-MM-DD'')), PARTITION p2 VALUES LESS THAN (MAXVALUE))';\nEND p_universal_case_15;"
                    }
                ]
            },
            {
                "case_id": "16",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"16\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CREATE PACKAGE\"]}, \"sql\": \"CREATE OR REPLACE PACKAGE BODY emp_mgmt AS PROCEDURE hire(p_name VARCHAR2) IS BEGIN INSERT INTO emp(ename) VALUES(p_name); END; FUNCTION get_count RETURN NUMBER IS v_cnt NUMBER; BEGIN SELECT COUNT(*) INTO v_cnt FROM emp; RETURN v_cnt; END; END emp_mgmt;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PACKAGE BODY emp_mgmt AS PROCEDURE hire(p_name VARCHAR2) IS BEGIN INSERT INTO emp(ename) VALUES(p_name); END; FUNCTION get_count RETURN NUMBER IS v_cnt NUMBER; BEGIN SELECT COUNT(*) INTO v_cnt FROM emp; RETURN v_cnt; END; END emp_mgmt;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_16 AS\nBEGIN\n    EXECUTE IMMEDIATE 'CREATE OR REPLACE PACKAGE BODY emp_mgmt AS PROCEDURE hire(p_name VARCHAR2) IS BEGIN INSERT INTO emp(ename) VALUES(p_name); END; FUNCTION get_count RETURN NUMBER IS v_cnt NUMBER; BEGIN SELECT COUNT(*) INTO v_cnt FROM emp; RETURN v_cnt; END; END emp_mgmt';\nEND p_universal_case_16;"
                    }
                ]
            },
            {
                "case_id": "17",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"17\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": []}, \"sql\": \"CREATE MATERIALIZED VIEW mv_emp_summary BUILD IMMEDIATE REFRESH COMPLETE ON DEMAND AS SELECT deptno, COUNT(*) as emp_count FROM emp GROUP BY deptno;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nCREATE MATERIALIZED VIEW mv_emp_summary BUILD IMMEDIATE REFRESH COMPLETE ON DEMAND AS SELECT deptno, COUNT(*) as emp_count FROM emp GROUP BY deptno;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_17 AS\nBEGIN\n    EXECUTE IMMEDIATE 'CREATE MATERIALIZED VIEW mv_emp_summary BUILD IMMEDIATE REFRESH COMPLETE ON DEMAND AS SELECT deptno, COUNT(*) as emp_count FROM emp GROUP BY deptno';\nEND p_universal_case_17;"
                    }
                ]
            },
            {
                "case_id": "18",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"18\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CAST\"]}, \"sql\": \"SELECT CAST(MULTISET(SELECT ename FROM emp WHERE deptno = d.deptno) AS SYS.ODCIVARCHAR2LIST) as employees FROM dept d;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT CAST(MULTISET(SELECT ename FROM emp WHERE deptno = d.deptno) AS SYS.ODCIVARCHAR2LIST) as employees FROM dept d;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_18 AS\nBEGIN\n    EXECUTE IMMEDIATE 'SELECT CAST(MULTISET(SELECT ename FROM emp WHERE deptno = d.deptno) AS SYS.ODCIVARCHAR2LIST) as employees FROM dept d';\nEND p_universal_case_18;"
                    }
                ]
            },
            {
                "case_id": "19",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"19\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"LOCK TABLE\"]}, \"sql\": \"LOCK TABLE emp IN EXCLUSIVE MODE NOWAIT;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nLOCK TABLE emp IN EXCLUSIVE MODE NOWAIT;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_19 AS\nBEGIN\n    EXECUTE IMMEDIATE 'LOCK TABLE emp IN EXCLUSIVE MODE NOWAIT';\nEND p_universal_case_19;"
                    }
                ]
            }
        ]
    },
    {
        "indicator_name": "logical_equivalence.jsonl",
        "indicator_weight": 4,
        "evaluation_type": "hybrid",
        "case_pass_count": 14,
        "case_wrong_count": 4,
        "correct_rate": 0.78,
        "case_datas": [
            {
                "case_id": "1",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"1\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"\"]}, \"sql\": \"SELECT e.ename, d.dname, e.sal FROM emp e, dept d WHERE e.deptno = d.deptno(+) AND e.sal > 2000;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT e.ename, d.dname, e.sal FROM emp e, dept d WHERE e.deptno = d.deptno(+) AND e.sal > 2000;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT e.ename, d.dname, e.sal FROM emp e LEFT JOIN dept d ON e.deptno = d.deptno WHERE e.sal > 2000"
                    }
                ]
            },
            {
                "case_id": "2",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"2\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"BEGIN\", \"TRUNCATE TABLE\", \"WITH(NOLOCK)\", \"coalesce\", \"CURSOR\", \"syscolumns\", \"DECLARE @variable\", \"REPLACE\", \"CONCAT\", \"EXEC\"]}, \"sql\": \"CREATE proc [dbo].[p_job_create_bond_info_all] as begin truncate table tmp_bond_info_all_20010; insert into tmp_bond_info_all_20010(f_val,def_id,id) select field_value,FIELD_DEFINITION_ID,t2.ID from T_OBJECT_FIELD_DATA t1 with(nolock),T_PJ_Bond_Info t2 with(nolock) where t1.OBJECT_NO = 20010 and t1.FIELD_VALUE is not null and t1.parent_id=t2.APPLY_ID ; truncate table tmp_bond_info_all_20020; insert into tmp_bond_info_all_20020(f_val,def_id,id) select field_value,FIELD_DEFINITION_ID,t2.id as bondId from T_OBJECT_FIELD_DATA t1 with(nolock),T_PJ_Bond_Info t2 with(nolock) where t1.OBJECT_NO = 20020 and t1.FIELD_VALUE is not null and t1.PARENT_ID=t2.TEMP_BONDID; truncate table t_pj_bond_info_all; insert into t_pj_bond_info_all(id,temp_bondid,apply_id) select t1.ID,t1.TEMP_BONDID,t1.APPLY_ID from T_PJ_Bond_Info t1 with(nolock) where 1=1; declare c_names cursor for select name from syscolumns where id=object_id('t_pj_bond_info_all') and name like 'def%'; declare @colname varchar(100),@sql varchar(2000) open c_names while 1=1 begin fetch next from c_names into @colname if @@FETCH_STATUS<>0 break; select @sql = 'update a set a.'+@colname+'=b.f_val from t_pj_bond_info_all a,tmp_bond_info_all_20020 b where a.id=b.id and b.def_id=' + replace(@colname,'def_',''); exec( @sql ); select @sql = 'update a set a.'+@colname+'=b.f_val from t_pj_bond_info_all a,tmp_bond_info_all_20010 b where a.id=b.id and a.'+@colname+' is null and b.def_id=' + replace(@colname,'def_',''); exec( @sql ); end close c_names deallocate c_names end\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nCREATE proc [dbo].[p_job_create_bond_info_all] as begin truncate table tmp_bond_info_all_20010; insert into tmp_bond_info_all_20010(f_val,def_id,id) select field_value,FIELD_DEFINITION_ID,t2.ID from T_OBJECT_FIELD_DATA t1 with(nolock),T_PJ_Bond_Info t2 with(nolock) where t1.OBJECT_NO = 20010 and t1.FIELD_VALUE is not null and t1.parent_id=t2.APPLY_ID ; truncate table tmp_bond_info_all_20020; insert into tmp_bond_info_all_20020(f_val,def_id,id) select field_value,FIELD_DEFINITION_ID,t2.id as bondId from T_OBJECT_FIELD_DATA t1 with(nolock),T_PJ_Bond_Info t2 with(nolock) where t1.OBJECT_NO = 20020 and t1.FIELD_VALUE is not null and t1.PARENT_ID=t2.TEMP_BONDID; truncate table t_pj_bond_info_all; insert into t_pj_bond_info_all(id,temp_bondid,apply_id) select t1.ID,t1.TEMP_BONDID,t1.APPLY_ID from T_PJ_Bond_Info t1 with(nolock) where 1=1; declare c_names cursor for select name from syscolumns where id=object_id('t_pj_bond_info_all') and name like 'def%'; declare @colname varchar(100),@sql varchar(2000) open c_names while 1=1 begin fetch next from c_names into @colname if @@FETCH_STATUS<>0 break; select @sql = 'update a set a.'+@colname+'=b.f_val from t_pj_bond_info_all a,tmp_bond_info_all_20020 b where a.id=b.id and b.def_id=' + replace(@colname,'def_',''); exec( @sql ); select @sql = 'update a set a.'+@colname+'=b.f_val from t_pj_bond_info_all a,tmp_bond_info_all_20010 b where a.id=b.id and a.'+@colname+' is null and b.def_id=' + replace(@colname,'def_',''); exec( @sql ); end close c_names deallocate c_names end\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION p_job_create_bond_info_all() RETURNS void AS $$\nDECLARE\n    col_rec record;\nBEGIN\n    TRUNCATE TABLE tmp_bond_info_all_20010;\n    INSERT INTO tmp_bond_info_all_20010(f_val,def_id,id)\n    SELECT field_value, FIELD_DEFINITION_ID, t2.ID\n      FROM T_OBJECT_FIELD_DATA t1, T_PJ_Bond_Info t2\n     WHERE t1.OBJECT_NO = 20010\n       AND t1.FIELD_VALUE IS NOT NULL\n       AND t1.parent_id = t2.APPLY_ID;\n\n    TRUNCATE TABLE tmp_bond_info_all_20020;\n    INSERT INTO tmp_bond_info_all_20020(f_val,def_id,id)\n    SELECT field_value, FIELD_DEFINITION_ID, t2.id AS bondId\n      FROM T_OBJECT_FIELD_DATA t1, T_PJ_Bond_Info t2\n     WHERE t1.OBJECT_NO = 20020\n       AND t1.FIELD_VALUE IS NOT NULL\n       AND t1.PARENT_ID = t2.TEMP_BONDID;\n\n    TRUNCATE TABLE t_pj_bond_info_all;\n    INSERT INTO t_pj_bond_info_all(id,temp_bondid,apply_id)\n    SELECT t1.ID, t1.TEMP_BONDID, t1.APPLY_ID\n      FROM T_PJ_Bond_Info t1\n     WHERE 1=1;\n\n    FOR col_rec IN\n        SELECT column_name\n          FROM information_schema.columns\n         WHERE table_name = 't_pj_bond_info_all'\n           AND column_name LIKE 'def%'\n    LOOP\n        EXECUTE 'UPDATE t_pj_bond_info_all a SET ' || quote_ident(col_rec.column_name) ||\n                ' = b.f_val FROM tmp_bond_info_all_20020 b WHERE a.id=b.id AND b.def_id=' ||\n                quote_literal(replace(col_rec.column_name,'def_',''));\n        EXECUTE 'UPDATE t_pj_bond_info_all a SET ' || quote_ident(col_rec.column_name) ||\n                ' = b.f_val FROM tmp_bond_info_all_20010 b WHERE a.id=b.id AND a.' || quote_ident(col_rec.column_name) ||\n                ' IS NULL AND b.def_id=' || quote_literal(replace(col_rec.column_name,'def_',''));\n    END LOOP;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"NVL\", \"NVL2\"]}, \"sql\": \"UPDATE products SET price = price * 0.9 WHERE category_id = 101 AND NVL(stock_quantity, 0) > 0;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nUPDATE products SET price = price * 0.9 WHERE category_id = 101 AND NVL(stock_quantity, 0) > 0;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "UPDATE products SET price = price * 0.9 WHERE category_id = 101 AND NVL(stock_quantity, 0) > 0"
                    }
                ]
            },
            {
                "case_id": "4",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"4\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"TRUNC\", \"date_trunc\", \"TO_DATE\"]}, \"sql\": \"SELECT user_id, last_login_time FROM user_accounts WHERE TRUNC(last_login_time) = TO_DATE('2025-06-25', 'YYYY-MM-DD');\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT user_id, last_login_time FROM user_accounts WHERE TRUNC(last_login_time) = TO_DATE('2025-06-25', 'YYYY-MM-DD');\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT user_id, last_login_time FROM user_accounts WHERE last_login_time::date = TO_DATE('2025-06-25', 'YYYY-MM-DD')"
                    }
                ]
            },
            {
                "case_id": "5",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"5\", \"difficulty_level\": \"1\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"ISNULL\", \"COALESCE\"]}, \"sql\": \"SELECT ProductID, Name, ISNULL(Color, 'N/A') AS ProductColor FROM Production.Product;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT ProductID, Name, ISNULL(Color, 'N/A') AS ProductColor FROM Production.Product;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT ProductID, Name, COALESCE(Color, 'N/A') AS ProductColor FROM Production.Product"
                    }
                ]
            },
            {
                "case_id": "6",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"6\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"DENSE_RANK\"]}, \"sql\": \"SELECT ename, sal, DENSE_RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) as rnk FROM emp;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT ename, sal, DENSE_RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) as rnk FROM emp;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT ename, sal, DENSE_RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) as rnk FROM emp"
                    }
                ]
            },
            {
                "case_id": "7",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"7\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"SUM\", \"EXTRACT\"]}, \"sql\": \"WITH Sales_CTE AS (SELECT SalesPersonID, SUM(TotalDue) AS TotalSales, YEAR(OrderDate) AS SalesYear FROM Sales.SalesOrderHeader GROUP BY SalesPersonID, YEAR(OrderDate)) SELECT * FROM Sales_CTE WHERE TotalSales > 100000;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nWITH Sales_CTE AS (SELECT SalesPersonID, SUM(TotalDue) AS TotalSales, YEAR(OrderDate) AS SalesYear FROM Sales.SalesOrderHeader GROUP BY SalesPersonID, YEAR(OrderDate)) SELECT * FROM Sales_CTE WHERE TotalSales > 100000;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "WITH Sales_CTE AS (SELECT SalesPersonID, SUM(TotalDue) AS TotalSales, EXTRACT(YEAR FROM OrderDate)::integer AS SalesYear FROM Sales.SalesOrderHeader GROUP BY SalesPersonID, EXTRACT(YEAR FROM OrderDate)) SELECT * FROM Sales_CTE WHERE TotalSales > 100000"
                    }
                ]
            },
            {
                "case_id": "8",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"8\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"ROW_NUMBER\"]}, \"sql\": \"SELECT employee_id, last_name, salary FROM (SELECT employee_id, last_name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) as rn FROM employees) WHERE rn <= 5;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT employee_id, last_name, salary FROM (SELECT employee_id, last_name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) as rn FROM employees) WHERE rn <= 5;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT employee_id, last_name, salary FROM (SELECT employee_id, last_name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) as rn FROM employees) WHERE rn <= 5"
                    }
                ]
            },
            {
                "case_id": "9",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"9\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"varchar\", \"EXECUTE\", \"BEGIN\", \"COMMIT\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE bulk_delete_by_ids(p_id_list IN VARCHAR2) IS v_sql VARCHAR2(1000); BEGIN v_sql := 'DELETE FROM logs WHERE log_id IN (' || p_id_list || ')'; EXECUTE IMMEDIATE v_sql; COMMIT; END;\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE bulk_delete_by_ids(p_id_list IN VARCHAR2) IS v_sql VARCHAR2(1000); BEGIN v_sql := 'DELETE FROM logs WHERE log_id IN (' || p_id_list || ')'; EXECUTE IMMEDIATE v_sql; COMMIT; END;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION bulk_delete_by_ids(p_id_list TEXT) RETURNS void AS $$\nDECLARE\n    v_sql TEXT;\nBEGIN\n    v_sql := 'DELETE FROM logs WHERE log_id IN (' || p_id_list || ')';\n    EXECUTE v_sql;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "10",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"10\", \"difficulty_level\": \"1\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"\"]}, \"sql\": \"SELECT p.Name AS ProductName, v.Name AS VendorName FROM Purchasing.ProductVendor pv JOIN Production.Product p ON pv.ProductID = p.BusinessEntityID JOIN Purchasing.Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE pv.AverageLeadTime > 10;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT p.Name AS ProductName, v.Name AS VendorName FROM Purchasing.ProductVendor pv JOIN Production.Product p ON pv.ProductID = p.BusinessEntityID JOIN Purchasing.Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE pv.AverageLeadTime > 10;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT p.Name AS ProductName, v.Name AS V"
                    }
                ]
            },
            {
                "case_id": "11",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"11\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"MIN\"]}, \"sql\": \"DELETE FROM job_history WHERE (employee_id, start_date) IN (SELECT employee_id, MIN(start_date) FROM job_history GROUP BY employee_id HAVING COUNT(*) > 1);\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nDELETE FROM job_history WHERE (employee_id, start_date) IN (SELECT employee_id, MIN(start_date) FROM job_history GROUP BY employee_id HAVING COUNT(*) > 1);\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DELETE FROM job_history WHERE (employee_id, start_date) IN (SELECT employee_id, MIN(start_date) FROM job_history GROUP BY employee_id HAVING COUNT(*) > 1)"
                    }
                ]
            },
            {
                "case_id": "12",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"12\", \"difficulty_level\": \"1\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"LIKE\"]}, \"sql\": \"UPDATE Production.Product SET ListPrice = ListPrice * 1.10 WHERE ProductSubcategoryID IN (SELECT ProductSubcategoryID FROM Production.ProductSubcategory WHERE Name LIKE 'Mountain%');\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nUPDATE Production.Product SET ListPrice = ListPrice * 1.10 WHERE ProductSubcategoryID IN (SELECT ProductSubcategoryID FROM Production.ProductSubcategory WHERE Name LIKE 'Mountain%');\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT ProductSubcategoryID FROM Production.ProductSubcategory WHERE Name LIKE 'Mountain%')"
                    }
                ]
            },
            {
                "case_id": "13",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"13\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"LPAD\", \"concat\", \"CONNECT BY\", \"row_number\", \"LEVEL\", \"PRIOR\"]}, \"sql\": \"SELECT LEVEL, LPAD(' ', 2 * (LEVEL - 1)) || ename as name, empno, mgr FROM emp START WITH mgr IS NULL CONNECT BY PRIOR empno = mgr;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT LEVEL, LPAD(' ', 2 * (LEVEL - 1)) || ename as name, empno, mgr FROM emp START WITH mgr IS NULL CONNECT BY PRIOR empno = mgr;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "WITH RECURSIVE emp_cte(level, ename, empno, mgr) AS (\n    SELECT 1, ename, empno, mgr FROM emp WHERE mgr IS NULL\n    UNION ALL\n    SELECT emp_cte.level + 1, e.ename, e.empno, e.mgr FROM emp e JOIN emp_cte ON e.mgr = emp_cte.empno\n)\nSELECT level, lpad(' ', 2 * (level - 1)) || ename as name, empno, mgr FROM emp_cte;"
                    }
                ]
            },
            {
                "case_id": "14",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"14\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"DATE\", \"BEGIN\", \"CONCAT\", \"COMMIT\", \"GET DIAGNOSTICS\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE archive_old_records(p_archive_date IN DATE) IS v_deleted_rows NUMBER; BEGIN DELETE FROM active_data WHERE record_date < p_archive_date RETURNING record_id, record_data INTO (SELECT record_id, record_data FROM DUAL); -- Simplified for example, real logic would bulk insert. INSERT INTO archive_table (record_id, record_data) SELECT record_id, record_data FROM active_data WHERE record_date < p_archive_date; GET DIAGNOSTICS v_deleted_rows = ROW_COUNT; INSERT INTO audit_log (log_message) VALUES (v_deleted_rows || ' rows archived.'); COMMIT; END;\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE archive_old_records(p_archive_date IN DATE) IS v_deleted_rows NUMBER; BEGIN DELETE FROM active_data WHERE record_date < p_archive_date RETURNING record_id, record_data INTO (SELECT record_id, record_data FROM DUAL); -- Simplified for example, real logic would bulk insert. INSERT INTO archive_table (record_id, record_data) SELECT record_id, record_data FROM active_data WHERE record_date < p_archive_date; GET DIAGNOSTICS v_deleted_rows = ROW_COUNT; INSERT INTO audit_log (log_message) VALUES (v_deleted_rows || ' rows archived.'); COMMIT; END;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION archive_old_records(p_archive_date DATE)\nRETURNS void AS $$\nDECLARE\n    v_deleted_rows integer;\nBEGIN\n    DELETE FROM active_data WHERE record_date < p_archive_date; -- Simplified for example, real logic would bulk insert.\n    INSERT INTO archive_table (record_id, record_data)\n    SELECT record_id, record_data FROM active_data WHERE record_date < p_archive_date;\n    GET DIAGNOSTICS v_deleted_rows = ROW_COUNT;\n    INSERT INTO audit_log (log_message) VALUES (v_deleted_rows || ' rows archived.');\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "15",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"15\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"pivot_func\", \"AVG\"]}, \"sql\": \"SELECT [1] AS AvgCost_DTM_1, [2] AS AvgCost_DTM_2, [3] AS AvgCost_DTM_3, [4] AS AvgCost_DTM_4 FROM (SELECT DaysToManufacture, StandardCost FROM Production.Product WHERE DaysToManufacture > 0) AS src PIVOT (AVG(StandardCost) FOR DaysToManufacture IN ([1], [2], [3], [4])) AS PivotTable;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT [1] AS AvgCost_DTM_1, [2] AS AvgCost_DTM_2, [3] AS AvgCost_DTM_3, [4] AS AvgCost_DTM_4 FROM (SELECT DaysToManufacture, StandardCost FROM Production.Product WHERE DaysToManufacture > 0) AS src PIVOT (AVG(StandardCost) FOR DaysToManufacture IN ([1], [2], [3], [4])) AS PivotTable;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT \"1\" AS AvgCost_DTM_1,\n               \"2\" AS AvgCost_DTM_2,\n               \"3\" AS AvgCost_DTM_3,\n               \"4\" AS AvgCost_DTM_4\n        FROM (SELECT DaysToManufacture, StandardCost FROM Production.Product WHERE DaysToManufacture > 0) AS src\n             PIVOT (AVG(StandardCost) FOR DaysToManufacture IN (1,2,3,4)) AS PivotTable"
                    }
                ]
            },
            {
                "case_id": "16",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"16\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"max\"]}, \"sql\": \"SELECT dep_name, (SELECT MAX(salary) FROM emps e WHERE e.dep_id = d.dep_id) AS max_salary FROM departments d WHERE 3 <= (SELECT COUNT(*) FROM emps e2 WHERE e2.dep_id = d.dep_id);\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT dep_name, (SELECT MAX(salary) FROM emps e WHERE e.dep_id = d.dep_id) AS max_salary FROM departments d WHERE 3 <= (SELECT COUNT(*) FROM emps e2 WHERE e2.dep_id = d.dep_id);\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT dep_name, (SELECT MAX(salary) FROM emps e WHERE e.dep_id = d.dep_id) AS max_salary FROM departments d WHERE 3 <= (SELECT COUNT(*) FROM emps e2 WHERE e2.dep_id = d.dep_id)"
                    }
                ]
            },
            {
                "case_id": "17",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"17\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CROSS APPLY\", \"SELECT\"]}, \"sql\": \"SELECT c.CustomerID, c.PersonID, p.FirstName, p.LastName FROM Sales.Customer c CROSS APPLY (SELECT * FROM Person.Person p WHERE p.BusinessEntityID = c.PersonID AND p.EmailPromotion = 1) AS p;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nSELECT c.CustomerID, c.PersonID, p.FirstName, p.LastName FROM Sales.Customer c CROSS APPLY (SELECT * FROM Person.Person p WHERE p.BusinessEntityID = c.PersonID AND p.EmailPromotion = 1) AS p;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT c.CustomerID, c.PersonID, p.FirstName, p.LastName FROM Sales.Customer c CROSS JOIN LATERAL (SELECT * FROM Person.Person pr WHERE pr.BusinessEntityID = c.PersonID AND pr.EmailPromotion = 1) AS p"
                    }
                ]
            },
            {
                "case_id": "18",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"18\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"numeric\", \"integer\", \"RECORD\", \"CREATE TYPE\", \"BEGIN\", \"DO\", \"avg\", \"max\", \"ROWNUM\", \"OPEN FOR\", \"FETCH\", \"NOT FOUND\", \"CONCAT\", \"rtrim\", \"CLOSE\", \"EXCEPTION\", \"SQLERRM\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE GETEMPLOYEESTATS(p_dept_id IN NUMBER, p_result OUT CLOB) IS TYPE stats_rec IS RECORD (total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER, active_projects NUMBER); TYPE p_result_rec IS RECORD (employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2)); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); BEGIN SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; SELECT COUNT(*) INTO v_stats.active_projects FROM PROJECTS WHERE department_id = p_dept_id AND status = 'ACTIVE'; v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; p_result := '{  \\\"department\\\": \\\"' || v_dept_name || '\\\",  \\\"total_employees\\\": ' || v_stats.total_emp || ',  \\\"salary_stats\\\": {    \\\"average\\\": ' || v_stats.avg_salary || ',    \\\"max\\\": ' || v_stats.max_salary || '  },  \\\"active_projects\\\": ' || v_stats.active_projects || ',  \\\"top_earners\\\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || '    {\\\"id\\\": ' || v_result.employee_id || ', \\\"name\\\": \\\"' || v_result.last_name || '\\\", \\\"salary\\\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || '  ]}'; CLOSE v_cursor; EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\\\"error\\\": \\\"Department not found\\\"}'; WHEN OTHERS THEN p_result := '{\\\"error\\\": \\\"' || SQLERRM || '\\\"}'; END;\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(no extra text, no markdown fences, need directly executable sql), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE GETEMPLOYEESTATS(p_dept_id IN NUMBER, p_result OUT CLOB) IS TYPE stats_rec IS RECORD (total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER, active_projects NUMBER); TYPE p_result_rec IS RECORD (employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2)); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); BEGIN SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; SELECT COUNT(*) INTO v_stats.active_projects FROM PROJECTS WHERE department_id = p_dept_id AND status = 'ACTIVE'; v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; p_result := '{  \"department\": \"' || v_dept_name || '\",  \"total_employees\": ' || v_stats.total_emp || ',  \"salary_stats\": {    \"average\": ' || v_stats.avg_salary || ',    \"max\": ' || v_stats.max_salary || '  },  \"active_projects\": ' || v_stats.active_projects || ',  \"top_earners\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || '    {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || '  ]}'; CLOSE v_cursor; EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\"error\": \"Department not found\"}'; WHEN OTHERS THEN p_result := '{\"error\": \"' || SQLERRM || '\"}'; END;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION GETEMPLOYEESTATS(p_dept_id integer, OUT p_result text)\nLANGUAGE plpgsql\nAS $$\nDECLARE\n    v_dept_name varchar(50);\n    v_total_emp integer;\n    v_avg_salary numeric;\n    v_max_salary numeric;\n    v_active_projects integer;\n    v_employee_id integer;\n    v_last_name varchar(50);\n    v_salary numeric(8,2);\n    v_cursor refcursor;\n    v_sql text;\nBEGIN\n    SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id;\n    SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_total_emp, v_avg_salary, v_max_salary FROM EMPLOYEES WHERE department_id = p_dept_id;\n    SELECT COUNT(*) INTO v_active_projects FROM PROJECTS WHERE department_id = p_dept_id AND status = 'ACTIVE';\n    v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees WHERE department_id = $1 ORDER BY salary DESC) AS t LIMIT 5';\n    OPEN v_cursor FOR EXECUTE v_sql USING p_dept_id;\n    p_result := '{  \"department\": \"' || v_dept_name || '\",  \"total_employees\": ' || v_total_emp || ',  \"salary_stats\": {    \"average\": ' || v_avg_salary || ',    \"max\": ' || v_max_salary || '  },  \"active_projects\": ' || v_active_projects || ',  \"top_earners\": [';\n    LOOP\n        FETCH v_cursor INTO v_employee_id, v_last_name, v_salary;\n        EXIT WHEN NOT FOUND;\n        p_result := p_result || '    {\"id\": ' || v_employee_id || ', \"name\": \"' || v_last_name || '\", \"salary\": ' || v_salary || '},';\n    END LOOP;\n    p_result := RTRIM(p_result, ',') || '  ]}';\n    CLOSE v_cursor;\nEXCEPTION\n    WHEN no_data_found THEN\n        p_result := '{\"error\": \"Department not found\"}';\n    WHEN OTHERS THEN\n        p_result := '{\"error\": \"' || SQLERRM || '\"}';\nEND;\n$$;"
                    }
                ]
            }
        ]
    },
    {
        "indicator_name": "syntax_error_detection.jsonl",
        "indicator_weight": 2,
        "evaluation_type": "hybrid",
        "case_pass_count": 16,
        "case_wrong_count": 4,
        "correct_rate": 0.8,
        "case_datas": [
            {
                "case_id": "1",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"1\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"NUMERIC\", \"INTEGER\", \"VARCHAR\", \"DATE\", \"NOW\", \"CURRENT_TIMESTAMP\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE p_universal_case_1 AS\\nBEGIN\\n    EXECUTE IMMEDIATE 'CREATE TABLE employees (employee_id NUMBER(6) NOT NULL, first_name VARCHAR2(20), hire_date DATE DEFAULT SYSDATE)';\\nEND p_universal_case_1;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE TABLE employees (employee_id NUMBER(6) NOT NULL, first_name VARCHAR2(20), hire_date DATE DEFAULT SYSDATE);\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION p_universal_case_1()\nRETURNS void AS $$\nBEGIN\n    EXECUTE 'CREATE TABLE employees (employee_id integer NOT NULL, first_name varchar(20), hire_date date DEFAULT CURRENT_DATE)';\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "2",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"2\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"INTEGER\", \"SET NOCOUNT ON\", \"@@TRANCOUNT\", \"RAISERROR\", \"BEGIN\", \"DATEADD\", \"NOW\", \"current_timestamp\", \"INTERVAL\", \"@@ROWCOUNT\", \"NUMERIC\", \"CURSOR\", \"BEGIN TRY\", \"ERROR_MESSAGE\", \"CAST\", \"CONCAT\"]}, \"sql\": \"CREATE PROCEDURE usp_UpdateOrderStatus @CustomerID INT, @OldStatus VARCHAR(20), @NewStatus VARCHAR(20), @RowsUpdated INT OUTPUT, @ErrorMessage VARCHAR(200) OUTPUT AS BEGIN SET NOCOUNT ON; DECLARE @OrderCount INT, @TranCount INT = @@TRANCOUNT; IF @OldStatus = @NewStatus BEGIN SET @ErrorMessage = '新旧状态不能相同'; RETURN 400; END BEGIN TRY IF @TranCount = 0 BEGIN TRANSACTION; UPDATE Orders SET Status = @NewStatus, LastUpdated = GETDATE() WHERE CustomerID = @CustomerID AND Status = @OldStatus AND OrderDate > DATEADD(month, -3, GETDATE()); SET @RowsUpdated = @@ROWCOUNT; IF @RowsUpdated = 0 BEGIN SET @ErrorMessage = '未找到符合条件的订单'; RETURN 404; END INSERT INTO OrderLog (OrderID, OldStatus, NewStatus, ChangeDate) SELECT OrderID, @OldStatus, @NewStatus, GETDATE() FROM Orders WHERE CustomerID = @CustomerID AND Status = @NewStatus; DECLARE @ProcessingFee DECIMAL(10,2) = 0; DECLARE fee_cursor CURSOR FOR SELECT Fee FROM OrderDetails WHERE OrderID IN (SELECT OrderID FROM Orders WHERE CustomerID = @CustomerID AND Status = @NewStatus); OPEN fee_cursor; FETCH NEXT FROM fee_cursor INTO @ProcessingFee; WHILE @@FETCH_STATUS = 0 BEGIN SET @ProcessingFee = @ProcessingFee * 0.95; FETCH NEXT FROM fee_cursor INTO @ProcessingFee; END CLOSE fee_cursor; DEALLOCATE fee_cursor; IF @TranCount = 0 COMMIT TRANSACTION; SET @ErrorMessage = '更新成功'; RETURN 200; END TRY BEGIN CATCH IF @TranCount = 0 AND @@TRANCOUNT > 0 ROLLBACK TRANSACTION; SET @ErrorMessage = ERROR_MESSAGE() + ' (Line:' + CAST(ERROR_LINE() AS VARCHAR) + ')'; RETURN 500; END CATCH END\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE usp_UpdateOrderStatus @CustomerID INT, @OldStatus VARCHAR(20), @NewStatus VARCHAR(20), @RowsUpdated INT OUTPUT, @ErrorMessage VARCHAR(200) OUTPUT AS BEGIN SET NOCOUNT ON; DECLARE @OrderCount INT, @TranCount INT = @@TRANCOUNT; IF @OldStatus = @NewStatus BEGIN SET @ErrorMessage = '新旧状态不能相同'; RETURN 400; END BEGIN TRY IF @TranCount = 0 BEGIN TRANSACTION; UPDATE Orders SET Status = @NewStatus, LastUpdated = GETDATE() WHERE CustomerID = @CustomerID AND Status = @OldStatus AND OrderDate > DATEADD(month, -3, GETDATE()); SET @RowsUpdated = @@ROWCOUNT; IF @RowsUpdated = 0 BEGIN SET @ErrorMessage = '未找到符合条件的订单'; RETURN 404; END INSERT INTO OrderLog (OrderID, OldStatus, NewStatus, ChangeDate) SELECT OrderID, @OldStatus, @NewStatus, GETDATE() FROM Orders WHERE CustomerID = @CustomerID AND Status = @NewStatus; DECLARE @ProcessingFee DECIMAL(10,2) = 0; DECLARE fee_cursor CURSOR FOR SELECT Fee FROM OrderDetails WHERE OrderID IN (SELECT OrderID FROM Orders WHERE CustomerID = @CustomerID AND Status = @NewStatus); OPEN fee_cursor; FETCH NEXT FROM fee_cursor INTO @ProcessingFee; WHILE @@FETCH_STATUS = 0 BEGIN SET @ProcessingFee = @ProcessingFee * 0.95; FETCH NEXT FROM fee_cursor INTO @ProcessingFee; END CLOSE fee_cursor; DEALLOCATE fee_cursor; IF @TranCount = 0 COMMIT TRANSACTION; SET @ErrorMessage = '更新成功'; RETURN 200; END TRY BEGIN CATCH IF @TranCount = 0 AND @@TRANCOUNT > 0 ROLLBACK TRANSACTION; SET @ErrorMessage = ERROR_MESSAGE() + ' (Line:' + CAST(ERROR_LINE() AS VARCHAR) + ')'; RETURN 500; END CATCH END\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION usp_UpdateOrderStatus(\n    p_CustomerID INT,\n    p_OldStatus VARCHAR(20),\n    p_NewStatus VARCHAR(20)\n)\nRETURNS TABLE(\n    RowsUpdated INT,\n    ErrorMessage VARCHAR(200),\n    ReturnCode INT\n)\nLANGUAGE plpgsql\nAS $$\nDECLARE\n    v_RowsUpdated INT;\n    v_ErrorMessage VARCHAR(200);\n    v_ProcessingFee DECIMAL(10,2);\nBEGIN\n    IF p_OldStatus = p_NewStatus THEN\n        v_RowsUpdated := 0;\n        v_ErrorMessage := '新旧状态不能相同';\n        RETURN QUERY SELECT v_RowsUpdated, v_ErrorMessage, 400;\n    END IF;\n\n    UPDATE Orders\n    SET Status = p_NewStatus,\n        LastUpdated = CURRENT_TIMESTAMP\n    WHERE CustomerID = p_CustomerID\n      AND Status = p_OldStatus\n      AND OrderDate > CURRENT_TIMESTAMP - INTERVAL '3 month';\n    GET DIAGNOSTICS v_RowsUpdated = ROW_COUNT;\n    IF v_RowsUpdated = 0 THEN\n        v_ErrorMessage := '未找到符合条件的订单';\n        RETURN QUERY SELECT v_RowsUpdated, v_ErrorMessage, 404;\n    END IF;\n\n    INSERT INTO OrderLog (OrderID, OldStatus, NewStatus, ChangeDate)\n    SELECT OrderID, p_OldStatus, p_NewStatus, CURRENT_TIMESTAMP\n    FROM Orders\n    WHERE CustomerID = p_CustomerID\n      AND Status = p_NewStatus;\n\n    FOR rec IN\n        SELECT Fee FROM OrderDetails\n        WHERE OrderID IN (\n            SELECT OrderID FROM Orders\n            WHERE CustomerID = p_CustomerID\n              AND Status = p_NewStatus\n        )\n    LOOP\n        v_ProcessingFee := rec.fee * 0.95;\n    END LOOP;\n\n    v_ErrorMessage := '更新成功';\n    RETURN QUERY SELECT v_RowsUpdated, v_ErrorMessage, 200;\nEXCEPTION\n    WHEN OTHERS THEN\n        v_ErrorMessage := SQLERRM;\n        RETURN QUERY SELECT COALESCE(v_RowsUpdated, 0), v_ErrorMessage, 500;\nEND;\n$$;"
                    }
                ]
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CREATE SEQUENCE\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE p_universal_case_3 AS\\nBEGIN\\n    EXECUTE IMMEDIATE 'CREATE SEQUENCE emp_seq START WITH 1000 INCREMENT BY 1 CACHE 20';\\nEND p_universal_case_3;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE SEQUENCE emp_seq START WITH 1000 INCREMENT BY 1 CACHE 20;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_3 AS\nBEGIN\n    EXECUTE IMMEDIATE 'CREATE SEQUENCE emp_seq START WITH 1000 INCREMENT BY 1 CACHE 20';\nEND p_universal_case_3;"
                    }
                ]
            },
            {
                "case_id": "4",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"4\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"VARCHAR\", \"BEGIN\", \"OPEN FOR\", \"uuid\", \"CONCAT\", \"random\", \"NVL\", \"COALESCE\", \"count\", \"NOW\", \"CURRENT_TIMESTAMP\", \"DO\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE \\\"SP_KSH_PERSON_DESC\\\" (V_USER_ID IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR SELECT SYS_GUID() AS UUID, v0.usr_name AS user_name, v0.dept_name, v0.position_describe AS post_name, NVL(v1.ves_cnt,0) AS ves_cnt, NVL(v1.jw_num,0) AS jw_num, NVL(v1.hw_num,0) AS hw_num FROM (SELECT su.usr_id, su.usr_name, so.office_name || so2.office_name AS dept_name, su.position_describe FROM sys_user su LEFT JOIN sys_office so ON su.department_id = so.office_id LEFT JOIN sys_office so2 ON su.dept = so2.office_code WHERE su.usr_id = V_USER_ID) v0 LEFT JOIN (SELECT COUNT(um.vessel_code) AS ves_cnt, COUNT(DISTINCT fn_get_vessel_manager_bc(um.VESSEL_CODE, SYSDATE, '1')) AS jw_num, COUNT(DISTINCT fn_get_vessel_manager_bc(um.VESSEL_CODE, SYSDATE, '2')) AS hw_num FROM ksh_user_manage_ship um WHERE um.user_id = V_USER_ID) v1 ON 1=1; END SP_KSH_PERSON_DESC; $$\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE \"SP_KSH_PERSON_DESC\" (V_USER_ID IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR SELECT SYS_GUID() AS UUID, v0.usr_name AS user_name, v0.dept_name, v0.position_describe AS post_name, NVL(v1.ves_cnt,0) AS ves_cnt, NVL(v1.jw_num,0) AS jw_num, NVL(v1.hw_num,0) AS hw_num FROM (SELECT su.usr_id, su.usr_name, so.office_name || so2.office_name AS dept_name, su.position_describe FROM sys_user su LEFT JOIN sys_office so ON su.department_id = so.office_id LEFT JOIN sys_office so2 ON su.dept = so2.office_code WHERE su.usr_id = V_USER_ID) v0 LEFT JOIN (SELECT COUNT(um.vessel_code) AS ves_cnt, COUNT(DISTINCT fn_get_vessel_manager_bc(um.VESSEL_CODE, SYSDATE, '1')) AS jw_num, COUNT(DISTINCT fn_get_vessel_manager_bc(um.VESSEL_CODE, SYSDATE, '2')) AS hw_num FROM ksh_user_manage_ship um WHERE um.user_id = V_USER_ID) v1 ON 1=1; END SP_KSH_PERSON_DESC; $$\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION \"SP_KSH_PERSON_DESC\"(V_USER_ID varchar, OUT OUTCURSOR refcursor)\nAS $$\nBEGIN\n    OPEN OUTCURSOR FOR\n    SELECT uuid_generate_v4() AS UUID,\n           v0.usr_name AS user_name,\n           v0.dept_name,\n           v0.position_describe AS post_name,\n           COALESCE(v1.ves_cnt,0) AS ves_cnt,\n           COALESCE(v1.jw_num,0) AS jw_num,\n           COALESCE(v1.hw_num,0) AS hw_num\n    FROM (SELECT su.usr_id, su.usr_name, so.office_name || so2.office_name AS dept_name, su.position_describe\n          FROM sys_user su\n          LEFT JOIN sys_office so ON su.department_id = so.office_id\n          LEFT JOIN sys_office so2 ON su.dept = so2.office_code\n          WHERE su.usr_id = V_USER_ID) v0\n    LEFT JOIN (SELECT COUNT(um.vessel_code) AS ves_cnt,\n                      COUNT(DISTINCT fn_get_vessel_manager_bc(um.VESSEL_CODE, CURRENT_TIMESTAMP, '1')) AS jw_num,\n                      COUNT(DISTINCT fn_get_vessel_manager_bc(um.VESSEL_CODE, CURRENT_TIMESTAMP, '2')) AS hw_num\n               FROM ksh_user_manage_ship um\n               WHERE um.user_id = V_USER_ID) v1\n    ON 1=1;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "5",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"5\", \"difficulty_level\": \"1\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"PG_TABLES\", \"INTEGER\", \"nvarchar\"]}, \"sql\": \"CREATE OR ALTER PROCEDURE p_universal_case_5\\nAS\\nBEGIN\\n    SET NOCOUNT ON;\\n    BEGIN TRY\\n        IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Logs') CREATE TABLE Logs (LogID int, LogMessage nvarchar(max));\\n    END TRY\\n    BEGIN CATCH\\n        THROW;\\n    END CATCH;\\nEND;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nIF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Logs') CREATE TABLE Logs (LogID int, LogMessage nvarchar(max));\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION p_universal_case_5()\nRETURNS void\nLANGUAGE plpgsql\nAS $$\nBEGIN\n    -- 删除 SET NOCOUNT ON，因为 GaussDB plpgsql 不支持该语法\n    BEGIN\n        IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'Logs') THEN\n            CREATE TABLE \"Logs\" (\n                \"LogID\" integer,\n                \"LogMessage\" text\n            );\n        END IF;\n    EXCEPTION WHEN OTHERS THEN\n        RAISE;\n    END;\nEND;\n$$;"
                    }
                ]
            },
            {
                "case_id": "6",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"6\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"WITH READ ONLY\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE p_universal_case_6 AS\\nBEGIN\\n    EXECUTE IMMEDIATE 'CREATE OR REPLACE VIEW v_emp_dept AS SELECT e.ename, d.dname FROM emp e JOIN dept d ON e.deptno = d.deptno WITH READ ONLY';\\nEND p_universal_case_6;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE VIEW v_emp_dept AS SELECT e.ename, d.dname FROM emp e JOIN dept d ON e.deptno = d.deptno WITH READ ONLY;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION p_universal_case_6()\nRETURNS void AS $$\nBEGIN\n    EXECUTE 'CREATE OR REPLACE VIEW v_emp_dept AS SELECT e.ename, d.dname FROM emp e JOIN dept d ON e.deptno = d.deptno';\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "7",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"7\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"CHAR\", \"BEGIN\"]}, \"sql\": \"CREATE PROCEDURE sp_GetCustomerOrders @CustomerID nchar(5) AS BEGIN SELECT OrderID/** INT **/,CustomerID/** NCHAR(5) **/,EmployeeID/** INT **/,ShipName/** NVARCHAR(40) **/ FROM Orders WHERE CustomerID = @CustomerID; END;\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE sp_GetCustomerOrders @CustomerID nchar(5) AS BEGIN SELECT OrderID/** INT **/,CustomerID/** NCHAR(5) **/,EmployeeID/** INT **/,ShipName/** NVARCHAR(40) **/ FROM Orders WHERE CustomerID = @CustomerID; END;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION sp_GetCustomerOrders(p_CustomerID nchar(5)) RETURNS TABLE(OrderID int,CustomerID nchar(5),EmployeeID int,ShipName nvarchar(40)) LANGUAGE plpgsql AS $$ BEGIN RETURN QUERY SELECT OrderID/** INT **/,CustomerID/** NCHAR(5) **/,EmployeeID/** INT **/,ShipName/** NVARCHAR(40) **/ FROM Orders WHERE CustomerID = p_CustomerID; END; $$;"
                    }
                ]
            },
            {
                "case_id": "8",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"8\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CREATE INDEX\", \"LOWER\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE p_universal_case_8 AS\\nBEGIN\\n    EXECUTE IMMEDIATE 'CREATE INDEX idx_emp_name ON emp(LOWER(ename))';\\nEND p_universal_case_8;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE INDEX idx_emp_name ON emp(LOWER(ename));\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_8 AS\nBEGIN\n    EXECUTE IMMEDIATE 'CREATE INDEX idx_emp_name ON emp(LOWER(ename))';\nEND p_universal_case_8;"
                    }
                ]
            },
            {
                "case_id": "9",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"9\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"DATEADD\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE p_universal_case_9 AS\\nBEGIN\\n    EXECUTE IMMEDIATE 'SELECT GETDATE() AS current_time, DATEPART(YEAR, hire_date) AS hire_year FROM employees';\\nEND p_universal_case_9;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT GETDATE() AS current_time, DATEPART(YEAR, hire_date) AS hire_year FROM employees;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION p_universal_case_9() RETURNS void AS $$\nBEGIN\n    EXECUTE 'SELECT now() AS current_time_ts, date_part(''year'', hire_date) AS hire_year FROM employees';\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "10",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"10\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CURSOR\", \"DECLARE CURSOR\", \"VARCHAR\"]}, \"sql\": \"CREATE OR ALTER PROCEDURE p_universal_case_10\\nAS\\nBEGIN\\n    SET NOCOUNT ON;\\n    BEGIN TRY\\n        DECLARE @MyCursor CURSOR; DECLARE @LastName varchar(50); SET @MyCursor = CURSOR FOR SELECT LastName FROM Person.Person; OPEN @MyCursor; FETCH NEXT FROM @MyCursor INTO @LastName; CLOSE @MyCursor; DEALLOCATE @MyCursor;\\n    END TRY\\n    BEGIN CATCH\\n        THROW;\\n    END CATCH;\\nEND;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDECLARE @MyCursor CURSOR; DECLARE @LastName varchar(50); SET @MyCursor = CURSOR FOR SELECT LastName FROM Person.Person; OPEN @MyCursor; FETCH NEXT FROM @MyCursor INTO @LastName; CLOSE @MyCursor; DEALLOCATE @MyCursor;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION p_universal_case_10()\nRETURNS void\nLANGUAGE plpgsql\nAS $$\nDECLARE\n    last_name varchar(50);\nBEGIN\n    -- 原SQL中的SET NOCOUNT ON已移除，GaussDB不支持\n    BEGIN\n        FOR last_name IN SELECT LastName FROM Person.Person LOOP\n            -- 原逻辑仅FETCH NEXT一次\n            EXIT;\n        END LOOP;\n    EXCEPTION\n        WHEN OTHERS THEN\n            RAISE;\n    END;\nEND;\n$$;"
                    }
                ]
            },
            {
                "case_id": "11",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"11\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"ALTER TABLE ADD CONSTRAINT\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE p_universal_case_11 AS\\nBEGIN\\n    EXECUTE IMMEDIATE 'ALTER TABLE sales ADD CONSTRAINT sales_time_fk FOREIGN KEY (time_id) REFERENCES times(time_id) ENABLE NOVALIDATE';\\nEND p_universal_case_11;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nALTER TABLE sales ADD CONSTRAINT sales_time_fk FOREIGN KEY (time_id) REFERENCES times(time_id) ENABLE NOVALIDATE;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_11 AS\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE sales ADD CONSTRAINT sales_time_fk FOREIGN KEY (time_id) REFERENCES times(time_id)';\nEND p_universal_case_11;"
                    }
                ]
            },
            {
                "case_id": "12",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"12\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"ROW_NUMBER\", \"CONCAT\", \"CONVERT\", \"digest\"]}, \"sql\": \"CREATE OR ALTER PROCEDURE p_universal_case_12\\nAS\\nBEGIN\\n    SET NOCOUNT ON;\\n    BEGIN TRY\\n        WITH c AS (SELECT CustomerID, OrderID, OrderDate, ROW_NUMBER() OVER(PARTITION BY CustomerID ORDER BY OrderDate DESC) rn, HASHBYTES('SHA2_256', CONCAT(CustomerID,'|',TRY_CONVERT(varchar(30),OrderDate,126))) hb FROM dbo.Orders) SELECT CustomerID, OrderID, OrderDate, CONVERT(varchar(64), hb, 2) AS row_hash_hex FROM c WHERE rn=1;\\n    END TRY\\n    BEGIN CATCH\\n        THROW;\\n    END CATCH;\\nEND;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nWITH c AS (SELECT CustomerID, OrderID, OrderDate, ROW_NUMBER() OVER(PARTITION BY CustomerID ORDER BY OrderDate DESC) rn, HASHBYTES('SHA2_256', CONCAT(CustomerID,'|',TRY_CONVERT(varchar(30),OrderDate,126))) hb FROM dbo.Orders) SELECT CustomerID, OrderID, OrderDate, CONVERT(varchar(64), hb, 2) AS row_hash_hex FROM c WHERE rn=1;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION p_universal_case_12()\nRETURNS TABLE(\n    CustomerID text,\n    OrderID text,\n    OrderDate timestamp,\n    row_hash_hex text\n)\nLANGUAGE plpgsql\nAS $$\nBEGIN\n    RETURN QUERY\n    WITH c AS (\n        SELECT\n            CustomerID,\n            OrderID,\n            OrderDate,\n            ROW_NUMBER() OVER(PARTITION BY CustomerID ORDER BY OrderDate DESC) AS rn,\n            digest(\n                CONCAT(CustomerID,'|',TO_CHAR(OrderDate,'YYYY-MM-DD\"T\"HH24:MI:SS'))\n            , 'sha256') AS hb\n        FROM dbo.Orders\n    )\n    SELECT\n        CustomerID,\n        OrderID,\n        OrderDate,\n        encode(hb,'hex') AS row_hash_hex\n    FROM c\n    WHERE rn = 1;\nEXCEPTION WHEN OTHERS THEN\n    RAISE;\nEND;\n$$;"
                    }
                ]
            },
            {
                "case_id": "13",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"13\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"CREATE SCHEMA\", \"PROCEDURE\", \"VARCHAR\", \"NUMERIC\", \"INTEGER\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE p_universal_case_13 AS\\nBEGIN\\n    EXECUTE IMMEDIATE 'CREATE OR REPLACE PACKAGE emp_actions AS PROCEDURE hire_employee(p_name VARCHAR2, p_job VARCHAR2); FUNCTION get_salary(p_emp_id NUMBER) RETURN NUMBER; END emp_actions';\\nEND p_universal_case_13;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PACKAGE emp_actions AS PROCEDURE hire_employee(p_name VARCHAR2, p_job VARCHAR2); FUNCTION get_salary(p_emp_id NUMBER) RETURN NUMBER; END emp_actions;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_13 AS\nBEGIN\n    EXECUTE IMMEDIATE 'CREATE OR REPLACE PACKAGE emp_actions AS PROCEDURE hire_employee(p_name VARCHAR2, p_job VARCHAR2); FUNCTION get_salary(p_emp_id NUMBER) RETURN NUMBER; END emp_actions';\nEND p_universal_case_13;"
                    }
                ]
            },
            {
                "case_id": "14",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"14\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"INTEGER\", \"BEGIN\", \"SET NOCOUNT ON\", \"BEGIN TRY\"]}, \"sql\": \"CREATE PROCEDURE [HumanResources].[uspUpdateEmployeePersonalInfo] @BusinessEntityID [int], @NationalIDNumber [nvarchar](15), @BirthDate [datetime] AS BEGIN SET NOCOUNT ON; BEGIN TRY UPDATE [HumanResources].[Employee] SET [NationalIDNumber] = @NationalIDNumber, [BirthDate] = @BirthDate WHERE [BusinessEntityID] = @BusinessEntityID; END TRY BEGIN CATCH EXECUTE [dbo].[uspLogError]; END CATCH; END;\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE [HumanResources].[uspUpdateEmployeePersonalInfo] @BusinessEntityID [int], @NationalIDNumber [nvarchar](15), @BirthDate [datetime] AS BEGIN SET NOCOUNT ON; BEGIN TRY UPDATE [HumanResources].[Employee] SET [NationalIDNumber] = @NationalIDNumber, [BirthDate] = @BirthDate WHERE [BusinessEntityID] = @BusinessEntityID; END TRY BEGIN CATCH EXECUTE [dbo].[uspLogError]; END CATCH; END;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION HumanResources.uspUpdateEmployeePersonalInfo(\n    p_BusinessEntityID int,\n    p_NationalIDNumber nvarchar(15),\n    p_BirthDate timestamp\n) RETURNS void AS $$\nBEGIN\n    -- 移除SET NOCOUNT ON;语句，GaussDB不支持\n    UPDATE HumanResources.Employee\n    SET NationalIDNumber = p_NationalIDNumber,\n        BirthDate = p_BirthDate\n    WHERE BusinessEntityID = p_BusinessEntityID;\nEXCEPTION\n    WHEN OTHERS THEN\n        CALL dbo.uspLogError();\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "15",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"15\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"PRAGMA AUTONOMOUS_TRANSACTION\", \"BEGIN\", \"SYSDATE\", \"COMMIT\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE process_orders IS PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO order_logs (log_date, log_msg) VALUES (SYSDATE, 'Processing started'); DELETE FROM new_orders; COMMIT; END;\", \"_converted_to_procedure\": false}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE process_orders IS PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO order_logs (log_date, log_msg) VALUES (SYSDATE, 'Processing started'); DELETE FROM new_orders; COMMIT; END;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE process_orders IS PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO order_logs (log_date, log_msg) VALUES (SYSDATE, 'Processing started'); DELETE FROM new_orders; COMMIT; END;"
                    }
                ]
            },
            {
                "case_id": "16",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"16\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"DECLARE\", \"CURSOR\", \"BEGIN\", \"DO\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE p_universal_case_16 AS\\nBEGIN\\n    EXECUTE IMMEDIATE 'DECLARE TYPE emp_cur_type IS REF CURSOR; v_cur emp_cur_type; BEGIN OPEN v_cur FOR SELECT * FROM emp; END';\\nEND p_universal_case_16;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDECLARE TYPE emp_cur_type IS REF CURSOR; v_cur emp_cur_type; BEGIN OPEN v_cur FOR SELECT * FROM emp; END;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION p_universal_case_16()\nRETURNS void AS\n$$\nDECLARE\n    v_cur refcursor;\nBEGIN\n    OPEN v_cur FOR SELECT * FROM emp;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "17",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"17\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"XML\", \"xmlelement\", \"json_build_object\", \"xmlagg\"]}, \"sql\": \"CREATE OR ALTER PROCEDURE p_universal_case_17\\nAS\\nBEGIN\\n    SET NOCOUNT ON;\\n    BEGIN TRY\\n        SELECT OrderID, CustomerID, OrderDate FROM Orders FOR XML PATH('Order'), ROOT('Orders');\\n    END TRY\\n    BEGIN CATCH\\n        THROW;\\n    END CATCH;\\nEND;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT OrderID, CustomerID, OrderDate FROM Orders FOR XML PATH('Order'), ROOT('Orders');\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR ALTER PROCEDURE p_universal_case_17\nAS\nBEGIN\n    SET NOCOUNT ON;\n    BEGIN TRY\n        SELECT OrderID, CustomerID, OrderDate FROM Orders FOR XML PATH('Order'), ROOT('Orders');\n    END TRY\n    BEGIN CATCH\n        THROW;\n    END CATCH;\nEND;"
                    }
                ]
            },
            {
                "case_id": "18",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"18\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"SET\", \"SET SESSION AUTHORIZATION\", \"NLS_DATE_FORMAT\", \"to_char\", \"DateStyle\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE p_universal_case_18 AS\\nBEGIN\\n    EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT = ''YYYY-MM-DD HH24:MI:SS''';\\nEND p_universal_case_18;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION p_universal_case_18()\nRETURNS void\nLANGUAGE plpgsql\nAS $$\nBEGIN\n    EXECUTE 'ALTER SESSION SET NLS_DATE_FORMAT = ''YYYY-MM-DD HH24:MI:SS''';\nEND;\n$$;"
                    }
                ]
            },
            {
                "case_id": "19",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"19\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"Hint\", \"并行执行 Hint\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE p_universal_case_19 AS\\nBEGIN\\n    EXECUTE IMMEDIATE 'SELECT /*+ FULL(e) PARALLEL(e, 4) */ e.ename, d.dname FROM emp e, dept d WHERE e.deptno = d.deptno';\\nEND p_universal_case_19;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT /*+ FULL(e) PARALLEL(e, 4) */ e.ename, d.dname FROM emp e, dept d WHERE e.deptno = d.deptno;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_universal_case_19 AS\nBEGIN\n    EXECUTE IMMEDIATE 'SELECT /*+ FULL(e) PARALLEL(e, 4) */ e.ename, d.dname FROM emp e, dept d WHERE e.deptno = d.deptno';\nEND p_universal_case_19;"
                    }
                ]
            },
            {
                "case_id": "20",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"20\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"LENGTH\", \"UPPER\"]}, \"sql\": \"CREATE OR ALTER PROCEDURE p_universal_case_20\\nAS\\nBEGIN\\n    SET NOCOUNT ON;\\n    BEGIN TRY\\n        SELECT UPPER(first_name) AS upper_name, LEN(last_name) AS name_length FROM employees;\\n    END TRY\\n    BEGIN CATCH\\n        THROW;\\n    END CATCH;\\nEND;\", \"_converted_to_procedure\": true}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT UPPER(first_name) AS upper_name, LEN(last_name) AS name_length FROM employees;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION p_universal_case_20()\nRETURNS TABLE(upper_name text, name_length integer)\nLANGUAGE plpgsql\nAS\n$$\nBEGIN\n    RETURN QUERY\n        SELECT UPPER(first_name) AS upper_name, LENGTH(last_name) AS name_length FROM employees;\nEXCEPTION WHEN OTHERS THEN\n    RAISE;\nEND;\n$$;"
                    }
                ]
            }
        ]
    }
]