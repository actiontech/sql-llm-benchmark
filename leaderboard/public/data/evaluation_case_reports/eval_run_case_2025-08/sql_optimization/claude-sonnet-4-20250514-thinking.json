[
    {
        "indicator_name": "logical_equivalence.jsonl",
        "indicator_weight": 3,
        "evaluation_type": "hybrid",
        "case_pass_count": 11,
        "case_wrong_count": 2,
        "correct_rate": 0.85,
        "case_datas": [
            {
                "case_id": "1",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"1\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，子查询中存在多余的投影列，这些列在外层查询中没有被使用。\", \"difficulty_level\": \"1\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\"], \"sql\": \"SELECT student_name FROM students WHERE student_id IN ( SELECT student_id FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM students ) AS inner_dt2 ) AS inner_dt1 ) AS outer_dt );\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.40\\\"}, \\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\"]}}, {\\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [\\\"test_db_case_1_1748591779.students.student_id\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"using_index\\\": true, \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"2.40\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\"]}}]}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.40\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"possible_keys\": [\"PRIMARY\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\"]}}, {\"table\": {\"table_name\": \"students\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"ref\": [\"test_db_case_1_1748591779.students.student_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"using_index\": true, \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"2.40\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\"]}}]}}\n\nOriginal SQL:\nSELECT student_name FROM students WHERE student_id IN ( SELECT student_id FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM students ) AS inner_dt2 ) AS inner_dt1 ) AS outer_dt );\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_name FROM students;"
                    }
                ]
            },
            {
                "case_id": "2",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"2\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，其中外部的WHERE子句条件可以下推到最内层的子查询中。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\", \"CREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\"], \"sql\": \"SELECT s.teacher_id, dt_teacher.teacher_name FROM students s JOIN (     SELECT teacher_id, teacher_name      FROM (         SELECT teacher_id, teacher_name, department          FROM (             SELECT teacher_id, teacher_name, department              FROM (                  SELECT teacher_id, teacher_name, department                  FROM teachers             ) AS inner_dt1         ) AS inner_dt2     ) AS inner_dt3 ) AS dt_teacher ON s.teacher_id = dt_teacher.teacher_id WHERE dt_teacher.teacher_name LIKE 'Dr. %';\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.40\\\"}, \\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"s\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"teacher_id\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_2_1748591779`.`s`.`teacher_id` is not null)\\\"}}, {\\\"table\\\": {\\\"table_name\\\": \\\"teachers\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"teacher_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [\\\"test_db_case_2_1748591779.s.teacher_id\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"2.40\\\", \\\"data_read_per_join\\\": \\\"208\\\"}, \\\"used_columns\\\": [\\\"teacher_id\\\", \\\"teacher_name\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_2_1748591779`.`teachers`.`teacher_name` like 'Dr. %')\\\"}}]}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\nCREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.40\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"s\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"teacher_id\"], \"attached_condition\": \"(`test_db_case_2_1748591779`.`s`.`teacher_id` is not null)\"}}, {\"table\": {\"table_name\": \"teachers\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"teacher_id\"], \"key_length\": \"4\", \"ref\": [\"test_db_case_2_1748591779.s.teacher_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"2.40\", \"data_read_per_join\": \"208\"}, \"used_columns\": [\"teacher_id\", \"teacher_name\"], \"attached_condition\": \"(`test_db_case_2_1748591779`.`teachers`.`teacher_name` like 'Dr. %')\"}}]}}\n\nOriginal SQL:\nSELECT s.teacher_id, dt_teacher.teacher_name FROM students s JOIN (     SELECT teacher_id, teacher_name      FROM (         SELECT teacher_id, teacher_name, department          FROM (             SELECT teacher_id, teacher_name, department              FROM (                  SELECT teacher_id, teacher_name, department                  FROM teachers             ) AS inner_dt1         ) AS inner_dt2     ) AS inner_dt3 ) AS dt_teacher ON s.teacher_id = dt_teacher.teacher_id WHERE dt_teacher.teacher_name LIKE 'Dr. %';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT s.teacher_id, t.teacher_name FROM students s JOIN teachers t ON s.teacher_id = t.teacher_id WHERE t.teacher_name LIKE 'Dr. %';"
                    }
                ]
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，子查询中存在多余的投影列，同时内层子查询有ORDER BY和LIMIT，但最外层查询仍可进行投影下推。\", \"difficulty_level\": \"1\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\"], \"sql\": \"SELECT s.student_id, s.student_name, s.date_of_birth FROM students s JOIN ( SELECT student_id, gender FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM students ORDER BY student_id DESC ) AS inner_dt3 ) AS inner_dt2 ORDER BY student_id DESC LIMIT 1 ) AS inner_dt1 ) dt ON s.student_id = dt.student_id WHERE dt.gender = 'MALE'\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"message\\\": \\\"no matching row in const table\\\", \\\"table\\\": {\\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 3, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"ordering_operation\\\": {\\\"using_filesort\\\": false, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"index\\\", \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"gender\\\", \\\"date_of_birth\\\"]}}}}}}}\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"message\": \"no matching row in const table\", \"table\": {\"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"ordering_operation\": {\"using_filesort\": false, \"table\": {\"table_name\": \"students\", \"access_type\": \"index\", \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"gender\", \"date_of_birth\"]}}}}}}}\n\nOriginal SQL:\nSELECT s.student_id, s.student_name, s.date_of_birth FROM students s JOIN ( SELECT student_id, gender FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM students ORDER BY student_id DESC ) AS inner_dt3 ) AS inner_dt2 ORDER BY student_id DESC LIMIT 1 ) AS inner_dt1 ) dt ON s.student_id = dt.student_id WHERE dt.gender = 'MALE'\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_id, student_name, date_of_birth FROM students WHERE gender = 'MALE' ORDER BY student_id DESC LIMIT 1"
                    }
                ]
            },
            {
                "case_id": "4",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"4\", \"description\": \"一个包含关联子查询的SELECT语句，子查询可以被折叠。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\", \"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT student_id FROM students s WHERE s.student_id IN ( SELECT e.student_id FROM enrollments e WHERE e.student_id = s.student_id )  AND s.gender = 'Female'  AND s.date_of_birth <= '2000-01-01'  AND s.student_name != 'TestName' LIMIT 10;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"4.80\\\"}, \\\"duplicates_removal\\\": {\\\"using_temporary_table\\\": true, \\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"e\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"24\\\"}, \\\"used_columns\\\": [\\\"student_id\\\"]}}, {\\\"table\\\": {\\\"table_name\\\": \\\"s\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [\\\"test_db_case_5_1748591779.e.student_id\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"4.80\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"gender\\\", \\\"date_of_birth\\\"], \\\"attached_condition\\\": \\\"((`test_db_case_5_1748591779`.`s`.`gender` = 'Female') and (`test_db_case_5_1748591779`.`s`.`date_of_birth` <= '2000-01-01') and (`test_db_case_5_1748591779`.`s`.`student_name` <> 'TestName'))\\\"}}]}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"4.80\"}, \"duplicates_removal\": {\"using_temporary_table\": true, \"nested_loop\": [{\"table\": {\"table_name\": \"e\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"student_id\"]}}, {\"table\": {\"table_name\": \"s\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"ref\": [\"test_db_case_5_1748591779.e.student_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"4.80\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\", \"gender\", \"date_of_birth\"], \"attached_condition\": \"((`test_db_case_5_1748591779`.`s`.`gender` = 'Female') and (`test_db_case_5_1748591779`.`s`.`date_of_birth` <= '2000-01-01') and (`test_db_case_5_1748591779`.`s`.`student_name` <> 'TestName'))\"}}]}}\n\nOriginal SQL:\nSELECT student_id FROM students s WHERE s.student_id IN ( SELECT e.student_id FROM enrollments e WHERE e.student_id = s.student_id )  AND s.gender = 'Female'  AND s.date_of_birth <= '2000-01-01'  AND s.student_name != 'TestName' LIMIT 10;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_id FROM students s WHERE EXISTS (SELECT 1 FROM enrollments e WHERE e.student_id = s.student_id) AND s.gender = 'Female' AND s.date_of_birth <= '2000-01-01' AND s.student_name != 'TestName' LIMIT 10;"
                    }
                ]
            },
            {
                "case_id": "5",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"5\", \"description\": \"一个简单的SELECT语句，其中WHERE子句对字段使用了函数，导致隐式转换。\", \"difficulty_level\": \"1\", \"create_table_statements\": [\"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT student_id, CONCAT(\\\"id_\\\", student_id) as student_id2 FROM enrollments WHERE CONCAT(\\\"id_\\\", student_id) >= \\\"id_1000\\\" LIMIT 10;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"enrollments\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"24\\\"}, \\\"used_columns\\\": [\\\"student_id\\\"], \\\"attached_condition\\\": \\\"(concat('id_',`test_db_case_6_1748591779`.`enrollments`.`student_id`) >= 'id_1000')\\\"}}}\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"enrollments\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"student_id\"], \"attached_condition\": \"(concat('id_',`test_db_case_6_1748591779`.`enrollments`.`student_id`) >= 'id_1000')\"}}}\n\nOriginal SQL:\nSELECT student_id, CONCAT(\"id_\", student_id) as student_id2 FROM enrollments WHERE CONCAT(\"id_\", student_id) >= \"id_1000\" LIMIT 10;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_id, CONCAT(\"id_\", student_id) as student_id2 FROM enrollments WHERE student_id >= 1000 LIMIT 10;"
                    }
                ]
            },
            {
                "case_id": "6",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"6\", \"description\": \"一个包含COUNT标量子查询的SELECT语句，可以将其改写为IN子查询。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\", \"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT * FROM students WHERE NOT ( SELECT count(*) FROM enrollments WHERE students.student_id = enrollments.student_id AND enrollment_id > 1000 ) > 0;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\"], \\\"attached_condition\\\": \\\"((/* select#2 */ select count(0) from `test_db_case_7_1748591779`.`enrollments` where ((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))) <= 0)\\\", \\\"attached_subqueries\\\": [{\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.41\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"enrollments\\\", \\\"access_type\\\": \\\"range\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"enrollment_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.21\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.41\\\", \\\"data_read_per_join\\\": \\\"24\\\"}, \\\"used_columns\\\": [\\\"enrollment_id\\\", \\\"student_id\\\"], \\\"attached_condition\\\": \\\"((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))\\\"}}}]}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\"], \"attached_condition\": \"((/* select#2 */ select count(0) from `test_db_case_7_1748591779`.`enrollments` where ((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))) <= 0)\", \"attached_subqueries\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.41\"}, \"table\": {\"table_name\": \"enrollments\", \"access_type\": \"range\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"enrollment_id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.21\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.41\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"enrollment_id\", \"student_id\"], \"attached_condition\": \"((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))\"}}}]}}\n\nOriginal SQL:\nSELECT * FROM students WHERE NOT ( SELECT count(*) FROM enrollments WHERE students.student_id = enrollments.student_id AND enrollment_id > 1000 ) > 0;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM students WHERE NOT EXISTS (SELECT 1 FROM enrollments WHERE students.student_id = enrollments.student_id AND enrollment_id > 1000);"
                    }
                ]
            },
            {
                "case_id": "7",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"7\", \"description\": \"一个包含HAVING子句的SELECT语句，其中HAVING条件不依赖聚合函数，可以下推到WHERE子句。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT student_id, MAX(enrollment_date) latest_date FROM enrollments WHERE enrollment_date > \\\"1993-11-26\\\" OR enrollment_date < \\\"1991-11-26\\\" GROUP BY student_id HAVING student_id = 1999\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.20\\\"}, \\\"grouping_operation\\\": {\\\"using_temporary_table\\\": true, \\\"using_filesort\\\": true, \\\"cost_info\\\": {\\\"sort_cost\\\": \\\"1.00\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"enrollments\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"24\\\"}, \\\"used_columns\\\": [\\\"enrollment_id\\\", \\\"student_id\\\", \\\"enrollment_date\\\"], \\\"attached_condition\\\": \\\"((`test_db_case_8_1748591779`.`enrollments`.`enrollment_date` > '1993-11-26') or (`test_db_case_8_1748591779`.`enrollments`.`enrollment_date` < '1991-11-26'))\\\"}}}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.20\"}, \"grouping_operation\": {\"using_temporary_table\": true, \"using_filesort\": true, \"cost_info\": {\"sort_cost\": \"1.00\"}, \"table\": {\"table_name\": \"enrollments\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"enrollment_id\", \"student_id\", \"enrollment_date\"], \"attached_condition\": \"((`test_db_case_8_1748591779`.`enrollments`.`enrollment_date` > '1993-11-26') or (`test_db_case_8_1748591779`.`enrollments`.`enrollment_date` < '1991-11-26'))\"}}}}\n\nOriginal SQL:\nSELECT student_id, MAX(enrollment_date) latest_date FROM enrollments WHERE enrollment_date > \"1993-11-26\" OR enrollment_date < \"1991-11-26\" GROUP BY student_id HAVING student_id = 1999\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_id, MAX(enrollment_date) latest_date FROM enrollments WHERE student_id = 1999 AND (enrollment_date > \"1993-11-26\" OR enrollment_date < \"1991-11-26\") GROUP BY student_id"
                    }
                ]
            },
            {
                "case_id": "8",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"8\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，最内层的GROUP BY子句是不必要的，可以被消除。\", \"difficulty_level\": \"1\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), namespace VARCHAR(50) );\"], \"sql\": \"SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT * FROM students GROUP BY student_id ORDER BY COUNT(namespace) ) AS t1 ) AS t2 ) AS t3;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"10.50\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"t1\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 2, \\\"rows_produced_per_join\\\": 2, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"10.10\\\", \\\"eval_cost\\\": \\\"0.40\\\", \\\"prefix_cost\\\": \\\"10.50\\\", \\\"data_read_per_join\\\": \\\"336\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"namespace\\\"], \\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 4, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"ordering_operation\\\": {\\\"using_temporary_table\\\": true, \\\"using_filesort\\\": true, \\\"grouping_operation\\\": {\\\"using_filesort\\\": false, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"index\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"160\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"namespace\\\"]}}}}}}}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), namespace VARCHAR(50) );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"10.50\"}, \"table\": {\"table_name\": \"t1\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 2, \"rows_produced_per_join\": 2, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"10.10\", \"eval_cost\": \"0.40\", \"prefix_cost\": \"10.50\", \"data_read_per_join\": \"336\"}, \"used_columns\": [\"student_id\", \"student_name\", \"namespace\"], \"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 4, \"cost_info\": {\"query_cost\": \"1.20\"}, \"ordering_operation\": {\"using_temporary_table\": true, \"using_filesort\": true, \"grouping_operation\": {\"using_filesort\": false, \"table\": {\"table_name\": \"students\", \"access_type\": \"index\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"160\"}, \"used_columns\": [\"student_id\", \"student_name\", \"namespace\"]}}}}}}}}\n\nOriginal SQL:\nSELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT * FROM students GROUP BY student_id ORDER BY COUNT(namespace) ) AS t1 ) AS t2 ) AS t3;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM students GROUP BY student_id ORDER BY COUNT(namespace);"
                    }
                ]
            },
            {
                "case_id": "9",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"9\", \"description\": \"一个包含非关联子查询的SELECT语句，可以将子查询转换为关联子查询。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\", \"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT );\"], \"sql\": \"SELECT * FROM students WHERE student_id IN ( SELECT student_id FROM enrollments AS inner_dt );\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"4.80\\\"}, \\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"<subquery2>\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"query_block\\\": {\\\"table\\\": {\\\"table_name\\\": \\\"inner_dt\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"16\\\"}, \\\"used_columns\\\": [\\\"student_id\\\"]}}}}}, {\\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [\\\"<subquery2>.student_id\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"4.80\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\"]}}]}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"4.80\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"<subquery2>\", \"access_type\": \"ALL\", \"materialized_from_subquery\": {\"using_temporary_table\": true, \"query_block\": {\"table\": {\"table_name\": \"inner_dt\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"16\"}, \"used_columns\": [\"student_id\"]}}}}}, {\"table\": {\"table_name\": \"students\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"ref\": [\"<subquery2>.student_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"4.80\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\"]}}]}}\n\nOriginal SQL:\nSELECT * FROM students WHERE student_id IN ( SELECT student_id FROM enrollments AS inner_dt );\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM students WHERE EXISTS (SELECT 1 FROM enrollments WHERE enrollments.student_id = students.student_id);"
                    }
                ]
            },
            {
                "case_id": "10",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"10\", \"description\": \"一个包含模拟ROW_NUMBER()窗口函数和过滤条件的SELECT语句，可以推导为TopN算子。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), date_of_birth DATE );\"], \"sql\": \"SELECT T1.student_name, T1.date_of_birth FROM students AS T1 WHERE (SELECT COUNT(*) FROM students AS T2 WHERE T2.student_name <= T1.student_name) <= 3 AND (SELECT COUNT(*) FROM students AS T3 WHERE T3.date_of_birth <= T1.date_of_birth) <= 2 ORDER BY T1.student_name, T1.date_of_birth;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.20\\\"}, \\\"ordering_operation\\\": {\\\"using_filesort\\\": true, \\\"cost_info\\\": {\\\"sort_cost\\\": \\\"1.00\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"T1\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"date_of_birth\\\"], \\\"attached_condition\\\": \\\"(((/* select#2 */ select count(0) from `test_db_case_11_1748591779`.`students` `T2` where (`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)) <= 3) and ((/* select#3 */ select count(0) from `test_db_case_11_1748591779`.`students` `T3` where (`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)) <= 2))\\\", \\\"attached_subqueries\\\": [{\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 3, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"T3\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"date_of_birth\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)\\\"}}}, {\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"T2\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_name\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)\\\"}}}]}}}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), date_of_birth DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.20\"}, \"ordering_operation\": {\"using_filesort\": true, \"cost_info\": {\"sort_cost\": \"1.00\"}, \"table\": {\"table_name\": \"T1\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\", \"date_of_birth\"], \"attached_condition\": \"(((/* select#2 */ select count(0) from `test_db_case_11_1748591779`.`students` `T2` where (`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)) <= 3) and ((/* select#3 */ select count(0) from `test_db_case_11_1748591779`.`students` `T3` where (`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)) <= 2))\", \"attached_subqueries\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"T3\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"date_of_birth\"], \"attached_condition\": \"(`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)\"}}}, {\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"T2\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_name\"], \"attached_condition\": \"(`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)\"}}}]}}}}\n\nOriginal SQL:\nSELECT T1.student_name, T1.date_of_birth FROM students AS T1 WHERE (SELECT COUNT(*) FROM students AS T2 WHERE T2.student_name <= T1.student_name) <= 3 AND (SELECT COUNT(*) FROM students AS T3 WHERE T3.date_of_birth <= T1.date_of_birth) <= 2 ORDER BY T1.student_name, T1.date_of_birth;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_name, date_of_birth FROM (SELECT student_name, date_of_birth, COUNT(*) OVER (ORDER BY student_name RANGE UNBOUNDED PRECEDING) as name_count, COUNT(*) OVER (ORDER BY date_of_birth RANGE UNBOUNDED PRECEDING) as birth_count FROM students) ranked WHERE name_count <= 3 AND birth_count <= 2 ORDER BY student_name, date_of_birth;"
                    }
                ]
            },
            {
                "case_id": "11",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"11\", \"description\": \"一个包含UNION的SELECT语句，其中WHERE子句包含LIKE前缀匹配，可以改写为范围查询。\", \"difficulty_level\": \"1\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), major VARCHAR(100) );\"], \"sql\": \"SELECT * FROM students WHERE student_name LIKE 'John%' UNION SELECT * FROM students WHERE student_name LIKE 'Jane%';\", \"explain\": \"{\\\"query_block\\\": {\\\"union_result\\\": {\\\"using_temporary_table\\\": true, \\\"table_name\\\": \\\"<union1,2>\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"query_specifications\\\": [{\\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"208\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"major\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_12_1748591779`.`students`.`student_name` like 'John%')\\\"}}}, {\\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"208\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"major\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_12_1748591779`.`students`.`student_name` like 'Jane%')\\\"}}}]}}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), major VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": {\"union_result\": {\"using_temporary_table\": true, \"table_name\": \"<union1,2>\", \"access_type\": \"ALL\", \"query_specifications\": [{\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"208\"}, \"used_columns\": [\"student_id\", \"student_name\", \"major\"], \"attached_condition\": \"(`test_db_case_12_1748591779`.`students`.`student_name` like 'John%')\"}}}, {\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"208\"}, \"used_columns\": [\"student_id\", \"student_name\", \"major\"], \"attached_condition\": \"(`test_db_case_12_1748591779`.`students`.`student_name` like 'Jane%')\"}}}]}}}\n\nOriginal SQL:\nSELECT * FROM students WHERE student_name LIKE 'John%' UNION SELECT * FROM students WHERE student_name LIKE 'Jane%';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM students WHERE student_name LIKE 'John%' OR student_name LIKE 'Jane%';"
                    }
                ]
            },
            {
                "case_id": "12",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"12\", \"description\": \"一个包含UNION的SELECT语句，外部查询包含LIMIT子句，可以下推到UNION的各个分支中。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE users ( id INT PRIMARY KEY, name VARCHAR(100), reg_date DATE );\", \"CREATE TABLE articles ( id INT PRIMARY KEY, title VARCHAR(255), publish_time DATETIME );\"], \"sql\": \"SELECT * FROM (  (SELECT name FROM users ORDER BY reg_date DESC)  UNION  (SELECT title FROM articles ORDER BY publish_time DESC) ) AS mixed  ORDER BY name LIMIT 5;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"15.00\\\"}, \\\"ordering_operation\\\": {\\\"using_filesort\\\": true, \\\"cost_info\\\": {\\\"sort_cost\\\": \\\"4.00\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"mixed\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 4, \\\"rows_produced_per_join\\\": 4, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"10.20\\\", \\\"eval_cost\\\": \\\"0.80\\\", \\\"prefix_cost\\\": \\\"11.00\\\", \\\"data_read_per_join\\\": \\\"1K\\\"}, \\\"used_columns\\\": [\\\"name\\\"], \\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"union_result\\\": {\\\"using_temporary_table\\\": true, \\\"table_name\\\": \\\"<union2,3>\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"query_specifications\\\": [{\\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"users\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"name\\\", \\\"reg_date\\\"]}}}, {\\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 3, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"articles\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"272\\\"}, \\\"used_columns\\\": [\\\"title\\\", \\\"publish_time\\\"]}}}]}}}}}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE users ( id INT PRIMARY KEY, name VARCHAR(100), reg_date DATE );\nCREATE TABLE articles ( id INT PRIMARY KEY, title VARCHAR(255), publish_time DATETIME );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"15.00\"}, \"ordering_operation\": {\"using_filesort\": true, \"cost_info\": {\"sort_cost\": \"4.00\"}, \"table\": {\"table_name\": \"mixed\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 4, \"rows_produced_per_join\": 4, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"10.20\", \"eval_cost\": \"0.80\", \"prefix_cost\": \"11.00\", \"data_read_per_join\": \"1K\"}, \"used_columns\": [\"name\"], \"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"union_result\": {\"using_temporary_table\": true, \"table_name\": \"<union2,3>\", \"access_type\": \"ALL\", \"query_specifications\": [{\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"users\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"name\", \"reg_date\"]}}}, {\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"articles\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"272\"}, \"used_columns\": [\"title\", \"publish_time\"]}}}]}}}}}}\n\nOriginal SQL:\nSELECT * FROM (  (SELECT name FROM users ORDER BY reg_date DESC)  UNION  (SELECT title FROM articles ORDER BY publish_time DESC) ) AS mixed  ORDER BY name LIMIT 5;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT name FROM users UNION SELECT title FROM articles ORDER BY name LIMIT 5;"
                    }
                ]
            },
            {
                "case_id": "13",
                "case_weight": 0,
                "case_content": "{\"case_id\": \"13\", \"description\": \"一个包含IN子查询的SELECT语句，但子查询的结果行数不保证小于等于1，因此不能转换为标量子查询。\", \"difficulty_level\": \"N/A\", \"create_table_statements\": [\"CREATE TABLE students ( id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\", \"CREATE TABLE A ( id INT PRIMARY KEY, value VARCHAR(100) );\", \"CREATE TABLE B ( id INT PRIMARY KEY, value VARCHAR(100) );\"], \"sql\": \"SELECT * FROM students WHERE id IN ( SELECT id FROM (SELECT id FROM A LIMIT 1) AS subA UNION ALL SELECT id FROM (SELECT id FROM B LIMIT 1) AS subB );\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"id\\\", \\\"student_name\\\"], \\\"attached_condition\\\": \\\"<in_optimizer>(`test_db_case_14_1748591779`.`students`.`id`,<exists>(/* select#2 */ select 1 from (/* select#3 */ select `test_db_case_14_1748591779`.`A`.`id` AS `id` from `test_db_case_14_1748591779`.`A` limit 1) `subA` where (<cache>(`test_db_case_14_1748591779`.`students`.`id`) = NULL) union all /* select#4 */ select 1 from (/* select#5 */ select `test_db_case_14_1748591779`.`B`.`id` AS `id` from `test_db_case_14_1748591779`.`B` limit 1) `subB` where (<cache>(`test_db_case_14_1748591779`.`students`.`id`) = NULL)))\\\", \\\"attached_subqueries\\\": [{\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"union_result\\\": {\\\"using_temporary_table\\\": false, \\\"query_specifications\\\": [{\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"message\\\": \\\"no matching row in const table\\\", \\\"table\\\": {\\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 3, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"A\\\", \\\"access_type\\\": \\\"index\\\", \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"using_index\\\": true, \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"id\\\"]}}}}}}, {\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 4, \\\"message\\\": \\\"no matching row in const table\\\", \\\"table\\\": {\\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 5, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"B\\\", \\\"access_type\\\": \\\"index\\\", \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"using_index\\\": true, \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"id\\\"]}}}}}}]}}}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\nCREATE TABLE A ( id INT PRIMARY KEY, value VARCHAR(100) );\nCREATE TABLE B ( id INT PRIMARY KEY, value VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"id\", \"student_name\"], \"attached_condition\": \"<in_optimizer>(`test_db_case_14_1748591779`.`students`.`id`,<exists>(/* select#2 */ select 1 from (/* select#3 */ select `test_db_case_14_1748591779`.`A`.`id` AS `id` from `test_db_case_14_1748591779`.`A` limit 1) `subA` where (<cache>(`test_db_case_14_1748591779`.`students`.`id`) = NULL) union all /* select#4 */ select 1 from (/* select#5 */ select `test_db_case_14_1748591779`.`B`.`id` AS `id` from `test_db_case_14_1748591779`.`B` limit 1) `subB` where (<cache>(`test_db_case_14_1748591779`.`students`.`id`) = NULL)))\", \"attached_subqueries\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"union_result\": {\"using_temporary_table\": false, \"query_specifications\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 2, \"message\": \"no matching row in const table\", \"table\": {\"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"A\", \"access_type\": \"index\", \"key\": \"PRIMARY\", \"used_key_parts\": [\"id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"using_index\": true, \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"id\"]}}}}}}, {\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 4, \"message\": \"no matching row in const table\", \"table\": {\"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 5, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"B\", \"access_type\": \"index\", \"key\": \"PRIMARY\", \"used_key_parts\": [\"id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"using_index\": true, \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"id\"]}}}}}}]}}}}\n\nOriginal SQL:\nSELECT * FROM students WHERE id IN ( SELECT id FROM (SELECT id FROM A LIMIT 1) AS subA UNION ALL SELECT id FROM (SELECT id FROM B LIMIT 1) AS subB );\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM students WHERE id = (SELECT id FROM A LIMIT 1) OR id = (SELECT id FROM B LIMIT 1);"
                    }
                ]
            }
        ]
    },
    {
        "indicator_name": "optimization_depth.jsonl",
        "indicator_weight": 4,
        "evaluation_type": "subjective",
        "case_pass_count": 16,
        "case_wrong_count": 13,
        "correct_rate": 0.55,
        "case_datas": [
            {
                "case_id": "1",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"1\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，子查询中存在多余的投影列，这些列在外层查询中没有被使用。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\"], \"sql\": \"SELECT student_name FROM students WHERE student_id IN ( SELECT student_id FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM students ) AS inner_dt2 ) AS inner_dt1 ) AS outer_dt );\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.40\\\"}, \\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\"]}}, {\\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [\\\"test_db_case_1_1748591779.students.student_id\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"using_index\\\": true, \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"2.40\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\"]}}]}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"1\", \"rationale\": \"投影下推：子查询 `SELECT student_id, gender FROM (SELECT student_id, gender FROM students) AS inner_dt2` 中的 `gender` 列在外层 `SELECT student_id FROM outer_dt` 子查询中没有被使用，因此可以移除。同样，更内层的子查询也可以移除冗余的 `gender` 列，以减少IO和网络代价。\"}]}}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.40\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"possible_keys\": [\"PRIMARY\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\"]}}, {\"table\": {\"table_name\": \"students\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"ref\": [\"test_db_case_1_1748591779.students.student_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"using_index\": true, \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"2.40\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\"]}}]}}\n\nOriginal SQL:\nSELECT student_name FROM students WHERE student_id IN ( SELECT student_id FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM students ) AS inner_dt2 ) AS inner_dt1 ) AS outer_dt );\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_name FROM students;"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "2",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"2\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，其中外部的WHERE子句条件可以下推到最内层的子查询中。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\", \"CREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\"], \"sql\": \"SELECT outer_dt.teacher_id, outer_dt.teacher_name FROM students JOIN ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name FROM teachers WHERE teacher_name >= 'Dr. ' AND teacher_name < 'Dr.!' ) AS inner_dt1 ) AS inner_dt2 ) AS outer_dt ON students.teacher_id = outer_dt.teacher_id;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.40\\\"}, \\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"teacher_id\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_2_1749458126`.`students`.`teacher_id` is not null)\\\"}}, {\\\"table\\\": {\\\"table_name\\\": \\\"teachers\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"teacher_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [\\\"test_db_case_2_1749458126.students.teacher_id\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"2.40\\\", \\\"data_read_per_join\\\": \\\"208\\\"}, \\\"used_columns\\\": [\\\"teacher_id\\\", \\\"teacher_name\\\"], \\\"attached_condition\\\": \\\"((`test_db_case_2_1749458126`.`teachers`.`teacher_name` >= 'Dr. ') and (`test_db_case_2_1749458126`.`teachers`.`teacher_name` < 'Dr.!'))\\\"}}]}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"谓词下推：外部查询的 `WHERE teacher_name LIKE 'Dr. %'` 条件被替换为 `WHERE teacher_name >= 'Dr. ' AND teacher_name < 'Dr.!'`。这个新的范围条件依然可以下推到最内层的子查询 `SELECT teacher_id, teacher_name FROM teachers` 中，从而在数据源处尽早过滤不必要的数据，减少处理量。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"LIKE前缀查询优化：原始SQL文本中存在`LIKE 'Dr.%'`形式的前缀匹配条件，符合`rule0012`的改写流程，可以将其显式改写为`teacher_name >= 'Dr. ' AND teacher_name < 'Dr.!'`的范围查询，以利用索引的有序性。\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\nCREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.40\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"teacher_id\"], \"attached_condition\": \"(`test_db_case_2_1749458126`.`students`.`teacher_id` is not null)\"}}, {\"table\": {\"table_name\": \"teachers\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"teacher_id\"], \"key_length\": \"4\", \"ref\": [\"test_db_case_2_1749458126.students.teacher_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"2.40\", \"data_read_per_join\": \"208\"}, \"used_columns\": [\"teacher_id\", \"teacher_name\"], \"attached_condition\": \"((`test_db_case_2_1749458126`.`teachers`.`teacher_name` >= 'Dr. ') and (`test_db_case_2_1749458126`.`teachers`.`teacher_name` < 'Dr.!'))\"}}]}}\n\nOriginal SQL:\nSELECT outer_dt.teacher_id, outer_dt.teacher_name FROM students JOIN ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name FROM teachers WHERE teacher_name >= 'Dr. ' AND teacher_name < 'Dr.!' ) AS inner_dt1 ) AS inner_dt2 ) AS outer_dt ON students.teacher_id = outer_dt.teacher_id;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT t.teacher_id, t.teacher_name FROM students s JOIN teachers t ON s.teacher_id = t.teacher_id WHERE t.teacher_name >= 'Dr. ' AND t.teacher_name < 'Dr.!';"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "2",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"2\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，其中外部的WHERE子句条件可以下推到最内层的子查询中。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\", \"CREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\"], \"sql\": \"SELECT outer_dt.teacher_id, outer_dt.teacher_name FROM students JOIN ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name FROM teachers WHERE teacher_name >= 'Dr. ' AND teacher_name < 'Dr.!' ) AS inner_dt1 ) AS inner_dt2 ) AS outer_dt ON students.teacher_id = outer_dt.teacher_id;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.40\\\"}, \\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"teacher_id\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_2_1749458126`.`students`.`teacher_id` is not null)\\\"}}, {\\\"table\\\": {\\\"table_name\\\": \\\"teachers\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"teacher_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [\\\"test_db_case_2_1749458126.students.teacher_id\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"2.40\\\", \\\"data_read_per_join\\\": \\\"208\\\"}, \\\"used_columns\\\": [\\\"teacher_id\\\", \\\"teacher_name\\\"], \\\"attached_condition\\\": \\\"((`test_db_case_2_1749458126`.`teachers`.`teacher_name` >= 'Dr. ') and (`test_db_case_2_1749458126`.`teachers`.`teacher_name` < 'Dr.!'))\\\"}}]}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"谓词下推：外部查询的 `WHERE teacher_name LIKE 'Dr. %'` 条件被替换为 `WHERE teacher_name >= 'Dr. ' AND teacher_name < 'Dr.!'`。这个新的范围条件依然可以下推到最内层的子查询 `SELECT teacher_id, teacher_name FROM teachers` 中，从而在数据源处尽早过滤不必要的数据，减少处理量。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"LIKE前缀查询优化：原始SQL文本中存在`LIKE 'Dr.%'`形式的前缀匹配条件，符合`rule0012`的改写流程，可以将其显式改写为`teacher_name >= 'Dr. ' AND teacher_name < 'Dr.!'`的范围查询，以利用索引的有序性。\"}]}}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\nCREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.40\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"teacher_id\"], \"attached_condition\": \"(`test_db_case_2_1749458126`.`students`.`teacher_id` is not null)\"}}, {\"table\": {\"table_name\": \"teachers\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"teacher_id\"], \"key_length\": \"4\", \"ref\": [\"test_db_case_2_1749458126.students.teacher_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"2.40\", \"data_read_per_join\": \"208\"}, \"used_columns\": [\"teacher_id\", \"teacher_name\"], \"attached_condition\": \"((`test_db_case_2_1749458126`.`teachers`.`teacher_name` >= 'Dr. ') and (`test_db_case_2_1749458126`.`teachers`.`teacher_name` < 'Dr.!'))\"}}]}}\n\nOriginal SQL:\nSELECT outer_dt.teacher_id, outer_dt.teacher_name FROM students JOIN ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name FROM teachers WHERE teacher_name >= 'Dr. ' AND teacher_name < 'Dr.!' ) AS inner_dt1 ) AS inner_dt2 ) AS outer_dt ON students.teacher_id = outer_dt.teacher_id;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT t.teacher_id, t.teacher_name FROM students s JOIN teachers t ON s.teacher_id = t.teacher_id WHERE t.teacher_name >= 'Dr. ' AND t.teacher_name < 'Dr.!';"
                    }
                ],
                "rule_id": "2"
            },
            {
                "case_id": "3",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"3\", \"description\": \"一个包含多层嵌套子查询的JOIN语句，其中外部的WHERE子句条件可以下推到最内层的子查询中，同时存在可以投影下推的冗余列和可以进行LIKE前缀优化的条件。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, major VARCHAR(100), enroll_count INT );\", \"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE, enrollment_year INT );\", \"CREATE TABLE courses ( course_id INT AUTO_INCREMENT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, course_credits INT, department_id INT );\", \"CREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department_id INT );\", \"CREATE TABLE departments ( department_id INT AUTO_INCREMENT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100) );\"], \"sql\": \"SELECT initial_students.student_id, initial_students.student_name, final_courses.course_name, final_enrollments.enrollment_date, final_teachers.teacher_name FROM (SELECT student_id, student_name, major, enroll_count FROM students WHERE enroll_count > 5) AS initial_students JOIN (SELECT e.student_id, e.course_id, e.enrollment_date FROM enrollments e WHERE e.enrollment_year = 2024) AS final_enrollments ON initial_students.student_id = final_enrollments.student_id JOIN (SELECT course_id, course_name, department_id FROM courses WHERE course_credits >= 3) AS final_courses ON final_enrollments.course_id = final_courses.course_id LEFT JOIN (SELECT t.teacher_id, t.teacher_name FROM teachers t JOIN departments d ON t.department_id = d.department_id WHERE d.location = 'Building A') AS final_teachers ON final_courses.department_id = final_teachers.teacher_id WHERE initial_students.major = 'Physics' AND final_enrollments.enrollment_date BETWEEN '2024-01-01' AND '2024-06-30' AND final_courses.course_name LIKE 'Advanced %';\", \"explain\": \"{\\\"query_block\\\": { \\\"select_id\\\": 1, \\\"cost_info\\\": { \\\"query_cost\\\": \\\"6.00\\\" }, \\\"nested_loop\\\": [ { \\\"table\\\": { \\\"table_name\\\": \\\"e\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"24\\\" }, \\\"used_columns\\\": [ \\\"student_id\\\", \\\"course_id\\\", \\\"enrollment_date\\\", \\\"enrollment_year\\\" ], \\\"attached_condition\\\": \\\"(((`test_db_case_5_1749718637`.`e`.`enrollment_year` = 2024) and (`test_db_case_5_1749718637`.`e`.`enrollment_date` between '2024-01-01' and '2024-06-30')) and (`test_db_case_5_1749718637`.`e`.`course_id` is not null))\\\" } }, { \\\"table\\\": { \\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"student_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [ \\\"test_db_case_5_1749718637.e.student_id\\\" ], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"2.40\\\", \\\"data_read_per_join\\\": \\\"216\\\" }, \\\"used_columns\\\": [ \\\"student_id\\\", \\\"student_name\\\", \\\"major\\\", \\\"enroll_count\\\" ], \\\"attached_condition\\\": \\\"((`test_db_case_5_1749718637`.`students`.`major` = 'Physics') and (`test_db_case_5_1749718637`.`students`.`enroll_count` > 5))\\\" } }, { \\\"table\\\": { \\\"table_name\\\": \\\"courses\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"course_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [ \\\"test_db_case_5_1749718637.e.course_id\\\" ], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"3.60\\\", \\\"data_read_per_join\\\": \\\"272\\\" }, \\\"used_columns\\\": [ \\\"course_id\\\", \\\"course_name\\\", \\\"course_credits\\\", \\\"department_id\\\" ], \\\"attached_condition\\\": \\\"((`test_db_case_5_1749718637`.`courses`.`course_name` like 'Advanced %') and (`test_db_case_5_1749718637`.`courses`.`course_credits` >= 3))\\\" } }, { \\\"table\\\": { \\\"table_name\\\": \\\"t\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"teacher_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [ \\\"test_db_case_5_1749718637.courses.department_id\\\" ], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"4.80\\\", \\\"data_read_per_join\\\": \\\"112\\\" }, \\\"used_columns\\\": [ \\\"teacher_id\\\", \\\"teacher_name\\\", \\\"department_id\\\" ] } }, { \\\"table\\\": { \\\"table_name\\\": \\\"d\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"department_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [ \\\"test_db_case_5_1749718637.t.department_id\\\" ], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"6.00\\\", \\\"data_read_per_join\\\": \\\"208\\\" }, \\\"used_columns\\\": [ \\\"department_id\\\", \\\"location\\\" ], \\\"attached_condition\\\": \\\"<if>(is_not_null_compl(t..d), (`test_db_case_5_1749718637`.`d`.`location` = 'Building A'), true)\\\" } } ] } }\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"谓词下推：外部查询的 `WHERE initial_students.major = 'Physics'` 条件可以下推到 `initial_students` 子查询的 `students` 表中。同样，`final_enrollments.enrollment_date BETWEEN '2024-01-01' AND '2024-06-30'` 可以下推到 `final_enrollments` 子查询的 `enrollments` 表中。`final_courses.course_name LIKE 'Advanced %'` 可以下推到 `final_courses` 子查询的 `courses` 表中。以及 `final_teachers` 子查询中的 `d.location = 'Building A'` 也是谓词下推的体现。这些下推操作旨在尽早过滤数据，减少处理量。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"LIKE前缀查询优化：`final_courses.course_name LIKE 'Advanced %'` 形式的前缀匹配在下推到 `final_courses` 子查询内部后，可以改写为 `course_name >= 'Advanced ' AND course_name < 'Advancee'`（假设下一个字典序值为'Advancee'）的范围查询，以利用索引的有序性，提升查询性能。\"}, {\"rule_id\": \"3\", \"difficulty_level\": \"1\", \"rationale\": \"投影下推：检查各个子查询的投影列，例如 `initial_students` 子查询中的 `enroll_count`，如果它仅用于子查询内部的过滤而未在最终 `SELECT` 列表中或外部关联中使用，则可以从投影中移除。类似地，`final_teachers` 子查询中如果 `teacher_id` 仅用于关联而未在最终SELECT列表中使用，并且 `departments` 表的 `department_name` 和 `location` 仅用于子查询内部过滤，则这些冗余列可以移除，以减少IO和网络代价。\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, major VARCHAR(100), enroll_count INT );\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE, enrollment_year INT );\nCREATE TABLE courses ( course_id INT AUTO_INCREMENT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, course_credits INT, department_id INT );\nCREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department_id INT );\nCREATE TABLE departments ( department_id INT AUTO_INCREMENT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": { \"select_id\": 1, \"cost_info\": { \"query_cost\": \"6.00\" }, \"nested_loop\": [ { \"table\": { \"table_name\": \"e\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\" }, \"used_columns\": [ \"student_id\", \"course_id\", \"enrollment_date\", \"enrollment_year\" ], \"attached_condition\": \"(((`test_db_case_5_1749718637`.`e`.`enrollment_year` = 2024) and (`test_db_case_5_1749718637`.`e`.`enrollment_date` between '2024-01-01' and '2024-06-30')) and (`test_db_case_5_1749718637`.`e`.`course_id` is not null))\" } }, { \"table\": { \"table_name\": \"students\", \"access_type\": \"eq_ref\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"student_id\" ], \"key_length\": \"4\", \"ref\": [ \"test_db_case_5_1749718637.e.student_id\" ], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"2.40\", \"data_read_per_join\": \"216\" }, \"used_columns\": [ \"student_id\", \"student_name\", \"major\", \"enroll_count\" ], \"attached_condition\": \"((`test_db_case_5_1749718637`.`students`.`major` = 'Physics') and (`test_db_case_5_1749718637`.`students`.`enroll_count` > 5))\" } }, { \"table\": { \"table_name\": \"courses\", \"access_type\": \"eq_ref\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"course_id\" ], \"key_length\": \"4\", \"ref\": [ \"test_db_case_5_1749718637.e.course_id\" ], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"3.60\", \"data_read_per_join\": \"272\" }, \"used_columns\": [ \"course_id\", \"course_name\", \"course_credits\", \"department_id\" ], \"attached_condition\": \"((`test_db_case_5_1749718637`.`courses`.`course_name` like 'Advanced %') and (`test_db_case_5_1749718637`.`courses`.`course_credits` >= 3))\" } }, { \"table\": { \"table_name\": \"t\", \"access_type\": \"eq_ref\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"teacher_id\" ], \"key_length\": \"4\", \"ref\": [ \"test_db_case_5_1749718637.courses.department_id\" ], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"4.80\", \"data_read_per_join\": \"112\" }, \"used_columns\": [ \"teacher_id\", \"teacher_name\", \"department_id\" ] } }, { \"table\": { \"table_name\": \"d\", \"access_type\": \"eq_ref\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"department_id\" ], \"key_length\": \"4\", \"ref\": [ \"test_db_case_5_1749718637.t.department_id\" ], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"6.00\", \"data_read_per_join\": \"208\" }, \"used_columns\": [ \"department_id\", \"location\" ], \"attached_condition\": \"<if>(is_not_null_compl(t..d), (`test_db_case_5_1749718637`.`d`.`location` = 'Building A'), true)\" } } ] } }\n\nOriginal SQL:\nSELECT initial_students.student_id, initial_students.student_name, final_courses.course_name, final_enrollments.enrollment_date, final_teachers.teacher_name FROM (SELECT student_id, student_name, major, enroll_count FROM students WHERE enroll_count > 5) AS initial_students JOIN (SELECT e.student_id, e.course_id, e.enrollment_date FROM enrollments e WHERE e.enrollment_year = 2024) AS final_enrollments ON initial_students.student_id = final_enrollments.student_id JOIN (SELECT course_id, course_name, department_id FROM courses WHERE course_credits >= 3) AS final_courses ON final_enrollments.course_id = final_courses.course_id LEFT JOIN (SELECT t.teacher_id, t.teacher_name FROM teachers t JOIN departments d ON t.department_id = d.department_id WHERE d.location = 'Building A') AS final_teachers ON final_courses.department_id = final_teachers.teacher_id WHERE initial_students.major = 'Physics' AND final_enrollments.enrollment_date BETWEEN '2024-01-01' AND '2024-06-30' AND final_courses.course_name LIKE 'Advanced %';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT s.student_id, s.student_name, c.course_name, e.enrollment_date, t.teacher_name FROM students s JOIN enrollments e ON s.student_id = e.student_id AND e.enrollment_year = 2024 AND e.enrollment_date BETWEEN '2024-01-01' AND '2024-06-30' JOIN courses c ON e.course_id = c.course_id AND c.course_name LIKE 'Advanced %' AND c.course_credits >= 3 LEFT JOIN teachers t ON c.department_id = t.department_id LEFT JOIN departments d ON t.department_id = d.department_id AND d.location = 'Building A' WHERE s.major = 'Physics' AND s.enroll_count > 5;"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"description\": \"一个包含多层嵌套子查询的JOIN语句，其中外部的WHERE子句条件可以下推到最内层的子查询中，同时存在可以投影下推的冗余列和可以进行LIKE前缀优化的条件。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, major VARCHAR(100), enroll_count INT );\", \"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE, enrollment_year INT );\", \"CREATE TABLE courses ( course_id INT AUTO_INCREMENT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, course_credits INT, department_id INT );\", \"CREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department_id INT );\", \"CREATE TABLE departments ( department_id INT AUTO_INCREMENT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100) );\"], \"sql\": \"SELECT initial_students.student_id, initial_students.student_name, final_courses.course_name, final_enrollments.enrollment_date, final_teachers.teacher_name FROM (SELECT student_id, student_name, major, enroll_count FROM students WHERE enroll_count > 5) AS initial_students JOIN (SELECT e.student_id, e.course_id, e.enrollment_date FROM enrollments e WHERE e.enrollment_year = 2024) AS final_enrollments ON initial_students.student_id = final_enrollments.student_id JOIN (SELECT course_id, course_name, department_id FROM courses WHERE course_credits >= 3) AS final_courses ON final_enrollments.course_id = final_courses.course_id LEFT JOIN (SELECT t.teacher_id, t.teacher_name FROM teachers t JOIN departments d ON t.department_id = d.department_id WHERE d.location = 'Building A') AS final_teachers ON final_courses.department_id = final_teachers.teacher_id WHERE initial_students.major = 'Physics' AND final_enrollments.enrollment_date BETWEEN '2024-01-01' AND '2024-06-30' AND final_courses.course_name LIKE 'Advanced %';\", \"explain\": \"{\\\"query_block\\\": { \\\"select_id\\\": 1, \\\"cost_info\\\": { \\\"query_cost\\\": \\\"6.00\\\" }, \\\"nested_loop\\\": [ { \\\"table\\\": { \\\"table_name\\\": \\\"e\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"24\\\" }, \\\"used_columns\\\": [ \\\"student_id\\\", \\\"course_id\\\", \\\"enrollment_date\\\", \\\"enrollment_year\\\" ], \\\"attached_condition\\\": \\\"(((`test_db_case_5_1749718637`.`e`.`enrollment_year` = 2024) and (`test_db_case_5_1749718637`.`e`.`enrollment_date` between '2024-01-01' and '2024-06-30')) and (`test_db_case_5_1749718637`.`e`.`course_id` is not null))\\\" } }, { \\\"table\\\": { \\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"student_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [ \\\"test_db_case_5_1749718637.e.student_id\\\" ], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"2.40\\\", \\\"data_read_per_join\\\": \\\"216\\\" }, \\\"used_columns\\\": [ \\\"student_id\\\", \\\"student_name\\\", \\\"major\\\", \\\"enroll_count\\\" ], \\\"attached_condition\\\": \\\"((`test_db_case_5_1749718637`.`students`.`major` = 'Physics') and (`test_db_case_5_1749718637`.`students`.`enroll_count` > 5))\\\" } }, { \\\"table\\\": { \\\"table_name\\\": \\\"courses\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"course_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [ \\\"test_db_case_5_1749718637.e.course_id\\\" ], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"3.60\\\", \\\"data_read_per_join\\\": \\\"272\\\" }, \\\"used_columns\\\": [ \\\"course_id\\\", \\\"course_name\\\", \\\"course_credits\\\", \\\"department_id\\\" ], \\\"attached_condition\\\": \\\"((`test_db_case_5_1749718637`.`courses`.`course_name` like 'Advanced %') and (`test_db_case_5_1749718637`.`courses`.`course_credits` >= 3))\\\" } }, { \\\"table\\\": { \\\"table_name\\\": \\\"t\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"teacher_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [ \\\"test_db_case_5_1749718637.courses.department_id\\\" ], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"4.80\\\", \\\"data_read_per_join\\\": \\\"112\\\" }, \\\"used_columns\\\": [ \\\"teacher_id\\\", \\\"teacher_name\\\", \\\"department_id\\\" ] } }, { \\\"table\\\": { \\\"table_name\\\": \\\"d\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"department_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [ \\\"test_db_case_5_1749718637.t.department_id\\\" ], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"6.00\\\", \\\"data_read_per_join\\\": \\\"208\\\" }, \\\"used_columns\\\": [ \\\"department_id\\\", \\\"location\\\" ], \\\"attached_condition\\\": \\\"<if>(is_not_null_compl(t..d), (`test_db_case_5_1749718637`.`d`.`location` = 'Building A'), true)\\\" } } ] } }\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"谓词下推：外部查询的 `WHERE initial_students.major = 'Physics'` 条件可以下推到 `initial_students` 子查询的 `students` 表中。同样，`final_enrollments.enrollment_date BETWEEN '2024-01-01' AND '2024-06-30'` 可以下推到 `final_enrollments` 子查询的 `enrollments` 表中。`final_courses.course_name LIKE 'Advanced %'` 可以下推到 `final_courses` 子查询的 `courses` 表中。以及 `final_teachers` 子查询中的 `d.location = 'Building A'` 也是谓词下推的体现。这些下推操作旨在尽早过滤数据，减少处理量。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"LIKE前缀查询优化：`final_courses.course_name LIKE 'Advanced %'` 形式的前缀匹配在下推到 `final_courses` 子查询内部后，可以改写为 `course_name >= 'Advanced ' AND course_name < 'Advancee'`（假设下一个字典序值为'Advancee'）的范围查询，以利用索引的有序性，提升查询性能。\"}, {\"rule_id\": \"3\", \"difficulty_level\": \"1\", \"rationale\": \"投影下推：检查各个子查询的投影列，例如 `initial_students` 子查询中的 `enroll_count`，如果它仅用于子查询内部的过滤而未在最终 `SELECT` 列表中或外部关联中使用，则可以从投影中移除。类似地，`final_teachers` 子查询中如果 `teacher_id` 仅用于关联而未在最终SELECT列表中使用，并且 `departments` 表的 `department_name` 和 `location` 仅用于子查询内部过滤，则这些冗余列可以移除，以减少IO和网络代价。\"}]}}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, major VARCHAR(100), enroll_count INT );\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE, enrollment_year INT );\nCREATE TABLE courses ( course_id INT AUTO_INCREMENT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, course_credits INT, department_id INT );\nCREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department_id INT );\nCREATE TABLE departments ( department_id INT AUTO_INCREMENT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": { \"select_id\": 1, \"cost_info\": { \"query_cost\": \"6.00\" }, \"nested_loop\": [ { \"table\": { \"table_name\": \"e\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\" }, \"used_columns\": [ \"student_id\", \"course_id\", \"enrollment_date\", \"enrollment_year\" ], \"attached_condition\": \"(((`test_db_case_5_1749718637`.`e`.`enrollment_year` = 2024) and (`test_db_case_5_1749718637`.`e`.`enrollment_date` between '2024-01-01' and '2024-06-30')) and (`test_db_case_5_1749718637`.`e`.`course_id` is not null))\" } }, { \"table\": { \"table_name\": \"students\", \"access_type\": \"eq_ref\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"student_id\" ], \"key_length\": \"4\", \"ref\": [ \"test_db_case_5_1749718637.e.student_id\" ], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"2.40\", \"data_read_per_join\": \"216\" }, \"used_columns\": [ \"student_id\", \"student_name\", \"major\", \"enroll_count\" ], \"attached_condition\": \"((`test_db_case_5_1749718637`.`students`.`major` = 'Physics') and (`test_db_case_5_1749718637`.`students`.`enroll_count` > 5))\" } }, { \"table\": { \"table_name\": \"courses\", \"access_type\": \"eq_ref\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"course_id\" ], \"key_length\": \"4\", \"ref\": [ \"test_db_case_5_1749718637.e.course_id\" ], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"3.60\", \"data_read_per_join\": \"272\" }, \"used_columns\": [ \"course_id\", \"course_name\", \"course_credits\", \"department_id\" ], \"attached_condition\": \"((`test_db_case_5_1749718637`.`courses`.`course_name` like 'Advanced %') and (`test_db_case_5_1749718637`.`courses`.`course_credits` >= 3))\" } }, { \"table\": { \"table_name\": \"t\", \"access_type\": \"eq_ref\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"teacher_id\" ], \"key_length\": \"4\", \"ref\": [ \"test_db_case_5_1749718637.courses.department_id\" ], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"4.80\", \"data_read_per_join\": \"112\" }, \"used_columns\": [ \"teacher_id\", \"teacher_name\", \"department_id\" ] } }, { \"table\": { \"table_name\": \"d\", \"access_type\": \"eq_ref\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"department_id\" ], \"key_length\": \"4\", \"ref\": [ \"test_db_case_5_1749718637.t.department_id\" ], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"6.00\", \"data_read_per_join\": \"208\" }, \"used_columns\": [ \"department_id\", \"location\" ], \"attached_condition\": \"<if>(is_not_null_compl(t..d), (`test_db_case_5_1749718637`.`d`.`location` = 'Building A'), true)\" } } ] } }\n\nOriginal SQL:\nSELECT initial_students.student_id, initial_students.student_name, final_courses.course_name, final_enrollments.enrollment_date, final_teachers.teacher_name FROM (SELECT student_id, student_name, major, enroll_count FROM students WHERE enroll_count > 5) AS initial_students JOIN (SELECT e.student_id, e.course_id, e.enrollment_date FROM enrollments e WHERE e.enrollment_year = 2024) AS final_enrollments ON initial_students.student_id = final_enrollments.student_id JOIN (SELECT course_id, course_name, department_id FROM courses WHERE course_credits >= 3) AS final_courses ON final_enrollments.course_id = final_courses.course_id LEFT JOIN (SELECT t.teacher_id, t.teacher_name FROM teachers t JOIN departments d ON t.department_id = d.department_id WHERE d.location = 'Building A') AS final_teachers ON final_courses.department_id = final_teachers.teacher_id WHERE initial_students.major = 'Physics' AND final_enrollments.enrollment_date BETWEEN '2024-01-01' AND '2024-06-30' AND final_courses.course_name LIKE 'Advanced %';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT s.student_id, s.student_name, c.course_name, e.enrollment_date, t.teacher_name FROM students s JOIN enrollments e ON s.student_id = e.student_id AND e.enrollment_year = 2024 AND e.enrollment_date BETWEEN '2024-01-01' AND '2024-06-30' JOIN courses c ON e.course_id = c.course_id AND c.course_name LIKE 'Advanced %' AND c.course_credits >= 3 LEFT JOIN teachers t ON c.department_id = t.department_id LEFT JOIN departments d ON t.department_id = d.department_id AND d.location = 'Building A' WHERE s.major = 'Physics' AND s.enroll_count > 5;"
                    }
                ],
                "rule_id": "2"
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"description\": \"一个包含多层嵌套子查询的JOIN语句，其中外部的WHERE子句条件可以下推到最内层的子查询中，同时存在可以投影下推的冗余列和可以进行LIKE前缀优化的条件。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, major VARCHAR(100), enroll_count INT );\", \"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE, enrollment_year INT );\", \"CREATE TABLE courses ( course_id INT AUTO_INCREMENT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, course_credits INT, department_id INT );\", \"CREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department_id INT );\", \"CREATE TABLE departments ( department_id INT AUTO_INCREMENT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100) );\"], \"sql\": \"SELECT initial_students.student_id, initial_students.student_name, final_courses.course_name, final_enrollments.enrollment_date, final_teachers.teacher_name FROM (SELECT student_id, student_name, major, enroll_count FROM students WHERE enroll_count > 5) AS initial_students JOIN (SELECT e.student_id, e.course_id, e.enrollment_date FROM enrollments e WHERE e.enrollment_year = 2024) AS final_enrollments ON initial_students.student_id = final_enrollments.student_id JOIN (SELECT course_id, course_name, department_id FROM courses WHERE course_credits >= 3) AS final_courses ON final_enrollments.course_id = final_courses.course_id LEFT JOIN (SELECT t.teacher_id, t.teacher_name FROM teachers t JOIN departments d ON t.department_id = d.department_id WHERE d.location = 'Building A') AS final_teachers ON final_courses.department_id = final_teachers.teacher_id WHERE initial_students.major = 'Physics' AND final_enrollments.enrollment_date BETWEEN '2024-01-01' AND '2024-06-30' AND final_courses.course_name LIKE 'Advanced %';\", \"explain\": \"{\\\"query_block\\\": { \\\"select_id\\\": 1, \\\"cost_info\\\": { \\\"query_cost\\\": \\\"6.00\\\" }, \\\"nested_loop\\\": [ { \\\"table\\\": { \\\"table_name\\\": \\\"e\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"24\\\" }, \\\"used_columns\\\": [ \\\"student_id\\\", \\\"course_id\\\", \\\"enrollment_date\\\", \\\"enrollment_year\\\" ], \\\"attached_condition\\\": \\\"(((`test_db_case_5_1749718637`.`e`.`enrollment_year` = 2024) and (`test_db_case_5_1749718637`.`e`.`enrollment_date` between '2024-01-01' and '2024-06-30')) and (`test_db_case_5_1749718637`.`e`.`course_id` is not null))\\\" } }, { \\\"table\\\": { \\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"student_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [ \\\"test_db_case_5_1749718637.e.student_id\\\" ], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"2.40\\\", \\\"data_read_per_join\\\": \\\"216\\\" }, \\\"used_columns\\\": [ \\\"student_id\\\", \\\"student_name\\\", \\\"major\\\", \\\"enroll_count\\\" ], \\\"attached_condition\\\": \\\"((`test_db_case_5_1749718637`.`students`.`major` = 'Physics') and (`test_db_case_5_1749718637`.`students`.`enroll_count` > 5))\\\" } }, { \\\"table\\\": { \\\"table_name\\\": \\\"courses\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"course_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [ \\\"test_db_case_5_1749718637.e.course_id\\\" ], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"3.60\\\", \\\"data_read_per_join\\\": \\\"272\\\" }, \\\"used_columns\\\": [ \\\"course_id\\\", \\\"course_name\\\", \\\"course_credits\\\", \\\"department_id\\\" ], \\\"attached_condition\\\": \\\"((`test_db_case_5_1749718637`.`courses`.`course_name` like 'Advanced %') and (`test_db_case_5_1749718637`.`courses`.`course_credits` >= 3))\\\" } }, { \\\"table\\\": { \\\"table_name\\\": \\\"t\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"teacher_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [ \\\"test_db_case_5_1749718637.courses.department_id\\\" ], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"4.80\\\", \\\"data_read_per_join\\\": \\\"112\\\" }, \\\"used_columns\\\": [ \\\"teacher_id\\\", \\\"teacher_name\\\", \\\"department_id\\\" ] } }, { \\\"table\\\": { \\\"table_name\\\": \\\"d\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"department_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [ \\\"test_db_case_5_1749718637.t.department_id\\\" ], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"6.00\\\", \\\"data_read_per_join\\\": \\\"208\\\" }, \\\"used_columns\\\": [ \\\"department_id\\\", \\\"location\\\" ], \\\"attached_condition\\\": \\\"<if>(is_not_null_compl(t..d), (`test_db_case_5_1749718637`.`d`.`location` = 'Building A'), true)\\\" } } ] } }\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"谓词下推：外部查询的 `WHERE initial_students.major = 'Physics'` 条件可以下推到 `initial_students` 子查询的 `students` 表中。同样，`final_enrollments.enrollment_date BETWEEN '2024-01-01' AND '2024-06-30'` 可以下推到 `final_enrollments` 子查询的 `enrollments` 表中。`final_courses.course_name LIKE 'Advanced %'` 可以下推到 `final_courses` 子查询的 `courses` 表中。以及 `final_teachers` 子查询中的 `d.location = 'Building A'` 也是谓词下推的体现。这些下推操作旨在尽早过滤数据，减少处理量。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"LIKE前缀查询优化：`final_courses.course_name LIKE 'Advanced %'` 形式的前缀匹配在下推到 `final_courses` 子查询内部后，可以改写为 `course_name >= 'Advanced ' AND course_name < 'Advancee'`（假设下一个字典序值为'Advancee'）的范围查询，以利用索引的有序性，提升查询性能。\"}, {\"rule_id\": \"3\", \"difficulty_level\": \"1\", \"rationale\": \"投影下推：检查各个子查询的投影列，例如 `initial_students` 子查询中的 `enroll_count`，如果它仅用于子查询内部的过滤而未在最终 `SELECT` 列表中或外部关联中使用，则可以从投影中移除。类似地，`final_teachers` 子查询中如果 `teacher_id` 仅用于关联而未在最终SELECT列表中使用，并且 `departments` 表的 `department_name` 和 `location` 仅用于子查询内部过滤，则这些冗余列可以移除，以减少IO和网络代价。\"}]}}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, major VARCHAR(100), enroll_count INT );\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE, enrollment_year INT );\nCREATE TABLE courses ( course_id INT AUTO_INCREMENT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, course_credits INT, department_id INT );\nCREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department_id INT );\nCREATE TABLE departments ( department_id INT AUTO_INCREMENT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": { \"select_id\": 1, \"cost_info\": { \"query_cost\": \"6.00\" }, \"nested_loop\": [ { \"table\": { \"table_name\": \"e\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\" }, \"used_columns\": [ \"student_id\", \"course_id\", \"enrollment_date\", \"enrollment_year\" ], \"attached_condition\": \"(((`test_db_case_5_1749718637`.`e`.`enrollment_year` = 2024) and (`test_db_case_5_1749718637`.`e`.`enrollment_date` between '2024-01-01' and '2024-06-30')) and (`test_db_case_5_1749718637`.`e`.`course_id` is not null))\" } }, { \"table\": { \"table_name\": \"students\", \"access_type\": \"eq_ref\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"student_id\" ], \"key_length\": \"4\", \"ref\": [ \"test_db_case_5_1749718637.e.student_id\" ], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"2.40\", \"data_read_per_join\": \"216\" }, \"used_columns\": [ \"student_id\", \"student_name\", \"major\", \"enroll_count\" ], \"attached_condition\": \"((`test_db_case_5_1749718637`.`students`.`major` = 'Physics') and (`test_db_case_5_1749718637`.`students`.`enroll_count` > 5))\" } }, { \"table\": { \"table_name\": \"courses\", \"access_type\": \"eq_ref\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"course_id\" ], \"key_length\": \"4\", \"ref\": [ \"test_db_case_5_1749718637.e.course_id\" ], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"3.60\", \"data_read_per_join\": \"272\" }, \"used_columns\": [ \"course_id\", \"course_name\", \"course_credits\", \"department_id\" ], \"attached_condition\": \"((`test_db_case_5_1749718637`.`courses`.`course_name` like 'Advanced %') and (`test_db_case_5_1749718637`.`courses`.`course_credits` >= 3))\" } }, { \"table\": { \"table_name\": \"t\", \"access_type\": \"eq_ref\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"teacher_id\" ], \"key_length\": \"4\", \"ref\": [ \"test_db_case_5_1749718637.courses.department_id\" ], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"4.80\", \"data_read_per_join\": \"112\" }, \"used_columns\": [ \"teacher_id\", \"teacher_name\", \"department_id\" ] } }, { \"table\": { \"table_name\": \"d\", \"access_type\": \"eq_ref\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"department_id\" ], \"key_length\": \"4\", \"ref\": [ \"test_db_case_5_1749718637.t.department_id\" ], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"6.00\", \"data_read_per_join\": \"208\" }, \"used_columns\": [ \"department_id\", \"location\" ], \"attached_condition\": \"<if>(is_not_null_compl(t..d), (`test_db_case_5_1749718637`.`d`.`location` = 'Building A'), true)\" } } ] } }\n\nOriginal SQL:\nSELECT initial_students.student_id, initial_students.student_name, final_courses.course_name, final_enrollments.enrollment_date, final_teachers.teacher_name FROM (SELECT student_id, student_name, major, enroll_count FROM students WHERE enroll_count > 5) AS initial_students JOIN (SELECT e.student_id, e.course_id, e.enrollment_date FROM enrollments e WHERE e.enrollment_year = 2024) AS final_enrollments ON initial_students.student_id = final_enrollments.student_id JOIN (SELECT course_id, course_name, department_id FROM courses WHERE course_credits >= 3) AS final_courses ON final_enrollments.course_id = final_courses.course_id LEFT JOIN (SELECT t.teacher_id, t.teacher_name FROM teachers t JOIN departments d ON t.department_id = d.department_id WHERE d.location = 'Building A') AS final_teachers ON final_courses.department_id = final_teachers.teacher_id WHERE initial_students.major = 'Physics' AND final_enrollments.enrollment_date BETWEEN '2024-01-01' AND '2024-06-30' AND final_courses.course_name LIKE 'Advanced %';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT s.student_id, s.student_name, c.course_name, e.enrollment_date, t.teacher_name FROM students s JOIN enrollments e ON s.student_id = e.student_id AND e.enrollment_year = 2024 AND e.enrollment_date BETWEEN '2024-01-01' AND '2024-06-30' JOIN courses c ON e.course_id = c.course_id AND c.course_name LIKE 'Advanced %' AND c.course_credits >= 3 LEFT JOIN teachers t ON c.department_id = t.department_id LEFT JOIN departments d ON t.department_id = d.department_id AND d.location = 'Building A' WHERE s.major = 'Physics' AND s.enroll_count > 5;"
                    }
                ],
                "rule_id": "3"
            },
            {
                "case_id": "4",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"4\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，子查询中存在多余的投影列，同时内层子查询有ORDER BY和LIMIT，但最外层查询仍可进行投影下推。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\"], \"sql\": \"SELECT s.student_id, s.student_name, s.date_of_birth FROM students s JOIN ( SELECT student_id, gender FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM students ORDER BY student_id DESC ) AS inner_dt3 ) AS inner_dt2 ORDER BY student_id DESC LIMIT 1 ) AS inner_dt1 ) dt ON s.student_id = dt.student_id WHERE dt.gender = 'MALE'\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"message\\\": \\\"no matching row in const table\\\", \\\"table\\\": {\\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 3, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"ordering_operation\\\": {\\\"using_filesort\\\": false, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"index\\\", \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"gender\\\", \\\"date_of_birth\\\"]}}}}}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"1\", \"rationale\": \"投影下推：子查询 `SELECT student_id, gender FROM (SELECT student_id, gender, date_of_birth FROM inner_dt2 ORDER BY student_id DESC LIMIT 1) AS inner_dt1` 返回了 `gender` 列，但外部 JOIN 仅使用了 `student_id` 进行关联。因此，`gender` 可以从 `inner_dt1` 的投影中移除。同理，更内层的子查询 `inner_dt2` 和 `inner_dt3` 中的 `date_of_birth` 列也未被外层引用，可以进行下推。虽然内层有`ORDER BY`和`LIMIT`，但并不影响投影下推的适用性。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"没有LIMIT的子查询排序消除：仅移除最内层子查询中无LIMIT却存在的ORDER BY子句, 其余层级因包含LIMIT或不含ORDER BY无需改写\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"message\": \"no matching row in const table\", \"table\": {\"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"ordering_operation\": {\"using_filesort\": false, \"table\": {\"table_name\": \"students\", \"access_type\": \"index\", \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"gender\", \"date_of_birth\"]}}}}}}}\n\nOriginal SQL:\nSELECT s.student_id, s.student_name, s.date_of_birth FROM students s JOIN ( SELECT student_id, gender FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM students ORDER BY student_id DESC ) AS inner_dt3 ) AS inner_dt2 ORDER BY student_id DESC LIMIT 1 ) AS inner_dt1 ) dt ON s.student_id = dt.student_id WHERE dt.gender = 'MALE'\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_id, student_name, date_of_birth FROM students WHERE gender = 'Male' ORDER BY student_id DESC LIMIT 1"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "4",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"4\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，子查询中存在多余的投影列，同时内层子查询有ORDER BY和LIMIT，但最外层查询仍可进行投影下推。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\"], \"sql\": \"SELECT s.student_id, s.student_name, s.date_of_birth FROM students s JOIN ( SELECT student_id, gender FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM students ORDER BY student_id DESC ) AS inner_dt3 ) AS inner_dt2 ORDER BY student_id DESC LIMIT 1 ) AS inner_dt1 ) dt ON s.student_id = dt.student_id WHERE dt.gender = 'MALE'\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"message\\\": \\\"no matching row in const table\\\", \\\"table\\\": {\\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 3, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"ordering_operation\\\": {\\\"using_filesort\\\": false, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"index\\\", \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"gender\\\", \\\"date_of_birth\\\"]}}}}}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"1\", \"rationale\": \"投影下推：子查询 `SELECT student_id, gender FROM (SELECT student_id, gender, date_of_birth FROM inner_dt2 ORDER BY student_id DESC LIMIT 1) AS inner_dt1` 返回了 `gender` 列，但外部 JOIN 仅使用了 `student_id` 进行关联。因此，`gender` 可以从 `inner_dt1` 的投影中移除。同理，更内层的子查询 `inner_dt2` 和 `inner_dt3` 中的 `date_of_birth` 列也未被外层引用，可以进行下推。虽然内层有`ORDER BY`和`LIMIT`，但并不影响投影下推的适用性。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"没有LIMIT的子查询排序消除：仅移除最内层子查询中无LIMIT却存在的ORDER BY子句, 其余层级因包含LIMIT或不含ORDER BY无需改写\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"message\": \"no matching row in const table\", \"table\": {\"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"ordering_operation\": {\"using_filesort\": false, \"table\": {\"table_name\": \"students\", \"access_type\": \"index\", \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"gender\", \"date_of_birth\"]}}}}}}}\n\nOriginal SQL:\nSELECT s.student_id, s.student_name, s.date_of_birth FROM students s JOIN ( SELECT student_id, gender FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM students ORDER BY student_id DESC ) AS inner_dt3 ) AS inner_dt2 ORDER BY student_id DESC LIMIT 1 ) AS inner_dt1 ) dt ON s.student_id = dt.student_id WHERE dt.gender = 'MALE'\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_id, student_name, date_of_birth FROM students WHERE gender = 'Male' ORDER BY student_id DESC LIMIT 1"
                    }
                ],
                "rule_id": "2"
            },
            {
                "case_id": "5",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"5\", \"description\": \"一个包含多层嵌套子查询的JOIN语句，其中外部的WHERE子句条件可以下推到最内层的子查询中，同时存在可以投影下推的冗余列和可以进行LIKE前缀优化的条件。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\", \"CREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\"], \"sql\": \"SELECT outer_dt.teacher_id, outer_dt.teacher_name FROM students JOIN ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM teachers ) AS inner_dt1 ) AS inner_dt2 ) AS inner_dt3 ) AS outer_dt ON students.teacher_id = outer_dt.teacher_id WHERE outer_dt.teacher_name LIKE 'Dr. %';\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1,\\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.40\\\"},\\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"students\\\",\\\"access_type\\\": \\\"ALL\\\",\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"1.20\\\",\\\"data_read_per_join\\\": \\\"112\\\"},\\\"used_columns\\\": [\\\"teacher_id\\\"]}},{\\\"table\\\": {\\\"table_name\\\": \\\"teachers\\\",\\\"access_type\\\": \\\"eq_ref\\\",\\\"possible_keys\\\": [\\\"PRIMARY\\\"],\\\"key\\\": \\\"PRIMARY\\\",\\\"used_key_parts\\\": [\\\"teacher_id\\\"],\\\"key_length\\\": \\\"4\\\",\\\"ref\\\": [\\\"test_db_case_5_1749537373.students.teacher_id\\\"],\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"2.40\\\",\\\"data_read_per_join\\\": \\\"208\\\"},\\\"used_columns\\\": [\\\"teacher_id\\\",\\\"teacher_name\\\",\\\"department\\\"],\\\"attached_condition\\\": \\\"(`test_db_case_5_1749537373`.`teachers`.`teacher_name` LIKE 'Dr. %')\\\"}}]}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"谓词下推：外部查询的 `WHERE outer_dt.teacher_name LIKE 'Dr. %'` 条件可以下推到最内层的 `teachers` 表，从而在数据源处尽早过滤不必要的数据，减少处理量。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"LIKE前缀查询优化：`WHERE outer_dt.teacher_name LIKE 'Dr. %'` 形式的前缀匹配可以改写为 `outer_dt.teacher_name >= 'Dr. ' AND outer_dt.teacher_name < 'Ds.'`（假设下一个字典序值为'Ds.'）的范围查询，以利用索引的有序性，提升查询性能。\"}, {\"rule_id\": \"3\", \"difficulty_level\": \"1\", \"rationale\": \"投影下推：子查询 `SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM teachers ) AS inner_dt1 ) AS inner_dt2` 中的 `department` 列在外层 `SELECT teacher_id, teacher_name FROM inner_dt3` 子查询中没有被使用，因此可以移除。同样，更内层的子查询也可以移除冗余的 `department` 列，以减少IO和网络代价。\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\nCREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1,\"cost_info\": {\"query_cost\": \"2.40\"},\"nested_loop\": [{\"table\": {\"table_name\": \"students\",\"access_type\": \"ALL\",\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"1.20\",\"data_read_per_join\": \"112\"},\"used_columns\": [\"teacher_id\"]}},{\"table\": {\"table_name\": \"teachers\",\"access_type\": \"eq_ref\",\"possible_keys\": [\"PRIMARY\"],\"key\": \"PRIMARY\",\"used_key_parts\": [\"teacher_id\"],\"key_length\": \"4\",\"ref\": [\"test_db_case_5_1749537373.students.teacher_id\"],\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"2.40\",\"data_read_per_join\": \"208\"},\"used_columns\": [\"teacher_id\",\"teacher_name\",\"department\"],\"attached_condition\": \"(`test_db_case_5_1749537373`.`teachers`.`teacher_name` LIKE 'Dr. %')\"}}]}}}\n\nOriginal SQL:\nSELECT outer_dt.teacher_id, outer_dt.teacher_name FROM students JOIN ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM teachers ) AS inner_dt1 ) AS inner_dt2 ) AS inner_dt3 ) AS outer_dt ON students.teacher_id = outer_dt.teacher_id WHERE outer_dt.teacher_name LIKE 'Dr. %';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT t.teacher_id, t.teacher_name FROM students s JOIN teachers t ON s.teacher_id = t.teacher_id WHERE t.teacher_name LIKE 'Dr. %'"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "5",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"5\", \"description\": \"一个包含多层嵌套子查询的JOIN语句，其中外部的WHERE子句条件可以下推到最内层的子查询中，同时存在可以投影下推的冗余列和可以进行LIKE前缀优化的条件。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\", \"CREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\"], \"sql\": \"SELECT outer_dt.teacher_id, outer_dt.teacher_name FROM students JOIN ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM teachers ) AS inner_dt1 ) AS inner_dt2 ) AS inner_dt3 ) AS outer_dt ON students.teacher_id = outer_dt.teacher_id WHERE outer_dt.teacher_name LIKE 'Dr. %';\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1,\\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.40\\\"},\\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"students\\\",\\\"access_type\\\": \\\"ALL\\\",\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"1.20\\\",\\\"data_read_per_join\\\": \\\"112\\\"},\\\"used_columns\\\": [\\\"teacher_id\\\"]}},{\\\"table\\\": {\\\"table_name\\\": \\\"teachers\\\",\\\"access_type\\\": \\\"eq_ref\\\",\\\"possible_keys\\\": [\\\"PRIMARY\\\"],\\\"key\\\": \\\"PRIMARY\\\",\\\"used_key_parts\\\": [\\\"teacher_id\\\"],\\\"key_length\\\": \\\"4\\\",\\\"ref\\\": [\\\"test_db_case_5_1749537373.students.teacher_id\\\"],\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"2.40\\\",\\\"data_read_per_join\\\": \\\"208\\\"},\\\"used_columns\\\": [\\\"teacher_id\\\",\\\"teacher_name\\\",\\\"department\\\"],\\\"attached_condition\\\": \\\"(`test_db_case_5_1749537373`.`teachers`.`teacher_name` LIKE 'Dr. %')\\\"}}]}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"谓词下推：外部查询的 `WHERE outer_dt.teacher_name LIKE 'Dr. %'` 条件可以下推到最内层的 `teachers` 表，从而在数据源处尽早过滤不必要的数据，减少处理量。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"LIKE前缀查询优化：`WHERE outer_dt.teacher_name LIKE 'Dr. %'` 形式的前缀匹配可以改写为 `outer_dt.teacher_name >= 'Dr. ' AND outer_dt.teacher_name < 'Ds.'`（假设下一个字典序值为'Ds.'）的范围查询，以利用索引的有序性，提升查询性能。\"}, {\"rule_id\": \"3\", \"difficulty_level\": \"1\", \"rationale\": \"投影下推：子查询 `SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM teachers ) AS inner_dt1 ) AS inner_dt2` 中的 `department` 列在外层 `SELECT teacher_id, teacher_name FROM inner_dt3` 子查询中没有被使用，因此可以移除。同样，更内层的子查询也可以移除冗余的 `department` 列，以减少IO和网络代价。\"}]}}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\nCREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1,\"cost_info\": {\"query_cost\": \"2.40\"},\"nested_loop\": [{\"table\": {\"table_name\": \"students\",\"access_type\": \"ALL\",\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"1.20\",\"data_read_per_join\": \"112\"},\"used_columns\": [\"teacher_id\"]}},{\"table\": {\"table_name\": \"teachers\",\"access_type\": \"eq_ref\",\"possible_keys\": [\"PRIMARY\"],\"key\": \"PRIMARY\",\"used_key_parts\": [\"teacher_id\"],\"key_length\": \"4\",\"ref\": [\"test_db_case_5_1749537373.students.teacher_id\"],\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"2.40\",\"data_read_per_join\": \"208\"},\"used_columns\": [\"teacher_id\",\"teacher_name\",\"department\"],\"attached_condition\": \"(`test_db_case_5_1749537373`.`teachers`.`teacher_name` LIKE 'Dr. %')\"}}]}}}\n\nOriginal SQL:\nSELECT outer_dt.teacher_id, outer_dt.teacher_name FROM students JOIN ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM teachers ) AS inner_dt1 ) AS inner_dt2 ) AS inner_dt3 ) AS outer_dt ON students.teacher_id = outer_dt.teacher_id WHERE outer_dt.teacher_name LIKE 'Dr. %';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT t.teacher_id, t.teacher_name FROM students s JOIN teachers t ON s.teacher_id = t.teacher_id WHERE t.teacher_name LIKE 'Dr. %'"
                    }
                ],
                "rule_id": "2"
            },
            {
                "case_id": "5",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"5\", \"description\": \"一个包含多层嵌套子查询的JOIN语句，其中外部的WHERE子句条件可以下推到最内层的子查询中，同时存在可以投影下推的冗余列和可以进行LIKE前缀优化的条件。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\", \"CREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\"], \"sql\": \"SELECT outer_dt.teacher_id, outer_dt.teacher_name FROM students JOIN ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM teachers ) AS inner_dt1 ) AS inner_dt2 ) AS inner_dt3 ) AS outer_dt ON students.teacher_id = outer_dt.teacher_id WHERE outer_dt.teacher_name LIKE 'Dr. %';\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1,\\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.40\\\"},\\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"students\\\",\\\"access_type\\\": \\\"ALL\\\",\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"1.20\\\",\\\"data_read_per_join\\\": \\\"112\\\"},\\\"used_columns\\\": [\\\"teacher_id\\\"]}},{\\\"table\\\": {\\\"table_name\\\": \\\"teachers\\\",\\\"access_type\\\": \\\"eq_ref\\\",\\\"possible_keys\\\": [\\\"PRIMARY\\\"],\\\"key\\\": \\\"PRIMARY\\\",\\\"used_key_parts\\\": [\\\"teacher_id\\\"],\\\"key_length\\\": \\\"4\\\",\\\"ref\\\": [\\\"test_db_case_5_1749537373.students.teacher_id\\\"],\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"2.40\\\",\\\"data_read_per_join\\\": \\\"208\\\"},\\\"used_columns\\\": [\\\"teacher_id\\\",\\\"teacher_name\\\",\\\"department\\\"],\\\"attached_condition\\\": \\\"(`test_db_case_5_1749537373`.`teachers`.`teacher_name` LIKE 'Dr. %')\\\"}}]}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"谓词下推：外部查询的 `WHERE outer_dt.teacher_name LIKE 'Dr. %'` 条件可以下推到最内层的 `teachers` 表，从而在数据源处尽早过滤不必要的数据，减少处理量。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"LIKE前缀查询优化：`WHERE outer_dt.teacher_name LIKE 'Dr. %'` 形式的前缀匹配可以改写为 `outer_dt.teacher_name >= 'Dr. ' AND outer_dt.teacher_name < 'Ds.'`（假设下一个字典序值为'Ds.'）的范围查询，以利用索引的有序性，提升查询性能。\"}, {\"rule_id\": \"3\", \"difficulty_level\": \"1\", \"rationale\": \"投影下推：子查询 `SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM teachers ) AS inner_dt1 ) AS inner_dt2` 中的 `department` 列在外层 `SELECT teacher_id, teacher_name FROM inner_dt3` 子查询中没有被使用，因此可以移除。同样，更内层的子查询也可以移除冗余的 `department` 列，以减少IO和网络代价。\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\nCREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1,\"cost_info\": {\"query_cost\": \"2.40\"},\"nested_loop\": [{\"table\": {\"table_name\": \"students\",\"access_type\": \"ALL\",\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"1.20\",\"data_read_per_join\": \"112\"},\"used_columns\": [\"teacher_id\"]}},{\"table\": {\"table_name\": \"teachers\",\"access_type\": \"eq_ref\",\"possible_keys\": [\"PRIMARY\"],\"key\": \"PRIMARY\",\"used_key_parts\": [\"teacher_id\"],\"key_length\": \"4\",\"ref\": [\"test_db_case_5_1749537373.students.teacher_id\"],\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"2.40\",\"data_read_per_join\": \"208\"},\"used_columns\": [\"teacher_id\",\"teacher_name\",\"department\"],\"attached_condition\": \"(`test_db_case_5_1749537373`.`teachers`.`teacher_name` LIKE 'Dr. %')\"}}]}}}\n\nOriginal SQL:\nSELECT outer_dt.teacher_id, outer_dt.teacher_name FROM students JOIN ( SELECT teacher_id, teacher_name FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM ( SELECT teacher_id, teacher_name, department FROM teachers ) AS inner_dt1 ) AS inner_dt2 ) AS inner_dt3 ) AS outer_dt ON students.teacher_id = outer_dt.teacher_id WHERE outer_dt.teacher_name LIKE 'Dr. %';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT t.teacher_id, t.teacher_name FROM students s JOIN teachers t ON s.teacher_id = t.teacher_id WHERE t.teacher_name LIKE 'Dr. %'"
                    }
                ],
                "rule_id": "3"
            },
            {
                "case_id": "6",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"6\", \"description\": \"一个简单的SELECT语句，其中WHERE子句对字段使用了函数，导致隐式转换。\", \"create_table_statements\": [\"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT student_id, CONCAT(\\\"id_\\\", student_id) as student_id2 FROM enrollments WHERE CONCAT(\\\"id_\\\", student_id) >= \\\"id_1000\\\" LIMIT 10;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"enrollments\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"24\\\"}, \\\"used_columns\\\": [\\\"student_id\\\"], \\\"attached_condition\\\": \\\"(concat('id_',`test_db_case_6_1748591779`.`enrollments`.`student_id`) >= 'id_1000')\\\"}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"1\", \"rationale\": \"隐式转换：WHERE子句中的 `CONCAT(\\\"id_\\\", student_id) >= \\\"id_1000\\\"` 对字段 `student_id` 使用了 `CONCAT` 函数。这可能导致无法有效使用索引。虽然无法直接消除`CONCAT`函数并保持等价，但此处旨在识别字段上使用了函数的场景。在某些情况下，如果可以推导出等价的条件，例如`student_id >= 1000`，则可以消除函数以利用索引。\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"enrollments\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"student_id\"], \"attached_condition\": \"(concat('id_',`test_db_case_6_1748591779`.`enrollments`.`student_id`) >= 'id_1000')\"}}}\n\nOriginal SQL:\nSELECT student_id, CONCAT(\"id_\", student_id) as student_id2 FROM enrollments WHERE CONCAT(\"id_\", student_id) >= \"id_1000\" LIMIT 10;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_id, CONCAT(\"id_\", student_id) as student_id2 FROM enrollments WHERE student_id >= 1000 LIMIT 10;"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "7",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"7\", \"description\": \"一个包含COUNT标量子查询的SELECT语句，可以将其改写为IN子查询以利用SEMI JOIN特性。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\", \"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT * FROM students WHERE NOT ( SELECT count(*) FROM enrollments WHERE students.student_id = enrollments.student_id AND enrollment_id > 1000 ) > 0;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\"], \\\"attached_condition\\\": \\\"((/* select#2 */ select count(0) from `test_db_case_7_1748591779`.`enrollments` where ((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))) <= 0)\\\", \\\"attached_subqueries\\\": [{\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.41\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"enrollments\\\", \\\"access_type\\\": \\\"range\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"enrollment_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.21\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.41\\\", \\\"data_read_per_join\\\": \\\"24\\\"}, \\\"used_columns\\\": [\\\"enrollment_id\\\", \\\"student_id\\\"], \\\"attached_condition\\\": \\\"((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))\\\"}}}]}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"COUNT 标量子查询优化：子查询 `SELECT count(*) FROM enrollments WHERE students.student_id = enrollments.student_id AND enrollment_id > 1000` 是一个关联子查询，且其内部没有 `GROUP BY`、`LIMIT`、`UNION` 等，并且外部对其结果进行了 `> 0` 的存在性判断。这满足了COUNT标量子查询的定义。由于外部条件是 `NOT (...) > 0`，这意味着 `COUNT(*) <= 0`，即不存在匹配记录。因此，可以将其改写为 `NOT IN` 的形式，以利用MySQL的SEMI JOIN特性，提高查询性能。\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\"], \"attached_condition\": \"((/* select#2 */ select count(0) from `test_db_case_7_1748591779`.`enrollments` where ((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))) <= 0)\", \"attached_subqueries\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.41\"}, \"table\": {\"table_name\": \"enrollments\", \"access_type\": \"range\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"enrollment_id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.21\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.41\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"enrollment_id\", \"student_id\"], \"attached_condition\": \"((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))\"}}}]}}\n\nOriginal SQL:\nSELECT * FROM students WHERE NOT ( SELECT count(*) FROM enrollments WHERE students.student_id = enrollments.student_id AND enrollment_id > 1000 ) > 0;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM students WHERE NOT EXISTS (SELECT 1 FROM enrollments WHERE students.student_id = enrollments.student_id AND enrollment_id > 1000);"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "8",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"8\", \"description\": \"一个包含HAVING子句的SELECT语句，其中HAVING条件不依赖聚合函数，可以下推到WHERE子句。\", \"create_table_statements\": [\"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT student_id, MAX(enrollment_date) latest_date FROM enrollments WHERE enrollment_date > '1993-11-26' OR enrollment_date < '1991-11-26' GROUP BY student_id HAVING student_id = 1999\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1,\\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.20\\\"},\\\"grouping_operation\\\": {\\\"using_temporary_table\\\": true,\\\"using_filesort\\\": true,\\\"cost_info\\\": {\\\"sort_cost\\\": \\\"1.00\\\"},\\\"table\\\": {\\\"table_name\\\": \\\"enrollments\\\",\\\"access_type\\\": \\\"ALL\\\",\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"1.20\\\",\\\"data_read_per_join\\\": \\\"24\\\"},\\\"used_columns\\\": [\\\"enrollment_id\\\",\\\"student_id\\\",\\\"enrollment_date\\\"],\\\"attached_condition\\\": \\\"((`test_db_case_8_1749537373`.`enrollments`.`enrollment_date` > '1993-11-26') or (`test_db_case_8_1749537373`.`enrollments`.`enrollment_date` < '1991-11-26'))\\\"}}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"HAVING 条件下推：`HAVING student_id = 1999` 这个条件不依赖于任何聚合函数。将这个条件从 `HAVING` 子句移动到 `WHERE` 子句中，可以在分组和聚合操作之前过滤数据，从而减少处理的数据量，提高查询性能。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"隐式转换：WHERE子句中的 `enrollment_date > '1993-11-26'` 和 `enrollment_date < '1991-11-26'` 存在隐式类型转换，因为 `enrollment_date` 字段类型为 `DATE` 而 '1993-11-26' 和 '1991-11-26' 是字符串。这可能导致索引失效，可以通过显式转换值来解决。\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1,\"cost_info\": {\"query_cost\": \"2.20\"},\"grouping_operation\": {\"using_temporary_table\": true,\"using_filesort\": true,\"cost_info\": {\"sort_cost\": \"1.00\"},\"table\": {\"table_name\": \"enrollments\",\"access_type\": \"ALL\",\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"1.20\",\"data_read_per_join\": \"24\"},\"used_columns\": [\"enrollment_id\",\"student_id\",\"enrollment_date\"],\"attached_condition\": \"((`test_db_case_8_1749537373`.`enrollments`.`enrollment_date` > '1993-11-26') or (`test_db_case_8_1749537373`.`enrollments`.`enrollment_date` < '1991-11-26'))\"}}}}\n\nOriginal SQL:\nSELECT student_id, MAX(enrollment_date) latest_date FROM enrollments WHERE enrollment_date > '1993-11-26' OR enrollment_date < '1991-11-26' GROUP BY student_id HAVING student_id = 1999\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_id, MAX(enrollment_date) latest_date FROM enrollments WHERE student_id = 1999 AND (enrollment_date > '1993-11-26' OR enrollment_date < '1991-11-26') GROUP BY student_id"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "8",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"8\", \"description\": \"一个包含HAVING子句的SELECT语句，其中HAVING条件不依赖聚合函数，可以下推到WHERE子句。\", \"create_table_statements\": [\"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT student_id, MAX(enrollment_date) latest_date FROM enrollments WHERE enrollment_date > '1993-11-26' OR enrollment_date < '1991-11-26' GROUP BY student_id HAVING student_id = 1999\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1,\\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.20\\\"},\\\"grouping_operation\\\": {\\\"using_temporary_table\\\": true,\\\"using_filesort\\\": true,\\\"cost_info\\\": {\\\"sort_cost\\\": \\\"1.00\\\"},\\\"table\\\": {\\\"table_name\\\": \\\"enrollments\\\",\\\"access_type\\\": \\\"ALL\\\",\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"1.20\\\",\\\"data_read_per_join\\\": \\\"24\\\"},\\\"used_columns\\\": [\\\"enrollment_id\\\",\\\"student_id\\\",\\\"enrollment_date\\\"],\\\"attached_condition\\\": \\\"((`test_db_case_8_1749537373`.`enrollments`.`enrollment_date` > '1993-11-26') or (`test_db_case_8_1749537373`.`enrollments`.`enrollment_date` < '1991-11-26'))\\\"}}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"HAVING 条件下推：`HAVING student_id = 1999` 这个条件不依赖于任何聚合函数。将这个条件从 `HAVING` 子句移动到 `WHERE` 子句中，可以在分组和聚合操作之前过滤数据，从而减少处理的数据量，提高查询性能。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"隐式转换：WHERE子句中的 `enrollment_date > '1993-11-26'` 和 `enrollment_date < '1991-11-26'` 存在隐式类型转换，因为 `enrollment_date` 字段类型为 `DATE` 而 '1993-11-26' 和 '1991-11-26' 是字符串。这可能导致索引失效，可以通过显式转换值来解决。\"}]}}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1,\"cost_info\": {\"query_cost\": \"2.20\"},\"grouping_operation\": {\"using_temporary_table\": true,\"using_filesort\": true,\"cost_info\": {\"sort_cost\": \"1.00\"},\"table\": {\"table_name\": \"enrollments\",\"access_type\": \"ALL\",\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"1.20\",\"data_read_per_join\": \"24\"},\"used_columns\": [\"enrollment_id\",\"student_id\",\"enrollment_date\"],\"attached_condition\": \"((`test_db_case_8_1749537373`.`enrollments`.`enrollment_date` > '1993-11-26') or (`test_db_case_8_1749537373`.`enrollments`.`enrollment_date` < '1991-11-26'))\"}}}}\n\nOriginal SQL:\nSELECT student_id, MAX(enrollment_date) latest_date FROM enrollments WHERE enrollment_date > '1993-11-26' OR enrollment_date < '1991-11-26' GROUP BY student_id HAVING student_id = 1999\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_id, MAX(enrollment_date) latest_date FROM enrollments WHERE student_id = 1999 AND (enrollment_date > '1993-11-26' OR enrollment_date < '1991-11-26') GROUP BY student_id"
                    }
                ],
                "rule_id": "2"
            },
            {
                "case_id": "9",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"9\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，最内层的GROUP BY子句是不必要的，可以被消除。\", \"sql\": \"SELECT student_id FROM students s WHERE EXISTS (SELECT 1 FROM enrollments e WHERE e.student_id = s.student_id) AND s.gender = 'Female' AND s.date_of_birth <= CAST('2000-01-01' AS DATE) AND s.student_name != '张凯' GROUP BY student_id LIMIT 10;\", \"create_table_statements\": [\"CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL, gender VARCHAR(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci, date_of_birth DATE) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\", \"CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE, FOREIGN KEY (student_id) REFERENCES students(student_id)) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\"], \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"grouping_operation\\\": {\\\"using_filesort\\\": false, \\\"table\\\": {\\\"table_name\\\": \\\"s\\\", \\\"access_type\\\": \\\"index\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"1K\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"gender\\\", \\\"date_of_birth\\\"], \\\"attached_condition\\\": \\\"(exists(/* select#2 */ select 1 from `test_db_case_9_1749465373`.`enrollments` `e` where (`test_db_case_9_1749465373`.`e`.`student_id` = `test_db_case_9_1749465373`.`s`.`student_id`)) and (`test_db_case_9_1749465373`.`s`.`gender` = 'Female') and (`test_db_case_9_1749465373`.`s`.`date_of_birth` <= <cache>(cast('2000-01-01' as date))) and (`test_db_case_9_1749465373`.`s`.`student_name` <> '张凯'))\\\", \\\"attached_subqueries\\\": [{\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"e\\\", \\\"access_type\\\": \\\"ref\\\", \\\"possible_keys\\\": [\\\"student_id\\\"], \\\"key\\\": \\\"student_id\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"5\\\", \\\"ref\\\": [\\\"test_db_case_9_1749465373.s.student_id\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"using_index\\\": true, \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"24\\\"}, \\\"used_columns\\\": [\\\"student_id\\\"]}}}]}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"1\", \"rationale\": \"GROUP BY 子句消除：主查询的 `GROUP BY student_id` 是不必要的。因为 `student_id` 是 `students` 表的主键，其列值是唯一的，并且在该 `SELECT` 语句的投影中没有使用聚合函数。因此可以消除这个 `GROUP BY` 子句，减少排序和分组的开销，提高查询性能。此外，`EXISTS` 子查询可以转换为 `INNER JOIN` 来优化查询。隐式转换已通过 `CAST` 显式转换日期字符串消除。\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL, gender VARCHAR(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci, date_of_birth DATE) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nCREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE, FOREIGN KEY (student_id) REFERENCES students(student_id)) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"grouping_operation\": {\"using_filesort\": false, \"table\": {\"table_name\": \"s\", \"access_type\": \"index\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"1K\"}, \"used_columns\": [\"student_id\", \"student_name\", \"gender\", \"date_of_birth\"], \"attached_condition\": \"(exists(/* select#2 */ select 1 from `test_db_case_9_1749465373`.`enrollments` `e` where (`test_db_case_9_1749465373`.`e`.`student_id` = `test_db_case_9_1749465373`.`s`.`student_id`)) and (`test_db_case_9_1749465373`.`s`.`gender` = 'Female') and (`test_db_case_9_1749465373`.`s`.`date_of_birth` <= <cache>(cast('2000-01-01' as date))) and (`test_db_case_9_1749465373`.`s`.`student_name` <> '张凯'))\", \"attached_subqueries\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"e\", \"access_type\": \"ref\", \"possible_keys\": [\"student_id\"], \"key\": \"student_id\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"5\", \"ref\": [\"test_db_case_9_1749465373.s.student_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"using_index\": true, \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"student_id\"]}}}]}}}\n\nOriginal SQL:\nSELECT student_id FROM students s WHERE EXISTS (SELECT 1 FROM enrollments e WHERE e.student_id = s.student_id) AND s.gender = 'Female' AND s.date_of_birth <= CAST('2000-01-01' AS DATE) AND s.student_name != '张凯' GROUP BY student_id LIMIT 10;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT DISTINCT s.student_id FROM students s INNER JOIN enrollments e ON e.student_id = s.student_id WHERE s.gender = 'Female' AND s.date_of_birth <= '2000-01-01' AND s.student_name != '张凯' LIMIT 10;"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "10",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"10\", \"description\": \"一个包含非关联子查询的SELECT语句，可以将子查询转换为关联子查询。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\", \"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT );\"], \"sql\": \"SELECT * FROM students WHERE student_id IN ( SELECT student_id FROM enrollments AS inner_dt );\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"4.80\\\"}, \\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"<subquery2>\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"query_block\\\": {\\\"table\\\": {\\\"table_name\\\": \\\"inner_dt\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"16\\\"}, \\\"used_columns\\\": [\\\"student_id\\\"]}}}}}, {\\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [\\\"<subquery2>.student_id\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"4.80\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\"]}}]}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"非关联子查询优化：`WHERE student_id IN (SELECT student_id FROM enrollments)` 是一个非关联子查询。由于 `students` 表和 `enrollments` 表都包含 `student_id` 字段，可以建立关联条件。通过将外部查询的 `student_id` 关联到子查询的 `student_id`，将其改写为关联子查询，可以减少重复计算，提升查询性能。\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"4.80\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"<subquery2>\", \"access_type\": \"ALL\", \"materialized_from_subquery\": {\"using_temporary_table\": true, \"query_block\": {\"table\": {\"table_name\": \"inner_dt\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"16\"}, \"used_columns\": [\"student_id\"]}}}}}, {\"table\": {\"table_name\": \"students\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"ref\": [\"<subquery2>.student_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"4.80\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\"]}}]}}\n\nOriginal SQL:\nSELECT * FROM students WHERE student_id IN ( SELECT student_id FROM enrollments AS inner_dt );\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT DISTINCT s.* FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id;"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "11",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"11\", \"description\": \"一个包含多个ROW_NUMBER()窗口函数和过滤条件的SELECT语句\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), date_of_birth DATE );\"], \"sql\": \"SELECT T1.student_name, T1.date_of_birth FROM students AS T1 WHERE (SELECT COUNT(*) FROM students AS T2 WHERE T2.student_name <= T1.student_name) <= 3 AND (SELECT COUNT(*) FROM students AS T3 WHERE T3.date_of_birth <= T1.date_of_birth) <= 2 ORDER BY T1.student_name, T1.date_of_birth;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.20\\\"}, \\\"ordering_operation\\\": {\\\"using_filesort\\\": true, \\\"cost_info\\\": {\\\"sort_cost\\\": \\\"1.00\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"T1\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"date_of_birth\\\"], \\\"attached_condition\\\": \\\"(((/* select#2 */ select count(0) from `test_db_case_11_1748591779`.`students` `T2` where (`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)) <= 3) and ((/* select#3 */ select count(0) from `test_db_case_11_1748591779`.`students` `T3` where (`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)) <= 2))\\\", \\\"attached_subqueries\\\": [{\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 3, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"T3\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"date_of_birth\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)\\\"}}}, {\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"T2\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_name\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)\\\"}}}]}}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"子查询聚合改写为窗口函数：存在子查询聚合`COUNT(*)`，且存在自连接，内表和外表都是`students`表，且通过`student_name`和`date_of_birth`字段进行等值关联。这些子查询可以改写为窗口函数`COUNT(*) OVER (PARTITION BY student_name ORDER BY student_name)`和`COUNT(*) OVER (PARTITION BY date_of_birth ORDER BY date_of_birth)`，以提升查询性能。\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), date_of_birth DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.20\"}, \"ordering_operation\": {\"using_filesort\": true, \"cost_info\": {\"sort_cost\": \"1.00\"}, \"table\": {\"table_name\": \"T1\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\", \"date_of_birth\"], \"attached_condition\": \"(((/* select#2 */ select count(0) from `test_db_case_11_1748591779`.`students` `T2` where (`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)) <= 3) and ((/* select#3 */ select count(0) from `test_db_case_11_1748591779`.`students` `T3` where (`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)) <= 2))\", \"attached_subqueries\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"T3\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"date_of_birth\"], \"attached_condition\": \"(`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)\"}}}, {\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"T2\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_name\"], \"attached_condition\": \"(`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)\"}}}]}}}}\n\nOriginal SQL:\nSELECT T1.student_name, T1.date_of_birth FROM students AS T1 WHERE (SELECT COUNT(*) FROM students AS T2 WHERE T2.student_name <= T1.student_name) <= 3 AND (SELECT COUNT(*) FROM students AS T3 WHERE T3.date_of_birth <= T1.date_of_birth) <= 2 ORDER BY T1.student_name, T1.date_of_birth;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_name, date_of_birth FROM (SELECT student_name, date_of_birth, ROW_NUMBER() OVER (ORDER BY student_name) as name_rank, ROW_NUMBER() OVER (ORDER BY date_of_birth) as dob_rank FROM students) ranked WHERE name_rank <= 3 AND dob_rank <= 2 ORDER BY student_name, date_of_birth;"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "12",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"12\", \"description\": \"一个包含UNION的SELECT语句，其中WHERE子句包含LIKE前缀匹配，可以改写为范围查询。\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), major VARCHAR(100) );\"], \"sql\": \"SELECT * FROM students WHERE student_name LIKE 'John%' UNION SELECT * FROM students WHERE student_name LIKE 'Jane%';\", \"explain\": \"{\\\"query_block\\\": {\\\"union_result\\\": {\\\"using_temporary_table\\\": true, \\\"table_name\\\": \\\"<union1,2>\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"query_specifications\\\": [{\\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"208\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"major\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_12_1748591779`.`students`.`student_name` like 'John%')\\\"}}}, {\\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"208\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"major\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_12_1748591779`.`students`.`student_name` like 'Jane%')\\\"}}}]}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"1\", \"rationale\": \"LIKE前缀查询优化：`WHERE student_name LIKE 'John%'` 和 `WHERE student_name LIKE 'Jane%'` 都是 `LIKE 'prefix%'` 形式的前缀匹配。`student_name` 字段是字符串类型，且LIKE右侧为常量前缀。可以将其改写为 `student_name >= 'John' AND student_name < 'Joko'` 和 `student_name >= 'Jane' AND student_name < 'Janf'`（这里假设下一个字典序值为'Joko'和'Janf'），利用索引的有序性，避免全表扫描，提升查询性能。\"}]}}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), major VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": {\"union_result\": {\"using_temporary_table\": true, \"table_name\": \"<union1,2>\", \"access_type\": \"ALL\", \"query_specifications\": [{\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"208\"}, \"used_columns\": [\"student_id\", \"student_name\", \"major\"], \"attached_condition\": \"(`test_db_case_12_1748591779`.`students`.`student_name` like 'John%')\"}}}, {\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"208\"}, \"used_columns\": [\"student_id\", \"student_name\", \"major\"], \"attached_condition\": \"(`test_db_case_12_1748591779`.`students`.`student_name` like 'Jane%')\"}}}]}}}\n\nOriginal SQL:\nSELECT * FROM students WHERE student_name LIKE 'John%' UNION SELECT * FROM students WHERE student_name LIKE 'Jane%';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM students WHERE student_name LIKE 'John%' OR student_name LIKE 'Jane%';"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "13",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"13\", \"description\": \"一个包含UNION的SELECT语句，外部查询包含LIMIT子句，可以下推到UNION的各个分支中。\", \"create_table_statements\": [\"CREATE TABLE users ( id INT PRIMARY KEY, name VARCHAR(100), reg_date DATE );\", \"CREATE TABLE articles ( id INT PRIMARY KEY, title VARCHAR(255), publish_time DATETIME );\"], \"sql\": \"SELECT * FROM (  (SELECT name FROM users ORDER BY reg_date DESC)  UNION  (SELECT title FROM articles ORDER BY publish_time DESC) ) AS mixed  ORDER BY name LIMIT 5;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"15.00\\\"}, \\\"ordering_operation\\\": {\\\"using_filesort\\\": true, \\\"cost_info\\\": {\\\"sort_cost\\\": \\\"4.00\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"mixed\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 4, \\\"rows_produced_per_join\\\": 4, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"10.20\\\", \\\"eval_cost\\\": \\\"0.80\\\", \\\"prefix_cost\\\": \\\"11.00\\\", \\\"data_read_per_join\\\": \\\"1K\\\"}, \\\"used_columns\\\": [\\\"name\\\"], \\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"union_result\\\": {\\\"using_temporary_table\\\": true, \\\"table_name\\\": \\\"<union2,3>\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"query_specifications\\\": [{\\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"users\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"name\\\", \\\"reg_date\\\"]}}}, {\\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 3, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"articles\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"272\\\"}, \\\"used_columns\\\": [\\\"title\\\", \\\"publish_time\\\"]}}}]}}}}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"LIMIT下推至UNION分支：外部查询有一个`LIMIT 5`子句，没有`GROUP BY`，`FROM`只有一个子查询 (`mixed`)，没有其他条件。子查询是`UNION`连接的多个查询。这符合LIMIT下推的条件。可以将外部的`LIMIT`下推到`UNION`的各个分支中，减少中间结果集的大小，提高查询性能。需要注意的是，下推时要考虑`ORDER BY`，并且可能需要调整下推的`LIMIT`值以确保结果正确。\"}]}}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE users ( id INT PRIMARY KEY, name VARCHAR(100), reg_date DATE );\nCREATE TABLE articles ( id INT PRIMARY KEY, title VARCHAR(255), publish_time DATETIME );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"15.00\"}, \"ordering_operation\": {\"using_filesort\": true, \"cost_info\": {\"sort_cost\": \"4.00\"}, \"table\": {\"table_name\": \"mixed\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 4, \"rows_produced_per_join\": 4, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"10.20\", \"eval_cost\": \"0.80\", \"prefix_cost\": \"11.00\", \"data_read_per_join\": \"1K\"}, \"used_columns\": [\"name\"], \"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"union_result\": {\"using_temporary_table\": true, \"table_name\": \"<union2,3>\", \"access_type\": \"ALL\", \"query_specifications\": [{\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"users\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"name\", \"reg_date\"]}}}, {\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"articles\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"272\"}, \"used_columns\": [\"title\", \"publish_time\"]}}}]}}}}}}\n\nOriginal SQL:\nSELECT * FROM (  (SELECT name FROM users ORDER BY reg_date DESC)  UNION  (SELECT title FROM articles ORDER BY publish_time DESC) ) AS mixed  ORDER BY name LIMIT 5;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM (SELECT name FROM users UNION ALL SELECT title FROM articles) AS mixed ORDER BY name LIMIT 5;"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "14",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"14\", \"description\": \"一个包含IN子查询的SELECT语句，子查询明确只返回一行，因此可以转换为标量子查询。\", \"create_table_statements\": [\"CREATE TABLE students ( id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), score INT );\"], \"sql\": \"SELECT * FROM students WHERE id IN ( SELECT MAX(id) FROM students );\", \"explain\": \"{\\\"query_block\\\": { \\\"select_id\\\": 1, \\\"cost_info\\\": { \\\"query_cost\\\": \\\"1.20\\\" }, \\\"table\\\": { \\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\" }, \\\"used_columns\\\": [ \\\"id\\\", \\\"student_name\\\", \\\"score\\\" ], \\\"attached_condition\\\": \\\"<in_optimizer>(`test_db_case_14_1749536504`.`students`.`id`,<exists>(/* select#2 */ select max(`test_db_case_14_1749536504`.`students`.`id`) from `test_db_case_14_1749536504`.`students` having (<cache>(`test_db_case_14_1749536504`.`students`.`id`) = <ref_null_helper>(max(`test_db_case_14_1749536504`.`students`.`id`)))))\\\", \\\"attached_subqueries\\\": [ { \\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": { \\\"select_id\\\": 2, \\\"message\\\": \\\"No matching min/max row\\\" } } ] } } }\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"IN/ANY 子查询转标量子查询：子查询 `SELECT MAX(id) FROM students` 明确只返回一个聚合结果（最大ID），即最多返回一行。同时，该子查询不引用外部查询的列。因此，可以将 `IN` 子查询转换为 `=` 比较的标量子查询形式，以利用子查询物化，减少重复计算，提升查询性能。\"}]}}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), score INT );\n\nExplain Output in JSON:\n{\"query_block\": { \"select_id\": 1, \"cost_info\": { \"query_cost\": \"1.20\" }, \"table\": { \"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\" }, \"used_columns\": [ \"id\", \"student_name\", \"score\" ], \"attached_condition\": \"<in_optimizer>(`test_db_case_14_1749536504`.`students`.`id`,<exists>(/* select#2 */ select max(`test_db_case_14_1749536504`.`students`.`id`) from `test_db_case_14_1749536504`.`students` having (<cache>(`test_db_case_14_1749536504`.`students`.`id`) = <ref_null_helper>(max(`test_db_case_14_1749536504`.`students`.`id`)))))\", \"attached_subqueries\": [ { \"dependent\": true, \"cacheable\": false, \"query_block\": { \"select_id\": 2, \"message\": \"No matching min/max row\" } } ] } } }\n\nOriginal SQL:\nSELECT * FROM students WHERE id IN ( SELECT MAX(id) FROM students );\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM students ORDER BY id DESC LIMIT 1;"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "15",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"15\", \"description\": \"一个包含嵌套子查询的COUNT语句，其中外部的WHERE子句条件可以下推到内层的子查询中，并且子查询中存在可以投影下推的冗余列。\", \"create_table_statements\": [\"CREATE TABLE enrollments ( student_id INT PRIMARY KEY, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT COUNT(*) FROM ( SELECT student_id, enrollment_date FROM enrollments WHERE student_id < 1000 ) AS dt WHERE enrollment_date >= '2023-01-01';\", \"explain\": \"{\\\"query_block\\\": { \\\"select_id\\\": 1, \\\"cost_info\\\": { \\\"query_cost\\\": \\\"1.41\\\" }, \\\"table\\\": { \\\"table_name\\\": \\\"enrollments\\\", \\\"access_type\\\": \\\"range\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"student_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.21\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.41\\\", \\\"data_read_per_join\\\": \\\"16\\\" }, \\\"used_columns\\\": [ \\\"student_id\\\", \\\"enrollment_date\\\" ], \\\"attached_condition\\\": \\\"((`test_db_case_15_1749719333`.`enrollments`.`enrollment_date` >= '2023-01-01') and (`test_db_case_15_1749719333`.`enrollments`.`student_id` < 1000))\\\" } } }\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"谓词下推：外部查询的 `WHERE enrollment_date >= '2023-01-01'` 条件可以下推到子查询 `SELECT student_id, enrollment_date FROM enrollments` 的 `enrollments` 表中，从而在数据源处尽早过滤不必要的数据，减少处理量。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"投影下推：子查询 `SELECT student_id, enrollment_date FROM enrollments WHERE student_id < 1000` 中的 `student_id` 列在外层 `SELECT COUNT(*)` 中没有被直接使用，但由于 `COUNT(*)` 仅关心行数，因此 `student_id` 列可以从投影中移除，替换为 `SELECT 1` 或仅保留必要的列，以减少IO和网络代价。\"}, {\"rule_id\": \"3\", \"difficulty_level\": \"2\", \"rationale\": \"子查询折叠：外部查询的运算级别不高于子查询，且没有别名冲突及其他限制，故可将子查询折叠以减少中间结果\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE enrollments ( student_id INT PRIMARY KEY, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": { \"select_id\": 1, \"cost_info\": { \"query_cost\": \"1.41\" }, \"table\": { \"table_name\": \"enrollments\", \"access_type\": \"range\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"student_id\" ], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.21\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.41\", \"data_read_per_join\": \"16\" }, \"used_columns\": [ \"student_id\", \"enrollment_date\" ], \"attached_condition\": \"((`test_db_case_15_1749719333`.`enrollments`.`enrollment_date` >= '2023-01-01') and (`test_db_case_15_1749719333`.`enrollments`.`student_id` < 1000))\" } } }\n\nOriginal SQL:\nSELECT COUNT(*) FROM ( SELECT student_id, enrollment_date FROM enrollments WHERE student_id < 1000 ) AS dt WHERE enrollment_date >= '2023-01-01';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT COUNT(*) FROM enrollments WHERE student_id < 1000 AND enrollment_date >= '2023-01-01';"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "15",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"15\", \"description\": \"一个包含嵌套子查询的COUNT语句，其中外部的WHERE子句条件可以下推到内层的子查询中，并且子查询中存在可以投影下推的冗余列。\", \"create_table_statements\": [\"CREATE TABLE enrollments ( student_id INT PRIMARY KEY, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT COUNT(*) FROM ( SELECT student_id, enrollment_date FROM enrollments WHERE student_id < 1000 ) AS dt WHERE enrollment_date >= '2023-01-01';\", \"explain\": \"{\\\"query_block\\\": { \\\"select_id\\\": 1, \\\"cost_info\\\": { \\\"query_cost\\\": \\\"1.41\\\" }, \\\"table\\\": { \\\"table_name\\\": \\\"enrollments\\\", \\\"access_type\\\": \\\"range\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"student_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.21\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.41\\\", \\\"data_read_per_join\\\": \\\"16\\\" }, \\\"used_columns\\\": [ \\\"student_id\\\", \\\"enrollment_date\\\" ], \\\"attached_condition\\\": \\\"((`test_db_case_15_1749719333`.`enrollments`.`enrollment_date` >= '2023-01-01') and (`test_db_case_15_1749719333`.`enrollments`.`student_id` < 1000))\\\" } } }\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"谓词下推：外部查询的 `WHERE enrollment_date >= '2023-01-01'` 条件可以下推到子查询 `SELECT student_id, enrollment_date FROM enrollments` 的 `enrollments` 表中，从而在数据源处尽早过滤不必要的数据，减少处理量。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"投影下推：子查询 `SELECT student_id, enrollment_date FROM enrollments WHERE student_id < 1000` 中的 `student_id` 列在外层 `SELECT COUNT(*)` 中没有被直接使用，但由于 `COUNT(*)` 仅关心行数，因此 `student_id` 列可以从投影中移除，替换为 `SELECT 1` 或仅保留必要的列，以减少IO和网络代价。\"}, {\"rule_id\": \"3\", \"difficulty_level\": \"2\", \"rationale\": \"子查询折叠：外部查询的运算级别不高于子查询，且没有别名冲突及其他限制，故可将子查询折叠以减少中间结果\"}]}}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE enrollments ( student_id INT PRIMARY KEY, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": { \"select_id\": 1, \"cost_info\": { \"query_cost\": \"1.41\" }, \"table\": { \"table_name\": \"enrollments\", \"access_type\": \"range\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"student_id\" ], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.21\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.41\", \"data_read_per_join\": \"16\" }, \"used_columns\": [ \"student_id\", \"enrollment_date\" ], \"attached_condition\": \"((`test_db_case_15_1749719333`.`enrollments`.`enrollment_date` >= '2023-01-01') and (`test_db_case_15_1749719333`.`enrollments`.`student_id` < 1000))\" } } }\n\nOriginal SQL:\nSELECT COUNT(*) FROM ( SELECT student_id, enrollment_date FROM enrollments WHERE student_id < 1000 ) AS dt WHERE enrollment_date >= '2023-01-01';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT COUNT(*) FROM enrollments WHERE student_id < 1000 AND enrollment_date >= '2023-01-01';"
                    }
                ],
                "rule_id": "2"
            },
            {
                "case_id": "15",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"15\", \"description\": \"一个包含嵌套子查询的COUNT语句，其中外部的WHERE子句条件可以下推到内层的子查询中，并且子查询中存在可以投影下推的冗余列。\", \"create_table_statements\": [\"CREATE TABLE enrollments ( student_id INT PRIMARY KEY, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT COUNT(*) FROM ( SELECT student_id, enrollment_date FROM enrollments WHERE student_id < 1000 ) AS dt WHERE enrollment_date >= '2023-01-01';\", \"explain\": \"{\\\"query_block\\\": { \\\"select_id\\\": 1, \\\"cost_info\\\": { \\\"query_cost\\\": \\\"1.41\\\" }, \\\"table\\\": { \\\"table_name\\\": \\\"enrollments\\\", \\\"access_type\\\": \\\"range\\\", \\\"possible_keys\\\": [ \\\"PRIMARY\\\" ], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [ \\\"student_id\\\" ], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": { \\\"read_cost\\\": \\\"1.21\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.41\\\", \\\"data_read_per_join\\\": \\\"16\\\" }, \\\"used_columns\\\": [ \\\"student_id\\\", \\\"enrollment_date\\\" ], \\\"attached_condition\\\": \\\"((`test_db_case_15_1749719333`.`enrollments`.`enrollment_date` >= '2023-01-01') and (`test_db_case_15_1749719333`.`enrollments`.`student_id` < 1000))\\\" } } }\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"谓词下推：外部查询的 `WHERE enrollment_date >= '2023-01-01'` 条件可以下推到子查询 `SELECT student_id, enrollment_date FROM enrollments` 的 `enrollments` 表中，从而在数据源处尽早过滤不必要的数据，减少处理量。\"}, {\"rule_id\": \"2\", \"difficulty_level\": \"1\", \"rationale\": \"投影下推：子查询 `SELECT student_id, enrollment_date FROM enrollments WHERE student_id < 1000` 中的 `student_id` 列在外层 `SELECT COUNT(*)` 中没有被直接使用，但由于 `COUNT(*)` 仅关心行数，因此 `student_id` 列可以从投影中移除，替换为 `SELECT 1` 或仅保留必要的列，以减少IO和网络代价。\"}, {\"rule_id\": \"3\", \"difficulty_level\": \"2\", \"rationale\": \"子查询折叠：外部查询的运算级别不高于子查询，且没有别名冲突及其他限制，故可将子查询折叠以减少中间结果\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE enrollments ( student_id INT PRIMARY KEY, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": { \"select_id\": 1, \"cost_info\": { \"query_cost\": \"1.41\" }, \"table\": { \"table_name\": \"enrollments\", \"access_type\": \"range\", \"possible_keys\": [ \"PRIMARY\" ], \"key\": \"PRIMARY\", \"used_key_parts\": [ \"student_id\" ], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": { \"read_cost\": \"1.21\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.41\", \"data_read_per_join\": \"16\" }, \"used_columns\": [ \"student_id\", \"enrollment_date\" ], \"attached_condition\": \"((`test_db_case_15_1749719333`.`enrollments`.`enrollment_date` >= '2023-01-01') and (`test_db_case_15_1749719333`.`enrollments`.`student_id` < 1000))\" } } }\n\nOriginal SQL:\nSELECT COUNT(*) FROM ( SELECT student_id, enrollment_date FROM enrollments WHERE student_id < 1000 ) AS dt WHERE enrollment_date >= '2023-01-01';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT COUNT(*) FROM enrollments WHERE student_id < 1000 AND enrollment_date >= '2023-01-01';"
                    }
                ],
                "rule_id": "3"
            },
            {
                "case_id": "16",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"16\", \"description\": \"一个简单的LEFT JOIN查询，明确引用了主表中的列，可能存在可消除的外连接。\", \"create_table_statements\": [\"CREATE TABLE `orders` (`O_ORDERKEY` int NOT NULL,`O_CUSTKEY` int NOT NULL,`O_ORDERSTATUS` char(1) NOT NULL,`O_TOTALPRICE` decimal(15,2) NOT NULL,`O_ORDERDATE` date NOT NULL,`O_ORDERPRIORITY` char(15) NOT NULL,`O_CLERK` char(15) NOT NULL,`O_SHIPPRIORITY` int NOT NULL,`O_COMMENT` varchar(79) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;CREATE TABLE `customer` (`C_CUSTKEY` int NOT NULL,`C_NAME` varchar(25) NOT NULL,`C_ADDRESS` varchar(40) NOT NULL,`C_NATIONKEY` int NOT NULL,`C_PHONE` char(15) NOT NULL,`C_ACCTBAL` decimal(15,2) NOT NULL,`C_MKTSEGMENT` char(10) NOT NULL,`C_COMMENT` varchar(117) NOT NULL,PRIMARY KEY `PK_IDX1614428511` (`C_CUSTKEY`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;\"], \"sql\": \"SELECT o.o_custkey FROM orders o LEFT JOIN customer ON c_custkey=o_custkey\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1,\\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"},\\\"table\\\": {\\\"table_name\\\": \\\"o\\\",\\\"access_type\\\": \\\"ALL\\\",\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"1.20\\\",\\\"data_read_per_join\\\": \\\"112\\\"},\\\"used_columns\\\": [\\\"O_CUSTKEY\\\",\\\"O_ORDERKEY\\\",\\\"O_ORDERSTATUS\\\",\\\"O_TOTALPRICE\\\",\\\"O_ORDERDATE\\\",\\\"O_ORDERPRIORITY\\\",\\\"O_CLERK\\\",\\\"O_SHIPPRIORITY\\\",\\\"O_COMMENT\\\"]}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"外连接表消除：`LEFT JOIN customer` 是一个外连接。由于 `customer` 表的任何列没有在 `SELECT` 列表、`WHERE`、`GROUP BY`、`ORDER BY` 或 `HAVING` 子句中被引用（即被关联表没有被引用）。假设其为等值连接且未加锁，并且 `C_CUSTKEY` 是主键，满足“连表语句不会导致数据重复”的条件，因此这个 `LEFT JOIN` 可以被消除，只保留 `orders` 表。\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE `orders` (`O_ORDERKEY` int NOT NULL,`O_CUSTKEY` int NOT NULL,`O_ORDERSTATUS` char(1) NOT NULL,`O_TOTALPRICE` decimal(15,2) NOT NULL,`O_ORDERDATE` date NOT NULL,`O_ORDERPRIORITY` char(15) NOT NULL,`O_CLERK` char(15) NOT NULL,`O_SHIPPRIORITY` int NOT NULL,`O_COMMENT` varchar(79) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;CREATE TABLE `customer` (`C_CUSTKEY` int NOT NULL,`C_NAME` varchar(25) NOT NULL,`C_ADDRESS` varchar(40) NOT NULL,`C_NATIONKEY` int NOT NULL,`C_PHONE` char(15) NOT NULL,`C_ACCTBAL` decimal(15,2) NOT NULL,`C_MKTSEGMENT` char(10) NOT NULL,`C_COMMENT` varchar(117) NOT NULL,PRIMARY KEY `PK_IDX1614428511` (`C_CUSTKEY`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1,\"cost_info\": {\"query_cost\": \"1.20\"},\"table\": {\"table_name\": \"o\",\"access_type\": \"ALL\",\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"1.20\",\"data_read_per_join\": \"112\"},\"used_columns\": [\"O_CUSTKEY\",\"O_ORDERKEY\",\"O_ORDERSTATUS\",\"O_TOTALPRICE\",\"O_ORDERDATE\",\"O_ORDERPRIORITY\",\"O_CLERK\",\"O_SHIPPRIORITY\",\"O_COMMENT\"]}}}\n\nOriginal SQL:\nSELECT o.o_custkey FROM orders o LEFT JOIN customer ON c_custkey=o_custkey\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT o.o_custkey FROM orders o"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "17",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"17\", \"description\": \"一个包含LEFT JOIN的SELECT语句，连接条件为不等值连接，难以进行外连接消除。\", \"create_table_statements\": [\"CREATE TABLE `customer` (`C_CUSTKEY` int NOT NULL,`C_NAME` varchar(25) NOT NULL,`C_ADDRESS` varchar(40) NOT NULL,`C_NATIONKEY` int NOT NULL,`C_PHONE` char(15) NOT NULL,`C_ACCTBAL` decimal(15,2) NOT NULL,`C_MKTSEGMENT` char(10) NOT NULL,`C_COMMENT` varchar(117) NOT NULL,PRIMARY KEY `PK_IDX1614428511` (`C_CUSTKEY`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;CREATE TABLE `orders` (`O_ORDERKEY` int NOT NULL,`O_CUSTKEY` int NOT NULL,`O_ORDERSTATUS` char(1) NOT NULL,`O_TOTALPRICE` decimal(15,2) NOT NULL,`O_ORDERDATE` date NOT NULL,`O_ORDERPRIORITY` char(15) NOT NULL,`O_CLERK` char(15) NOT NULL,`O_SHIPPRIORITY` int NOT NULL,`O_COMMENT` varchar(79) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\"], \"sql\": \"SELECT c.* FROM customer c LEFT JOIN orders o ON c.c_custkey > o.o_custkey\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1,\\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"},\\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"c\\\",\\\"access_type\\\": \\\"ALL\\\",\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"1.20\\\",\\\"data_read_per_join\\\": \\\"112\\\"},\\\"used_columns\\\": [\\\"C_CUSTKEY\\\",\\\"C_NAME\\\",\\\"C_ADDRESS\\\",\\\"C_NATIONKEY\\\",\\\"C_PHONE\\\",\\\"C_ACCTBAL\\\",\\\"C_MKTSEGMENT\\\",\\\"C_COMMENT\\\"]}},{\\\"table\\\": {\\\"table_name\\\": \\\"o\\\",\\\"access_type\\\": \\\"ALL\\\",\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"2.40\\\",\\\"data_read_per_join\\\": \\\"112\\\"},\\\"used_columns\\\": [\\\"O_CUSTKEY\\\",\\\"O_ORDERKEY\\\",\\\"O_ORDERSTATUS\\\",\\\"O_TOTALPRICE\\\",\\\"O_ORDERDATE\\\",\\\"O_ORDERPRIORITY\\\",\\\"O_CLERK\\\",\\\"O_SHIPPRIORITY\\\",\\\"O_COMMENT\\\"],\\\"attached_condition\\\": \\\"(`c`.`C_CUSTKEY` > `o`.`O_CUSTKEY`)\\\"}}]}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"外连接表消除：该语句是 `LEFT JOIN`，但连接条件 `c.c_custkey > o.o_custkey` 是一个不等值连接。根据规则，外连接消除通常只适用于等值连接（即 `ON` 条件中不能存在其他 `OR` 条件，且主要通过字段进行等值判断）。因此，这种不等值连接不满足 `rule0003` 中两表是等值连接的条件，不能直接进行外连接消除。\"}]}}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE `customer` (`C_CUSTKEY` int NOT NULL,`C_NAME` varchar(25) NOT NULL,`C_ADDRESS` varchar(40) NOT NULL,`C_NATIONKEY` int NOT NULL,`C_PHONE` char(15) NOT NULL,`C_ACCTBAL` decimal(15,2) NOT NULL,`C_MKTSEGMENT` char(10) NOT NULL,`C_COMMENT` varchar(117) NOT NULL,PRIMARY KEY `PK_IDX1614428511` (`C_CUSTKEY`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;CREATE TABLE `orders` (`O_ORDERKEY` int NOT NULL,`O_CUSTKEY` int NOT NULL,`O_ORDERSTATUS` char(1) NOT NULL,`O_TOTALPRICE` decimal(15,2) NOT NULL,`O_ORDERDATE` date NOT NULL,`O_ORDERPRIORITY` char(15) NOT NULL,`O_CLERK` char(15) NOT NULL,`O_SHIPPRIORITY` int NOT NULL,`O_COMMENT` varchar(79) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1,\"cost_info\": {\"query_cost\": \"1.20\"},\"nested_loop\": [{\"table\": {\"table_name\": \"c\",\"access_type\": \"ALL\",\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"1.20\",\"data_read_per_join\": \"112\"},\"used_columns\": [\"C_CUSTKEY\",\"C_NAME\",\"C_ADDRESS\",\"C_NATIONKEY\",\"C_PHONE\",\"C_ACCTBAL\",\"C_MKTSEGMENT\",\"C_COMMENT\"]}},{\"table\": {\"table_name\": \"o\",\"access_type\": \"ALL\",\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"2.40\",\"data_read_per_join\": \"112\"},\"used_columns\": [\"O_CUSTKEY\",\"O_ORDERKEY\",\"O_ORDERSTATUS\",\"O_TOTALPRICE\",\"O_ORDERDATE\",\"O_ORDERPRIORITY\",\"O_CLERK\",\"O_SHIPPRIORITY\",\"O_COMMENT\"],\"attached_condition\": \"(`c`.`C_CUSTKEY` > `o`.`O_CUSTKEY`)\"}}]}}}\n\nOriginal SQL:\nSELECT c.* FROM customer c LEFT JOIN orders o ON c.c_custkey > o.o_custkey\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT c.* FROM customer c LEFT JOIN orders o ON c.c_custkey > o.o_custkey"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "18",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"18\", \"description\": \"一个包含LEFT JOIN的SELECT语句，连接条件为不等值连接，难以进行外连接消除，且使用了表别名。\", \"create_table_statements\": [\"CREATE TABLE `customer` (`C_CUSTKEY` int NOT NULL,`C_NAME` varchar(25) NOT NULL,`C_ADDRESS` varchar(40) NOT NULL,`C_NATIONKEY` int NOT NULL,`C_PHONE` char(15) NOT NULL,`C_ACCTBAL` decimal(15,2) NOT NULL,`C_MKTSEGMENT` char(10) NOT NULL,`C_COMMENT` varchar(117) NOT NULL,PRIMARY KEY `PK_IDX1614428511` (`C_CUSTKEY`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;CREATE TABLE `orders` (`O_ORDERKEY` int NOT NULL,`O_CUSTKEY` int NOT NULL,`O_ORDERSTATUS` char(1) NOT NULL,`O_TOTALPRICE` decimal(15,2) NOT NULL,`O_ORDERDATE` date NOT NULL,`O_ORDERPRIORITY` char(15) NOT NULL,`O_CLERK` char(15) NOT NULL,`O_SHIPPRIORITY` int NOT NULL,`O_COMMENT` varchar(79) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\"], \"sql\": \"SELECT c.* FROM customer AS c LEFT JOIN orders AS o ON c.c_custkey > o.o_custkey\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1,\\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"},\\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"c\\\",\\\"access_type\\\": \\\"ALL\\\",\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"1.20\\\",\\\"data_read_per_join\\\": \\\"112\\\"},\\\"used_columns\\\": [\\\"C_CUSTKEY\\\",\\\"C_NAME\\\",\\\"C_ADDRESS\\\",\\\"C_NATIONKEY\\\",\\\"C_PHONE\\\",\\\"C_ACCTBAL\\\",\\\"C_MKTSEGMENT\\\",\\\"C_COMMENT\\\"]}},{\\\"table\\\": {\\\"table_name\\\": \\\"o\\\",\\\"access_type\\\": \\\"ALL\\\",\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"2.40\\\",\\\"data_read_per_join\\\": \\\"112\\\"},\\\"used_columns\\\": [\\\"O_CUSTKEY\\\",\\\"O_ORDERKEY\\\",\\\"O_ORDERSTATUS\\\",\\\"O_TOTALPRICE\\\",\\\"O_ORDERDATE\\\",\\\"O_ORDERPRIORITY\\\",\\\"O_CLERK\\\",\\\"O_SHIPPRIORITY\\\",\\\"O_COMMENT\\\"],\\\"attached_condition\\\": \\\"(`c`.`C_CUSTKEY` > `o`.`O_CUSTKEY`)\\\"}}]}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"外连接表消除：该语句是 `LEFT JOIN`，但连接条件 `c.c_custkey > o.o_custkey` 是一个不等值连接。根据规则，外连接消除通常只适用于等值连接。因此，这种不等值连接不满足 `rule0003` 中两表是等值连接的条件，不能直接进行外连接消除。\"}]}}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE `customer` (`C_CUSTKEY` int NOT NULL,`C_NAME` varchar(25) NOT NULL,`C_ADDRESS` varchar(40) NOT NULL,`C_NATIONKEY` int NOT NULL,`C_PHONE` char(15) NOT NULL,`C_ACCTBAL` decimal(15,2) NOT NULL,`C_MKTSEGMENT` char(10) NOT NULL,`C_COMMENT` varchar(117) NOT NULL,PRIMARY KEY `PK_IDX1614428511` (`C_CUSTKEY`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;CREATE TABLE `orders` (`O_ORDERKEY` int NOT NULL,`O_CUSTKEY` int NOT NULL,`O_ORDERSTATUS` char(1) NOT NULL,`O_TOTALPRICE` decimal(15,2) NOT NULL,`O_ORDERDATE` date NOT NULL,`O_ORDERPRIORITY` char(15) NOT NULL,`O_CLERK` char(15) NOT NULL,`O_SHIPPRIORITY` int NOT NULL,`O_COMMENT` varchar(79) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1,\"cost_info\": {\"query_cost\": \"1.20\"},\"nested_loop\": [{\"table\": {\"table_name\": \"c\",\"access_type\": \"ALL\",\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"1.20\",\"data_read_per_join\": \"112\"},\"used_columns\": [\"C_CUSTKEY\",\"C_NAME\",\"C_ADDRESS\",\"C_NATIONKEY\",\"C_PHONE\",\"C_ACCTBAL\",\"C_MKTSEGMENT\",\"C_COMMENT\"]}},{\"table\": {\"table_name\": \"o\",\"access_type\": \"ALL\",\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"2.40\",\"data_read_per_join\": \"112\"},\"used_columns\": [\"O_CUSTKEY\",\"O_ORDERKEY\",\"O_ORDERSTATUS\",\"O_TOTALPRICE\",\"O_ORDERDATE\",\"O_ORDERPRIORITY\",\"O_CLERK\",\"O_SHIPPRIORITY\",\"O_COMMENT\"],\"attached_condition\": \"(`c`.`C_CUSTKEY` > `o`.`O_CUSTKEY`)\"}}]}}}\n\nOriginal SQL:\nSELECT c.* FROM customer AS c LEFT JOIN orders AS o ON c.c_custkey > o.o_custkey\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT DISTINCT c.* FROM customer AS c LEFT JOIN orders AS o ON c.C_CUSTKEY > o.O_CUSTKEY"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "19",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"19\", \"description\": \"一个包含INNER JOIN和DISTINCT的SELECT语句，可能存在不必要的DISTINCT，且包含排序操作。\", \"create_table_statements\": [\"CREATE TABLE PatientRecords (PatientID INT PRIMARY KEY,Name VARCHAR(255),Age INT);CREATE TABLE DoctorSchedules (DoctorID INT PRIMARY KEY,ScheduleDate DATE,PatientID INT);CREATE TABLE MedicalDevices (DeviceID INT PRIMARY KEY,DeviceName VARCHAR(255),PatientID INT);CREATE TABLE TreatmentHistory (TreatmentID INT PRIMARY KEY,PatientID INT,TreatmentDate DATE);\"], \"sql\": \"SELECT DISTINCT PatientRecords.PatientID, PatientRecords.Name, TreatmentHistory.TreatmentDate FROM PatientRecords INNER JOIN TreatmentHistory ON PatientRecords.PatientID = TreatmentHistory.PatientID ORDER BY TreatmentHistory.TreatmentDate DESC\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1,\\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"},\\\"duplicates_removal\\\": {\\\"using_temporary_table\\\": true,\\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"PatientRecords\\\",\\\"access_type\\\": \\\"ALL\\\",\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"1.20\\\",\\\"data_read_per_join\\\": \\\"112\\\"},\\\"used_columns\\\": [\\\"PatientID\\\",\\\"Name\\\",\\\"Age\\\"]}},{\\\"table\\\": {\\\"table_name\\\": \\\"TreatmentHistory\\\",\\\"access_type\\\": \\\"ref\\\",\\\"rows_examined_per_scan\\\": 1,\\\"rows_produced_per_join\\\": 1,\\\"filtered\\\": \\\"100.00\\\",\\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\",\\\"eval_cost\\\": \\\"0.20\\\",\\\"prefix_cost\\\": \\\"2.40\\\",\\\"data_read_per_join\\\": \\\"112\\\"},\\\"used_columns\\\": [\\\"TreatmentID\\\",\\\"PatientID\\\",\\\"TreatmentDate\\\"],\\\"attached_condition\\\": \\\"(`PatientRecords`.`PatientID` = `TreatmentHistory`.`PatientID`)\\\"}}]}}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"外连接表消除：本用例为 `INNER JOIN`，而非 `LEFT JOIN` 或 `RIGHT JOIN`。`外连接表消除`规则 (rule0003) 明确适用于 `LEFT JOIN` 或 `RIGHT JOIN`，其目的是在满足特定条件时将外连接转换为内连接或直接消除。对于原始就是 `INNER JOIN` 的情况，该规则不直接适用，因为其连接语义已经是最严格的。因此，此SQL不符合 `rule0003` 的应用条件。\"}]}}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE PatientRecords (PatientID INT PRIMARY KEY,Name VARCHAR(255),Age INT);CREATE TABLE DoctorSchedules (DoctorID INT PRIMARY KEY,ScheduleDate DATE,PatientID INT);CREATE TABLE MedicalDevices (DeviceID INT PRIMARY KEY,DeviceName VARCHAR(255),PatientID INT);CREATE TABLE TreatmentHistory (TreatmentID INT PRIMARY KEY,PatientID INT,TreatmentDate DATE);\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1,\"cost_info\": {\"query_cost\": \"1.20\"},\"duplicates_removal\": {\"using_temporary_table\": true,\"nested_loop\": [{\"table\": {\"table_name\": \"PatientRecords\",\"access_type\": \"ALL\",\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"1.20\",\"data_read_per_join\": \"112\"},\"used_columns\": [\"PatientID\",\"Name\",\"Age\"]}},{\"table\": {\"table_name\": \"TreatmentHistory\",\"access_type\": \"ref\",\"rows_examined_per_scan\": 1,\"rows_produced_per_join\": 1,\"filtered\": \"100.00\",\"cost_info\": {\"read_cost\": \"1.00\",\"eval_cost\": \"0.20\",\"prefix_cost\": \"2.40\",\"data_read_per_join\": \"112\"},\"used_columns\": [\"TreatmentID\",\"PatientID\",\"TreatmentDate\"],\"attached_condition\": \"(`PatientRecords`.`PatientID` = `TreatmentHistory`.`PatientID`)\"}}]}}}\n\nOriginal SQL:\nSELECT DISTINCT PatientRecords.PatientID, PatientRecords.Name, TreatmentHistory.TreatmentDate FROM PatientRecords INNER JOIN TreatmentHistory ON PatientRecords.PatientID = TreatmentHistory.PatientID ORDER BY TreatmentHistory.TreatmentDate DESC\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT PatientRecords.PatientID, PatientRecords.Name, TreatmentHistory.TreatmentDate FROM PatientRecords INNER JOIN TreatmentHistory ON PatientRecords.PatientID = TreatmentHistory.PatientID GROUP BY PatientRecords.PatientID, PatientRecords.Name, TreatmentHistory.TreatmentDate ORDER BY TreatmentHistory.TreatmentDate DESC"
                    }
                ],
                "rule_id": "1"
            },
            {
                "case_id": "20",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"20\", \"description\": \"一个简单的LEFT JOIN查询，可能存在可消除的外连接，且未引用被连接表中的任何列。\", \"create_table_statements\": [\"CREATE TABLE `customer` (`C_CUSTKEY` int NOT NULL,`C_NAME` varchar(25) NOT NULL,`C_ADDRESS` varchar(40) NOT NULL,`C_NATIONKEY` int NOT NULL,`C_PHONE` char(15) NOT NULL,`C_ACCTBAL` decimal(15,2) NOT NULL,`C_MKTSEGMENT` char(10) NOT NULL,`C_COMMENT` varchar(117) NOT NULL,PRIMARY KEY `PK_IDX1614428511` (`C_CUSTKEY`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;CREATE TABLE `orders` (`O_ORDERKEY` int NOT NULL,`O_CUSTKEY` int NOT NULL,`O_ORDERSTATUS` char(1) NOT NULL,`O_TOTALPRICE` decimal(15,2) NOT NULL,`O_ORDERDATE` date NOT NULL,`O_ORDERPRIORITY` char(15) NOT NULL,`O_CLERK` char(15) NOT NULL,`O_SHIPPRIORITY` int NOT NULL,`O_COMMENT` varchar(79) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\"], \"sql\": \"SELECT o_custkey FROM orders LEFT JOIN customer ON c_custkey=o_custkey\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"0.70\\\"}, \\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"orders\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"0.25\\\", \\\"eval_cost\\\": \\\"0.10\\\", \\\"prefix_cost\\\": \\\"0.35\\\", \\\"data_read_per_join\\\": \\\"472\\\"}, \\\"used_columns\\\": [\\\"O_CUSTKEY\\\"]}}, {\\\"table\\\": {\\\"table_name\\\": \\\"customer\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"C_CUSTKEY\\\"], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [\\\"test_db_case_10_1749728367.orders.O_CUSTKEY\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"using_index\\\": true, \\\"cost_info\\\": {\\\"read_cost\\\": \\\"0.25\\\", \\\"eval_cost\\\": \\\"0.10\\\", \\\"prefix_cost\\\": \\\"0.70\\\", \\\"data_read_per_join\\\": \\\"848\\\"}, \\\"used_columns\\\": [\\\"C_CUSTKEY\\\"]}}]}}\", \"expected\": {\"optimization_rules\": [{\"rule_id\": \"1\", \"difficulty_level\": \"2\", \"rationale\": \"外连接表消除：与Case 5类似，`LEFT JOIN customer` 是一个外连接。由于 `customer` 表的任何列没有在 `SELECT` 列表、`WHERE`、`GROUP BY`、`ORDER BY` 或 `HAVING` 子句中被引用（即被关联表没有被引用）。假设其为等值连接且未加锁，并且 `C_CUSTKEY` 是主键，满足“连表语句不会导致数据重复”的条件，因此这个 `LEFT JOIN` 可以被消除，只保留 `orders` 表。\"}]}}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE `customer` (`C_CUSTKEY` int NOT NULL,`C_NAME` varchar(25) NOT NULL,`C_ADDRESS` varchar(40) NOT NULL,`C_NATIONKEY` int NOT NULL,`C_PHONE` char(15) NOT NULL,`C_ACCTBAL` decimal(15,2) NOT NULL,`C_MKTSEGMENT` char(10) NOT NULL,`C_COMMENT` varchar(117) NOT NULL,PRIMARY KEY `PK_IDX1614428511` (`C_CUSTKEY`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;CREATE TABLE `orders` (`O_ORDERKEY` int NOT NULL,`O_CUSTKEY` int NOT NULL,`O_ORDERSTATUS` char(1) NOT NULL,`O_TOTALPRICE` decimal(15,2) NOT NULL,`O_ORDERDATE` date NOT NULL,`O_ORDERPRIORITY` char(15) NOT NULL,`O_CLERK` char(15) NOT NULL,`O_SHIPPRIORITY` int NOT NULL,`O_COMMENT` varchar(79) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"0.70\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"orders\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"0.25\", \"eval_cost\": \"0.10\", \"prefix_cost\": \"0.35\", \"data_read_per_join\": \"472\"}, \"used_columns\": [\"O_CUSTKEY\"]}}, {\"table\": {\"table_name\": \"customer\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"C_CUSTKEY\"], \"key_length\": \"4\", \"ref\": [\"test_db_case_10_1749728367.orders.O_CUSTKEY\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"using_index\": true, \"cost_info\": {\"read_cost\": \"0.25\", \"eval_cost\": \"0.10\", \"prefix_cost\": \"0.70\", \"data_read_per_join\": \"848\"}, \"used_columns\": [\"C_CUSTKEY\"]}}]}}\n\nOriginal SQL:\nSELECT o_custkey FROM orders LEFT JOIN customer ON c_custkey=o_custkey\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT o_custkey FROM orders"
                    }
                ],
                "rule_id": "1"
            }
        ]
    },
    {
        "indicator_name": "syntax_error_detection.jsonl",
        "indicator_weight": 2,
        "evaluation_type": "hybrid",
        "case_pass_count": 12,
        "case_wrong_count": 1,
        "correct_rate": 0.92,
        "case_datas": [
            {
                "case_id": "1",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"1\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，子查询中存在多余的投影列，这些列在外层查询中没有被使用。预期优化：投影下推（rule0001.md）。\", \"difficulty_level\": \"1\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\"], \"sql\": \"SELECT student_name FROM students WHERE student_id IN ( SELECT student_id FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM students ) AS inner_dt2 ) AS inner_dt1 ) AS outer_dt );\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.40\\\"}, \\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\"]}}, {\\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [\\\"test_db_case_1_1748591779.students.student_id\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"using_index\\\": true, \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"2.40\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\"]}}]}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.40\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"possible_keys\": [\"PRIMARY\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\"]}}, {\"table\": {\"table_name\": \"students\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"ref\": [\"test_db_case_1_1748591779.students.student_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"using_index\": true, \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"2.40\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\"]}}]}}\n\nOriginal SQL:\nSELECT student_name FROM students WHERE student_id IN ( SELECT student_id FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM ( SELECT student_id, gender FROM students ) AS inner_dt2 ) AS inner_dt1 ) AS outer_dt );\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_name FROM students;"
                    }
                ]
            },
            {
                "case_id": "2",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"2\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，其中外部的WHERE子句条件可以下推到最内层的子查询中。预期优化：谓词下推（rule0002.md）。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\", \"CREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\"], \"sql\": \"SELECT s.teacher_id, dt_teacher.teacher_name FROM students s JOIN (     SELECT teacher_id, teacher_name      FROM (         SELECT teacher_id, teacher_name, department          FROM (             SELECT teacher_id, teacher_name, department              FROM (                  SELECT teacher_id, teacher_name, department                  FROM teachers             ) AS inner_dt1         ) AS inner_dt2     ) AS inner_dt3 ) AS dt_teacher ON s.teacher_id = dt_teacher.teacher_id WHERE dt_teacher.teacher_name LIKE 'Dr. %';\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.40\\\"}, \\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"s\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"teacher_id\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_2_1748591779`.`s`.`teacher_id` is not null)\\\"}}, {\\\"table\\\": {\\\"table_name\\\": \\\"teachers\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"teacher_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [\\\"test_db_case_2_1748591779.s.teacher_id\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"2.40\\\", \\\"data_read_per_join\\\": \\\"208\\\"}, \\\"used_columns\\\": [\\\"teacher_id\\\", \\\"teacher_name\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_2_1748591779`.`teachers`.`teacher_name` like 'Dr. %')\\\"}}]}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, teacher_id INT );\nCREATE TABLE teachers ( teacher_id INT AUTO_INCREMENT PRIMARY KEY, teacher_name VARCHAR(100) NOT NULL, department VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.40\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"s\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"teacher_id\"], \"attached_condition\": \"(`test_db_case_2_1748591779`.`s`.`teacher_id` is not null)\"}}, {\"table\": {\"table_name\": \"teachers\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"teacher_id\"], \"key_length\": \"4\", \"ref\": [\"test_db_case_2_1748591779.s.teacher_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"2.40\", \"data_read_per_join\": \"208\"}, \"used_columns\": [\"teacher_id\", \"teacher_name\"], \"attached_condition\": \"(`test_db_case_2_1748591779`.`teachers`.`teacher_name` like 'Dr. %')\"}}]}}\n\nOriginal SQL:\nSELECT s.teacher_id, dt_teacher.teacher_name FROM students s JOIN (     SELECT teacher_id, teacher_name      FROM (         SELECT teacher_id, teacher_name, department          FROM (             SELECT teacher_id, teacher_name, department              FROM (                  SELECT teacher_id, teacher_name, department                  FROM teachers             ) AS inner_dt1         ) AS inner_dt2     ) AS inner_dt3 ) AS dt_teacher ON s.teacher_id = dt_teacher.teacher_id WHERE dt_teacher.teacher_name LIKE 'Dr. %';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT s.teacher_id, t.teacher_name FROM students s JOIN teachers t ON s.teacher_id = t.teacher_id WHERE t.teacher_name LIKE 'Dr. %';"
                    }
                ]
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，子查询中存在多余的投影列，同时内层子查询有ORDER BY和LIMIT，但最外层查询仍可进行投影下推。预期优化：投影下推（rule0001.md）。\", \"difficulty_level\": \"1\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\"], \"sql\": \"SELECT s.student_id, s.student_name, s.date_of_birth FROM students s JOIN ( SELECT student_id, gender FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM students ORDER BY student_id DESC ) AS inner_dt3 ) AS inner_dt2 ORDER BY student_id DESC LIMIT 1 ) AS inner_dt1 ) dt ON s.student_id = dt.student_id WHERE dt.gender = 'MALE'\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"message\\\": \\\"no matching row in const table\\\", \\\"table\\\": {\\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 3, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"ordering_operation\\\": {\\\"using_filesort\\\": false, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"index\\\", \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"gender\\\", \\\"date_of_birth\\\"]}}}}}}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"message\": \"no matching row in const table\", \"table\": {\"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"ordering_operation\": {\"using_filesort\": false, \"table\": {\"table_name\": \"students\", \"access_type\": \"index\", \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"gender\", \"date_of_birth\"]}}}}}}}\n\nOriginal SQL:\nSELECT s.student_id, s.student_name, s.date_of_birth FROM students s JOIN ( SELECT student_id, gender FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM ( SELECT student_id, gender, date_of_birth FROM students ORDER BY student_id DESC ) AS inner_dt3 ) AS inner_dt2 ORDER BY student_id DESC LIMIT 1 ) AS inner_dt1 ) dt ON s.student_id = dt.student_id WHERE dt.gender = 'MALE'\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_id, student_name, date_of_birth FROM students WHERE student_id = (SELECT MAX(student_id) FROM students) AND gender = 'Male';"
                    }
                ]
            },
            {
                "case_id": "4",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"4\", \"description\": \"一个包含关联子查询的SELECT语句，子查询可以被折叠。预期优化：子查询折叠（rule0005.md）。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\", \"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT student_id FROM students s WHERE s.student_id IN ( SELECT e.student_id FROM enrollments e WHERE e.student_id = s.student_id )  AND s.gender = 'Female'  AND s.date_of_birth <= '2000-01-01'  AND s.student_name != 'TestName' LIMIT 10;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"4.80\\\"}, \\\"duplicates_removal\\\": {\\\"using_temporary_table\\\": true, \\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"e\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"24\\\"}, \\\"used_columns\\\": [\\\"student_id\\\"]}}, {\\\"table\\\": {\\\"table_name\\\": \\\"s\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [\\\"test_db_case_5_1748591779.e.student_id\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"4.80\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"gender\\\", \\\"date_of_birth\\\"], \\\"attached_condition\\\": \\\"((`test_db_case_5_1748591779`.`s`.`gender` = 'Female') and (`test_db_case_5_1748591779`.`s`.`date_of_birth` <= '2000-01-01') and (`test_db_case_5_1748591779`.`s`.`student_name` <> 'TestName'))\\\"}}]}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) NOT NULL, gender ENUM('Male', 'Female', 'Other'), date_of_birth DATE );\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"4.80\"}, \"duplicates_removal\": {\"using_temporary_table\": true, \"nested_loop\": [{\"table\": {\"table_name\": \"e\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"student_id\"]}}, {\"table\": {\"table_name\": \"s\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"ref\": [\"test_db_case_5_1748591779.e.student_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"4.80\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\", \"gender\", \"date_of_birth\"], \"attached_condition\": \"((`test_db_case_5_1748591779`.`s`.`gender` = 'Female') and (`test_db_case_5_1748591779`.`s`.`date_of_birth` <= '2000-01-01') and (`test_db_case_5_1748591779`.`s`.`student_name` <> 'TestName'))\"}}]}}\n\nOriginal SQL:\nSELECT student_id FROM students s WHERE s.student_id IN ( SELECT e.student_id FROM enrollments e WHERE e.student_id = s.student_id )  AND s.gender = 'Female'  AND s.date_of_birth <= '2000-01-01'  AND s.student_name != 'TestName' LIMIT 10;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT DISTINCT s.student_id FROM students s INNER JOIN enrollments e ON s.student_id = e.student_id WHERE s.gender = 'Female' AND s.date_of_birth <= '2000-01-01' AND s.student_name != 'TestName' LIMIT 10;"
                    }
                ]
            },
            {
                "case_id": "5",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"5\", \"description\": \"一个简单的SELECT语句，其中WHERE子句对字段使用了函数，导致隐式转换。预期优化：隐式转换（rule0006.md）。\", \"difficulty_level\": \"1\", \"create_table_statements\": [\"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT student_id, CONCAT(\\\"id_\\\", student_id) as student_id2 FROM enrollments WHERE CONCAT(\\\"id_\\\", student_id) >= \\\"id_1000\\\" LIMIT 10;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"enrollments\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"24\\\"}, \\\"used_columns\\\": [\\\"student_id\\\"], \\\"attached_condition\\\": \\\"(concat('id_',`test_db_case_6_1748591779`.`enrollments`.`student_id`) >= 'id_1000')\\\"}}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"enrollments\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"student_id\"], \"attached_condition\": \"(concat('id_',`test_db_case_6_1748591779`.`enrollments`.`student_id`) >= 'id_1000')\"}}}\n\nOriginal SQL:\nSELECT student_id, CONCAT(\"id_\", student_id) as student_id2 FROM enrollments WHERE CONCAT(\"id_\", student_id) >= \"id_1000\" LIMIT 10;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_id, CONCAT(\"id_\", student_id) as student_id2 FROM enrollments WHERE student_id >= 1000 LIMIT 10;"
                    }
                ]
            },
            {
                "case_id": "6",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"6\", \"description\": \"一个包含COUNT标量子查询的SELECT语句，可以将其改写为IN子查询。预期优化：COUNT 标量子查询优化（rule0007.md）。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\", \"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT * FROM students WHERE NOT ( SELECT count(*) FROM enrollments WHERE students.student_id = enrollments.student_id AND enrollment_id > 1000 ) > 0;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\"], \\\"attached_condition\\\": \\\"((/* select#2 */ select count(0) from `test_db_case_7_1748591779`.`enrollments` where ((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))) <= 0)\\\", \\\"attached_subqueries\\\": [{\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.41\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"enrollments\\\", \\\"access_type\\\": \\\"range\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"enrollment_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.21\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.41\\\", \\\"data_read_per_join\\\": \\\"24\\\"}, \\\"used_columns\\\": [\\\"enrollment_id\\\", \\\"student_id\\\"], \\\"attached_condition\\\": \\\"((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))\\\"}}}]}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\"], \"attached_condition\": \"((/* select#2 */ select count(0) from `test_db_case_7_1748591779`.`enrollments` where ((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))) <= 0)\", \"attached_subqueries\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.41\"}, \"table\": {\"table_name\": \"enrollments\", \"access_type\": \"range\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"enrollment_id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.21\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.41\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"enrollment_id\", \"student_id\"], \"attached_condition\": \"((`test_db_case_7_1748591779`.`students`.`student_id` = `test_db_case_7_1748591779`.`enrollments`.`student_id`) and (`test_db_case_7_1748591779`.`enrollment_id` > 1000))\"}}}]}}\n\nOriginal SQL:\nSELECT * FROM students WHERE NOT ( SELECT count(*) FROM enrollments WHERE students.student_id = enrollments.student_id AND enrollment_id > 1000 ) > 0;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM students WHERE NOT EXISTS (SELECT 1 FROM enrollments WHERE students.student_id = enrollments.student_id AND enrollment_id > 1000);"
                    }
                ]
            },
            {
                "case_id": "7",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"7\", \"description\": \"一个包含HAVING子句的SELECT语句，其中HAVING条件不依赖聚合函数，可以下推到WHERE子句。预期优化：HAVING 条件下推（rule0008.md）。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\"], \"sql\": \"SELECT student_id, MAX(enrollment_date) latest_date FROM enrollments WHERE enrollment_date > \\\"1993-11-26\\\" OR enrollment_date < \\\"1991-11-26\\\" GROUP BY student_id HAVING student_id = 1999\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.20\\\"}, \\\"grouping_operation\\\": {\\\"using_temporary_table\\\": true, \\\"using_filesort\\\": true, \\\"cost_info\\\": {\\\"sort_cost\\\": \\\"1.00\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"enrollments\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"24\\\"}, \\\"used_columns\\\": [\\\"enrollment_id\\\", \\\"student_id\\\", \\\"enrollment_date\\\"], \\\"attached_condition\\\": \\\"((`test_db_case_8_1748591779`.`enrollments`.`enrollment_date` > '1993-11-26') or (`test_db_case_8_1748591779`.`enrollments`.`enrollment_date` < '1991-11-26'))\\\"}}}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT, enrollment_date DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.20\"}, \"grouping_operation\": {\"using_temporary_table\": true, \"using_filesort\": true, \"cost_info\": {\"sort_cost\": \"1.00\"}, \"table\": {\"table_name\": \"enrollments\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"24\"}, \"used_columns\": [\"enrollment_id\", \"student_id\", \"enrollment_date\"], \"attached_condition\": \"((`test_db_case_8_1748591779`.`enrollments`.`enrollment_date` > '1993-11-26') or (`test_db_case_8_1748591779`.`enrollments`.`enrollment_date` < '1991-11-26'))\"}}}}\n\nOriginal SQL:\nSELECT student_id, MAX(enrollment_date) latest_date FROM enrollments WHERE enrollment_date > \"1993-11-26\" OR enrollment_date < \"1991-11-26\" GROUP BY student_id HAVING student_id = 1999\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_id, MAX(enrollment_date) latest_date FROM enrollments WHERE student_id = 1999 AND (enrollment_date > \"1993-11-26\" OR enrollment_date < \"1991-11-26\")"
                    }
                ]
            },
            {
                "case_id": "8",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"8\", \"description\": \"一个包含多层嵌套子查询的SELECT语句，最内层的GROUP BY子句是不必要的，可以被消除。预期优化：GROUP BY 子句消除（rule0009.md）。\", \"difficulty_level\": \"1\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), namespace VARCHAR(50) );\"], \"sql\": \"SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT * FROM students GROUP BY student_id ORDER BY COUNT(namespace) ) AS t1 ) AS t2 ) AS t3;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"10.50\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"t1\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 2, \\\"rows_produced_per_join\\\": 2, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"10.10\\\", \\\"eval_cost\\\": \\\"0.40\\\", \\\"prefix_cost\\\": \\\"10.50\\\", \\\"data_read_per_join\\\": \\\"336\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"namespace\\\"], \\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 4, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"ordering_operation\\\": {\\\"using_temporary_table\\\": true, \\\"using_filesort\\\": true, \\\"grouping_operation\\\": {\\\"using_filesort\\\": false, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"index\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"160\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"namespace\\\"]}}}}}}}}\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), namespace VARCHAR(50) );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"10.50\"}, \"table\": {\"table_name\": \"t1\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 2, \"rows_produced_per_join\": 2, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"10.10\", \"eval_cost\": \"0.40\", \"prefix_cost\": \"10.50\", \"data_read_per_join\": \"336\"}, \"used_columns\": [\"student_id\", \"student_name\", \"namespace\"], \"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 4, \"cost_info\": {\"query_cost\": \"1.20\"}, \"ordering_operation\": {\"using_temporary_table\": true, \"using_filesort\": true, \"grouping_operation\": {\"using_filesort\": false, \"table\": {\"table_name\": \"students\", \"access_type\": \"index\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"160\"}, \"used_columns\": [\"student_id\", \"student_name\", \"namespace\"]}}}}}}}}\n\nOriginal SQL:\nSELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT * FROM students GROUP BY student_id ORDER BY COUNT(namespace) ) AS t1 ) AS t2 ) AS t3;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM students GROUP BY student_id ORDER BY COUNT(namespace);"
                    }
                ]
            },
            {
                "case_id": "9",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"9\", \"description\": \"一个包含非关联子查询的SELECT语句，可以将子查询转换为关联子查询。预期优化：非关联子查询优化（rule0010.md）。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\", \"CREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT );\"], \"sql\": \"SELECT * FROM students WHERE student_id IN ( SELECT student_id FROM enrollments AS inner_dt );\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"4.80\\\"}, \\\"nested_loop\\\": [{\\\"table\\\": {\\\"table_name\\\": \\\"<subquery2>\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"query_block\\\": {\\\"table\\\": {\\\"table_name\\\": \\\"inner_dt\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"16\\\"}, \\\"used_columns\\\": [\\\"student_id\\\"]}}}}}, {\\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"eq_ref\\\", \\\"possible_keys\\\": [\\\"PRIMARY\\\"], \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"student_id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"ref\\\": [\\\"<subquery2>.student_id\\\"], \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"4.80\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\"]}}]}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\nCREATE TABLE enrollments ( enrollment_id INT AUTO_INCREMENT PRIMARY KEY, student_id INT NOT NULL, course_id INT );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"4.80\"}, \"nested_loop\": [{\"table\": {\"table_name\": \"<subquery2>\", \"access_type\": \"ALL\", \"materialized_from_subquery\": {\"using_temporary_table\": true, \"query_block\": {\"table\": {\"table_name\": \"inner_dt\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"16\"}, \"used_columns\": [\"student_id\"]}}}}}, {\"table\": {\"table_name\": \"students\", \"access_type\": \"eq_ref\", \"possible_keys\": [\"PRIMARY\"], \"key\": \"PRIMARY\", \"used_key_parts\": [\"student_id\"], \"key_length\": \"4\", \"ref\": [\"<subquery2>.student_id\"], \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"4.80\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\"]}}]}}\n\nOriginal SQL:\nSELECT * FROM students WHERE student_id IN ( SELECT student_id FROM enrollments AS inner_dt );\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM students WHERE EXISTS (SELECT 1 FROM enrollments WHERE enrollments.student_id = students.student_id);"
                    }
                ]
            },
            {
                "case_id": "10",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"10\", \"description\": \"一个包含模拟ROW_NUMBER()窗口函数和过滤条件的SELECT语句，可以推导为TopN算子。预期优化：窗口函数推导TopN（rule0011.md）。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), date_of_birth DATE );\"], \"sql\": \"SELECT T1.student_name, T1.date_of_birth FROM students AS T1 WHERE (SELECT COUNT(*) FROM students AS T2 WHERE T2.student_name <= T1.student_name) <= 3 AND (SELECT COUNT(*) FROM students AS T3 WHERE T3.date_of_birth <= T1.date_of_birth) <= 2 ORDER BY T1.student_name, T1.date_of_birth;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"2.20\\\"}, \\\"ordering_operation\\\": {\\\"using_filesort\\\": true, \\\"cost_info\\\": {\\\"sort_cost\\\": \\\"1.00\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"T1\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"date_of_birth\\\"], \\\"attached_condition\\\": \\\"(((/* select#2 */ select count(0) from `test_db_case_11_1748591779`.`students` `T2` where (`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)) <= 3) and ((/* select#3 */ select count(0) from `test_db_case_11_1748591779`.`students` `T3` where (`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)) <= 2))\\\", \\\"attached_subqueries\\\": [{\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 3, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"T3\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"date_of_birth\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)\\\"}}}, {\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"T2\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"student_name\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)\\\"}}}]}}}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), date_of_birth DATE );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"2.20\"}, \"ordering_operation\": {\"using_filesort\": true, \"cost_info\": {\"sort_cost\": \"1.00\"}, \"table\": {\"table_name\": \"T1\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_id\", \"student_name\", \"date_of_birth\"], \"attached_condition\": \"(((/* select#2 */ select count(0) from `test_db_case_11_1748591779`.`students` `T2` where (`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)) <= 3) and ((/* select#3 */ select count(0) from `test_db_case_11_1748591779`.`students` `T3` where (`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)) <= 2))\", \"attached_subqueries\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"T3\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"date_of_birth\"], \"attached_condition\": \"(`test_db_case_11_1748591779`.`T3`.`date_of_birth` <= `test_db_case_11_1748591779`.`T1`.`date_of_birth`)\"}}}, {\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"T2\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"student_name\"], \"attached_condition\": \"(`test_db_case_11_1748591779`.`T2`.`student_name` <= `test_db_case_11_1748591779`.`T1`.`student_name`)\"}}}]}}}}\n\nOriginal SQL:\nSELECT T1.student_name, T1.date_of_birth FROM students AS T1 WHERE (SELECT COUNT(*) FROM students AS T2 WHERE T2.student_name <= T1.student_name) <= 3 AND (SELECT COUNT(*) FROM students AS T3 WHERE T3.date_of_birth <= T1.date_of_birth) <= 2 ORDER BY T1.student_name, T1.date_of_birth;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT student_name, date_of_birth FROM (SELECT student_name, date_of_birth, ROW_NUMBER() OVER (ORDER BY student_name) as name_rank, ROW_NUMBER() OVER (ORDER BY date_of_birth) as dob_rank FROM students) ranked WHERE name_rank <= 3 AND dob_rank <= 2 ORDER BY student_name, date_of_birth;"
                    }
                ]
            },
            {
                "case_id": "11",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"11\", \"description\": \"一个包含UNION的SELECT语句，其中WHERE子句包含LIKE前缀匹配，可以改写为范围查询。预期优化：LIKE前缀查询优化（rule0012.md）。\", \"difficulty_level\": \"1\", \"create_table_statements\": [\"CREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), major VARCHAR(100) );\"], \"sql\": \"SELECT * FROM students WHERE student_name LIKE 'John%' UNION SELECT * FROM students WHERE student_name LIKE 'Jane%';\", \"explain\": \"{\\\"query_block\\\": {\\\"union_result\\\": {\\\"using_temporary_table\\\": true, \\\"table_name\\\": \\\"<union1,2>\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"query_specifications\\\": [{\\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"208\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"major\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_12_1748591779`.`students`.`student_name` like 'John%')\\\"}}}, {\\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"208\\\"}, \\\"used_columns\\\": [\\\"student_id\\\", \\\"student_name\\\", \\\"major\\\"], \\\"attached_condition\\\": \\\"(`test_db_case_12_1748591779`.`students`.`student_name` like 'Jane%')\\\"}}}]}}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( student_id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100), major VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": {\"union_result\": {\"using_temporary_table\": true, \"table_name\": \"<union1,2>\", \"access_type\": \"ALL\", \"query_specifications\": [{\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"208\"}, \"used_columns\": [\"student_id\", \"student_name\", \"major\"], \"attached_condition\": \"(`test_db_case_12_1748591779`.`students`.`student_name` like 'John%')\"}}}, {\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"208\"}, \"used_columns\": [\"student_id\", \"student_name\", \"major\"], \"attached_condition\": \"(`test_db_case_12_1748591779`.`students`.`student_name` like 'Jane%')\"}}}]}}}\n\nOriginal SQL:\nSELECT * FROM students WHERE student_name LIKE 'John%' UNION SELECT * FROM students WHERE student_name LIKE 'Jane%';\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM students WHERE student_name LIKE 'John%' OR student_name LIKE 'Jane%';"
                    }
                ]
            },
            {
                "case_id": "12",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"12\", \"description\": \"一个包含UNION的SELECT语句，外部查询包含LIMIT子句，可以下推到UNION的各个分支中。预期优化：LIMIT下推至UNION分支（rule0013.md）。\", \"difficulty_level\": \"2\", \"create_table_statements\": [\"CREATE TABLE users ( id INT PRIMARY KEY, name VARCHAR(100), reg_date DATE );\", \"CREATE TABLE articles ( id INT PRIMARY KEY, title VARCHAR(255), publish_time DATETIME );\"], \"sql\": \"SELECT * FROM (  (SELECT name FROM users ORDER BY reg_date DESC)  UNION  (SELECT title FROM articles ORDER BY publish_time DESC) ) AS mixed  ORDER BY name LIMIT 5;\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"15.00\\\"}, \\\"ordering_operation\\\": {\\\"using_filesort\\\": true, \\\"cost_info\\\": {\\\"sort_cost\\\": \\\"4.00\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"mixed\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 4, \\\"rows_produced_per_join\\\": 4, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"10.20\\\", \\\"eval_cost\\\": \\\"0.80\\\", \\\"prefix_cost\\\": \\\"11.00\\\", \\\"data_read_per_join\\\": \\\"1K\\\"}, \\\"used_columns\\\": [\\\"name\\\"], \\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"union_result\\\": {\\\"using_temporary_table\\\": true, \\\"table_name\\\": \\\"<union2,3>\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"query_specifications\\\": [{\\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"users\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"name\\\", \\\"reg_date\\\"]}}}, {\\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 3, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"articles\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"272\\\"}, \\\"used_columns\\\": [\\\"title\\\", \\\"publish_time\\\"]}}}]}}}}}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE users ( id INT PRIMARY KEY, name VARCHAR(100), reg_date DATE );\nCREATE TABLE articles ( id INT PRIMARY KEY, title VARCHAR(255), publish_time DATETIME );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"15.00\"}, \"ordering_operation\": {\"using_filesort\": true, \"cost_info\": {\"sort_cost\": \"4.00\"}, \"table\": {\"table_name\": \"mixed\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 4, \"rows_produced_per_join\": 4, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"10.20\", \"eval_cost\": \"0.80\", \"prefix_cost\": \"11.00\", \"data_read_per_join\": \"1K\"}, \"used_columns\": [\"name\"], \"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"union_result\": {\"using_temporary_table\": true, \"table_name\": \"<union2,3>\", \"access_type\": \"ALL\", \"query_specifications\": [{\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 2, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"users\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"name\", \"reg_date\"]}}}, {\"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"articles\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"272\"}, \"used_columns\": [\"title\", \"publish_time\"]}}}]}}}}}}\n\nOriginal SQL:\nSELECT * FROM (  (SELECT name FROM users ORDER BY reg_date DESC)  UNION  (SELECT title FROM articles ORDER BY publish_time DESC) ) AS mixed  ORDER BY name LIMIT 5;\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM (SELECT name FROM users UNION SELECT title FROM articles) AS mixed ORDER BY name LIMIT 5;"
                    }
                ]
            },
            {
                "case_id": "13",
                "case_weight": 0,
                "case_content": "{\"case_id\": \"13\", \"description\": \"一个包含IN子查询的SELECT语句，但子查询的结果行数不保证小于等于1，因此不能转换为标量子查询。预期优化：不适用（该优化规则要求子查询返回结果的行数必须小于等于1）。\", \"difficulty_level\": \"N/A\", \"create_table_statements\": [\"CREATE TABLE students ( id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\", \"CREATE TABLE A ( id INT PRIMARY KEY, value VARCHAR(100) );\", \"CREATE TABLE B ( id INT PRIMARY KEY, value VARCHAR(100) );\"], \"sql\": \"SELECT * FROM students WHERE id IN ( SELECT id FROM (SELECT id FROM A LIMIT 1) AS subA UNION ALL SELECT id FROM (SELECT id FROM B LIMIT 1) AS subB );\", \"explain\": \"{\\\"query_block\\\": {\\\"select_id\\\": 1, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"students\\\", \\\"access_type\\\": \\\"ALL\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"id\\\", \\\"student_name\\\"], \\\"attached_condition\\\": \\\"<in_optimizer>(`test_db_case_14_1748591779`.`students`.`id`,<exists>(/* select#2 */ select 1 from (/* select#3 */ select `test_db_case_14_1748591779`.`A`.`id` AS `id` from `test_db_case_14_1748591779`.`A` limit 1) `subA` where (<cache>(`test_db_case_14_1748591779`.`students`.`id`) = NULL) union all /* select#4 */ select 1 from (/* select#5 */ select `test_db_case_14_1748591779`.`B`.`id` AS `id` from `test_db_case_14_1748591779`.`B` limit 1) `subB` where (<cache>(`test_db_case_14_1748591779`.`students`.`id`) = NULL)))\\\", \\\"attached_subqueries\\\": [{\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"union_result\\\": {\\\"using_temporary_table\\\": false, \\\"query_specifications\\\": [{\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 2, \\\"message\\\": \\\"no matching row in const table\\\", \\\"table\\\": {\\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 3, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"A\\\", \\\"access_type\\\": \\\"index\\\", \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"using_index\\\": true, \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"id\\\"]}}}}}}, {\\\"dependent\\\": true, \\\"cacheable\\\": false, \\\"query_block\\\": {\\\"select_id\\\": 4, \\\"message\\\": \\\"no matching row in const table\\\", \\\"table\\\": {\\\"materialized_from_subquery\\\": {\\\"using_temporary_table\\\": true, \\\"dependent\\\": false, \\\"cacheable\\\": true, \\\"query_block\\\": {\\\"select_id\\\": 5, \\\"cost_info\\\": {\\\"query_cost\\\": \\\"1.20\\\"}, \\\"table\\\": {\\\"table_name\\\": \\\"B\\\", \\\"access_type\\\": \\\"index\\\", \\\"key\\\": \\\"PRIMARY\\\", \\\"used_key_parts\\\": [\\\"id\\\"], \\\"key_length\\\": \\\"4\\\", \\\"rows_examined_per_scan\\\": 1, \\\"rows_produced_per_join\\\": 1, \\\"filtered\\\": \\\"100.00\\\", \\\"using_index\\\": true, \\\"cost_info\\\": {\\\"read_cost\\\": \\\"1.00\\\", \\\"eval_cost\\\": \\\"0.20\\\", \\\"prefix_cost\\\": \\\"1.20\\\", \\\"data_read_per_join\\\": \\\"112\\\"}, \\\"used_columns\\\": [\\\"id\\\"]}}}}}}]}}}}\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are a database expert in SQL performance optimization.\nGiven the table definitions, explain output and the original SQL, apply appropriate optimizations.\nOutput only the optimized SQL as a single-line statement with no markdown or extra text.\n\nTable Definitions:\nCREATE TABLE students ( id INT AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(100) );\nCREATE TABLE A ( id INT PRIMARY KEY, value VARCHAR(100) );\nCREATE TABLE B ( id INT PRIMARY KEY, value VARCHAR(100) );\n\nExplain Output in JSON:\n{\"query_block\": {\"select_id\": 1, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"students\", \"access_type\": \"ALL\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"id\", \"student_name\"], \"attached_condition\": \"<in_optimizer>(`test_db_case_14_1748591779`.`students`.`id`,<exists>(/* select#2 */ select 1 from (/* select#3 */ select `test_db_case_14_1748591779`.`A`.`id` AS `id` from `test_db_case_14_1748591779`.`A` limit 1) `subA` where (<cache>(`test_db_case_14_1748591779`.`students`.`id`) = NULL) union all /* select#4 */ select 1 from (/* select#5 */ select `test_db_case_14_1748591779`.`B`.`id` AS `id` from `test_db_case_14_1748591779`.`B` limit 1) `subB` where (<cache>(`test_db_case_14_1748591779`.`students`.`id`) = NULL)))\", \"attached_subqueries\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"union_result\": {\"using_temporary_table\": false, \"query_specifications\": [{\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 2, \"message\": \"no matching row in const table\", \"table\": {\"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 3, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"A\", \"access_type\": \"index\", \"key\": \"PRIMARY\", \"used_key_parts\": [\"id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"using_index\": true, \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"id\"]}}}}}}, {\"dependent\": true, \"cacheable\": false, \"query_block\": {\"select_id\": 4, \"message\": \"no matching row in const table\", \"table\": {\"materialized_from_subquery\": {\"using_temporary_table\": true, \"dependent\": false, \"cacheable\": true, \"query_block\": {\"select_id\": 5, \"cost_info\": {\"query_cost\": \"1.20\"}, \"table\": {\"table_name\": \"B\", \"access_type\": \"index\", \"key\": \"PRIMARY\", \"used_key_parts\": [\"id\"], \"key_length\": \"4\", \"rows_examined_per_scan\": 1, \"rows_produced_per_join\": 1, \"filtered\": \"100.00\", \"using_index\": true, \"cost_info\": {\"read_cost\": \"1.00\", \"eval_cost\": \"0.20\", \"prefix_cost\": \"1.20\", \"data_read_per_join\": \"112\"}, \"used_columns\": [\"id\"]}}}}}}]}}}}\n\nOriginal SQL:\nSELECT * FROM students WHERE id IN ( SELECT id FROM (SELECT id FROM A LIMIT 1) AS subA UNION ALL SELECT id FROM (SELECT id FROM B LIMIT 1) AS subB );\n\nOptimized SQL:\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT * FROM students WHERE id = (SELECT id FROM A LIMIT 1) OR id = (SELECT id FROM B LIMIT 1);"
                    }
                ]
            }
        ]
    }
]