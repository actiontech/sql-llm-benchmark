[
    {
        "indicator_name": "big_sql_conversion.jsonl",
        "indicator_weight": 4,
        "evaluation_type": "hybrid",
        "case_pass_count": 3,
        "case_wrong_count": 12,
        "correct_rate": 0.2,
        "case_datas": [
            {
                "case_id": "1",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"1\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"TO_DATE\", \"TO_CHAR\", \"SYSDATE\", \"LENGTH\", \"LAST_DAY\", \"COUNT\", \"TRUNC\", \"CASE\", \"CAST\", \"CURSOR\", \"DECODE\", \"SUBSTR\", \"EXECUTE IMMEDIATE\", \"COMMIT\", \"ROLLBACK\", \"DBMS_OUTPUT.ENABLE\", \"DBMS_OUTPUT.PUT_LINE\", \"SQLERRM\"]}, \"sql\": \"DELIMITER $$ CREATE PROCEDURE \\\"LFBB_BVC_VHG_CHECK\\\"( P_VESSEL_CODE VARCHAR2, P_BRANCH_CODE VARCHAR2, P_DEPT_DEPTH VARCHAR2, P_RESP_PERSON VARCHAR2, P_CHECK_NAME_PART VARCHAR2, P_CHECK_DATE_STR VARCHAR2 ) IS CURSOR cur_range(p_start_date DATE,p_end_date DATE) IS SELECT CWBT_NAME, I.HCJI_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.BCGDK_SS2, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.BCGDK_SS2 = P_BRANCH_CODE AND I.VESSEL_CODE = P_VESSEL_CODE AND I.CHECK_DATE >= p_start_date AND I.CHECK_DATE <= p_end_date AND (P_DEPT_DEPTH IS NULL OR I.DEPT = P_DEPT_DEPTH) AND (P_RESP_PERSON IS NULL OR I.RESPONSIBLE_PERSON = P_RESP_PERSON) AND (P_CHECK_NAME_PART IS NULL OR (P_CHECK_NAME_PART IS NOT NULL AND I.CHECK_NAME LIKE '%' || P_CHECK_NAME_PART || '%')) AND I.DATA_TYPE = 'S'; v_count INTEGER; v_total_count INTEGER; v_col_suffix VARCHAR2(2); v_start_date DATE; v_end_date DATE; BEGIN EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO'; IF P_CHECK_DATE_STR IS NULL THEN v_start_date := TO_DATE(TO_CHAR(SYSDATE(), 'YYYY') || '-01-01', 'YYYY-MM-DD'); v_end_date := TO_DATE(TO_CHAR(SYSDATE(), 'YYYY') || '-12-31', 'YYYY-MM-DD'); ELSIF LENGTH(P_CHECK_DATE_STR) = 4 THEN v_start_date := TO_DATE(P_CHECK_DATE_STR || '-06-24', 'YYYY-MM-DD'); v_end_date := TO_DATE(P_CHECK_DATE_STR || '-10-24', 'YYYY-MM-DD'); ELSE v_start_date := TO_DATE(P_CHECK_DATE_STR || '-03', 'YYYY-MM-DD'); v_end_date := LAST_DAY(v_start_date); END IF; FOR r_row IN cur_range(v_start_date, v_end_date) LOOP SELECT COUNT(1) INTO v_count FROM G_R_CHECK_INFO I WHERE I.PID = r_row.ROUTINE_CHECK_ITEM_ID; IF v_count = 0 THEN INSERT INTO G_R_CHECK_INFO (PID, CWBT_NAME, HCJI_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, BCGDK_SS2, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE) SELECT r_row.ROUTINE_CHECK_ITEM_ID, r_row.CWBT_NAME, r_row.HCJI_CODE, r_row.CHECK_NAME, r_row.DEPT_NAME, r_row.DEPT, r_row.RESPONSIBLE_PERSON_NAME, r_row.RESPONSIBLE_PERSON, r_row.BCGDK_SS2, TRUNC(r_row.CHECK_DATE, 'MM'), r_row.VESSEL_CODE, r_row.VESSEL_NAME, r_row.COMPANY_CODE, r_row.CREATED_BY_USER, r_row.CREATED_OFFICE, r_row.CREATED_DTM_LOC, r_row.CREATED_TIME_ZONE, r_row.UPDATED_BY_USER, r_row.UPDATED_OFFICE, r_row.UPDATED_DTM_LOC, r_row.UPDATED_TIME_ZONE, r_row.RECORD_VERSION, r_row.PRINCIPAL_GROUP_CODE FROM DUAL; END IF; SELECT CASE P_BRANCH_CODE WHEN 'A' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'DD') AS NUMBER) WHEN 'B' THEN CAST(TO_CHAR(PKG_DATE_UTIL.GET_1ST_M(r_row.CHECK_DATE, DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'YY', 'MM')), DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'WW', 'W')) AS NUMBER) WHEN 'C' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'MM') AS NUMBER) END INTO v_col_suffix FROM DUAL; EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || v_col_suffix || ' = :1 WHERE I.PID = :2' USING CASE r_row.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(r_row.REMARK, 1, 50), r_row.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO v_total_count FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; DBMS_OUTPUT.ENABLE(10000); DBMS_OUTPUT.PUT_LINE(SQLERRM); END SP_PMS_SYNC_ROUTINE_CHECK; $$\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE PROCEDURE \"LFBB_BVC_VHG_CHECK\"( P_VESSEL_CODE VARCHAR2, P_BRANCH_CODE VARCHAR2, P_DEPT_DEPTH VARCHAR2, P_RESP_PERSON VARCHAR2, P_CHECK_NAME_PART VARCHAR2, P_CHECK_DATE_STR VARCHAR2 ) IS CURSOR cur_range(p_start_date DATE,p_end_date DATE) IS SELECT CWBT_NAME, I.HCJI_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.BCGDK_SS2, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE FROM VW_R_CHECK_INFO I WHERE I.BCGDK_SS2 = P_BRANCH_CODE AND I.VESSEL_CODE = P_VESSEL_CODE AND I.CHECK_DATE >= p_start_date AND I.CHECK_DATE <= p_end_date AND (P_DEPT_DEPTH IS NULL OR I.DEPT = P_DEPT_DEPTH) AND (P_RESP_PERSON IS NULL OR I.RESPONSIBLE_PERSON = P_RESP_PERSON) AND (P_CHECK_NAME_PART IS NULL OR (P_CHECK_NAME_PART IS NOT NULL AND I.CHECK_NAME LIKE '%' || P_CHECK_NAME_PART || '%')) AND I.DATA_TYPE = 'S'; v_count INTEGER; v_total_count INTEGER; v_col_suffix VARCHAR2(2); v_start_date DATE; v_end_date DATE; BEGIN EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO'; IF P_CHECK_DATE_STR IS NULL THEN v_start_date := TO_DATE(TO_CHAR(SYSDATE(), 'YYYY') || '-01-01', 'YYYY-MM-DD'); v_end_date := TO_DATE(TO_CHAR(SYSDATE(), 'YYYY') || '-12-31', 'YYYY-MM-DD'); ELSIF LENGTH(P_CHECK_DATE_STR) = 4 THEN v_start_date := TO_DATE(P_CHECK_DATE_STR || '-06-24', 'YYYY-MM-DD'); v_end_date := TO_DATE(P_CHECK_DATE_STR || '-10-24', 'YYYY-MM-DD'); ELSE v_start_date := TO_DATE(P_CHECK_DATE_STR || '-03', 'YYYY-MM-DD'); v_end_date := LAST_DAY(v_start_date); END IF; FOR r_row IN cur_range(v_start_date, v_end_date) LOOP SELECT COUNT(1) INTO v_count FROM G_R_CHECK_INFO I WHERE I.PID = r_row.ROUTINE_CHECK_ITEM_ID; IF v_count = 0 THEN INSERT INTO G_R_CHECK_INFO (PID, CWBT_NAME, HCJI_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, BCGDK_SS2, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE) SELECT r_row.ROUTINE_CHECK_ITEM_ID, r_row.CWBT_NAME, r_row.HCJI_CODE, r_row.CHECK_NAME, r_row.DEPT_NAME, r_row.DEPT, r_row.RESPONSIBLE_PERSON_NAME, r_row.RESPONSIBLE_PERSON, r_row.BCGDK_SS2, TRUNC(r_row.CHECK_DATE, 'MM'), r_row.VESSEL_CODE, r_row.VESSEL_NAME, r_row.COMPANY_CODE, r_row.CREATED_BY_USER, r_row.CREATED_OFFICE, r_row.CREATED_DTM_LOC, r_row.CREATED_TIME_ZONE, r_row.UPDATED_BY_USER, r_row.UPDATED_OFFICE, r_row.UPDATED_DTM_LOC, r_row.UPDATED_TIME_ZONE, r_row.RECORD_VERSION, r_row.PRINCIPAL_GROUP_CODE FROM DUAL; END IF; SELECT CASE P_BRANCH_CODE WHEN 'A' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'DD') AS NUMBER) WHEN 'B' THEN CAST(TO_CHAR(PKG_DATE_UTIL.GET_1ST_M(r_row.CHECK_DATE, DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'YY', 'MM')), DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'WW', 'W')) AS NUMBER) WHEN 'C' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'MM') AS NUMBER) END INTO v_col_suffix FROM DUAL; EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || v_col_suffix || ' = :1 WHERE I.PID = :2' USING CASE r_row.CHECK_RESULT WHEN '0' THEN '√' WHEN '1' THEN '×' WHEN '2' THEN 'O' WHEN '3' THEN '—' END || SUBSTR(r_row.REMARK, 1, 50), r_row.ROUTINE_CHECK_ITEM_ID; END LOOP; SELECT COUNT(*) INTO v_total_count FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; COMMIT; EXCEPTION WHEN OTHERS THEN ROLLBACK; DBMS_OUTPUT.ENABLE(10000); DBMS_OUTPUT.PUT_LINE(SQLERRM); END SP_PMS_SYNC_ROUTINE_CHECK; $$\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DELIMITER $$ \nCREATE PROCEDURE \"LFBB_BVC_VHG_CHECK\"( \n  P_VESSEL_CODE VARCHAR2, \n  P_BRANCH_CODE VARCHAR2, \n  P_DEPT_DEPTH VARCHAR2, \n  P_RESP_PERSON VARCHAR2, \n  P_CHECK_NAME_PART VARCHAR2, \n  P_CHECK_DATE_STR VARCHAR2 \n) \nIS \nCURSOR cur_range(p_start_date DATE, p_end_date DATE) IS \n  SELECT \n    CWBT_NAME, I.HCJI_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, \n    I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.BCGDK_SS2, I.CHECK_DATE, \n    I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, \n    I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, \n    I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, \n    I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE \n  FROM VW_R_CHECK_INFO I \n  WHERE I.BCGDK_SS2 = P_BRANCH_CODE \n    AND I.VESSEL_CODE = P_VESSEL_CODE \n    AND I.CHECK_DATE >= p_start_date \n    AND I.CHECK_DATE <= p_end_date \n    AND (P_DEPT_DEPTH IS NULL OR I.DEPT = P_DEPT_DEPTH) \n    AND (P_RESP_PERSON IS NULL OR I.RESPONSIBLE_PERSON = P_RESP_PERSON) \n    AND (P_CHECK_NAME_PART IS NULL OR (P_CHECK_NAME_PART IS NOT NULL AND I.CHECK_NAME LIKE '%' || P_CHECK_NAME_PART || '%')) \n    AND I.DATA_TYPE = 'S'; \n\nv_count INTEGER; \nv_total_count INTEGER; \nv_col_suffix VARCHAR2(2); \nv_start_date DATE; \nv_end_date DATE; \n\nBEGIN \n  EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO'; \n\n  IF P_CHECK_DATE_STR IS NULL THEN \n    v_start_date := TO_DATE(TO_CHAR(SYSDATE, 'YYYY') || '-01-01', 'YYYY-MM-DD'); \n    v_end_date := TO_DATE(TO_CHAR(SYSDATE, 'YYYY') || '-12-31', 'YYYY-MM-DD'); \n  ELSIF LENGTH(P_CHECK_DATE_STR) = 4 THEN \n    v_start_date := TO_DATE(P_CHECK_DATE_STR || '-06-24', 'YYYY-MM-DD'); \n    v_end_date := TO_DATE(P_CHECK_DATE_STR || '-10-24', 'YYYY-MM-DD'); \n  ELSE \n    v_start_date := TO_DATE(P_CHECK_DATE_STR || '-03', 'YYYY-MM-DD'); \n    v_end_date := LAST_DAY(v_start_date); \n  END IF; \n\n  FOR r_row IN cur_range(v_start_date, v_end_date) LOOP \n    SELECT COUNT(1) INTO v_count \n    FROM G_R_CHECK_INFO I \n    WHERE I.PID = r_row.ROUTINE_CHECK_ITEM_ID; \n\n    IF v_count = 0 THEN \n      INSERT INTO G_R_CHECK_INFO (PID, CWBT_NAME, HCJI_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, BCGDK_SS2, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE) \n      VALUES \n        (r_row.ROUTINE_CHECK_ITEM_ID, r_row.CWBT_NAME, r_row.HCJI_CODE, r_row.CHECK_NAME, r_row.DEPT_NAME, r_row.DEPT, r_row.RESPONSIBLE_PERSON_NAME, r_row.RESPONSIBLE_PERSON, r_row.BCGDK_SS2, TRUNC(r_row.CHECK_DATE, 'MM'), r_row.VESSEL_CODE, r_row.VESSEL_NAME, r_row.COMPANY_CODE, r_row.CREATED_BY_USER, r_row.CREATED_OFFICE, r_row.CREATED_DTM_LOC, r_row.CREATED_TIME_ZONE, r_row.UPDATED_BY_USER, r_row.UPDATED_OFFICE, r_row.UPDATED_DTM_LOC, r_row.UPDATED_TIME_ZONE, r_row.RECORD_VERSION, r_row.PRINCIPAL_GROUP_CODE); \n    END IF; \n\n    SELECT CASE P_BRANCH_CODE \n             WHEN 'A' THEN TO_NUMBER(TO_CHAR(r_row.CHECK_DATE, 'DD')) \n             WHEN 'B' THEN TO_NUMBER(TO_CHAR(r_row.CHECK_DATE, 'WW')) \n             WHEN 'C' THEN TO_NUMBER(TO_CHAR(r_row.CHECK_DATE, 'MM')) \n           END \n    INTO v_col_suffix \n    FROM DUAL; \n\n    EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || v_col_suffix || ' = :1 WHERE I.PID = :2' \n    USING CASE r_row.CHECK_RESULT \n            WHEN '0' THEN '√' \n            WHEN '1' THEN '×' \n            WHEN '2' THEN 'O' \n            WHEN '3' THEN '—' \n          END || SUBSTR(r_row.REMARK, 1, 50), r_row.ROUTINE_CHECK_ITEM_ID; \n  END LOOP; \n\n  SELECT COUNT(*) INTO v_total_count \n  FROM G_R_CHECK_INFO \n  WHERE VESSEL_CODE = '0336'; \n\n  COMMIT; \n\nEXCEPTION \n  WHEN OTHERS THEN \n    ROLLBACK; \n    DBMS_OUTPUT.PUT_LINE(SQLERRM); \nEND; \n$$"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE PROCEDURE LFBB_BVC_VHG_CHECK(P_VESSEL_CODE VARCHAR2, P_BRANCH_CODE VARCHAR2, P_DEPT_DEPTH VARCHAR2, P_RESP_PERSON VARCHAR2, P_CHECK_NAME_PART VARCHAR2, P_CHECK_DATE_STR VARCHAR2) IS \nCURSOR cur_range(p_start_date DATE, p_end_date DATE) IS \n  SELECT CWBT_NAME, I.HCJI_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.BCGDK_SS2, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, \n         I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE \n  FROM VW_R_CHECK_INFO I \n  WHERE I.BCGDK_SS2 = P_BRANCH_CODE AND I.VESSEL_CODE = P_VESSEL_CODE AND I.CHECK_DATE >= p_start_date AND I.CHECK_DATE <= p_end_date \n    AND (P_DEPT_DEPTH IS NULL OR I.DEPT = P_DEPT_DEPTH) \n    AND (P_RESP_PERSON IS NULL OR I.RESPONSIBLE_PERSON = P_RESP_PERSON) \n    AND (P_CHECK_NAME_PART IS NULL OR (I.CHECK_NAME LIKE '%' || P_CHECK_NAME_PART || '%')) \n    AND I.DATA_TYPE = 'S'; \nv_count INTEGER; \nv_total_count INTEGER; \nv_col_suffix VARCHAR2(2); \nv_start_date DATE; \nv_end_date DATE; \nBEGIN \n  EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO'; \n  IF P_CHECK_DATE_STR IS NULL THEN \n    v_start_date := TO_DATE(TO_CHAR(SYSDATE, 'YYYY') || '-01-01', 'YYYY-MM-DD'); \n    v_end_date := TO_DATE(TO_CHAR(SYSDATE, 'YYYY') || '-12-31', 'YYYY-MM-DD'); \n  ELSIF LENGTH(P_CHECK_DATE_STR) = 4 THEN \n    v_start_date := TO_DATE(P_CHECK_DATE_STR || '-06-24', 'YYYY-MM-DD'); \n    v_end_date := TO_DATE(P_CHECK_DATE_STR || '-10-24', 'YYYY-MM-DD'); \n  ELSE \n    v_start_date := TO_DATE(P_CHECK_DATE_STR || '-03', 'YYYY-MM-DD'); \n    v_end_date := LAST_DAY(v_start_date); \n  END IF; \n  FOR r_row IN cur_range(v_start_date, v_end_date) LOOP \n    SELECT COUNT(1) INTO v_count FROM G_R_CHECK_INFO I WHERE I.PID = r_row.ROUTINE_CHECK_ITEM_ID; \n    IF v_count = 0 THEN \n      INSERT INTO G_R_CHECK_INFO(PID, CWBT_NAME, HCJI_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, BCGDK_SS2, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE) \n      SELECT r_row.ROUTINE_CHECK_ITEM_ID, r_row.CWBT_NAME, r_row.HCJI_CODE, r_row.CHECK_NAME, r_row.DEPT_NAME, r_row.DEPT, r_row.RESPONSIBLE_PERSON_NAME, r_row.RESPONSIBLE_PERSON, r_row.BCGDK_SS2, TRUNC(r_row.CHECK_DATE, 'MM'), r_row.VESSEL_CODE, r_row.VESSEL_NAME, r_row.COMPANY_CODE, r_row.CREATED_BY_USER, r_row.CREATED_OFFICE, r_row.CREATED_DTM_LOC, r_row.CREATED_TIME_ZONE, r_row.UPDATED_BY_USER, r_row.UPDATED_OFFICE, r_row.UPDATED_DTM_LOC, r_row.UPDATED_TIME_ZONE, r_row.RECORD_VERSION, r_row.PRINCIPAL_GROUP_CODE \n      FROM DUAL; \n    END IF; \n    SELECT CASE P_BRANCH_CODE \n             WHEN 'A' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'DD') AS NUMBER) \n             WHEN 'B' THEN CAST(TO_CHAR(PKG_DATE_UTIL.GET_1ST_M(r_row.CHECK_DATE, DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'YY', 'MM')), DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'WW', 'W')) AS NUMBER) \n             WHEN 'C' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'MM') AS NUMBER) \n           END \n    INTO v_col_suffix \n    FROM DUAL; \n    EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || v_col_suffix || ' = :1 WHERE I.PID = :2' \n    USING CASE r_row.CHECK_RESULT \n             WHEN '0' THEN '√' \n             WHEN '1' THEN '×' \n             WHEN '2' THEN 'O' \n             WHEN '3' THEN '—' \n           END || SUBSTR(r_row.REMARK, 1, 50), r_row.ROUTINE_CHECK_ITEM_ID; \n  END LOOP; \n  SELECT COUNT(*) INTO v_total_count FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; \n  COMMIT; \nEXCEPTION \n  WHEN OTHERS THEN \n    ROLLBACK; \n    DBMS_OUTPUT.ENABLE(10000); \n    DBMS_OUTPUT.PUT_LINE(SQLERRM); \nEND; "
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE PROCEDURE \"LFBB_BVC_VHG_CHECK\"(\n    P_VESSEL_CODE VARCHAR2, \n    P_BRANCH_CODE VARCHAR2, \n    P_DEPT_DEPTH VARCHAR2, \n    P_RESP_PERSON VARCHAR2, \n    P_CHECK_NAME_PART VARCHAR2, \n    P_CHECK_DATE_STR VARCHAR2\n) IS\n    CURSOR cur_range(p_start_date DATE, p_end_date DATE) IS \n        SELECT CWBT_NAME, I.HCJI_CODE, CHECK_NAME, DEPT_NAME, I.DEPT, RESPONSIBLE_PERSON_NAME, I.RESPONSIBLE_PERSON, CHECK_RESULT, I.CHECK_RESULT_NAME, I.BCGDK_SS2, I.CHECK_DATE, I.VESSEL_CODE, I.VESSEL_NAME, I.ROUTINE_CHECK_ITEM_ID, I.REMARK, I.CREATED_BY_USER, I.CREATED_OFFICE, I.CREATED_DTM_LOC, I.CREATED_TIME_ZONE, I.UPDATED_BY_USER, I.UPDATED_OFFICE, I.UPDATED_DTM_LOC, I.UPDATED_TIME_ZONE, I.COMPANY_CODE, I.RECORD_VERSION, I.PRINCIPAL_GROUP_CODE \n        FROM VW_R_CHECK_INFO I \n        WHERE I.BCGDK_SS2 = P_BRANCH_CODE \n        AND I.VESSEL_CODE = P_VESSEL_CODE \n        AND I.CHECK_DATE >= p_start_date \n        AND I.CHECK_DATE <= p_end_date \n        AND (P_DEPT_DEPTH IS NULL OR I.DEPT = P_DEPT_DEPTH) \n        AND (P_RESP_PERSON IS NULL OR I.RESPONSIBLE_PERSON = P_RESP_PERSON) \n        AND (P_CHECK_NAME_PART IS NULL OR (P_CHECK_NAME_PART IS NOT NULL AND I.CHECK_NAME LIKE '%' || P_CHECK_NAME_PART || '%')) \n        AND I.DATA_TYPE = 'S'; \n    v_count INTEGER; \n    v_total_count INTEGER; \n    v_col_suffix VARCHAR2(2); \n    v_start_date DATE; \n    v_end_date DATE; \nBEGIN \n    EXECUTE IMMEDIATE 'TRUNCATE TABLE G_R_CHECK_INFO'; \n    IF P_CHECK_DATE_STR IS NULL THEN \n        v_start_date := TO_DATE(TO_CHAR(SYSDATE, 'YYYY') || '-01-01', 'YYYY-MM-DD'); \n        v_end_date := TO_DATE(TO_CHAR(SYSDATE, 'YYYY') || '-12-31', 'YYYY-MM-DD'); \n    ELSIF LENGTH(P_CHECK_DATE_STR) = 4 THEN \n        v_start_date := TO_DATE(P_CHECK_DATE_STR || '-06-24', 'YYYY-MM-DD'); \n        v_end_date := TO_DATE(P_CHECK_DATE_STR || '-10-24', 'YYYY-MM-DD'); \n    ELSE \n        v_start_date := TO_DATE(P_CHECK_DATE_STR || '-03', 'YYYY-MM-DD'); \n        v_end_date := LAST_DAY(v_start_date); \n    END IF; \n\n    FOR r_row IN cur_range(v_start_date, v_end_date) LOOP \n        SELECT COUNT(1) INTO v_count \n        FROM G_R_CHECK_INFO I \n        WHERE I.PID = r_row.ROUTINE_CHECK_ITEM_ID; \n\n        IF v_count = 0 THEN \n            INSERT INTO G_R_CHECK_INFO (PID, CWBT_NAME, HCJI_CODE, CHECK_NAME, DEPT_NAME, DEPT, RESPONSIBLE_PERSON_NAME, RESPONSIBLE_PERSON, BCGDK_SS2, CHECK_DATE, VESSEL_CODE, VESSEL_NAME, COMPANY_CODE, CREATED_BY_USER, CREATED_OFFICE, CREATED_DTM_LOC, CREATED_TIME_ZONE, UPDATED_BY_USER, UPDATED_OFFICE, UPDATED_DTM_LOC, UPDATED_TIME_ZONE, RECORD_VERSION, PRINCIPAL_GROUP_CODE) \n            SELECT r_row.ROUTINE_CHECK_ITEM_ID, r_row.CWBT_NAME, r_row.HCJI_CODE, r_row.CHECK_NAME, r_row.DEPT_NAME, r_row.DEPT, r_row.RESPONSIBLE_PERSON_NAME, r_row.RESPONSIBLE_PERSON, r_row.BCGDK_SS2, TRUNC(r_row.CHECK_DATE, 'MM'), r_row.VESSEL_CODE, r_row.VESSEL_NAME, r_row.COMPANY_CODE, r_row.CREATED_BY_USER, r_row.CREATED_OFFICE, r_row.CREATED_DTM_LOC, r_row.CREATED_TIME_ZONE, r_row.UPDATED_BY_USER, r_row.UPDATED_OFFICE, r_row.UPDATED_DTM_LOC, r_row.UPDATED_TIME_ZONE, r_row.RECORD_VERSION, r_row.PRINCIPAL_GROUP_CODE \n            FROM DUAL; \n        END IF; \n\n        SELECT CASE P_BRANCH_CODE \n            WHEN 'A' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'DD') AS NUMBER) \n            WHEN 'B' THEN CAST(TO_CHAR(PKG_DATE_UTIL.GET_1ST_M(r_row.CHECK_DATE, DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'YY', 'MM')), DECODE(LENGTH(P_CHECK_DATE_STR), 4, 'WW', 'W')) AS NUMBER) \n            WHEN 'C' THEN CAST(TO_CHAR(r_row.CHECK_DATE, 'MM') AS NUMBER) \n        END INTO v_col_suffix \n        FROM DUAL; \n\n        EXECUTE IMMEDIATE 'UPDATE G_R_CHECK_INFO I SET N' || v_col_suffix || ' = :1 WHERE I.PID = :2' \n        USING CASE r_row.CHECK_RESULT \n            WHEN '0' THEN '√' \n            WHEN '1' THEN '×' \n            WHEN '2' THEN 'O' \n            WHEN '3' THEN '—' \n        END || SUBSTR(r_row.REMARK, 1, 50), \n        r_row.ROUTINE_CHECK_ITEM_ID; \n    END LOOP; \n\n    SELECT COUNT(*) INTO v_total_count FROM G_R_CHECK_INFO WHERE VESSEL_CODE = '0336'; \n    COMMIT; \nEXCEPTION \n    WHEN OTHERS THEN \n        ROLLBACK; \n        DBMS_OUTPUT.ENABLE(10000); \n        DBMS_OUTPUT.PUT_LINE(SQLERRM); \nEND \"LFBB_BVC_VHG_CHECK\"; "
                    }
                ]
            },
            {
                "case_id": "2",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"2\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CASE\", \"LIKE\", \"ROUND\", \"ABS\", \"WM_CONCAT\", \"REPLACE\", \"DBMS_LOB.SUBSTR\", \"NVL\", \"MAX\", \"SUM\", \"ROWNUM\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE \\\"SP_FMM_PAYMENT_NOTICE_RPT\\\"( V_PAYMENT_NOTICE_ID IN FMM_FEE_PAYMENT_NOTICE.PAYMENT_NOTICE_ID%TYPE DEFAULT NULL, V_USER IN FMM_FEE_INVOICE.INVOICE_NO%TYPE DEFAULT NULL, OUTCURSOR OUT PKG_CURSOR.T_CURSOR ) IS BEGIN OPEN OUTCURSOR FOR SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO,C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_NO(P.PAYMENT_NOTICE_ID) ELSE A.INVOICE_NO END AS INVOICE_NO,A.INVOICE_DESC, A.OCCUR_TIME_FROM,A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT,A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_TAX_AMOUNT') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT_WITHOUT_TAX') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1,'' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE=V_USER AND ROWNUM=1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL,2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL <0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL),2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT,2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, P.APPLY_PAYER, P.APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, A.BILL_NO, CASE WHEN P.PAYMENT_TYPE='FY56' THEN (SELECT GG.RD_PROJECT FROM RBT_RD_ACTIVITY GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) ELSE (SELECT GG.PROJECT_NAME FROM FMM_JG_INNER_ORDER GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) END AS PROJECT_NAME, P.DELIVERY_NO AS PPM_APPLY_NO FROM FMM_FEE_PAYMENT_NOTICE P INNER JOIN FMM_FEE_INVOICE A ON P.PAYMENT_NOTICE_ID=A.PAYMENT_NOTICE_ID LEFT JOIN CRM_CUSTOMER C ON P.PAYEE=C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAYER=C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE=V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL=F.FREIGHT_CODE AND A.INVOICE_SORT=F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT=FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY=CY.CURRENCY LEFT JOIN SYS_USER SU ON SU.USR_CODE=V_USER WHERE P.PAYMENT_NOTICE_ID=V_PAYMENT_NOTICE_ID UNION ALL SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO, C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN dbms_lob.substr(REPLACE((SELECT WM_CONCAT(DE.INVOICE_NUM) FROM (SELECT D.PAYMENT_NO,D.INVOICE_NUM FROM BFM_INVOICE_DETAIL D GROUP BY D.PAYMENT_NO,D.INVOICE_NUM) DE WHERE DE.PAYMENT_NO = P.PAYMENT_NO), ',', '\\\\'),4000,1) ELSE A.INVOICE_NUM END AS INVOICE_NO, '' AS INVOICE_DESC, NVL((SELECT MAX(PO.SUPPLY_DATE) FROM BFM_INVOICE_DETAIL I LEFT JOIN BFM_PURCHASE_ORDER_DETAIL OD ON I.PO_NUMBER = OD.SUB_PO_NUMBER LEFT JOIN BFM_PURCHASE_ORDER PO ON OD.PO_NUMBER = PO.PO_NUMBER WHERE I.PAYMENT_NO = P.PAYMENT_NO),P.APPLY_DATE) AS OCCUR_TIME_FROM, A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT, A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D1.DTL_AMOUNT) FROM BFM_INVOICE_DETAIL D1 WHERE D1.PAYMENT_NO = P.PAYMENT_NO AND NVL(D1.IS_DELETE,'0') <> '1') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D2.DTL_TAX_AMOUNT) FROM BFM_INVOICE_DETAIL D2 WHERE D2.PAYMENT_NO = P.PAYMENT_NO AND NVL(D2.IS_DELETE,'0') <> '1') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D3.DTL_AMOUNT_WITHOUT_TAX) FROM BFM_INVOICE_DETAIL D3 WHERE D3.PAYMENT_NO = P.PAYMENT_NO AND NVL(D3.IS_DELETE,'0') <> '1') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1, '' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE = V_USER AND ROWNUM = 1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL, 2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL < 0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL), 2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT, 2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, NVL(F1.OFFICE_NAME,P.APPLY_PAYER) AS APPLY_PAYER, NVL(S.USR_NAME,P.APPLYER_USER) AS APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, NULL AS BILL_NO, NULL AS PROJECT_NAME, NULL AS PPM_APPLY_NO FROM BFM_PAYMENT_NOTICE P INNER JOIN BFM_INVOICE_DETAIL A ON P.PAYMENT_NO = A.PAYMENT_NO LEFT JOIN CRM_CUSTOMER C ON P.PAYEE = C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAY_FEE_NAME = C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE = V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL = F.FREIGHT_CODE AND A.INVOICE_SORT = F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT = FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY = CY.CURRENCY LEFT JOIN SYS_USER S ON P.APPLYER_USER = S.USR_CODE LEFT JOIN SYS_OFFICE F1 ON P.APPLY_PAYER = F1.OFFICE_CODE LEFT JOIN SYS_USER SU ON SU.USR_CODE = V_USER WHERE P.PAYMENT_NOTICE_ID = V_PAYMENT_NOTICE_ID; END SP_FMM_PAYMENT_NOTICE_RPT; $$\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE \"SP_FMM_PAYMENT_NOTICE_RPT\"( V_PAYMENT_NOTICE_ID IN FMM_FEE_PAYMENT_NOTICE.PAYMENT_NOTICE_ID%TYPE DEFAULT NULL, V_USER IN FMM_FEE_INVOICE.INVOICE_NO%TYPE DEFAULT NULL, OUTCURSOR OUT PKG_CURSOR.T_CURSOR ) IS BEGIN OPEN OUTCURSOR FOR SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO,C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_NO(P.PAYMENT_NOTICE_ID) ELSE A.INVOICE_NO END AS INVOICE_NO,A.INVOICE_DESC, A.OCCUR_TIME_FROM,A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT,A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_TAX_AMOUNT') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT_WITHOUT_TAX') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1,'' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE=V_USER AND ROWNUM=1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL,2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL <0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL),2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT,2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, P.APPLY_PAYER, P.APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, A.BILL_NO, CASE WHEN P.PAYMENT_TYPE='FY56' THEN (SELECT GG.RD_PROJECT FROM RBT_RD_ACTIVITY GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) ELSE (SELECT GG.PROJECT_NAME FROM FMM_JG_INNER_ORDER GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) END AS PROJECT_NAME, P.DELIVERY_NO AS PPM_APPLY_NO FROM FMM_FEE_PAYMENT_NOTICE P INNER JOIN FMM_FEE_INVOICE A ON P.PAYMENT_NOTICE_ID=A.PAYMENT_NOTICE_ID LEFT JOIN CRM_CUSTOMER C ON P.PAYEE=C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAYER=C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE=V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL=F.FREIGHT_CODE AND A.INVOICE_SORT=F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT=FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY=CY.CURRENCY LEFT JOIN SYS_USER SU ON SU.USR_CODE=V_USER WHERE P.PAYMENT_NOTICE_ID=V_PAYMENT_NOTICE_ID UNION ALL SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO, C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN dbms_lob.substr(REPLACE((SELECT WM_CONCAT(DE.INVOICE_NUM) FROM (SELECT D.PAYMENT_NO,D.INVOICE_NUM FROM BFM_INVOICE_DETAIL D GROUP BY D.PAYMENT_NO,D.INVOICE_NUM) DE WHERE DE.PAYMENT_NO = P.PAYMENT_NO), ',', '\\'),4000,1) ELSE A.INVOICE_NUM END AS INVOICE_NO, '' AS INVOICE_DESC, NVL((SELECT MAX(PO.SUPPLY_DATE) FROM BFM_INVOICE_DETAIL I LEFT JOIN BFM_PURCHASE_ORDER_DETAIL OD ON I.PO_NUMBER = OD.SUB_PO_NUMBER LEFT JOIN BFM_PURCHASE_ORDER PO ON OD.PO_NUMBER = PO.PO_NUMBER WHERE I.PAYMENT_NO = P.PAYMENT_NO),P.APPLY_DATE) AS OCCUR_TIME_FROM, A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT, A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D1.DTL_AMOUNT) FROM BFM_INVOICE_DETAIL D1 WHERE D1.PAYMENT_NO = P.PAYMENT_NO AND NVL(D1.IS_DELETE,'0') <> '1') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D2.DTL_TAX_AMOUNT) FROM BFM_INVOICE_DETAIL D2 WHERE D2.PAYMENT_NO = P.PAYMENT_NO AND NVL(D2.IS_DELETE,'0') <> '1') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D3.DTL_AMOUNT_WITHOUT_TAX) FROM BFM_INVOICE_DETAIL D3 WHERE D3.PAYMENT_NO = P.PAYMENT_NO AND NVL(D3.IS_DELETE,'0') <> '1') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1, '' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE = V_USER AND ROWNUM = 1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL, 2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL < 0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL), 2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT, 2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, NVL(F1.OFFICE_NAME,P.APPLY_PAYER) AS APPLY_PAYER, NVL(S.USR_NAME,P.APPLYER_USER) AS APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, NULL AS BILL_NO, NULL AS PROJECT_NAME, NULL AS PPM_APPLY_NO FROM BFM_PAYMENT_NOTICE P INNER JOIN BFM_INVOICE_DETAIL A ON P.PAYMENT_NO = A.PAYMENT_NO LEFT JOIN CRM_CUSTOMER C ON P.PAYEE = C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAY_FEE_NAME = C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE = V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL = F.FREIGHT_CODE AND A.INVOICE_SORT = F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT = FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY = CY.CURRENCY LEFT JOIN SYS_USER S ON P.APPLYER_USER = S.USR_CODE LEFT JOIN SYS_OFFICE F1 ON P.APPLY_PAYER = F1.OFFICE_CODE LEFT JOIN SYS_USER SU ON SU.USR_CODE = V_USER WHERE P.PAYMENT_NOTICE_ID = V_PAYMENT_NOTICE_ID; END SP_FMM_PAYMENT_NOTICE_RPT; $$\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_FMM_PAYMENT_NOTICE_RPT(\n    V_PAYMENT_NOTICE_ID IN FMM_FEE_PAYMENT_NOTICE.PAYMENT_NOTICE_ID%TYPE DEFAULT NULL,\n    V_USER IN FMM_FEE_INVOICE.INVOICE_NO%TYPE DEFAULT NULL,\n    OUTCURSOR OUT SYS_REFCURSOR\n) IS\nBEGIN\n    OPEN OUTCURSOR FOR\n        SELECT P.PAYMENT_NOTICE_ID,\n               P.PAYMENT_NO,\n               C.CUSTOMER_NAME AS PAYEE_NAME,\n               V.VESSEL_NAME,\n               FT.FREIGHT_TYPE_NAME,\n               CASE\n                   WHEN SU.COMPANY_CODE LIKE '6602%'\n                        AND A.INVOICE_SORT_DETAIL IN ('FY04021', 'FY63001', 'FY65001') THEN FT.FREIGHT_TYPE_NAME || '(厂修)'\n                   WHEN SU.COMPANY_CODE LIKE '6602%'\n                        AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021', 'FY63001', 'FY65001') THEN FT.FREIGHT_TYPE_NAME\n                   ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME\n               END AS FREIGHT_NAME,\n               CASE\n                   WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_NO(P.PAYMENT_NOTICE_ID)\n                   ELSE A.INVOICE_NO\n               END AS INVOICE_NO,\n               A.INVOICE_DESC,\n               A.OCCUR_TIME_FROM,\n               A.INVOICE_DATE,\n               CY.CURRENCY,\n               CY.CURRENCY_NAME,\n               A.DTL_AMOUNT_WITHOUT_TAX,\n               A.DTL_TAX_AMOUNT,\n               A.DTL_AMOUNT,\n               CASE\n                   WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID, 'DTL_AMOUNT')\n                   ELSE A.AMOUNT\n               END AMOUNT,\n               CASE\n                   WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID, 'DTL_TAX_AMOUNT')\n                   ELSE A.TAX_AMOUNT\n               END TAX_AMOUNT,\n               CASE\n                   WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID, 'DTL_AMOUNT_WITHOUT_TAX')\n                   ELSE A.AMOUNT_WITHOUT_TAX\n               END AMOUNT_WITHOUT_TAX,\n               '' AS CHECK_1,\n               '' AS CHECK_2,\n               (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE = V_USER AND ROWNUM = 1) AS USR_NAME,\n               P.APPLY_DATE,\n               ROUND(P.FEE_ALL, 2) AS CAPITAL_SUM,\n               CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL < 0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL), 2)) AS CAPITAL_AMOUNT,\n               (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_NAME,\n               (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_CODE,\n               (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS SWIFT_CODE,\n               (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_ADDRESS,\n               ROUND(A.BASE_AMOUNT, 2) AS BASE_AMOUNT,\n               C2.OFFICE_NAME AS PAYER_NAME,\n               P.APPLY_PAYER,\n               P.APPLYER_USER,\n               C2.OFFICE_NAME || '付款通知单' AS ABBREV,\n               FNSAP_GET_BUKRS(A.PAYER, A.VESSEL_CODE, 'COSCO_SAP') AS SAP_CODE,\n               A.BILL_NO,\n               CASE\n                   WHEN P.PAYMENT_TYPE = 'FY56' THEN (SELECT GG.RD_PROJECT FROM RBT_RD_ACTIVITY GG WHERE GG.INNER_ORDER = A.BILL_NO AND ROWNUM = 1)\n                   ELSE (SELECT GG.PROJECT_NAME FROM FMM_JG_INNER_ORDER GG WHERE GG.INNER_ORDER = A.BILL_NO AND ROWNUM = 1)\n               END AS PROJECT_NAME,\n               P.DELIVERY_NO AS PPM_APPLY_NO\n        FROM FMM_FEE_PAYMENT_NOTICE P\n        INNER JOIN FMM_FEE_INVOICE A ON P.PAYMENT_NOTICE_ID = A.PAYMENT_NOTICE_ID\n        LEFT JOIN CRM_CUSTOMER C ON P.PAYEE = C.CUSTOMER_CODE\n        LEFT JOIN SYS_OFFICE C2 ON P.PAYER = C2.OFFICE_CODE\n        LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE = V.VESSEL_CODE\n        LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL = F.FREIGHT_CODE AND A.INVOICE_SORT = F.FREIGHT_TYPE\n        LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT = FT.FREIGHT_TYPE_CODE\n        LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY = CY.CURRENCY\n        LEFT JOIN SYS_USER SU ON SU.USR_CODE = V_USER\n        WHERE P.PAYMENT_NOTICE_ID = V_PAYMENT_NOTICE_ID\n        UNION ALL\n        SELECT P.PAYMENT_NOTICE_ID,\n               P.PAYMENT_NO,\n               C.CUSTOMER_NAME AS PAYEE_NAME,\n               V.VESSEL_NAME,\n               FT.FREIGHT_TYPE_NAME,\n               CASE\n                   WHEN SU.COMPANY_CODE LIKE '6602%'\n                        AND A.INVOICE_SORT_DETAIL IN ('FY04021', 'FY63001', 'FY65001') THEN FT.FREIGHT_TYPE_NAME || '(厂修)'\n                   WHEN SU.COMPANY_CODE LIKE '6602%'\n                        AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021', 'FY63001', 'FY65001') THEN FT.FREIGHT_TYPE_NAME\n                   ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME\n               END AS FREIGHT_NAME,\n               CASE\n                   WHEN SU.COMPANY_CODE LIKE '6602%' THEN DBMS_LOB.SUBSTR(REPLACE((SELECT LISTAGG(DE.INVOICE_NUM, '\\') WITHIN GROUP (ORDER BY DE.INVOICE_NUM) FROM (SELECT D.PAYMENT_NO, D.INVOICE_NUM FROM BFM_INVOICE_DETAIL D GROUP BY D.PAYMENT_NO, D.INVOICE_NUM) DE WHERE DE.PAYMENT_NO = P.PAYMENT_NO), ',', '\\'), 4000, 1)\n                   ELSE A.INVOICE_NUM\n               END AS INVOICE_NO,\n               '' AS INVOICE_DESC,\n               NVL((SELECT MAX(PO.SUPPLY_DATE)\n                      FROM BFM_INVOICE_DETAIL I\n                           LEFT JOIN BFM_PURCHASE_ORDER_DETAIL OD ON I.PO_NUMBER = OD.SUB_PO_NUMBER\n                           LEFT JOIN BFM_PURCHASE_ORDER PO ON OD.PO_NUMBER = PO.PO_NUMBER\n                     WHERE I.PAYMENT_NO = P.PAYMENT_NO), P.APPLY_DATE) AS OCCUR_TIME_FROM,\n               A.INVOICE_DATE,\n               CY.CURRENCY,\n               CY.CURRENCY_NAME,\n               A.DTL_AMOUNT_WITHOUT_TAX,\n               A.DTL_TAX_AMOUNT,\n               A.DTL_AMOUNT,\n               CASE\n                   WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D1.DTL_AMOUNT) FROM BFM_INVOICE_DETAIL D1 WHERE D1.PAYMENT_NO = P.PAYMENT_NO AND NVL(D1.IS_DELETE, '0') <> '1')\n                   ELSE A.AMOUNT\n               END AMOUNT,\n               CASE\n                   WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D2.DTL_TAX_AMOUNT) FROM BFM_INVOICE_DETAIL D2 WHERE D2.PAYMENT_NO = P.PAYMENT_NO AND NVL(D2.IS_DELETE, '0') <> '1')\n                   ELSE A.TAX_AMOUNT\n               END TAX_AMOUNT,\n               CASE\n                   WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D3.DTL_AMOUNT_WITHOUT_TAX) FROM BFM_INVOICE_DETAIL D3 WHERE D3.PAYMENT_NO = P.PAYMENT_NO AND NVL(D3.IS_DELETE, '0') <> '1')\n                   ELSE A.AMOUNT_WITHOUT_TAX\n               END AMOUNT_WITHOUT_TAX,\n               '' AS CHECK_1,\n               '' AS CHECK_2,\n               (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE = V_USER AND ROWNUM = 1) AS USR_NAME,\n               P.APPLY_DATE,\n               ROUND(P.FEE_ALL, 2) AS CAPITAL_SUM,\n               CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL < 0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL), 2)) AS CAPITAL_AMOUNT,\n               (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_NAME,\n               (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_CODE,\n               (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS SWIFT_CODE,\n               (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_ADDRESS,\n               ROUND(A.BASE_AMOUNT, 2) AS BASE_AMOUNT,\n               C2.OFFICE_NAME AS PAYER_NAME,\n               NVL(F1.OFFICE_NAME, P.APPLY_PAYER) AS APPLY_PAYER,\n               NVL(S.USR_NAME, P.APPLYER_USER) AS APPLYER_USER,\n               C2.OFFICE_NAME || '付款通知单' AS ABBREV,\n               FNSAP_GET_BUKRS(A.PAYER, A.VESSEL_CODE, 'COSCO_SAP') AS SAP_CODE,\n               NULL AS BILL_NO,\n               NULL AS PROJECT_NAME,\n               NULL AS PPM_APPLY_NO\n        FROM BFM_PAYMENT_NOTICE P\n        INNER JOIN BFM_INVOICE_DETAIL A ON P.PAYMENT_NO = A.PAYMENT_NO\n        LEFT JOIN CRM_CUSTOMER C ON P.PAYEE = C.CUSTOMER_CODE\n        LEFT JOIN SYS_OFFICE C2 ON P.PAY_FEE_NAME = C2.OFFICE_CODE\n        LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE = V.VESSEL_CODE\n        LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL = F.FREIGHT_CODE AND A.INVOICE_SORT = F.FREIGHT_TYPE\n        LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT = FT.FREIGHT_TYPE_CODE\n        LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY = CY.CURRENCY\n        LEFT JOIN SYS_USER S ON P.APPLYER_USER = S.USR_CODE\n        LEFT JOIN SYS_OFFICE F1 ON P.APPLY_PAYER = F1.OFFICE_CODE\n        LEFT JOIN SYS_USER SU ON SU.USR_CODE = V_USER\n        WHERE P.PAYMENT_NOTICE_ID = V_PAYMENT_NOTICE_ID;\nEND SP_FMM_PAYMENT_NOTICE_RPT;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE PROCEDURE \"SP_FMM_PAYMENT_NOTICE_RPT\"( V_PAYMENT_NOTICE_ID IN FMM_FEE_PAYMENT_NOTICE.PAYMENT_NOTICE_ID%TYPE DEFAULT NULL, V_USER IN FMM_FEE_INVOICE.INVOICE_NO%TYPE DEFAULT NULL, OUTCURSOR OUT SYS_REFCURSOR ) IS BEGIN OPEN OUTCURSOR FOR SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO,C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_NO(P.PAYMENT_NOTICE_ID) ELSE A.INVOICE_NO END AS INVOICE_NO,A.INVOICE_DESC, A.OCCUR_TIME_FROM,A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT,A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_TAX_AMOUNT') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT_WITHOUT_TAX') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1,'' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE=V_USER AND ROWNUM=1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL,2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL <0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL),2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT,2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, P.APPLY_PAYER, P.APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, A.BILL_NO, CASE WHEN P.PAYMENT_TYPE='FY56' THEN (SELECT GG.RD_PROJECT FROM RBT_RD_ACTIVITY GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) ELSE (SELECT GG.PROJECT_NAME FROM FMM_JG_INNER_ORDER GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) END AS PROJECT_NAME, P.DELIVERY_NO AS PPM_APPLY_NO FROM FMM_FEE_PAYMENT_NOTICE P INNER JOIN FMM_FEE_INVOICE A ON P.PAYMENT_NOTICE_ID=A.PAYMENT_NOTICE_ID LEFT JOIN CRM_CUSTOMER C ON P.PAYEE=C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAYER=C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE=V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL=F.FREIGHT_CODE AND A.INVOICE_SORT=F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT=FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY=CY.CURRENCY LEFT JOIN SYS_USER SU ON SU.USR_CODE=V_USER WHERE P.PAYMENT_NOTICE_ID=V_PAYMENT_NOTICE_ID UNION ALL SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO, C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME||'(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN dbms_lob.substr(REPLACE((SELECT LISTAGG(DE.INVOICE_NUM, '\\') WITHIN GROUP (ORDER BY NULL) FROM (SELECT D.PAYMENT_NO,D.INVOICE_NUM FROM BFM_INVOICE_DETAIL D GROUP BY D.PAYMENT_NO,D.INVOICE_NUM) DE WHERE DE.PAYMENT_NO = P.PAYMENT_NO), 4000, 1)) ELSE A.INVOICE_NUM END AS INVOICE_NO, '' AS INVOICE_DESC, NVL((SELECT MAX(PO.SUPPLY_DATE) FROM BFM_INVOICE_DETAIL I LEFT JOIN BFM_PURCHASE_ORDER_DETAIL OD ON I.PO_NUMBER = OD.SUB_PO_NUMBER LEFT JOIN BFM_PURCHASE_ORDER PO ON OD.PO_NUMBER = PO.PO_NUMBER WHERE I.PAYMENT_NO = P.PAYMENT_NO), P.APPLY_DATE) AS OCCUR_TIME_FROM, A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT, A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D1.DTL_AMOUNT) FROM BFM_INVOICE_DETAIL D1 WHERE D1.PAYMENT_NO = P.PAYMENT_NO AND NVL(D1.IS_DELETE,'0') <> '1') ELSE A.AMOUNT END AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D2.DTL_TAX_AMOUNT) FROM BFM_INVOICE_DETAIL D2 WHERE D2.PAYMENT_NO = P.PAYMENT_NO AND NVL(D2.IS_DELETE,'0') <> '1') ELSE A.TAX_AMOUNT END TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D3.DTL_AMOUNT_WITHOUT_TAX) FROM BFM_INVOICE_DETAIL D3 WHERE D3.PAYMENT_NO = P.PAYMENT_NO AND NVL(D3.IS_DELETE,'0') <> '1') ELSE A.AMOUNT_WITHOUT_TAX END AMOUNT_WITHOUT_TAX, '' AS CHECK_1, '' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE = V_USER AND ROWNUM = 1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL, 2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL < 0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL), 2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID = C.CUSTOMER_ID AND CCB.CURRENCY = A.CURRENCY AND ROWNUM = 1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT, 2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, NVL(F1.OFFICE_NAME,P.APPLY_PAYER) AS APPLY_PAYER, NVL(S.USR_NAME,P.APPLYER_USER) AS APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, NULL AS BILL_NO, NULL AS PROJECT_NAME, NULL AS PPM_APPLY_NO FROM BFM_PAYMENT_NOTICE P INNER JOIN BFM_INVOICE_DETAIL A ON P.PAYMENT_NO = A.PAYMENT_NO LEFT JOIN CRM_CUSTOMER C ON P.PAYEE = C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAY_FEE_NAME = C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE = V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL = F.FREIGHT_CODE AND A.INVOICE_SORT = F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT = FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY = CY.CURRENCY LEFT JOIN SYS_USER S ON P.APPLYER_USER = S.USR_CODE LEFT JOIN SYS_OFFICE F1 ON P.APPLY_PAYER = F1.OFFICE_CODE LEFT JOIN SYS_USER SU ON SU.USR_CODE = V_USER WHERE P.PAYMENT_NOTICE_ID = V_PAYMENT_NOTICE_ID; END SP_FMM_PAYMENT_NOTICE_RPT; "
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE PROCEDURE \"SP_FMM_PAYMENT_NOTICE_RPT\" (V_PAYMENT_NOTICE_ID IN FMM_FEE_PAYMENT_NOTICE.PAYMENT_NOTICE_ID%TYPE DEFAULT NULL, V_USER IN FMM_FEE_INVOICE.INVOICE_NO%TYPE DEFAULT NULL, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO, C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME || '(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_NO(P.PAYMENT_NOTICE_ID) ELSE A.INVOICE_NO END AS INVOICE_NO, A.INVOICE_DESC, A.OCCUR_TIME_FROM, A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT, A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT') ELSE A.AMOUNT END AS AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_TAX_AMOUNT') ELSE A.TAX_AMOUNT END AS TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN FNFMM_GET_PAY_INVOICE_AMOUNT(P.PAYMENT_NOTICE_ID,'DTL_AMOUNT_WITHOUT_TAX') ELSE A.AMOUNT_WITHOUT_TAX END AS AMOUNT_WITHOUT_TAX, '' AS CHECK_1, '' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE=V_USER AND ROWNUM=1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL,2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL < 0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL),2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT,2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, P.APPLY_PAYER, P.APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, A.BILL_NO, CASE WHEN P.PAYMENT_TYPE='FY56' THEN (SELECT GG.RD_PROJECT FROM RBT_RD_ACTIVITY GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) ELSE (SELECT GG.PROJECT_NAME FROM FMM_JG_INNER_ORDER GG WHERE GG.INNER_ORDER=A.BILL_NO AND ROWNUM=1) END AS PROJECT_NAME, P.DELIVERY_NO AS PPM_APPLY_NO FROM FMM_FEE_PAYMENT_NOTICE P INNER JOIN FMM_FEE_INVOICE A ON P.PAYMENT_NOTICE_ID=A.PAYMENT_NOTICE_ID LEFT JOIN CRM_CUSTOMER C ON P.PAYEE=C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAYER=C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE=V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL=F.FREIGHT_CODE AND A.INVOICE_SORT=F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT=FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY=CY.CURRENCY LEFT JOIN SYS_USER SU ON SU.USR_CODE=V_USER WHERE P.PAYMENT_NOTICE_ID=V_PAYMENT_NOTICE_ID UNION ALL SELECT P.PAYMENT_NOTICE_ID, P.PAYMENT_NO, C.CUSTOMER_NAME AS PAYEE_NAME, V.VESSEL_NAME, FT.FREIGHT_TYPE_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME || '(厂修)' WHEN SU.COMPANY_CODE LIKE '6602%' AND A.INVOICE_SORT_DETAIL NOT IN ('FY04021','FY63001','FY65001') THEN FT.FREIGHT_TYPE_NAME ELSE FT.FREIGHT_TYPE_NAME || '-' || F.FREIGHT_NAME END AS FREIGHT_NAME, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN SUBSTR(REPLACE((SELECT LISTAGG(DE.INVOICE_NUM, '\\') WITHIN GROUP (ORDER BY NULL) FROM (SELECT D.PAYMENT_NO, D.INVOICE_NUM FROM BFM_INVOICE_DETAIL D GROUP BY D.PAYMENT_NO, D.INVOICE_NUM) DE WHERE DE.PAYMENT_NO = P.PAYMENT_NO), ',', '\\'), 1, 4000) ELSE A.INVOICE_NUM END AS INVOICE_NO, '' AS INVOICE_DESC, NVL((SELECT MAX(PO.SUPPLY_DATE) FROM BFM_INVOICE_DETAIL I LEFT JOIN BFM_PURCHASE_ORDER_DETAIL OD ON I.PO_NUMBER=OD.SUB_PO_NUMBER LEFT JOIN BFM_PURCHASE_ORDER PO ON OD.PO_NUMBER=PO.PO_NUMBER WHERE I.PAYMENT_NO=P.PAYMENT_NO), P.APPLY_DATE) AS OCCUR_TIME_FROM, A.INVOICE_DATE, CY.CURRENCY, CY.CURRENCY_NAME, A.DTL_AMOUNT_WITHOUT_TAX, A.DTL_TAX_AMOUNT, A.DTL_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D1.DTL_AMOUNT) FROM BFM_INVOICE_DETAIL D1 WHERE D1.PAYMENT_NO=P.PAYMENT_NO AND NVL(D1.IS_DELETE,'0') <> '1') ELSE A.AMOUNT END AS AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D2.DTL_TAX_AMOUNT) FROM BFM_INVOICE_DETAIL D2 WHERE D2.PAYMENT_NO=P.PAYMENT_NO AND NVL(D2.IS_DELETE,'0') <> '1') ELSE A.TAX_AMOUNT END AS TAX_AMOUNT, CASE WHEN SU.COMPANY_CODE LIKE '6602%' THEN (SELECT SUM(D3.DTL_AMOUNT_WITHOUT_TAX) FROM BFM_INVOICE_DETAIL D3 WHERE D3.PAYMENT_NO=P.PAYMENT_NO AND NVL(D3.IS_DELETE,'0') <> '1') ELSE A.AMOUNT_WITHOUT_TAX END AS AMOUNT_WITHOUT_TAX, '' AS CHECK_1, '' AS CHECK_2, (SELECT U.USR_NAME FROM SYS_USER U WHERE U.USR_CODE=V_USER AND ROWNUM=1) AS USR_NAME, P.APPLY_DATE, ROUND(P.FEE_ALL,2) AS CAPITAL_SUM, CY.CURRENCY_NAME || (CASE WHEN P.FEE_ALL < 0 THEN '（负数）' ELSE '' END) || FN_DIGITAL_TO_CHINESE(ROUND(ABS(P.FEE_ALL),2)) AS CAPITAL_AMOUNT, (SELECT CCB.BANK_NAME FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_NAME, (SELECT CCB.BANK_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_CODE, (SELECT CCB.SWIFT_CODE FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS SWIFT_CODE, (SELECT CCB.BANK_ADDRESS FROM CRM_CUSTOMER_BANK CCB WHERE CCB.CUSTOMER_ID=C.CUSTOMER_ID AND CCB.CURRENCY=A.CURRENCY AND ROWNUM=1) AS BANK_ADDRESS, ROUND(A.BASE_AMOUNT, 2) AS BASE_AMOUNT, C2.OFFICE_NAME AS PAYER_NAME, NVL(F1.OFFICE_NAME, P.APPLY_PAYER) AS APPLY_PAYER, NVL(S.USR_NAME, P.APPLYER_USER) AS APPLYER_USER, C2.OFFICE_NAME || '付款通知单' AS ABBREV, FNSAP_GET_BUKRS(A.PAYER,A.VESSEL_CODE,'COSCO_SAP') AS SAP_CODE, NULL AS BILL_NO, NULL AS PROJECT_NAME, NULL AS PPM_APPLY_NO FROM BFM_PAYMENT_NOTICE P INNER JOIN BFM_INVOICE_DETAIL A ON P.PAYMENT_NO=A.PAYMENT_NO LEFT JOIN CRM_CUSTOMER C ON P.PAYEE=C.CUSTOMER_CODE LEFT JOIN SYS_OFFICE C2 ON P.PAY_FEE_NAME=C2.OFFICE_CODE LEFT JOIN VOP_VESSEL V ON A.VESSEL_CODE=V.VESSEL_CODE LEFT JOIN CDM_FREIGHT F ON A.INVOICE_SORT_DETAIL=F.FREIGHT_CODE AND A.INVOICE_SORT=F.FREIGHT_TYPE LEFT JOIN CDM_FREIGHT_TYPE FT ON A.INVOICE_SORT=FT.FREIGHT_TYPE_CODE LEFT JOIN CDM_CURRENCY CY ON A.CURRENCY=CY.CURRENCY LEFT JOIN SYS_USER S ON P.APPLYER_USER=S.USR_CODE LEFT JOIN SYS_OFFICE F1 ON P.APPLY_PAYER=F1.OFFICE_CODE LEFT JOIN SYS_USER SU ON SU.USR_CODE=V_USER WHERE P.PAYMENT_NOTICE_ID=V_PAYMENT_NOTICE_ID; END SP_FMM_PAYMENT_NOTICE_RPT;"
                    }
                ]
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"TO_DATE\", \"SUBSTR\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE SP_FMM_AUTINV_CONTRAST_STATINV(V_PURCHASER_TAX_NO IN VARCHAR2, V_INVOICE_NUM IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_DEDU_PERIOD IN VARCHAR2, V_OPERATOR IN VARCHAR2, V_DEDU_DATE_FROM IN VARCHAR2, V_DEDU_DATE_TO IN VARCHAR2, V_PURCHASER_NAME IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR select FAI.authed_invoice_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, '' AS PURCHASER_TAX_NO_STAT, '' AS PURCHASER_NAME_STAT, '' AS INVOICE_CODE_STAT, NULL AS BILLING_DATE_STAT, '' AS INVOICE_NUM_STAT, NULL AS AMOUNT_TAX_STAT, NULL AS TOTAL_AMOUNT_STAT, '1' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, '' AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, '' AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, NULL AS DEDU_DATE_STAT from FMM_AUTHED_INVOICE FAI LEFT JOIN sys_user su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FAI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FAI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FAI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FAI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR SU.USR_NAME = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FAI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_STAT_INV FASI WHERE FASI.PURCHASER_TAX_NO = FAI.PURCHASER_TAX_NO AND FASI.INVOICE_NUM = FAI.INVOICE_NUM AND FASI.INVOICE_CODE = FAI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, '' AS PURCHASER_TAX_NO_AUT, '' AS PURCHASER_NAME_AUT, '' AS INVOICE_CODE_AUT, NULL AS BILLING_DATE_AUT, '' AS INVOICE_NUM_AUT, NULL AS AMOUNT_TAX_AUT, NULL AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '2' AS DIFFERENCE_CAUSE, '' AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, '' AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, NULL AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_INVOICE FAI WHERE FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO AND FAI.INVOICE_NUM = FASI.INVOICE_NUM AND FAI.INVOICE_CODE = FASI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '3' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI inner join FMM_AUTHED_INVOICE FAI on FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO and FAI.INVOICE_NUM = FASI.INVOICE_NUM and FAI.INVOICE_CODE = FASI.INVOICE_CODE LEFT JOIN Sys_User su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND (FASI.Total_Tax <> FAI.Total_Tax OR FASI.Total_Amount <> FAI.Total_Amount); END SP_FMM_AUTINV_CONTRAST_STATINV; $$\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE SP_FMM_AUTINV_CONTRAST_STATINV(V_PURCHASER_TAX_NO IN VARCHAR2, V_INVOICE_NUM IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_DEDU_PERIOD IN VARCHAR2, V_OPERATOR IN VARCHAR2, V_DEDU_DATE_FROM IN VARCHAR2, V_DEDU_DATE_TO IN VARCHAR2, V_PURCHASER_NAME IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR select FAI.authed_invoice_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, '' AS PURCHASER_TAX_NO_STAT, '' AS PURCHASER_NAME_STAT, '' AS INVOICE_CODE_STAT, NULL AS BILLING_DATE_STAT, '' AS INVOICE_NUM_STAT, NULL AS AMOUNT_TAX_STAT, NULL AS TOTAL_AMOUNT_STAT, '1' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, '' AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, '' AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, NULL AS DEDU_DATE_STAT from FMM_AUTHED_INVOICE FAI LEFT JOIN sys_user su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FAI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FAI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FAI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FAI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR SU.USR_NAME = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FAI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_STAT_INV FASI WHERE FASI.PURCHASER_TAX_NO = FAI.PURCHASER_TAX_NO AND FASI.INVOICE_NUM = FAI.INVOICE_NUM AND FASI.INVOICE_CODE = FAI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, '' AS PURCHASER_TAX_NO_AUT, '' AS PURCHASER_NAME_AUT, '' AS INVOICE_CODE_AUT, NULL AS BILLING_DATE_AUT, '' AS INVOICE_NUM_AUT, NULL AS AMOUNT_TAX_AUT, NULL AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '2' AS DIFFERENCE_CAUSE, '' AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, '' AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, NULL AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_INVOICE FAI WHERE FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO AND FAI.INVOICE_NUM = FASI.INVOICE_NUM AND FAI.INVOICE_CODE = FASI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '3' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI inner join FMM_AUTHED_INVOICE FAI on FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO and FAI.INVOICE_NUM = FASI.INVOICE_NUM and FAI.INVOICE_CODE = FASI.INVOICE_CODE LEFT JOIN Sys_User su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND (FASI.Total_Tax <> FAI.Total_Tax OR FASI.Total_Amount <> FAI.Total_Amount); END SP_FMM_AUTINV_CONTRAST_STATINV; $$\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_FMM_AUTINV_CONTRAST_STATINV(V_PURCHASER_TAX_NO IN VARCHAR2, V_INVOICE_NUM IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_DEDU_PERIOD IN VARCHAR2, V_OPERATOR IN VARCHAR2, V_DEDU_DATE_FROM IN VARCHAR2, V_DEDU_DATE_TO IN VARCHAR2, V_PURCHASER_NAME IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR select FAI.authed_invoice_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, '' AS PURCHASER_TAX_NO_STAT, '' AS PURCHASER_NAME_STAT, '' AS INVOICE_CODE_STAT, NULL AS BILLING_DATE_STAT, '' AS INVOICE_NUM_STAT, NULL AS AMOUNT_TAX_STAT, NULL AS TOTAL_AMOUNT_STAT, '1' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, '' AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, '' AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, NULL AS DEDU_DATE_STAT from FMM_AUTHED_INVOICE FAI LEFT JOIN sys_user su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FAI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FAI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FAI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FAI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR SU.USR_NAME = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR CAST(SUBSTR(FAI.DEDU_DATE,1,10) AS DATE) >= CAST(V_DEDU_DATE_FROM AS DATE)) AND (V_DEDU_DATE_TO IS NULL OR CAST(SUBSTR(FAI.DEDU_DATE,1,10) AS DATE) <= CAST(V_DEDU_DATE_TO AS DATE)) AND (V_PURCHASER_NAME IS NULL OR FAI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_STAT_INV FASI WHERE FASI.PURCHASER_TAX_NO = FAI.PURCHASER_TAX_NO AND FASI.INVOICE_NUM = FAI.INVOICE_NUM AND FASI.INVOICE_CODE = FAI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, '' AS PURCHASER_TAX_NO_AUT, '' AS PURCHASER_NAME_AUT, '' AS INVOICE_CODE_AUT, NULL AS BILLING_DATE_AUT, '' AS INVOICE_NUM_AUT, NULL AS AMOUNT_TAX_AUT, NULL AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '2' AS DIFFERENCE_CAUSE, '' AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, '' AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, NULL AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR CAST(SUBSTR(FASI.DEDU_DATE,1,10) AS DATE) >= CAST(V_DEDU_DATE_FROM AS DATE)) AND (V_DEDU_DATE_TO IS NULL OR CAST(SUBSTR(FASI.DEDU_DATE,1,10) AS DATE) <= CAST(V_DEDU_DATE_TO AS DATE)) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_INVOICE FAI WHERE FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO AND FAI.INVOICE_NUM = FASI.INVOICE_NUM AND FAI.INVOICE_CODE = FASI.INVOICE_CODE) UNION ALL select FASI.authed_stat_inv_id as CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '3' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT from FMM_AUTHED_STAT_INV FASI inner join FMM_AUTHED_INVOICE FAI on FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO and FAI.INVOICE_NUM = FASI.INVOICE_NUM and FAI.INVOICE_CODE = FASI.INVOICE_CODE LEFT JOIN SYS_USER su ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR CAST(SUBSTR(FASI.DEDU_DATE,1,10) AS DATE) >= CAST(V_DEDU_DATE_FROM AS DATE)) AND (V_DEDU_DATE_TO IS NULL OR CAST(SUBSTR(FASI.DEDU_DATE,1,10) AS DATE) <= CAST(V_DEDU_DATE_TO AS DATE)) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND (FASI.Total_Tax <> FAI.Total_Tax OR FASI.Total_Amount <> FAI.Total_Amount); END SP_FMM_AUTINV_CONTRAST_STATINV;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_FMM_AUTINV_CONTRAST_STATINV(V_PURCHASER_TAX_NO IN VARCHAR2, V_INVOICE_NUM IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_DEDU_PERIOD IN VARCHAR2, V_OPERATOR IN VARCHAR2, V_DEDU_DATE_FROM IN VARCHAR2, V_DEDU_DATE_TO IN VARCHAR2, V_PURCHASER_NAME IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR SELECT FAI.authed_invoice_id AS CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, '' AS PURCHASER_TAX_NO_STAT, '' AS PURCHASER_NAME_STAT, '' AS INVOICE_CODE_STAT, NULL AS BILLING_DATE_STAT, '' AS INVOICE_NUM_STAT, NULL AS AMOUNT_TAX_STAT, NULL AS TOTAL_AMOUNT_STAT, '1' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, '' AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, '' AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, NULL AS DEDU_DATE_STAT FROM FMM_AUTHED_INVOICE FAI LEFT JOIN SYS_USER SU ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FAI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FAI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FAI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FAI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR SU.USR_NAME = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FAI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_STAT_INV FASI WHERE FASI.PURCHASER_TAX_NO = FAI.PURCHASER_TAX_NO AND FASI.INVOICE_NUM = FAI.INVOICE_NUM AND FASI.INVOICE_CODE = FAI.INVOICE_CODE) UNION ALL SELECT FASI.authed_stat_inv_id AS CONTRAST_ID, '' AS PURCHASER_TAX_NO_AUT, '' AS PURCHASER_NAME_AUT, '' AS INVOICE_CODE_AUT, NULL AS BILLING_DATE_AUT, '' AS INVOICE_NUM_AUT, NULL AS AMOUNT_TAX_AUT, NULL AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '2' AS DIFFERENCE_CAUSE, '' AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, '' AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, NULL AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT FROM FMM_AUTHED_STAT_INV FASI WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_INVOICE FAI WHERE FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO AND FAI.INVOICE_NUM = FASI.INVOICE_NUM AND FAI.INVOICE_CODE = FASI.INVOICE_CODE) UNION ALL SELECT FASI.authed_stat_inv_id AS CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '3' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT FROM FMM_AUTHED_STAT_INV FASI INNER JOIN FMM_AUTHED_INVOICE FAI ON FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO AND FAI.INVOICE_NUM = FASI.INVOICE_NUM AND FAI.INVOICE_CODE = FASI.INVOICE_CODE LEFT JOIN SYS_USER SU ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND (FASI.Total_Tax <> FAI.Total_Tax OR FASI.Total_Amount <> FAI.Total_Amount); END SP_FMM_AUTINV_CONTRAST_STATINV;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_FMM_AUTINV_CONTRAST_STATINV(V_PURCHASER_TAX_NO IN VARCHAR2, V_INVOICE_NUM IN VARCHAR2, V_INVOICE_CODE IN VARCHAR2, V_DEDU_PERIOD IN VARCHAR2, V_OPERATOR IN VARCHAR2, V_DEDU_DATE_FROM IN VARCHAR2, V_DEDU_DATE_TO IN VARCHAR2, V_PURCHASER_NAME IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR SELECT FAI.authed_invoice_id AS CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, '' AS PURCHASER_TAX_NO_STAT, '' AS PURCHASER_NAME_STAT, '' AS INVOICE_CODE_STAT, NULL AS BILLING_DATE_STAT, '' AS INVOICE_NUM_STAT, NULL AS AMOUNT_TAX_STAT, NULL AS TOTAL_AMOUNT_STAT, '1' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, '' AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, '' AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, NULL AS DEDU_DATE_STAT FROM FMM_AUTHED_INVOICE FAI LEFT JOIN SYS_USER SU ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FAI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FAI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FAI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FAI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR SU.USR_NAME = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FAI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FAI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_STAT_INV FASI WHERE FASI.PURCHASER_TAX_NO = FAI.PURCHASER_TAX_NO AND FASI.INVOICE_NUM = FAI.INVOICE_NUM AND FASI.INVOICE_CODE = FAI.INVOICE_CODE) UNION ALL SELECT FASI.authed_stat_inv_id AS CONTRAST_ID, '' AS PURCHASER_TAX_NO_AUT, '' AS PURCHASER_NAME_AUT, '' AS INVOICE_CODE_AUT, NULL AS BILLING_DATE_AUT, '' AS INVOICE_NUM_AUT, NULL AS AMOUNT_TAX_AUT, NULL AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '2' AS DIFFERENCE_CAUSE, '' AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, '' AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, NULL AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT FROM FMM_AUTHED_STAT_INV FASI WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND NOT EXISTS (SELECT 1 FROM FMM_AUTHED_INVOICE FAI WHERE FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO AND FAI.INVOICE_NUM = FASI.INVOICE_NUM AND FAI.INVOICE_CODE = FASI.INVOICE_CODE) UNION ALL SELECT FASI.authed_stat_inv_id AS CONTRAST_ID, FAI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_AUT, FAI.PURCHASER_NAME AS PURCHASER_NAME_AUT, FAI.INVOICE_CODE AS INVOICE_CODE_AUT, FAI.BILLING_DATE AS BILLING_DATE_AUT, FAI.INVOICE_NUM AS INVOICE_NUM_AUT, FAI.AMOUNT_TAX AS AMOUNT_TAX_AUT, FAI.TOTAL_AMOUNT AS TOTAL_AMOUNT_AUT, FASI.PURCHASER_TAX_NO AS PURCHASER_TAX_NO_STAT, FASI.PURCHASER_NAME AS PURCHASER_NAME_STAT, FASI.INVOICE_CODE AS INVOICE_CODE_STAT, FASI.BILLING_DATE AS BILLING_DATE_STAT, FASI.INVOICE_NUM AS INVOICE_NUM_STAT, FASI.TOTAL_TAX AS AMOUNT_TAX_STAT, FASI.TOTAL_AMOUNT AS TOTAL_AMOUNT_STAT, '3' AS DIFFERENCE_CAUSE, FAI.DEDU_PERIOD AS DEDU_PERIOD_AUT, FASI.DEDU_PERIOD AS DEDU_PERIOD_STAT, SU.USR_NAME AS OPERATOR_AUT, FASI.OPERATOR_ACCOUNT AS OPERATOR_STAT, FAI.DEDU_DATE AS DEDU_DATE_AUT, FASI.DEDU_DATE AS DEDU_DATE_STAT FROM FMM_AUTHED_STAT_INV FASI INNER JOIN FMM_AUTHED_INVOICE FAI ON FAI.PURCHASER_TAX_NO = FASI.PURCHASER_TAX_NO AND FAI.INVOICE_NUM = FASI.INVOICE_NUM AND FAI.INVOICE_CODE = FASI.INVOICE_CODE LEFT JOIN SYS_USER SU ON FAI.UPDATED_BY_USER = SU.USR_CODE AND FAI.COMPANY_CODE = SU.COMPANY_CODE WHERE 1=1 AND (V_PURCHASER_TAX_NO IS NULL OR FASI.PURCHASER_TAX_NO = V_PURCHASER_TAX_NO) AND (V_INVOICE_NUM IS NULL OR FASI.INVOICE_NUM = V_INVOICE_NUM) AND (V_INVOICE_CODE IS NULL OR FASI.INVOICE_CODE = V_INVOICE_CODE) AND (V_DEDU_PERIOD IS NULL OR FASI.DEDU_PERIOD = V_DEDU_PERIOD) AND (V_OPERATOR IS NULL OR FASI.OPERATOR_ACCOUNT = V_OPERATOR) AND (V_DEDU_DATE_FROM IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') >= TO_DATE(V_DEDU_DATE_FROM,'yyyy-MM-dd')) AND (V_DEDU_DATE_TO IS NULL OR TO_DATE(SUBSTR(FASI.DEDU_DATE,1,10),'yyyy-MM-dd') <= TO_DATE(V_DEDU_DATE_TO,'yyyy-MM-dd')) AND (V_PURCHASER_NAME IS NULL OR FASI.PURCHASER_NAME = V_PURCHASER_NAME) AND (FASI.Total_Tax <> FAI.Total_Tax OR FASI.Total_Amount <> FAI.Total_Amount); END SP_FMM_AUTINV_CONTRAST_STATINV;"
                    }
                ]
            },
            {
                "case_id": "4",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"4\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"NVL\", \"TO_DATE\", \"SUBSTR\", \"TO_CHAR\", \"SYSDATE\", \"CASE\", \"SYS_GUID\", \"LPAD\", \"TRUNC\", \"ABS\", \"TO_NUMBER\", \"ROUND\", \"ROWNUM\", \"EXTEND\", \"TABLE(\", \"MAX\", \"START WITH\", \"CONNECT BY\", \"NOCYCLE\", \"PRIOR\", \"DBMS_OUTPUT.PUT_LINE\", \"SQLERRM\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE SP_TSA_WARNING3(I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, I_DURATION IN VARCHAR2, I_SOG IN VARCHAR2, I_AREA IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR) IS OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); OFFICE_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); I NUMBER; LN NUMBER; V_MANAGER VARCHAR2(50); V_SOG VARCHAR2(50); V_DURATION VARCHAR2(50); V_SORTCODE NUMBER; BEGIN I:=1; LN:=1; IF NVL(I_MANAGER,'00000000')='00000000' THEN V_MANAGER:=NULL; ELSE V_MANAGER:=I_MANAGER; FOR LS IN (select OFFICE_CODE from sys_office where nvl(is_dept,1)=0 start with OFFICE_CODE=V_MANAGER connect by NOCYCLE supperior_office_CODE=prior office_CODE) LOOP OFFICE_TAB_TYPE.EXTEND; OFFICE_TAB_TYPE(LN) := OBJECTTABTYPE(LS.OFFICE_CODE,'','','','','','', '', NULL,'','','','',''); LN:=LN+1; END LOOP; END IF; select PARA_VALUE INTO V_SOG from TSA_MONITOR_CONF WHERE PARA_TYPE='MAXSPEED'; select PARA_VALUE INTO V_DURATION from TSA_MONITOR_CONF WHERE PARA_TYPE='MONITOR_DURATION'; FOR X IN (SELECT * FROM (SELECT VW.VESSEL_MMSI, V.VESSEL_ID, TO_DATE(SUBSTR(VW.VESSEL_POSIDATE,1,19),'YYYY-MM-DD HH24:MI:SS') AS ACTIVITY_DATE, VW.VESSEL_LAT AS LAT, VW.VESSEL_LON AS LON, V.VESSEL_CODE, V.VESSEL_NAME, VW.VESSEL_SPEED, CASE WHEN VW.VESSEL_STATE IN ('0','8') THEN '1' ELSE '0' END AS SAILING_STATUS, VM.MANAGER AS OFFICE_CODE, VM.manager_dept AS OFFICE_DEPT_CODE, (SELECT AA.OFFICE_NAME FROM SYS_OFFICE AA, VOP_VESSEL_MANAGEMENT BB WHERE AA.OFFICE_CODE=BB.MANAGER AND BB.VESSEL_ID=V.VESSEL_ID AND BB.MANAGEMENT_TYPE=1 AND ((sysdate >= BB.DEFINITION_DATE AND sysdate <= BB.END_DATE) OR (sysdate >= BB.DEFINITION_DATE AND BB.END_DATE IS NULL)) AND ROWNUM=1) AS manager_name, VW.VESSEL_ETA AS ETA_TIME, VW.VESSEL_DEST AS ETA_PORT_NAME, VW.VESSEL_COURSE FROM ZDWEB.VM_ZYHY2_ALLSHIPDYNAMIC@CSBC_TO_XE1 VW, VOP_VESSEL V, VOP_VESSEL_MANAGEMENT VM WHERE NVL(to_char(VW.VESSEL_MMSI),'无')=to_char(V.MMSI) AND V.VESSEL_ID=VM.VESSEL_ID AND (v.is_delete <> '1' OR v.is_delete IS NULL) AND V.VESSEL_CODE NOT IN (SELECT VESSEL_CODE FROM TSA_VESSEL_EXCLUDE) AND NVL(VM.IS_DELETE,'0')<>'1' AND v.trade_type='0' AND v.mmsi IS NOT NULL AND NVL(V.TETIRED_FLAG,'0')='1' AND VM.MANAGEMENT_TYPE=1 AND ((sysdate >= VM.DEFINITION_DATE AND sysdate <= VM.END_DATE) OR (sysdate >= VM.DEFINITION_DATE AND VM.END_DATE IS NULL))) MM INNER JOIN SYS_OFFICE_RELATION_TREE SORT ON MM.OFFICE_CODE=SORT.CHILD_CODE AND sort.office_code=nvl(V_MANAGER,'ABC') WHERE (I_VESSEL_CODE IS NULL OR MM.VESSEL_CODE IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_VESSEL_CODE,','))))) LOOP FOR M IN (SELECT H.* FROM TSA_AREA H WHERE H.DATE_START <= SYSDATE AND AREA_NAME NOT IN ('其他海区','委内瑞拉监控区','马六甲海峡临时监控区') AND (I_AREA IS NULL OR AREA_ID IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_AREA,',')))) AND NVL(H.DATE_END, TO_DATE('2999-01-01','YYYY-MM-DD')) >= SYSDATE) LOOP IF FN_TSA_IS_IN_HD_AREA(X.LON, X.LAT, M.AREA_ID) THEN OBJ_TAB_TYPE.EXTEND; OBJ_TAB_TYPE(I) := OBJECTTABTYPE(X.VESSEL_CODE, X.VESSEL_NAME, X.VESSEL_SPEED, X.VESSEL_COURSE, X.SAILING_STATUS, X.VESSEL_ID, X.LON, X.LAT, X.ACTIVITY_DATE, M.AREA_NAME, X.MANAGER_NAME, X.ETA_PORT_NAME, X.ETA_TIME, X.VESSEL_MMSI); I := I + 1; END IF; END LOOP; END LOOP; select (select nvl(max(SORTCODE)+1,1) from TSA_VESSEL_IN_AREA) INTO V_SORTCODE from dual; OPEN OUT_CURSOR FOR SELECT * FROM (SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, AA.VESSEL_CODE \\\"VESSEL_CODE\\\", AA.VESSEL_NAME \\\"VESSEL_NAME\\\", AA.MANAGER_NAME \\\"MANAGER_NAME\\\", FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE(),1,0) AS MANAGER_CODE, FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE(),1,1) AS MANAGER_DEPT_CODE, FN_TSA_ALERT_IS_SEND(AA.VESSEL_CODE) AS IS_SEND, AA.MMSI \\\"MMSI\\\", AA.ACTIVITY_DATE \\\"ACTIVITY_DATE\\\", CASE WHEN AA.LONGTITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'E' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'W' END AS \\\"LONGTITUDE\\\", CASE WHEN AA.LATITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'N' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'S' END AS \\\"LATITUDE\\\", AA.VESSEL_SPPED \\\"VESSEL_SPPED\\\", AA.VESSEL_COURSE \\\"VESSEL_COURSE\\\", FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION) AS \\\"AVERAGE_SPPED\\\", CASE WHEN NVL(AA.SAILING_STATUS,'0')='1' THEN '在航' ELSE '非在航' END AS \\\"SAILING_STATUS\\\", AA.AREA_NAME \\\"AREA_NAME\\\", AA.ETA_PORT_NAME \\\"ETA_PORT_NAME\\\", AA.ETA_TIME \\\"ETA_TIME\\\", V_SORTCODE AS SORTCODE, 'AUTO' AS created_by_user, sysdate AS created_dtm_loc, 0 AS record_version, 0 AS principal_group_code FROM TABLE(OBJ_TAB_TYPE) AA WHERE FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION)<=TO_NUMBER(NVL(V_SOG,'10')) UNION ALL SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, 'RUN......' AS VESSEL_CODE, '仍在执行' AS VESSEL_NAME, '00000000' AS SAFETY_COMPANY, '080200000000' AS MANAGER_CODE, '00000000' AS MANAGER_DEPT_CODE, 99 AS IS_SEND, '00000000' AS MMSI, sysdate AS POSI_DATE, '' AS POSI_LONG, '' AS POSI_LAT, '' AS VESSEL_SPPED, '' AS VESSEL_COURSE, 0 AS AVERAGE_SPPED, '' AS SAILING_STATUS, '' AS AREA_NAME, '' AS ETA_PORT_NAME, '' AS ETA_TIME, V_SORTCODE AS SORTCODE, 'AUTO' AS created_by_user, sysdate AS created_dtm_loc, 0 AS record_version, 0 AS principal_group_code FROM dual); EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM); END SP_TSA_WARNING3; $$\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE SP_TSA_WARNING3(I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, I_DURATION IN VARCHAR2, I_SOG IN VARCHAR2, I_AREA IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR) IS OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); OFFICE_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); I NUMBER; LN NUMBER; V_MANAGER VARCHAR2(50); V_SOG VARCHAR2(50); V_DURATION VARCHAR2(50); V_SORTCODE NUMBER; BEGIN I:=1; LN:=1; IF NVL(I_MANAGER,'00000000')='00000000' THEN V_MANAGER:=NULL; ELSE V_MANAGER:=I_MANAGER; FOR LS IN (select OFFICE_CODE from sys_office where nvl(is_dept,1)=0 start with OFFICE_CODE=V_MANAGER connect by NOCYCLE supperior_office_CODE=prior office_CODE) LOOP OFFICE_TAB_TYPE.EXTEND; OFFICE_TAB_TYPE(LN) := OBJECTTABTYPE(LS.OFFICE_CODE,'','','','','','', '', NULL,'','','','',''); LN:=LN+1; END LOOP; END IF; select PARA_VALUE INTO V_SOG from TSA_MONITOR_CONF WHERE PARA_TYPE='MAXSPEED'; select PARA_VALUE INTO V_DURATION from TSA_MONITOR_CONF WHERE PARA_TYPE='MONITOR_DURATION'; FOR X IN (SELECT * FROM (SELECT VW.VESSEL_MMSI, V.VESSEL_ID, TO_DATE(SUBSTR(VW.VESSEL_POSIDATE,1,19),'YYYY-MM-DD HH24:MI:SS') AS ACTIVITY_DATE, VW.VESSEL_LAT AS LAT, VW.VESSEL_LON AS LON, V.VESSEL_CODE, V.VESSEL_NAME, VW.VESSEL_SPEED, CASE WHEN VW.VESSEL_STATE IN ('0','8') THEN '1' ELSE '0' END AS SAILING_STATUS, VM.MANAGER AS OFFICE_CODE, VM.manager_dept AS OFFICE_DEPT_CODE, (SELECT AA.OFFICE_NAME FROM SYS_OFFICE AA, VOP_VESSEL_MANAGEMENT BB WHERE AA.OFFICE_CODE=BB.MANAGER AND BB.VESSEL_ID=V.VESSEL_ID AND BB.MANAGEMENT_TYPE=1 AND ((sysdate >= BB.DEFINITION_DATE AND sysdate <= BB.END_DATE) OR (sysdate >= BB.DEFINITION_DATE AND BB.END_DATE IS NULL)) AND ROWNUM=1) AS manager_name, VW.VESSEL_ETA AS ETA_TIME, VW.VESSEL_DEST AS ETA_PORT_NAME, VW.VESSEL_COURSE FROM ZDWEB.VM_ZYHY2_ALLSHIPDYNAMIC@CSBC_TO_XE1 VW, VOP_VESSEL V, VOP_VESSEL_MANAGEMENT VM WHERE NVL(to_char(VW.VESSEL_MMSI),'无')=to_char(V.MMSI) AND V.VESSEL_ID=VM.VESSEL_ID AND (v.is_delete <> '1' OR v.is_delete IS NULL) AND V.VESSEL_CODE NOT IN (SELECT VESSEL_CODE FROM TSA_VESSEL_EXCLUDE) AND NVL(VM.IS_DELETE,'0')<>'1' AND v.trade_type='0' AND v.mmsi IS NOT NULL AND NVL(V.TETIRED_FLAG,'0')='1' AND VM.MANAGEMENT_TYPE=1 AND ((sysdate >= VM.DEFINITION_DATE AND sysdate <= VM.END_DATE) OR (sysdate >= VM.DEFINITION_DATE AND VM.END_DATE IS NULL))) MM INNER JOIN SYS_OFFICE_RELATION_TREE SORT ON MM.OFFICE_CODE=SORT.CHILD_CODE AND sort.office_code=nvl(V_MANAGER,'ABC') WHERE (I_VESSEL_CODE IS NULL OR MM.VESSEL_CODE IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_VESSEL_CODE,','))))) LOOP FOR M IN (SELECT H.* FROM TSA_AREA H WHERE H.DATE_START <= SYSDATE AND AREA_NAME NOT IN ('其他海区','委内瑞拉监控区','马六甲海峡临时监控区') AND (I_AREA IS NULL OR AREA_ID IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_AREA,',')))) AND NVL(H.DATE_END, TO_DATE('2999-01-01','YYYY-MM-DD')) >= SYSDATE) LOOP IF FN_TSA_IS_IN_HD_AREA(X.LON, X.LAT, M.AREA_ID) THEN OBJ_TAB_TYPE.EXTEND; OBJ_TAB_TYPE(I) := OBJECTTABTYPE(X.VESSEL_CODE, X.VESSEL_NAME, X.VESSEL_SPEED, X.VESSEL_COURSE, X.SAILING_STATUS, X.VESSEL_ID, X.LON, X.LAT, X.ACTIVITY_DATE, M.AREA_NAME, X.MANAGER_NAME, X.ETA_PORT_NAME, X.ETA_TIME, X.VESSEL_MMSI); I := I + 1; END IF; END LOOP; END LOOP; select (select nvl(max(SORTCODE)+1,1) from TSA_VESSEL_IN_AREA) INTO V_SORTCODE from dual; OPEN OUT_CURSOR FOR SELECT * FROM (SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, AA.VESSEL_CODE \"VESSEL_CODE\", AA.VESSEL_NAME \"VESSEL_NAME\", AA.MANAGER_NAME \"MANAGER_NAME\", FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE(),1,0) AS MANAGER_CODE, FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE(),1,1) AS MANAGER_DEPT_CODE, FN_TSA_ALERT_IS_SEND(AA.VESSEL_CODE) AS IS_SEND, AA.MMSI \"MMSI\", AA.ACTIVITY_DATE \"ACTIVITY_DATE\", CASE WHEN AA.LONGTITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'E' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'W' END AS \"LONGTITUDE\", CASE WHEN AA.LATITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'N' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'S' END AS \"LATITUDE\", AA.VESSEL_SPPED \"VESSEL_SPPED\", AA.VESSEL_COURSE \"VESSEL_COURSE\", FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION) AS \"AVERAGE_SPPED\", CASE WHEN NVL(AA.SAILING_STATUS,'0')='1' THEN '在航' ELSE '非在航' END AS \"SAILING_STATUS\", AA.AREA_NAME \"AREA_NAME\", AA.ETA_PORT_NAME \"ETA_PORT_NAME\", AA.ETA_TIME \"ETA_TIME\", V_SORTCODE AS SORTCODE, 'AUTO' AS created_by_user, sysdate AS created_dtm_loc, 0 AS record_version, 0 AS principal_group_code FROM TABLE(OBJ_TAB_TYPE) AA WHERE FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION)<=TO_NUMBER(NVL(V_SOG,'10')) UNION ALL SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, 'RUN......' AS VESSEL_CODE, '仍在执行' AS VESSEL_NAME, '00000000' AS SAFETY_COMPANY, '080200000000' AS MANAGER_CODE, '00000000' AS MANAGER_DEPT_CODE, 99 AS IS_SEND, '00000000' AS MMSI, sysdate AS POSI_DATE, '' AS POSI_LONG, '' AS POSI_LAT, '' AS VESSEL_SPPED, '' AS VESSEL_COURSE, 0 AS AVERAGE_SPPED, '' AS SAILING_STATUS, '' AS AREA_NAME, '' AS ETA_PORT_NAME, '' AS ETA_TIME, V_SORTCODE AS SORTCODE, 'AUTO' AS created_by_user, sysdate AS created_dtm_loc, 0 AS record_version, 0 AS principal_group_code FROM dual); EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM); END SP_TSA_WARNING3; $$\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_TSA_WARNING3(\n    I_VESSEL_CODE IN VARCHAR2,\n    I_MANAGER IN VARCHAR2,\n    I_DURATION IN VARCHAR2,\n    I_SOG IN VARCHAR2,\n    I_AREA IN VARCHAR2,\n    OUT_CURSOR OUT SYS_REFCURSOR\n) IS\n    OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();\n    OFFICE_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();\n    I NUMBER;\n    LN NUMBER;\n    V_MANAGER VARCHAR2(50);\n    V_SOG VARCHAR2(50);\n    V_DURATION VARCHAR2(50);\n    V_SORTCODE NUMBER;\nBEGIN\n    I := 1;\n    LN := 1;\n    IF NVL(I_MANAGER, '00000000') = '00000000' THEN\n        V_MANAGER := NULL;\n    ELSE\n        V_MANAGER := I_MANAGER;\n        FOR LS IN (\n            SELECT OFFICE_CODE\n            FROM sys_office\n            WHERE NVL(is_dept, 1) = 0\n            START WITH OFFICE_CODE = V_MANAGER\n            CONNECT BY NOCYCLE supperior_office_CODE = PRIOR office_CODE\n        ) LOOP\n            OFFICE_TAB_TYPE.EXTEND;\n            OFFICE_TAB_TYPE(LN) := OBJECTTABTYPE(\n                LS.OFFICE_CODE,\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                '',\n                NULL,\n                '',\n                '',\n                '',\n                '',\n                ''\n            );\n            LN := LN + 1;\n        END LOOP;\n    END IF;\n    SELECT PARA_VALUE INTO V_SOG FROM TSA_MONITOR_CONF WHERE PARA_TYPE = 'MAXSPEED';\n    SELECT PARA_VALUE INTO V_DURATION FROM TSA_MONITOR_CONF WHERE PARA_TYPE = 'MONITOR_DURATION';\n    FOR X IN (\n        SELECT *\n        FROM (\n            SELECT \n                VW.VESSEL_MMSI,\n                V.VESSEL_ID,\n                TO_DATE(SUBSTR(VW.VESSEL_POSIDATE, 1, 19), 'YYYY-MM-DD HH24:MI:SS') AS ACTIVITY_DATE,\n                VW.VESSEL_LAT AS LAT,\n                VW.VESSEL_LON AS LON,\n                V.VESSEL_CODE,\n                V.VESSEL_NAME,\n                VW.VESSEL_SPEED,\n                CASE WHEN VW.VESSEL_STATE IN ('0', '8') THEN '1' ELSE '0' END AS SAILING_STATUS,\n                VM.MANAGER AS OFFICE_CODE,\n                VM.manager_dept AS OFFICE_DEPT_CODE,\n                (\n                    SELECT AA.OFFICE_NAME\n                    FROM SYS_OFFICE AA, VOP_VESSEL_MANAGEMENT BB\n                    WHERE AA.OFFICE_CODE = BB.MANAGER\n                    AND BB.VESSEL_ID = V.VESSEL_ID\n                    AND BB.MANAGEMENT_TYPE = 1\n                    AND (\n                        (SYSDATE >= BB.DEFINITION_DATE AND SYSDATE <= BB.END_DATE)\n                        OR (SYSDATE >= BB.DEFINITION_DATE AND BB.END_DATE IS NULL)\n                    )\n                    AND ROWNUM = 1\n                ) AS manager_name,\n                VW.VESSEL_ETA AS ETA_TIME,\n                VW.VESSEL_DEST AS ETA_PORT_NAME,\n                VW.VESSEL_COURSE\n            FROM ZDWEB.VM_ZYHY2_ALLSHIPDYNAMIC@CSBC_TO_XE1 VW,\n                 VOP_VESSEL V,\n                 VOP_VESSEL_MANAGEMENT VM\n            WHERE NVL(TO_CHAR(VW.VESSEL_MMSI), '无') = TO_CHAR(V.MMSI)\n            AND V.VESSEL_ID = VM.VESSEL_ID\n            AND (V.IS_DELETE <> '1' OR V.IS_DELETE IS NULL)\n            AND V.VESSEL_CODE NOT IN (SELECT VESSEL_CODE FROM TSA_VESSEL_EXCLUDE)\n            AND NVL(VM.IS_DELETE, '0') <> '1'\n            AND V.TRADE_TYPE = '0'\n            AND V.MMSI IS NOT NULL\n            AND NVL(V.TETIRED_FLAG, '0') = '1'\n            AND VM.MANAGEMENT_TYPE = 1\n            AND (\n                (SYSDATE >= VM.DEFINITION_DATE AND SYSDATE <= VM.END_DATE)\n                OR (SYSDATE >= VM.DEFINITION_DATE AND VM.END_DATE IS NULL)\n            )\n        ) MM\n        INNER JOIN SYS_OFFICE_RELATION_TREE SORT\n        ON MM.OFFICE_CODE = SORT.CHILD_CODE\n        AND SORT.OFFICE_CODE = NVL(V_MANAGER, 'ABC')\n        WHERE (I_VESSEL_CODE IS NULL OR MM.VESSEL_CODE IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_VESSEL_CODE, ','))))\n    ) LOOP\n        FOR M IN (\n            SELECT H.*\n            FROM TSA_AREA H\n            WHERE H.DATE_START <= SYSDATE\n            AND AREA_NAME NOT IN ('其他海区', '委内瑞拉监控区', '马六甲海峡临时监控区')\n            AND (\n                I_AREA IS NULL\n                OR AREA_ID IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_AREA, ',')))\n            )\n            AND NVL(H.DATE_END, TO_DATE('2999-01-01', 'YYYY-MM-DD')) >= SYSDATE\n        ) LOOP\n            IF FN_TSA_IS_IN_HD_AREA(X.LON, X.LAT, M.AREA_ID) THEN\n                OBJ_TAB_TYPE.EXTEND;\n                OBJ_TAB_TYPE(I) := OBJECTTABTYPE(\n                    X.VESSEL_CODE,\n                    X.VESSEL_NAME,\n                    X.VESSEL_SPEED,\n                    X.VESSEL_COURSE,\n                    X.SAILING_STATUS,\n                    X.VESSEL_ID,\n                    X.LON,\n                    X.LAT,\n                    X.ACTIVITY_DATE,\n                    M.AREA_NAME,\n                    X.MANAGER_NAME,\n                    X.ETA_PORT_NAME,\n                    X.ETA_TIME,\n                    X.VESSEL_MMSI\n                );\n                I := I + 1;\n            END IF;\n        END LOOP;\n    END LOOP;\n    SELECT (SELECT NVL(MAX(SORTCODE) + 1, 1) FROM TSA_VESSEL_IN_AREA) INTO V_SORTCODE FROM DUAL;\n    OPEN OUT_CURSOR FOR\n    SELECT *\n    FROM (\n        SELECT SYS_GUID() AS VESSEL_IN_AREA_ID,\n               AA.VESSEL_CODE \"VESSEL_CODE\",\n               AA.VESSEL_NAME \"VESSEL_NAME\",\n               AA.MANAGER_NAME \"MANAGER_NAME\",\n               FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE, SYSDATE, 1, 0) AS MANAGER_CODE,\n               FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE, SYSDATE, 1, 1) AS MANAGER_DEPT_CODE,\n               FN_TSA_ALERT_IS_SEND(AA.VESSEL_CODE) AS IS_SEND,\n               AA.MMSI \"MMSI\",\n               AA.ACTIVITY_DATE \"ACTIVITY_DATE\",\n               CASE WHEN AA.LONGTITUDE > 0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))), 3, '0') || LPAD(\n                     TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE) - TO_NUMBER(TRUNC(AA.LONGTITUDE)))) * 60), 0)), 2,\n                     '0') || 'E'\n                    ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))), 3, '0') || LPAD(\n                     TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE) - TO_NUMBER(TRUNC(AA.LONGTITUDE)))) * 60), 0)), 2,\n                     '0') || 'W'\n               END AS \"LONGTITUDE\",\n               CASE WHEN AA.LATITUDE > 0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))), 2, '0') || LPAD(\n                     TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE) - TO_NUMBER(TRUNC(AA.LATITUDE)))) * 60), 0)), 2, '0') ||\n                     'N'\n                    ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))), 2, '0') || LPAD(\n                     TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE) - TO_NUMBER(TRUNC(AA.LATITUDE)))) * 60), 0)), 2, '0') ||\n                     'S'\n               END AS \"LATITUDE\",\n               AA.VESSEL_SPPED \"VESSEL_SPPED\",\n               AA.VESSEL_COURSE \"VESSEL_COURSE\",\n               FN_TSA_GET_MAX_RATE(AA.MMSI, V_DURATION) AS \"AVERAGE_SPPED\",\n               CASE WHEN NVL(AA.SAILING_STATUS, '0') = '1' THEN '在航' ELSE '非在航' END AS \"SAILING_STATUS\",\n               AA.AREA_NAME \"AREA_NAME\",\n               AA.ETA_PORT_NAME \"ETA_PORT_NAME\",\n               AA.ETA_TIME \"ETA_TIME\",\n               V_SORTCODE AS SORTCODE,\n               'AUTO' AS created_by_user,\n               SYSDATE AS created_dtm_loc,\n               0 AS record_version,\n               0 AS principal_group_code\n        FROM TABLE(OBJ_TAB_TYPE) AA\n        WHERE FN_TSA_GET_MAX_RATE(AA.MMSI, V_DURATION) <= TO_NUMBER(NVL(V_SOG, '10'))\n        UNION ALL\n        SELECT SYS_GUID() AS VESSEL_IN_AREA_ID,\n               'RUN......' AS VESSEL_CODE,\n               '仍在执行' AS VESSEL_NAME,\n               '00000000' AS SAFETY_COMPANY,\n               '080200000000' AS MANAGER_CODE,\n               '00000000' AS MANAGER_DEPT_CODE,\n               99 AS IS_SEND,\n               '00000000' AS MMSI,\n               SYSDATE AS POSI_DATE,\n               '' AS POSI_LONG,\n               '' AS POSI_LAT,\n               '' AS VESSEL_SPPED,\n               '' AS VESSEL_COURSE,\n               0 AS AVERAGE_SPPED,\n               '' AS SAILING_STATUS,\n               '' AS AREA_NAME,\n               '' AS ETA_PORT_NAME,\n               '' AS ETA_TIME,\n               V_SORTCODE AS SORTCODE,\n               'AUTO' AS created_by_user,\n               SYSDATE AS created_dtm_loc,\n               0 AS record_version,\n               0 AS principal_group_code\n        FROM DUAL\n    );\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM);\nEND SP_TSA_WARNING3;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_TSA_WARNING3(I_VESSEL_CODE IN VARCHAR2, I_MANAGER IN VARCHAR2, I_DURATION IN VARCHAR2, I_SOG IN VARCHAR2, I_AREA IN VARCHAR2, OUT_CURSOR OUT SYS_REFCURSOR) IS OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); OFFICE_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE(); I NUMBER; LN NUMBER; V_MANAGER VARCHAR2(50); V_SOG VARCHAR2(50); V_DURATION VARCHAR2(50); V_SORTCODE NUMBER; BEGIN I:=1; LN:=1; IF NVL(I_MANAGER,'00000000')='00000000' THEN V_MANAGER:=NULL; ELSE V_MANAGER:=I_MANAGER; FOR LS IN (SELECT OFFICE_CODE FROM SYS_OFFICE WHERE NVL(IS_DEPT,1)=0 START WITH OFFICE_CODE=V_MANAGER CONNECT BY NOCYCLE SUPPERIOR_OFFICE_CODE=PRIOR OFFICE_CODE) LOOP OFFICE_TAB_TYPE.EXTEND; OFFICE_TAB_TYPE(LN) := OBJECTTABTYPE(LS.OFFICE_CODE,'','','','','','', '', NULL,'','','','',''); LN:=LN+1; END LOOP; END IF; SELECT PARA_VALUE INTO V_SOG FROM TSA_MONITOR_CONF WHERE PARA_TYPE='MAXSPEED'; SELECT PARA_VALUE INTO V_DURATION FROM TSA_MONITOR_CONF WHERE PARA_TYPE='MONITOR_DURATION'; FOR X IN (SELECT * FROM (SELECT VW.VESSEL_MMSI, V.VESSEL_ID, TO_DATE(SUBSTR(VW.VESSEL_POSIDATE,1,19),'YYYY-MM-DD HH24:MI:SS') AS ACTIVITY_DATE, VW.VESSEL_LAT AS LAT, VW.VESSEL_LON AS LON, V.VESSEL_CODE, V.VESSEL_NAME, VW.VESSEL_SPEED, CASE WHEN VW.VESSEL_STATE IN ('0','8') THEN '1' ELSE '0' END AS SAILING_STATUS, VM.MANAGER AS OFFICE_CODE, VM.MANAGER_DEPT AS OFFICE_DEPT_CODE, (SELECT AA.OFFICE_NAME FROM SYS_OFFICE AA, VOP_VESSEL_MANAGEMENT BB WHERE AA.OFFICE_CODE=BB.MANAGER AND BB.VESSEL_ID=V.VESSEL_ID AND BB.MANAGEMENT_TYPE=1 AND ((SYSDATE >= BB.DEFINITION_DATE AND SYSDATE <= BB.END_DATE) OR (SYSDATE >= BB.DEFINITION_DATE AND BB.END_DATE IS NULL)) AND ROWNUM=1) AS MANAGER_NAME, VW.VESSEL_ETA AS ETA_TIME, VW.VESSEL_DEST AS ETA_PORT_NAME, VW.VESSEL_COURSE FROM ZDWEB.VM_ZYHY2_ALLSHIPDYNAMIC@CSBC_TO_XE1 VW, VOP_VESSEL V, VOP_VESSEL_MANAGEMENT VM WHERE NVL(TO_CHAR(VW.VESSEL_MMSI),'无')=TO_CHAR(V.MMSI) AND V.VESSEL_ID=VM.VESSEL_ID AND (V.IS_DELETE<>'1' OR V.IS_DELETE IS NULL) AND V.VESSEL_CODE NOT IN (SELECT VESSEL_CODE FROM TSA_VESSEL_EXCLUDE) AND NVL(VM.IS_DELETE,'0')<>'1' AND V.TRADE_TYPE='0' AND V.MMSI IS NOT NULL AND NVL(V.TETIRED_FLAG,'0')='1' AND VM.MANAGEMENT_TYPE=1 AND ((SYSDATE >= VM.DEFINITION_DATE AND SYSDATE <= VM.END_DATE) OR (SYSDATE >= VM.DEFINITION_DATE AND VM.END_DATE IS NULL))) MM INNER JOIN SYS_OFFICE_RELATION_TREE SORT ON MM.OFFICE_CODE=SORT.CHILD_CODE AND SORT.OFFICE_CODE=NVL(V_MANAGER,'ABC') WHERE (I_VESSEL_CODE IS NULL OR MM.VESSEL_CODE IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_VESSEL_CODE,','))))) LOOP FOR M IN (SELECT H.* FROM TSA_AREA H WHERE H.DATE_START <= SYSDATE AND AREA_NAME NOT IN ('其他海区','委内瑞拉监控区','马六甲海峡临时监控区') AND (I_AREA IS NULL OR AREA_ID IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_AREA,',')))) AND NVL(H.DATE_END, TO_DATE('2999-01-01','YYYY-MM-DD')) >= SYSDATE) LOOP IF FN_TSA_IS_IN_HD_AREA(X.LON, X.LAT, M.AREA_ID) THEN OBJ_TAB_TYPE.EXTEND; OBJ_TAB_TYPE(I) := OBJECTTABTYPE(X.VESSEL_CODE, X.VESSEL_NAME, X.VESSEL_SPEED, X.VESSEL_COURSE, X.SAILING_STATUS, X.VESSEL_ID, X.LON, X.LAT, X.ACTIVITY_DATE, M.AREA_NAME, X.MANAGER_NAME, X.ETA_PORT_NAME, X.ETA_TIME, X.VESSEL_MMSI); I := I + 1; END IF; END LOOP; END LOOP; SELECT (SELECT NVL(MAX(SORTCODE)+1,1) FROM TSA_VESSEL_IN_AREA) INTO V_SORTCODE FROM DUAL; OPEN OUT_CURSOR FOR SELECT * FROM (SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, AA.VESSEL_CODE \"VESSEL_CODE\", AA.VESSEL_NAME \"VESSEL_NAME\", AA.MANAGER_NAME \"MANAGER_NAME\", FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE,1,0) AS MANAGER_CODE, FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE,SYSDATE,1,1) AS MANAGER_DEPT_CODE, FN_TSA_ALERT_IS_SEND(AA.VESSEL_CODE) AS IS_SEND, AA.MMSI \"MMSI\", AA.ACTIVITY_DATE \"ACTIVITY_DATE\", CASE WHEN AA.LONGTITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'E' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))),3,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LONGTITUDE)-TO_NUMBER(TRUNC(AA.LONGTITUDE))))*60),0)),2,'0')||'W' END AS \"LONGTITUDE\", CASE WHEN AA.LATITUDE>0 THEN LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'N' ELSE LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LATITUDE)))),2,'0')||LPAD(TO_CHAR(ROUND((ABS((TO_NUMBER(AA.LATITUDE)-TO_NUMBER(TRUNC(AA.LATITUDE))))*60),0)),2,'0')||'S' END AS \"LATITUDE\", AA.VESSEL_SPPED \"VESSEL_SPPED\", AA.VESSEL_COURSE \"VESSEL_COURSE\", FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION) AS \"AVERAGE_SPPED\", CASE WHEN NVL(AA.SAILING_STATUS,'0')='1' THEN '在航' ELSE '非在航' END AS \"SAILING_STATUS\", AA.AREA_NAME \"AREA_NAME\", AA.ETA_PORT_NAME \"ETA_PORT_NAME\", AA.ETA_TIME \"ETA_TIME\", V_SORTCODE AS SORTCODE, 'AUTO' AS CREATED_BY_USER, SYSDATE AS CREATED_DTM_LOC, 0 AS RECORD_VERSION, 0 AS PRINCIPAL_GROUP_CODE FROM TABLE(OBJ_TAB_TYPE) AA WHERE FN_TSA_GET_MAX_RATE(AA.MMSI,V_DURATION)<=TO_NUMBER(NVL(V_SOG,'10')) UNION ALL SELECT SYS_GUID() AS VESSEL_IN_AREA_ID, 'RUN......' AS VESSEL_CODE, '仍在执行' AS VESSEL_NAME, '00000000' AS SAFETY_COMPANY, '080200000000' AS MANAGER_CODE, '00000000' AS MANAGER_DEPT_CODE, 99 AS IS_SEND, '00000000' AS MMSI, SYSDATE AS POSI_DATE, '' AS POSI_LONG, '' AS POSI_LAT, '' AS VESSEL_SPPED, '' AS VESSEL_COURSE, 0 AS AVERAGE_SPPED, '' AS SAILING_STATUS, '' AS AREA_NAME, '' AS ETA_PORT_NAME, '' AS ETA_TIME, V_SORTCODE AS SORTCODE, 'AUTO' AS CREATED_BY_USER, SYSDATE AS CREATED_DTM_LOC, 0 AS RECORD_VERSION, 0 AS PRINCIPAL_GROUP_CODE FROM DUAL); EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('错误: ' || SQLERRM); END SP_TSA_WARNING3;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_TSA_WARNING3 (\n  I_VESSEL_CODE IN VARCHAR2,\n  I_MANAGER IN VARCHAR2,\n  I_DURATION IN VARCHAR2,\n  I_SOG IN VARCHAR2,\n  I_AREA IN VARCHAR2,\n  OUT_CURSOR OUT SYS_REFCURSOR\n) IS\n  OBJ_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();\n  OFFICE_TAB_TYPE OBJECT_TABLE := OBJECT_TABLE();\n  I NUMBER;\n  LN NUMBER;\n  V_MANAGER VARCHAR2(50);\n  V_SOG VARCHAR2(50);\n  V_DURATION VARCHAR2(50);\n  V_SORTCODE NUMBER;\nBEGIN\n  I := 1;\n  LN := 1;\n  IF NVL(I_MANAGER, '00000000') = '00000000' THEN\n    V_MANAGER := NULL;\n  ELSE\n    V_MANAGER := I_MANAGER;\n    FOR LS IN (\n      SELECT OFFICE_CODE\n      FROM SYS_OFFICE\n      WHERE NVL(IS_DEPT, 1) = 0\n      START WITH OFFICE_CODE = V_MANAGER\n      CONNECT BY NOCYCLE SUPERIOR_OFFICE_CODE = PRIOR OFFICE_CODE\n    ) LOOP\n      OFFICE_TAB_TYPE.EXTEND;\n      OFFICE_TAB_TYPE(LN) := OBJECTTABTYPE(LS.OFFICE_CODE, '', '', '', '', '', '', '', NULL, '', '', '', '', '');\n      LN := LN + 1;\n    END LOOP;\n  END IF;\n  \n  SELECT PARA_VALUE INTO V_SOG FROM TSA_MONITOR_CONF WHERE PARA_TYPE = 'MAXSPEED';\n  SELECT PARA_VALUE INTO V_DURATION FROM TSA_MONITOR_CONF WHERE PARA_TYPE = 'MONITOR_DURATION';\n  \n  FOR X IN (\n    SELECT *\n    FROM (\n      SELECT VW.VESSEL_MMSI,\n             V.VESSEL_ID,\n             TO_DATE(SUBSTR(VW.VESSEL_POSIDATE, 1, 19), 'YYYY-MM-DD HH24:MI:SS') AS ACTIVITY_DATE,\n             VW.VESSEL_LAT AS LAT,\n             VW.VESSEL_LON AS LON,\n             V.VESSEL_CODE,\n             V.VESSEL_NAME,\n             VW.VESSEL_SPEED,\n             CASE WHEN VW.VESSEL_STATE IN ('0', '8') THEN '1' ELSE '0' END AS SAILING_STATUS,\n             VM.MANAGER AS OFFICE_CODE,\n             VM.MANAGER_DEPT AS OFFICE_DEPT_CODE,\n             (SELECT AA.OFFICE_NAME\n              FROM SYS_OFFICE AA,\n                   VOP_VESSEL_MANAGEMENT BB\n              WHERE AA.OFFICE_CODE = BB.MANAGER\n                AND BB.VESSEL_ID = V.VESSEL_ID\n                AND BB.MANAGEMENT_TYPE = 1\n                AND ((SYSDATE >= BB.DEFINITION_DATE AND SYSDATE <= BB.END_DATE) OR (SYSDATE >= BB.DEFINITION_DATE AND BB.END_DATE IS NULL))\n                AND ROWNUM = 1) AS MANAGER_NAME,\n             VW.VESSEL_ETA AS ETA_TIME,\n             VW.VESSEL_DEST AS ETA_PORT_NAME,\n             VW.VESSEL_COURSE\n      FROM ZDWEB.VM_ZYHY2_ALLSHIPDYNAMIC@CSBC_TO_XE1 VW,\n           VOP_VESSEL V,\n           VOP_VESSEL_MANAGEMENT VM\n      WHERE NVL(TO_CHAR(VW.VESSEL_MMSI), '无') = TO_CHAR(V.MMSI)\n        AND V.VESSEL_ID = VM.VESSEL_ID\n        AND (V.IS_DELETE <> '1' OR V.IS_DELETE IS NULL)\n        AND V.VESSEL_CODE NOT IN (SELECT VESSEL_CODE FROM TSA_VESSEL_EXCLUDE)\n        AND NVL(VM.IS_DELETE, '0') <> '1'\n        AND V.TRADE_TYPE = '0'\n        AND V.MMSI IS NOT NULL\n        AND NVL(V.TETIRED_FLAG, '0') = '1'\n        AND VM.MANAGEMENT_TYPE = 1\n        AND ((SYSDATE >= VM.DEFINITION_DATE AND SYSDATE <= VM.END_DATE) OR (SYSDATE >= VM.DEFINITION_DATE AND VM.END_DATE IS NULL))\n    ) MM\n    INNER JOIN SYS_OFFICE_RELATION_TREE SORT ON MM.OFFICE_CODE = SORT.CHILD_CODE AND SORT.OFFICE_CODE = NVL(V_MANAGER, 'ABC')\n    WHERE (I_VESSEL_CODE IS NULL OR MM.VESSEL_CODE IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_VESSEL_CODE, ','))))\n  ) LOOP\n    FOR M IN (\n      SELECT H.*\n      FROM TSA_AREA H\n      WHERE H.DATE_START <= SYSDATE\n        AND AREA_NAME NOT IN ('其他海区', '委内瑞拉监控区', '马六甲海峡临时监控区')\n        AND (I_AREA IS NULL OR AREA_ID IN (SELECT COLUMN_VALUE FROM TABLE(FN_STR2TYTABLE(I_AREA, ','))))\n        AND NVL(H.DATE_END, TO_DATE('2999-01-01', 'YYYY-MM-DD')) >= SYSDATE\n    ) LOOP\n      IF FN_TSA_IS_IN_HD_AREA(X.LON, X.LAT, M.AREA_ID) THEN\n        OBJ_TAB_TYPE.EXTEND;\n        OBJ_TAB_TYPE(I) := OBJECTTABTYPE(X.VESSEL_CODE, X.VESSEL_NAME, X.VESSEL_SPEED, X.VESSEL_COURSE, X.SAILING_STATUS, X.VESSEL_ID, X.LON, X.LAT, X.ACTIVITY_DATE, M.AREA_NAME, X.MANAGER_NAME, X.ETA_PORT_NAME, X.ETA_TIME, X.VESSEL_MMSI);\n        I := I + 1;\n      END IF;\n    END LOOP;\n  END LOOP;\n  \n  SELECT (SELECT NVL(MAX(SORTCODE) + 1, 1) FROM TSA_VESSEL_IN_AREA) INTO V_SORTCODE FROM DUAL;\n  \n  OPEN OUT_CURSOR FOR\n    SELECT *\n    FROM (\n      SELECT SYS_GUID() AS VESSEL_IN_AREA_ID,\n             AA.VESSEL_CODE \"VESSEL_CODE\",\n             AA.VESSEL_NAME \"VESSEL_NAME\",\n             AA.MANAGER_NAME \"MANAGER_NAME\",\n             FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE, SYSDATE(), 1, 0) AS MANAGER_CODE,\n             FN_GET_VESSEL_MNT_CODE(AA.VESSEL_CODE, SYSDATE(), 1, 1) AS MANAGER_DEPT_CODE,\n             FN_TSA_ALERT_IS_SEND(AA.VESSEL_CODE) AS IS_SEND,\n             AA.MMSI \"MMSI\",\n             AA.ACTIVITY_DATE \"ACTIVITY_DATE\",\n             CASE WHEN AA.LONGTITUDE > 0 THEN\n                      LPAD(TO_CHAR(TRUNC(ABS(TO_NUMBER(AA.LONGTITUDE)))), 3, '0') ||\n                      LPAD(TO_CHAR(ROUND(ABS((TO_NUMBER(AA.LONGTITUDE) - TO_NUMBER(TRUNC(AA.LONGTITUDE)))) * 60), 0)),\n             ..."
                    }
                ]
            },
            {
                "case_id": "5",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"5\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"SYSDATE\", \"NVL\", \"SUBSTR\", \"REPLACE\", \"LENGTH\", \"CASE\", \"ROW_NUMBER\", \"OVER\", \"PARTITION BY\", \"ROUND\", \"TRIM\", \"EXISTS\", \"EXECUTE IMMEDIATE\", \"COMMIT\", \"TRUNCATE TABLE\", \"SQLCODE\", \"SQLERRM\", \"ROWNUM\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE \\\"SP_FEE_CSC_DAILY_JOB\\\" /* -------------------------------------------------------------------- PROCEDURE: SP_FEE_CSC_DAILY_JOB Description: 能源每日定时任务 AUTHOR: liul(liul@cnshipping.com) 2015-09-09 9:31:00 ---------------------------------------------------------------------- */ IS V_FLAG varchar2(50); BEGIN select open_mode into V_FLAG from v$database; if V_FLAG = 'READ WRITE' then P_LOG_EXCEPTION('开始时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远业务口径船舶信息*/ /*delete from FMM_CSCL_BUSI_CALIBER where 1=1;*/ EXECUTE IMMEDIATE 'truncate table FMM_CSCL_BUSI_CALIBER'; insert into FMM_CSCL_BUSI_CALIBER select * from VOP_VESSEL_CSCL_BUSI_CALIBER; commit; P_LOG_EXCEPTION('FMM_CSCL_BUSI_CALIBER完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远预估费用*/ /*delete from fmm_csc_maintenance_esti;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_esti'; insert into fmm_csc_maintenance_esti select * from vw_csc_maintenance_esti; commit; P_LOG_EXCEPTION('fmm_csc_maintenance_esti 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新所有订单预估费用*/ /*delete from fmm_csc_maintenance_orders;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_orders'; insert into fmm_csc_maintenance_orders select * from VW_CSC_MAINTENANCE_ORDERS; commit; P_LOG_EXCEPTION('fmm_csc_maintenance_orders 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远账单费用*/ /*delete from fmm_csc_maintenance_invoice;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_invoice'; insert into fmm_csc_maintenance_invoice select * from vw_csc_maintenance_invoice; commit; INSERT INTO fmm_csc_maintenance_invoice SELECT TEMP.VESSEL_CODE, TEMP.SUPPLIER_CODE, TEMP.PAYER, NULL AS PORT_CODE, TEMP.INVOICE_STATUS, TEMP.INVOICE_SORT, TEMP.ORDER_NO, TEMP.PAYMENT_NO, TEMP.INVOICE_SORT_DETAIL, TEMP.INVOICE_DETAIL_ID, TEMP.BASE_AMOUNT_NOTAX, TEMP.INVOICE_DATE, TEMP.CURRENCY, TEMP.DTL_AMOUNT_NOTAX, TEMP.INVOICE_NUM, TEMP.PAYEE, TEMP.ACTIVITY_DATE, TEMP.FI_RECEIVEDATE, TEMP.INPUT_DATE, TEMP.UPDATE_TIME, TEMP.BASE_AMOUNT, TEMP.AMOUNT, 0 AS MISC_AMOUNT,/*运杂费*/ 0 AS BASE_MISC_AMOUNT, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'VEL_MANAGE_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'VEL_MANAGE_BODY') ) AS COMPANY_CODE, TEMP.SEND_FIN_DATE, TEMP.APPLY_TYPE, '2' AS BUSI_TYPE, TEMP.IS_ENERGY, TEMP.TYPE_NAME, TEMP.ORDER_CURRENCY, TEMP.EXCHANGE_RATE, NULL AS BILL_NO, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'COST_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'COST_BODY') ) AS OWNERSHIP_BODY, TEMP.OPRT_WAY, TEMP.USD_AMOUNT FROM (select /*已开票但未支付状态的费用明细*/ I.VESSEL_CODE, /*船舶*/ substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) AS ORDER_NO, /*定单号*/ BFM.CONFIRM_DATE AS ORDER_DATE, T.DISPLAY_VALUE_CN AS TYPE_NAME, /*定单种类*/ BFM.CURRENCY AS ORDER_CURRENCY, /*定单币种*/ BFM.AMOUNT AS TOTAL_FEE, /*定单金额*/ NVL(BFM.SUPPLIER,I.PAYEE) AS SUPPLIER_CODE, 'HY' AS APPLY_TYPE, I.PAYER, I.INVOICE_STATUS, 'FY33' AS INVOICE_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'FY33002' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'FY33003' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'FY33004' WHEN I.INVOICE_SORT_DETAIL = 'FY03004' THEN 'FY33005' WHEN I.INVOICE_SORT_DETAIL in ('FY03005', 'FY03006', 'FY03007') THEN 'FY33006' ELSE 'FY33006' END) AS INVOICE_SORT_DETAIL, 'RLF' AS GROUP_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'YZ30003' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'YZ30001' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'YZ30002' WHEN I.INVOICE_SORT_DETAIL in ('FY03004','FY03005', 'FY03006', 'FY03007') THEN 'YZ30004' ELSE 'YZ30004' END) AS GROUP_SORT_DETAIL, I.INVOICE_DETAIL_ID, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) / (1 + NVL(I.TAX_RATE,0)) AS BASE_AMOUNT_notax, I.INVOICE_DATE, I.CURRENCY, I.DTL_AMOUNT / (1 + I.TAX_RATE) AS DTL_AMOUNT_notax, I.INVOICE_NUM, I.PAYEE, /*(CASE WHEN I.COMPANY_CODE IN ('08010000', '66190000') THEN NVL(NVL(M.CREATED_DTM_LOC, BOS.ACTIVITY_DATE), I.SEND_FIN_DATE) ELSE BOS.ACTIVITY_DATE END) AS ACTIVITY_DATE,*/ (CASE WHEN I.COMPANY_CODE IN ('08020000','04000000','02000000','62000000') THEN I.CREATED_DTM_LOC WHEN I.PAYER LIKE '64%' THEN I.CREATED_DTM_LOC ELSE BFM.SUPPLY_DATE END) AS ACTIVITY_DATE, I.SEND_FIN_DATE AS FI_RECEIVEDATE, NULL AS IS_ENERGY, I.CREATED_DTM_LOC AS INPUT_DATE, NVL(NVL(I.UPDATED_DTM_LOC, I.CREATED_DTM_LOC), SYSDATE - 1) AS UPDATE_TIME, '3' as rpt_type, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) AS BASE_AMOUNT, I.DTL_AMOUNT AS AMOUNT, I.COMPANY_CODE, NVL(I.SEND_FIN_DATE, I.INVOICE_DATE) AS SEND_FIN_DATE, row_number() over(partition by I.INVOICE_DETAIL_ID order by BFM.SUPPLY_DATE desc) rn, I.PAYMENT_NO, I.RMB_EXCHANGE_RATE AS EXCHANGE_RATE, '1' AS OPRT_WAY, ROUND(I.DTL_AMOUNT*fn_get_exchange_rate(I.CURRENCY,'USD',BFM.SUPPLY_DATE),2) AS USD_AMOUNT FROM bfm_invoice_detail I LEFT JOIN BFM_PURCHASE_ORDER BFM ON substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) = BFM.PO_NUMBER LEFT JOIN BFM_OIL_STORAGE BOS ON BOS.operate = '10' AND substr(BOS.PO_NUMBER,1,replace(instr(BOS.PO_NUMBER,'-',-1)-1,-1,length(BOS.PO_NUMBER))) = BFM.PO_NUMBER AND BOS.oil_type = '002' LEFT JOIN CDM_CODEDICT T ON T.code_type = 'BFM_FILL_TYPE' AND BFM.FILL_OIL_TYPE = T.CODE_VALUE LEFT JOIN SAP_JA0012_MTR_MIDDLE M ON BOS.PO_NUMBER = M.TRD_ORDER WHERE I.INVOICE_SORT = 'FY03' AND NVL(I.IS_DELETE,'0')<>'1' AND I.PAYER LIKE '64%' ) TEMP WHERE RN = 1; P_LOG_EXCEPTION('fmm_csc_maintenance_invoice 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*根据主数据更新备件信息表是否库存标记*/ update sps_parts_info sp set sp.if_storaged = null where EXISTS(select trim(group_code) from SPS_PARTS_MASTER_DATA t where t.if_storaged is null AND trim(T.group_code)=SP.GROUP_CODE) AND (SP.VESSEL_CODE LIKE 'S%' OR SP.VESSEL_CODE LIKE 'E%'); /*更新上远虚拟预算数据*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_virtual_budget'; insert into fmm_csc_virtual_budget select * from vw_csc_virtual_budget; commit; P_LOG_EXCEPTION('fmm_csc_virtual_budget 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新集运备件申领设备ID为空的记录*/ update SPS_APPLY_main sam set (sam.equipment_info_id, sam.equipment_code) = (select sad.equipment_id, sad.equip_code from sps_apply_detail sad where sad.apply_main_id = SAM.APPLY_MAIN_ID and rownum = 1) where sam.apply_main_id IN (select SAM.apply_main_id from SPS_APPLY_main SAM where SAM.EQUIPMENT_INFO_ID is null and SAM.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0')); /*更新集运备件询价设备ID为空的记录*/ update SPS_ENQUIRE_MAIN SS set (SS.EQUIPMENT_INFO_ID, SS.EQUIPMENT_CODE) = (select SED.equipment_id, SED.EQUIP_CODE from SPS_ENQUIRE_DETAIL SED where SED.ENQUIRE_MAIN_ID = SS.ENQUIRE_MAIN_ID and rownum = 1) where SS.ENQUIRE_MAIN_ID IN (select SEM.ENQUIRE_MAIN_ID from sps_enquire_main sem where sem.equipment_info_id is null and sem.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0')); commit; P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); commit; END IF; END SP_FEE_CSC_DAILY_JOB; $$\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE \"SP_FEE_CSC_DAILY_JOB\" /* -------------------------------------------------------------------- PROCEDURE: SP_FEE_CSC_DAILY_JOB Description: 能源每日定时任务 AUTHOR: liul(liul@cnshipping.com) 2015-09-09 9:31:00 ---------------------------------------------------------------------- */ IS V_FLAG varchar2(50); BEGIN select open_mode into V_FLAG from v$database; if V_FLAG = 'READ WRITE' then P_LOG_EXCEPTION('开始时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远业务口径船舶信息*/ /*delete from FMM_CSCL_BUSI_CALIBER where 1=1;*/ EXECUTE IMMEDIATE 'truncate table FMM_CSCL_BUSI_CALIBER'; insert into FMM_CSCL_BUSI_CALIBER select * from VOP_VESSEL_CSCL_BUSI_CALIBER; commit; P_LOG_EXCEPTION('FMM_CSCL_BUSI_CALIBER完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远预估费用*/ /*delete from fmm_csc_maintenance_esti;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_esti'; insert into fmm_csc_maintenance_esti select * from vw_csc_maintenance_esti; commit; P_LOG_EXCEPTION('fmm_csc_maintenance_esti 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新所有订单预估费用*/ /*delete from fmm_csc_maintenance_orders;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_orders'; insert into fmm_csc_maintenance_orders select * from VW_CSC_MAINTENANCE_ORDERS; commit; P_LOG_EXCEPTION('fmm_csc_maintenance_orders 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新上远账单费用*/ /*delete from fmm_csc_maintenance_invoice;*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_invoice'; insert into fmm_csc_maintenance_invoice select * from vw_csc_maintenance_invoice; commit; INSERT INTO fmm_csc_maintenance_invoice SELECT TEMP.VESSEL_CODE, TEMP.SUPPLIER_CODE, TEMP.PAYER, NULL AS PORT_CODE, TEMP.INVOICE_STATUS, TEMP.INVOICE_SORT, TEMP.ORDER_NO, TEMP.PAYMENT_NO, TEMP.INVOICE_SORT_DETAIL, TEMP.INVOICE_DETAIL_ID, TEMP.BASE_AMOUNT_NOTAX, TEMP.INVOICE_DATE, TEMP.CURRENCY, TEMP.DTL_AMOUNT_NOTAX, TEMP.INVOICE_NUM, TEMP.PAYEE, TEMP.ACTIVITY_DATE, TEMP.FI_RECEIVEDATE, TEMP.INPUT_DATE, TEMP.UPDATE_TIME, TEMP.BASE_AMOUNT, TEMP.AMOUNT, 0 AS MISC_AMOUNT,/*运杂费*/ 0 AS BASE_MISC_AMOUNT, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'VEL_MANAGE_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'VEL_MANAGE_BODY') ) AS COMPANY_CODE, TEMP.SEND_FIN_DATE, TEMP.APPLY_TYPE, '2' AS BUSI_TYPE, TEMP.IS_ENERGY, TEMP.TYPE_NAME, TEMP.ORDER_CURRENCY, TEMP.EXCHANGE_RATE, NULL AS BILL_NO, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'COST_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'COST_BODY') ) AS OWNERSHIP_BODY, TEMP.OPRT_WAY, TEMP.USD_AMOUNT FROM (select /*已开票但未支付状态的费用明细*/ I.VESSEL_CODE, /*船舶*/ substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) AS ORDER_NO, /*定单号*/ BFM.CONFIRM_DATE AS ORDER_DATE, T.DISPLAY_VALUE_CN AS TYPE_NAME, /*定单种类*/ BFM.CURRENCY AS ORDER_CURRENCY, /*定单币种*/ BFM.AMOUNT AS TOTAL_FEE, /*定单金额*/ NVL(BFM.SUPPLIER,I.PAYEE) AS SUPPLIER_CODE, 'HY' AS APPLY_TYPE, I.PAYER, I.INVOICE_STATUS, 'FY33' AS INVOICE_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'FY33002' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'FY33003' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'FY33004' WHEN I.INVOICE_SORT_DETAIL = 'FY03004' THEN 'FY33005' WHEN I.INVOICE_SORT_DETAIL in ('FY03005', 'FY03006', 'FY03007') THEN 'FY33006' ELSE 'FY33006' END) AS INVOICE_SORT_DETAIL, 'RLF' AS GROUP_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'YZ30003' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'YZ30001' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'YZ30002' WHEN I.INVOICE_SORT_DETAIL in ('FY03004','FY03005', 'FY03006', 'FY03007') THEN 'YZ30004' ELSE 'YZ30004' END) AS GROUP_SORT_DETAIL, I.INVOICE_DETAIL_ID, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) / (1 + NVL(I.TAX_RATE,0)) AS BASE_AMOUNT_notax, I.INVOICE_DATE, I.CURRENCY, I.DTL_AMOUNT / (1 + I.TAX_RATE) AS DTL_AMOUNT_notax, I.INVOICE_NUM, I.PAYEE, /*(CASE WHEN I.COMPANY_CODE IN ('08010000', '66190000') THEN NVL(NVL(M.CREATED_DTM_LOC, BOS.ACTIVITY_DATE), I.SEND_FIN_DATE) ELSE BOS.ACTIVITY_DATE END) AS ACTIVITY_DATE,*/ (CASE WHEN I.COMPANY_CODE IN ('08020000','04000000','02000000','62000000') THEN I.CREATED_DTM_LOC WHEN I.PAYER LIKE '64%' THEN I.CREATED_DTM_LOC ELSE BFM.SUPPLY_DATE END) AS ACTIVITY_DATE, I.SEND_FIN_DATE AS FI_RECEIVEDATE, NULL AS IS_ENERGY, I.CREATED_DTM_LOC AS INPUT_DATE, NVL(NVL(I.UPDATED_DTM_LOC, I.CREATED_DTM_LOC), SYSDATE - 1) AS UPDATE_TIME, '3' as rpt_type, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) AS BASE_AMOUNT, I.DTL_AMOUNT AS AMOUNT, I.COMPANY_CODE, NVL(I.SEND_FIN_DATE, I.INVOICE_DATE) AS SEND_FIN_DATE, row_number() over(partition by I.INVOICE_DETAIL_ID order by BFM.SUPPLY_DATE desc) rn, I.PAYMENT_NO, I.RMB_EXCHANGE_RATE AS EXCHANGE_RATE, '1' AS OPRT_WAY, ROUND(I.DTL_AMOUNT*fn_get_exchange_rate(I.CURRENCY,'USD',BFM.SUPPLY_DATE),2) AS USD_AMOUNT FROM bfm_invoice_detail I LEFT JOIN BFM_PURCHASE_ORDER BFM ON substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) = BFM.PO_NUMBER LEFT JOIN BFM_OIL_STORAGE BOS ON BOS.operate = '10' AND substr(BOS.PO_NUMBER,1,replace(instr(BOS.PO_NUMBER,'-',-1)-1,-1,length(BOS.PO_NUMBER))) = BFM.PO_NUMBER AND BOS.oil_type = '002' LEFT JOIN CDM_CODEDICT T ON T.code_type = 'BFM_FILL_TYPE' AND BFM.FILL_OIL_TYPE = T.CODE_VALUE LEFT JOIN SAP_JA0012_MTR_MIDDLE M ON BOS.PO_NUMBER = M.TRD_ORDER WHERE I.INVOICE_SORT = 'FY03' AND NVL(I.IS_DELETE,'0')<>'1' AND I.PAYER LIKE '64%' ) TEMP WHERE RN = 1; P_LOG_EXCEPTION('fmm_csc_maintenance_invoice 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*根据主数据更新备件信息表是否库存标记*/ update sps_parts_info sp set sp.if_storaged = null where EXISTS(select trim(group_code) from SPS_PARTS_MASTER_DATA t where t.if_storaged is null AND trim(T.group_code)=SP.GROUP_CODE) AND (SP.VESSEL_CODE LIKE 'S%' OR SP.VESSEL_CODE LIKE 'E%'); /*更新上远虚拟预算数据*/ EXECUTE IMMEDIATE 'truncate table fmm_csc_virtual_budget'; insert into fmm_csc_virtual_budget select * from vw_csc_virtual_budget; commit; P_LOG_EXCEPTION('fmm_csc_virtual_budget 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); /*更新集运备件申领设备ID为空的记录*/ update SPS_APPLY_main sam set (sam.equipment_info_id, sam.equipment_code) = (select sad.equipment_id, sad.equip_code from sps_apply_detail sad where sad.apply_main_id = SAM.APPLY_MAIN_ID and rownum = 1) where sam.apply_main_id IN (select SAM.apply_main_id from SPS_APPLY_main SAM where SAM.EQUIPMENT_INFO_ID is null and SAM.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0')); /*更新集运备件询价设备ID为空的记录*/ update SPS_ENQUIRE_MAIN SS set (SS.EQUIPMENT_INFO_ID, SS.EQUIPMENT_CODE) = (select SED.equipment_id, SED.EQUIP_CODE from SPS_ENQUIRE_DETAIL SED where SED.ENQUIRE_MAIN_ID = SS.ENQUIRE_MAIN_ID and rownum = 1) where SS.ENQUIRE_MAIN_ID IN (select SEM.ENQUIRE_MAIN_ID from sps_enquire_main sem where sem.equipment_info_id is null and sem.vessel_code in (select vv.vessel_code from dss_vop_vessel_info vv where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0')); commit; P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); commit; END IF; END SP_FEE_CSC_DAILY_JOB; $$\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE \"SP_FEE_CSC_DAILY_JOB\" \nIS \n    V_FLAG varchar2(50); \nBEGIN \n    select open_mode into V_FLAG from v$database; \n    if V_FLAG = 'READ WRITE' then \n        P_LOG_EXCEPTION('开始时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); \n\n        EXECUTE IMMEDIATE 'truncate table FMM_CSCL_BUSI_CALIBER'; \n        insert into FMM_CSCL_BUSI_CALIBER select * from VOP_VESSEL_CSCL_BUSI_CALIBER; \n        commit; \n        P_LOG_EXCEPTION('FMM_CSCL_BUSI_CALIBER完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); \n\n        EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_esti'; \n        insert into fmm_csc_maintenance_esti select * from vw_csc_maintenance_esti; \n        commit; \n        P_LOG_EXCEPTION('fmm_csc_maintenance_esti 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); \n\n        EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_orders'; \n        insert into fmm_csc_maintenance_orders select * from VW_CSC_MAINTENANCE_ORDERS; \n        commit; \n        P_LOG_EXCEPTION('fmm_csc_maintenance_orders 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); \n\n        EXECUTE IMMEDIATE 'truncate table fmm_csc_maintenance_invoice'; \n        insert into fmm_csc_maintenance_invoice select * from vw_csc_maintenance_invoice; \n        commit; \n\n        INSERT INTO fmm_csc_maintenance_invoice \n        SELECT TEMP.VESSEL_CODE, TEMP.SUPPLIER_CODE, TEMP.PAYER, NULL AS PORT_CODE, TEMP.INVOICE_STATUS, TEMP.INVOICE_SORT, TEMP.ORDER_NO, TEMP.PAYMENT_NO, TEMP.INVOICE_SORT_DETAIL, TEMP.INVOICE_DETAIL_ID, TEMP.BASE_AMOUNT_NOTAX, TEMP.INVOICE_DATE, TEMP.CURRENCY, TEMP.DTL_AMOUNT_NOTAX, TEMP.INVOICE_NUM, TEMP.PAYEE, TEMP.ACTIVITY_DATE, TEMP.FI_RECEIVEDATE, TEMP.INPUT_DATE, TEMP.UPDATE_TIME, TEMP.BASE_AMOUNT, TEMP.AMOUNT, 0 AS MISC_AMOUNT, 0 AS BASE_MISC_AMOUNT, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'VEL_MANAGE_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE,'VEL_MANAGE_BODY')) AS COMPANY_CODE, TEMP.SEND_FIN_DATE, TEMP.APPLY_TYPE, '2' AS BUSI_TYPE, TEMP.IS_ENERGY, TEMP.TYPE_NAME, TEMP.ORDER_CURRENCY, TEMP.EXCHANGE_RATE, NULL AS BILL_NO, nvl(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE,SYSDATE),'COST_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE,'COST_BODY')) AS OWNERSHIP_BODY, TEMP.OPRT_WAY, TEMP.USD_AMOUNT \n        FROM (SELECT I.VESSEL_CODE, substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) AS ORDER_NO, BFM.CONFIRM_DATE AS ORDER_DATE, T.DISPLAY_VALUE_CN AS TYPE_NAME, BFM.CURRENCY AS ORDER_CURRENCY, BFM.AMOUNT AS TOTAL_FEE, NVL(BFM.SUPPLIER,I.PAYEE) AS SUPPLIER_CODE, 'HY' AS APPLY_TYPE, I.PAYER, I.INVOICE_STATUS, 'FY33' AS INVOICE_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'FY33002' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'FY33003' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'FY33004' WHEN I.INVOICE_SORT_DETAIL = 'FY03004' THEN 'FY33005' WHEN I.INVOICE_SORT_DETAIL in ('FY03005','FY03006','FY03007') THEN 'FY33006' ELSE 'FY33006' END) AS INVOICE_SORT_DETAIL, 'RLF' AS GROUP_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'YZ30003' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'YZ30001' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'YZ30002' WHEN I.INVOICE_SORT_DETAIL in ('FY03004','FY03005','FY03006','FY03007') THEN 'YZ30004' ELSE 'YZ30004' END) AS GROUP_SORT_DETAIL, I.INVOICE_DETAIL_ID, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) / (1 + NVL(I.TAX_RATE,0)) AS BASE_AMOUNT_notax, I.INVOICE_DATE, I.CURRENCY, I.DTL_AMOUNT / (1 + I.TAX_RATE) AS DTL_AMOUNT_notax, I.INVOICE_NUM, I.PAYEE, (CASE WHEN I.COMPANY_CODE IN ('08020000','04000000','02000000','62000000') THEN I.CREATED_DTM_LOC WHEN I.PAYER LIKE '64%' THEN I.CREATED_DTM_LOC ELSE BFM.SUPPLY_DATE END) AS ACTIVITY_DATE, I.SEND_FIN_DATE AS FI_RECEIVEDATE, NULL AS IS_ENERGY, I.CREATED_DTM_LOC AS INPUT_DATE, NVL(NVL(I.UPDATED_DTM_LOC, I.CREATED_DTM_LOC), SYSDATE - 1) AS UPDATE_TIME, '3' as rpt_type, NVL(I.BASE_AMOUNT,I.DTL_AMOUNT*NVL(I.RMB_EXCHANGE_RATE,1)) AS BASE_AMOUNT, I.DTL_AMOUNT AS AMOUNT, I.COMPANY_CODE, NVL(I.SEND_FIN_DATE, I.INVOICE_DATE) AS SEND_FIN_DATE, row_number() over(partition by I.INVOICE_DETAIL_ID order by BFM.SUPPLY_DATE desc) rn, I.PAYMENT_NO, I.RMB_EXCHANGE_RATE AS EXCHANGE_RATE, '1' AS OPRT_WAY, ROUND(I.DTL_AMOUNT*fn_get_exchange_rate(I.CURRENCY,'USD',BFM.SUPPLY_DATE),2) AS USD_AMOUNT \n        FROM bfm_invoice_detail I \n        LEFT JOIN BFM_PURCHASE_ORDER BFM ON substr(I.PO_NUMBER,1,replace(instr(I.PO_NUMBER,'-',-1)-1,-1,length(I.PO_NUMBER))) = BFM.PO_NUMBER \n        LEFT JOIN BFM_OIL_STORAGE BOS ON BOS.operate = '10' AND substr(BOS.PO_NUMBER,1,replace(instr(BOS.PO_NUMBER,'-',-1)-1,-1,length(BOS.PO_NUMBER))) = BFM.PO_NUMBER \n        LEFT JOIN CDM_CODEDICT T ON T.code_type = 'BFM_FILL_TYPE' AND BFM.FILL_OIL_TYPE = T.CODE_VALUE \n        LEFT JOIN SAP_JA0012_MTR_MIDDLE M ON BOS.PO_NUMBER = M.TRD_ORDER \n        WHERE I.INVOICE_SORT = 'FY03' AND NVL(I.IS_DELETE,'0')<>'1' AND I.PAYER LIKE '64%') TEMP WHERE RN = 1; \n\n        P_LOG_EXCEPTION('fmm_csc_maintenance_invoice 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); \n\n        update sps_parts_info sp \n        set sp.if_storaged = null \n        where EXISTS (select trim(group_code) from SPS_PARTS_MASTER_DATA t where t.if_storaged is null AND trim(T.group_code)=SP.GROUP_CODE) \n        AND (SP.VESSEL_CODE LIKE 'S%' OR SP.VESSEL_CODE LIKE 'E%'); \n\n        EXECUTE IMMEDIATE 'truncate table fmm_csc_virtual_budget'; \n        insert into fmm_csc_virtual_budget select * from vw_csc_virtual_budget; \n        commit; \n        P_LOG_EXCEPTION('fmm_csc_virtual_budget 完成' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); \n\n        update SPS_APPLY_main sam \n        set (sam.equipment_info_id, sam.equipment_code) = \n        (select sad.equipment_id, sad.equip_code from sps_apply_detail sad where sad.apply_main_id = SAM.APPLY_MAIN_ID and rownum = 1) \n        where sam.apply_main_id IN \n        (select SAM.apply_main_id from SPS_APPLY_main SAM \n        where SAM.EQUIPMENT_INFO_ID is null and SAM.vessel_code in \n        (select vv.vessel_code from dss_vop_vessel_info vv \n        where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0')); \n\n        update SPS_ENQUIRE_MAIN SS \n        set (SS.EQUIPMENT_INFO_ID, SS.EQUIPMENT_CODE) = \n        (select SED.equipment_id, SED.EQUIP_CODE from SPS_ENQUIRE_DETAIL SED where SED.ENQUIRE_MAIN_ID = SS.ENQUIRE_MAIN_ID and rownum = 1) \n        where SS.ENQUIRE_MAIN_ID IN \n        (select SEM.ENQUIRE_MAIN_ID from sps_enquire_main sem \n        where sem.equipment_info_id is null and sem.vessel_code in \n        (select vv.vessel_code from dss_vop_vessel_info vv \n        where vv.vesman_code = '68280000' and nvl(vv.tetired_flag, '1') = '1' and nvl(vv.trade_type, '0') = '0')); \n        commit; \n\n        P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || sysdate, 'SP_FEE_CSC_DAILY_JOB'); \n        commit; \n    END IF; \nEND SP_FEE_CSC_DAILY_JOB; "
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE PROCEDURE \"SP_FEE_CSC_DAILY_JOB\" IS \n   V_FLAG VARCHAR2(50); \nBEGIN \n   SELECT OPEN_MODE INTO V_FLAG FROM v$database; \n   IF V_FLAG = 'READ WRITE' THEN \n      P_LOG_EXCEPTION('开始时间:' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n      EXECUTE IMMEDIATE 'TRUNCATE TABLE FMM_CSCL_BUSI_CALIBER'; \n      INSERT INTO FMM_CSCL_BUSI_CALIBER \n      SELECT * FROM VOP_VESSEL_CSCL_BUSI_CALIBER; \n      COMMIT; \n      P_LOG_EXCEPTION('FMM_CSCL_BUSI_CALIBER完成' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n      EXECUTE IMMEDIATE 'TRUNCATE TABLE fmm_csc_maintenance_esti'; \n      INSERT INTO fmm_csc_maintenance_esti \n      SELECT * FROM vw_csc_maintenance_esti; \n      COMMIT; \n      P_LOG_EXCEPTION('fmm_csc_maintenance_esti 完成' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n      EXECUTE IMMEDIATE 'TRUNCATE TABLE fmm_csc_maintenance_orders'; \n      INSERT INTO fmm_csc_maintenance_orders \n      SELECT * FROM VW_CSC_MAINTENANCE_ORDERS; \n      COMMIT; \n      P_LOG_EXCEPTION('fmm_csc_maintenance_orders 完成' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n      EXECUTE IMMEDIATE 'TRUNCATE TABLE fmm_csc_maintenance_invoice'; \n      INSERT INTO fmm_csc_maintenance_invoice \n      SELECT * FROM vw_csc_maintenance_invoice; \n      COMMIT; \n      INSERT INTO fmm_csc_maintenance_invoice \n      SELECT TEMP.VESSEL_CODE, TEMP.SUPPLIER_CODE, TEMP.PAYER, NULL AS PORT_CODE, TEMP.INVOICE_STATUS, TEMP.INVOICE_SORT, TEMP.ORDER_NO, TEMP.PAYMENT_NO, TEMP.INVOICE_SORT_DETAIL, TEMP.INVOICE_DETAIL_ID, TEMP.BASE_AMOUNT_NOTAX, TEMP.INVOICE_DATE, TEMP.CURRENCY, TEMP.DTL_AMOUNT_NOTAX, TEMP.INVOICE_NUM, TEMP.PAYEE, TEMP.ACTIVITY_DATE, TEMP.FI_RECEIVEDATE, TEMP.INPUT_DATE, TEMP.UPDATE_TIME, TEMP.BASE_AMOUNT, TEMP.AMOUNT, 0 AS MISC_AMOUNT, 0 AS BASE_MISC_AMOUNT, NVL(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE, SYSDATE), 'VEL_MANAGE_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'VEL_MANAGE_BODY')) AS COMPANY_CODE, TEMP.SEND_FIN_DATE, TEMP.APPLY_TYPE, '2' AS BUSI_TYPE, TEMP.IS_ENERGY, TEMP.TYPE_NAME, TEMP.ORDER_CURRENCY, TEMP.EXCHANGE_RATE, NULL AS BILL_NO, NVL(pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE, SYSDATE), 'COST_BODY'), pkg_oas.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'COST_BODY')) AS OWNERSHIP_BODY, TEMP.OPRT_WAY, TEMP.USD_AMOUNT \n      FROM (SELECT I.VESSEL_CODE, SUBSTR(I.PO_NUMBER, 1, REPLACE(INSTR(I.PO_NUMBER, '-', -1) - 1, -1, LENGTH(I.PO_NUMBER))) AS ORDER_NO, BFM.CONFIRM_DATE AS ORDER_DATE, T.DISPLAY_VALUE_CN AS TYPE_NAME, BFM.CURRENCY AS ORDER_CURRENCY, BFM.AMOUNT AS TOTAL_FEE, NVL(BFM.SUPPLIER, I.PAYEE) AS SUPPLIER_CODE, 'HY' AS APPLY_TYPE, I.PAYER, I.INVOICE_STATUS, 'FY33' AS INVOICE_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'FY33002' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'FY33003' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'FY33004' WHEN I.INVOICE_SORT_DETAIL = 'FY03004' THEN 'FY33005' WHEN I.INVOICE_SORT_DETAIL IN ('FY03005', 'FY03006', 'FY03007') THEN 'FY33006' ELSE 'FY33006' END) AS INVOICE_SORT_DETAIL, 'RLF' AS GROUP_SORT, (CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'YZ30003' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'YZ30001' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'YZ30002' WHEN I.INVOICE_SORT_DETAIL IN ('FY03004', 'FY03005', 'FY03006', 'FY03007') THEN 'YZ30004' ELSE 'YZ30004' END) AS GROUP_SORT_DETAIL, I.INVOICE_DETAIL_ID, NVL(I.BASE_AMOUNT, I.DTL_AMOUNT * NVL(I.RMB_EXCHANGE_RATE, 1)) / (1 + NVL(I.TAX_RATE, 0)) AS BASE_AMOUNT_NOTAX, I.INVOICE_DATE, I.CURRENCY, I.DTL_AMOUNT / (1 + I.TAX_RATE) AS DTL_AMOUNT_NOTAX, I.INVOICE_NUM, I.PAYEE, (CASE WHEN I.COMPANY_CODE IN ('08020000', '04000000', '02000000', '62000000') THEN I.CREATED_DTM_LOC WHEN I.PAYER LIKE '64%' THEN I.CREATED_DTM_LOC ELSE BFM.SUPPLY_DATE END) AS ACTIVITY_DATE, I.SEND_FIN_DATE AS FI_RECEIVEDATE, NULL AS IS_ENERGY, I.CREATED_DTM_LOC AS INPUT_DATE, NVL(NVL(I.UPDATED_DTM_LOC, I.CREATED_DTM_LOC), SYSDATE - 1) AS UPDATE_TIME, NVL(I.BASE_AMOUNT, I.DTL_AMOUNT * NVL(I.RMB_EXCHANGE_RATE, 1)) AS BASE_AMOUNT, I.DTL_AMOUNT AS AMOUNT, I.COMPANY_CODE, NVL(I.SEND_FIN_DATE, I.INVOICE_DATE) AS SEND_FIN_DATE, ROW_NUMBER() OVER(PARTITION BY I.INVOICE_DETAIL_ID ORDER BY BFM.SUPPLY_DATE DESC) RN, I.PAYMENT_NO, I.RMB_EXCHANGE_RATE AS EXCHANGE_RATE, '1' AS OPRT_WAY, ROUND(I.DTL_AMOUNT * FN_GET_EXCHANGE_RATE(I.CURRENCY, 'USD', BFM.SUPPLY_DATE), 2) AS USD_AMOUNT \n      FROM BFM_INVOICE_DETAIL I \n      LEFT JOIN BFM_PURCHASE_ORDER BFM \n      ON SUBSTR(I.PO_NUMBER, 1, REPLACE(INSTR(I.PO_NUMBER, '-', -1) - 1, -1, LENGTH(I.PO_NUMBER))) = BFM.PO_NUMBER \n      LEFT JOIN BFM_OIL_STORAGE BOS \n      ON BOS.OPERATE = '10' AND SUBSTR(BOS.PO_NUMBER, 1, REPLACE(INSTR(BOS.PO_NUMBER, '-', -1) - 1, -1, LENGTH(BOS.PO_NUMBER))) = BFM.PO_NUMBER AND BOS.OIL_TYPE = '002' \n      LEFT JOIN CDM_CODEDICT T \n      ON T.CODE_TYPE = 'BFM_FILL_TYPE' AND BFM.FILL_OIL_TYPE = T.CODE_VALUE \n      LEFT JOIN SAP_JA0012_MTR_MIDDLE M \n      ON BOS.PO_NUMBER = M.TRD_ORDER \n      WHERE I.INVOICE_SORT = 'FY03' AND NVL(I.IS_DELETE, '0') <> '1' AND I.PAYER LIKE '64%') TEMP \n      WHERE RN = 1; \n      P_LOG_EXCEPTION('fmm_csc_maintenance_invoice 完成' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n      UPDATE SPS_PARTS_INFO SP \n      SET SP.IF_STORAGE = NULL \n      WHERE EXISTS(SELECT TRIM(GROUP_CODE) FROM SPS_PARTS_MASTER_DATA T WHERE T.IF_STORAGED IS NULL AND TRIM(T.GROUP_CODE) = SP.GROUP_CODE) AND (SP.VESSEL_CODE LIKE 'S%' OR SP.VESSEL_CODE LIKE 'E%'); \n      EXECUTE IMMEDIATE 'TRUNCATE TABLE fmm_csc_virtual_budget'; \n      INSERT INTO fmm_csc_virtual_budget \n      SELECT * FROM vw_csc_virtual_budget; \n      COMMIT; \n      P_LOG_EXCEPTION('fmm_csc_virtual_budget 完成' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n      UPDATE SPS_APPLY_MAIN SAM \n      SET (SAM.EQUIPMENT_INFO_ID, SAM.EQUIPMENT_CODE) = \n      (SELECT SAD.EQUIPMENT_ID, SAD.EQUIP_CODE \n      FROM SPS_APPLY_DETAIL SAD \n      WHERE SAD.APPLY_MAIN_ID = SAM.APPLY_MAIN_ID AND ROWNUM = 1) \n      WHERE SAM.APPLY_MAIN_ID IN \n      (SELECT SAM.APPLY_MAIN_ID \n      FROM SPS_APPLY_MAIN SAM \n      WHERE SAM.EQUIPMENT_INFO_ID IS NULL AND SAM.VESSEL_CODE IN \n      (SELECT VV.VESSEL_CODE \n      FROM DSS_VOP_VESSEL_INFO VV \n      WHERE VV.VESMAN_CODE = '68280000' AND NVL(VV.TETIRED_FLAG, '1') = '1' AND NVL(VV.TRADE_TYPE, '0') = '0')); \n      UPDATE SPS_ENQUIRE_MAIN SS \n      SET (SS.EQUIPMENT_INFO_ID, SS.EQUIPMENT_CODE) = \n      (SELECT SED.EQUIPMENT_ID, SED.EQUIP_CODE \n      FROM SPS_ENQUIRE_DETAIL SED \n      WHERE SED.ENQUIRE_MAIN_ID = SS.ENQUIRE_MAIN_ID AND ROWNUM = 1) \n      WHERE SS.ENQUIRE_MAIN_ID IN \n      (SELECT SEM.ENQUIRE_MAIN_ID \n      FROM SPS_ENQUIRE_MAIN SEM \n      WHERE SEM.EQUIPMENT_INFO_ID IS NULL AND SEM.VESSEL_CODE IN \n      (SELECT VV.VESSEL_CODE \n      FROM DSS_VOP_VESSEL_INFO VV \n      WHERE VV.VESMAN_CODE = '68280000' AND NVL(VV.TETIRED_FLAG, '1') = '1' AND NVL(VV.TRADE_TYPE, '0') = '0')); \n      COMMIT; \n      P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n      COMMIT; \n   END IF; \nEND SP_FEE_CSC_DAILY_JOB; "
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE PROCEDURE \"SP_FEE_CSC_DAILY_JOB\" IS \n  V_FLAG varchar2(50); \nBEGIN \n  SELECT open_mode INTO V_FLAG FROM v$database; \n  IF V_FLAG = 'READ WRITE' THEN \n    P_LOG_EXCEPTION('开始时间:' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n    \n    EXECUTE IMMEDIATE 'TRUNCATE TABLE FMM_CSCL_BUSI_CALIBER'; \n    INSERT INTO FMM_CSCL_BUSI_CALIBER SELECT * FROM VOP_VESSEL_CSCL_BUSI_CALIBER; \n    COMMIT; \n    P_LOG_EXCEPTION('FMM_CSCL_BUSI_CALIBER完成' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n    \n    EXECUTE IMMEDIATE 'TRUNCATE TABLE FMM_CSC_MAINTENANCE_ESTI'; \n    INSERT INTO FMM_CSC_MAINTENANCE_ESTI SELECT * FROM VW_CSC_MAINTENANCE_ESTI; \n    COMMIT; \n    P_LOG_EXCEPTION('FMM_CSC_MAINTENANCE_ESTI 完成' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n    \n    EXECUTE IMMEDIATE 'TRUNCATE TABLE FMM_CSC_MAINTENANCE_ORDERS'; \n    INSERT INTO FMM_CSC_MAINTENANCE_ORDERS SELECT * FROM VW_CSC_MAINTENANCE_ORDERS; \n    COMMIT; \n    P_LOG_EXCEPTION('FMM_CSC_MAINTENANCE_ORDERS 完成' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n    \n    EXECUTE IMMEDIATE 'TRUNCATE TABLE FMM_CSC_MAINTENANCE_INVOICE'; \n    INSERT INTO FMM_CSC_MAINTENANCE_INVOICE SELECT * FROM VW_CSC_MAINTENANCE_INVOICE; \n    COMMIT; \n    \n    INSERT INTO FMM_CSC_MAINTENANCE_INVOICE \n    SELECT TEMP.VESSEL_CODE, TEMP.SUPPLIER_CODE, TEMP.PAYER, NULL AS PORT_CODE, TEMP.INVOICE_STATUS, TEMP.INVOICE_SORT, TEMP.ORDER_NO, TEMP.PAYMENT_NO, TEMP.INVOICE_SORT_DETAIL, TEMP.INVOICE_DETAIL_ID, TEMP.BASE_AMOUNT_NOTAX, TEMP.INVOICE_DATE, TEMP.CURRENCY, TEMP.DTL_AMOUNT_NOTAX, TEMP.INVOICE_NUM, TEMP.PAYEE, TEMP.ACTIVITY_DATE, TEMP.FI_RECEIVEDATE, TEMP.INPUT_DATE, TEMP.UPDATE_TIME, TEMP.BASE_AMOUNT, TEMP.AMOUNT, 0 AS MISC_AMOUNT, 0 AS BASE_MISC_AMOUNT, \n           NVL(PKG_OAS.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE, SYSDATE), 'VEL_MANAGE_BODY'), \n           PKG_OAS.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'VEL_MANAGE_BODY')) AS COMPANY_CODE, \n           TEMP.SEND_FIN_DATE, TEMP.APPLY_TYPE, '2' AS BUSI_TYPE, TEMP.IS_ENERGY, TEMP.TYPE_NAME, TEMP.ORDER_CURRENCY, TEMP.EXCHANGE_RATE, NULL AS BILL_NO, \n           NVL(PKG_OAS.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, NVL(TEMP.ACTIVITY_DATE, SYSDATE), 'COST_BODY'), \n           PKG_OAS.FN_GET_MAN_COM_CODE(TEMP.VESSEL_CODE, SYSDATE, 'COST_BODY')) AS OWNERSHIP_BODY, \n           TEMP.OPRT_WAY, TEMP.USD_AMOUNT \n    FROM (SELECT I.VESSEL_CODE, I.PO_NUMBER AS ORDER_NO, BFM.CONFIRM_DATE AS ORDER_DATE, T.DISPLAY_VALUE_CN AS TYPE_NAME, BFM.CURRENCY AS ORDER_CURRENCY, \n                 BFM.AMOUNT AS TOTAL_FEE, NVL(BFM.SUPPLIER, I.PAYEE) AS SUPPLIER_CODE, 'HY' AS APPLY_TYPE, I.PAYER, I.INVOICE_STATUS, \n                 CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'FY33002' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'FY33003' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'FY33004' \n                      WHEN I.INVOICE_SORT_DETAIL IN ('FY03005', 'FY03006', 'FY03007') THEN 'FY33006' ELSE 'FY33006' END AS INVOICE_SORT_DETAIL, \n                 'RLF' AS GROUP_SORT, \n                 CASE WHEN I.INVOICE_SORT_DETAIL = 'FY03001' THEN 'YZ30003' WHEN I.INVOICE_SORT_DETAIL = 'FY03002' THEN 'YZ30001' WHEN I.INVOICE_SORT_DETAIL = 'FY03003' THEN 'YZ30002' \n                      WHEN I.INVOICE_SORT_DETAIL IN ('FY03004', 'FY03005', 'FY03006', 'FY03007') THEN 'YZ30004' ELSE 'YZ30004' END AS GROUP_SORT_DETAIL, \n                 I.INVOICE_DETAIL_ID, NVL(I.BASE_AMOUNT, I.DTL_AMOUNT * NVL(I.RMB_EXCHANGE_RATE, 1)) / (1 + NVL(I.TAX_RATE, 0)) AS BASE_AMOUNT_NOTAX, \n                 I.INVOICE_DATE, I.CURRENCY, I.DTL_AMOUNT / (1 + I.TAX_RATE) AS DTL_AMOUNT_NOTAX, I.INVOICE_NUM, I.PAYEE, \n                 CASE WHEN I.COMPANY_CODE IN ('08020000', '04000000', '02000000', '62000000') THEN I.CREATED_DTM_LOC\n                      WHEN I.PAYER LIKE '64%' THEN I.CREATED_DTM_LOC ELSE BFM.SUPPLY_DATE END AS ACTIVITY_DATE, \n                 I.SEND_FIN_DATE AS FI_RECEIVEDATE, NULL AS IS_ENERGY, I.CREATED_DTM_LOC AS INPUT_DATE, \n                 NVL(NVL(I.UPDATED_DTM_LOC, I.CREATED_DTM_LOC), SYSDATE - 1) AS UPDATE_TIME, '3' AS RPT_TYPE, \n                 NVL(I.BASE_AMOUNT, I.DTL_AMOUNT * NVL(I.RMB_EXCHANGE_RATE, 1)) AS BASE_AMOUNT, I.DTL_AMOUNT AS AMOUNT, I.COMPANY_CODE, \n                 NVL(I.SEND_FIN_DATE, I.INVOICE_DATE) AS SEND_FIN_DATE, ROW_NUMBER() OVER (PARTITION BY I.INVOICE_DETAIL_ID ORDER BY BFM.SUPPLY_DATE DESC) RN, \n                 I.PAYMENT_NO, I.RMB_EXCHANGE_RATE AS EXCHANGE_RATE, '1' AS OPRT_WAY, \n                 ROUND(I.DTL_AMOUNT * FN_GET_EXCHANGE_RATE(I.CURRENCY, 'USD', BFM.SUPPLY_DATE), 2) AS USD_AMOUNT \n          FROM BFM_INVOICE_DETAIL I \n          LEFT JOIN BFM_PURCHASE_ORDER BFM ON I.PO_NUMBER = BFM.PO_NUMBER   \n          LEFT JOIN CDM_CODEDICT T ON T.CODE_TYPE = 'BFM_FILL_TYPE' AND BFM.FILL_OIL_TYPE = T.CODE_VALUE \n          WHERE I.INVOICE_SORT = 'FY03' AND NVL(I.IS_DELETE, '0') <> '1' AND I.PAYER LIKE '64%') TEMP WHERE RN = 1;  \n    \n    P_LOG_EXCEPTION('FMM_CSC_MAINTENANCE_INVOICE 完成' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n    \n    UPDATE SPS_PARTS_INFO SP \n    SET SP.IF_STORAGED = NULL \n    WHERE EXISTS (SELECT TRIM(GROUP_CODE) FROM SPS_PARTS_MASTER_DATA T WHERE T.IF_STORAGED IS NULL AND TRIM(T.GROUP_CODE)=SP.GROUP_CODE) \n          AND (SP.VESSEL_CODE LIKE 'S%' OR SP.VESSEL_CODE LIKE 'E%'); \n          \n    EXECUTE IMMEDIATE 'TRUNCATE TABLE FMM_CSC_VIRTUAL_BUDGET'; \n    INSERT INTO FMM_CSC_VIRTUAL_BUDGET SELECT * FROM VW_CSC_VIRTUAL_BUDGET; \n    COMMIT; \n    P_LOG_EXCEPTION('FMM_CSC_VIRTUAL_BUDGET 完成' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n    \n    UPDATE SPS_APPLY_MAIN SAM \n    SET (SAM.EQUIPMENT_INFO_ID, SAM.EQUIPMENT_CODE) = \n        (SELECT SAD.EQUIPMENT_ID, SAD.EQUIP_CODE FROM SPS_APPLY_DETAIL SAD WHERE SAD.APPLY_MAIN_ID = SAM.APPLY_MAIN_ID AND ROWNUM = 1) \n    WHERE SAM.APPLY_MAIN_ID IN \n          (SELECT SAM.APPLY_MAIN_ID FROM SPS_APPLY_MAIN SAM WHERE SAM.EQUIPMENT_INFO_ID IS NULL AND SAM.VESSEL_CODE IN \n                 (SELECT VV.VESSEL_CODE FROM DSS_VOP_VESSEL_INFO VV WHERE VV.VESMAN_CODE = '68280000' AND NVL(VV.TETIRED_FLAG, '1') = '1' AND NVL(VV.TRADE_TYPE, '0') = '0')); \n    \n    UPDATE SPS_ENQUIRE_MAIN SS \n    SET (SS.EQUIPMENT_INFO_ID, SS.EQUIPMENT_CODE) = \n        (SELECT SED.EQUIPMENT_ID, SED.EQUIP_CODE FROM SPS_ENQUIRE_DETAIL SED WHERE SED.ENQUIRE_MAIN_ID = SS.ENQUIRE_MAIN_ID AND ROWNUM = 1) \n    WHERE SS.ENQUIRE_MAIN_ID IN \n          (SELECT SEM.ENQUIRE_MAIN_ID FROM SPS_ENQUIRE_MAIN SEM WHERE SEM.EQUIPMENT_INFO_ID IS NULL AND SEM.VESSEL_CODE IN \n                 (SELECT VV.VESSEL_CODE FROM DSS_VOP_VESSEL_INFO VV WHERE VV.VESMAN_CODE = '68280000' AND NVL(VV.TETIRED_FLAG, '1') = '1' AND NVL(VV.TRADE_TYPE, '0') = '0')); \n    \n    COMMIT; \n    \n    P_LOG_EXCEPTION(SQLCODE || SQLERRM || 'insert 结束时间:' || SYSDATE, 'SP_FEE_CSC_DAILY_JOB'); \n    COMMIT; \n  END IF; \nEND SP_FEE_CSC_DAILY_JOB; "
                    }
                ]
            },
            {
                "case_id": "6",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"6\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"COUNT\", \"AVG\", \"MAX\", \"RTRIM\", \"COALESCE\", \"RAISE_APPLICATION_ERROR\", \"current_timestamp\", \"SQLERRM\", \"ROWNUM\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE CHECKANDUPDATESALARIES(p_dept_id IN NUMBER, p_result OUT CLOB, p_percent IN NUMBER, p_min_dept IN NUMBER DEFAULT NULL, p_max_dept IN NUMBER DEFAULT NULL) IS TYPE stats_rec IS RECORD ( total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER ); TYPE p_result_rec IS RECORD ( employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2) ); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); v_rows_updated NUMBER := 0; v_total_budget NUMBER := 0; CURSOR dept_cur IS SELECT department_id, budget FROM DEPARTMENTS WHERE (department_id >= p_min_dept OR p_min_dept IS NULL) AND (department_id <= p_max_dept OR p_max_dept IS NULL); BEGIN /* 部门验证 */ SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; /* 基础统计 */ SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; /* 动态SQL生成 */ v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees ' || 'WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; /* 构建JSON输出 */ p_result := '{ \\\"department\\\": \\\"' || v_dept_name || '\\\", \\\"total_employees\\\": ' || v_stats.total_emp || ', \\\"salary_stats\\\": { \\\"average\\\": ' || v_stats.avg_salary || ', \\\"max\\\": ' || v_stats.max_salary || ' }, \\\"top_earners\\\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || ' {\\\"id\\\": ' || v_result.employee_id || ', \\\"name\\\": \\\"' || v_result.last_name || '\\\", \\\"salary\\\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || ' ] }'; CLOSE v_cursor; FOR dept_rec IN dept_cur LOOP /* 薪资更新处理 */ UPDATE EMPLOYEES SET salary = NVL(salary, 3000) * (1 + p_percent/100) WHERE department_id = dept_rec.department_id; v_rows_updated := v_rows_updated + SQL%ROWCOUNT; /* 预算验证 */ SELECT SUM(salary) INTO v_total_budget FROM EMPLOYEES WHERE department_id = dept_rec.department_id; IF v_total_budget > dept_rec.budget THEN RAISE_APPLICATION_ERROR(-20001, 'Budget exceeded in department ' || dept_rec.department_id); END IF; END LOOP; /* 输出处理结果 */ DBMS_OUTPUT.PUT_LINE('Updated ' || v_rows_updated || ' records, Time ' || SYSDATE); EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\\\"error\\\": \\\"Department not found\\\"}'; WHEN OTHERS THEN p_result := '{\\\"error\\\": \\\"' || SQLERRM || '\\\"}'; END; $$\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE CHECKANDUPDATESALARIES(p_dept_id IN NUMBER, p_result OUT CLOB, p_percent IN NUMBER, p_min_dept IN NUMBER DEFAULT NULL, p_max_dept IN NUMBER DEFAULT NULL) IS TYPE stats_rec IS RECORD ( total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER ); TYPE p_result_rec IS RECORD ( employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2) ); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); v_rows_updated NUMBER := 0; v_total_budget NUMBER := 0; CURSOR dept_cur IS SELECT department_id, budget FROM DEPARTMENTS WHERE (department_id >= p_min_dept OR p_min_dept IS NULL) AND (department_id <= p_max_dept OR p_max_dept IS NULL); BEGIN /* 部门验证 */ SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; /* 基础统计 */ SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; /* 动态SQL生成 */ v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees ' || 'WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; /* 构建JSON输出 */ p_result := '{ \"department\": \"' || v_dept_name || '\", \"total_employees\": ' || v_stats.total_emp || ', \"salary_stats\": { \"average\": ' || v_stats.avg_salary || ', \"max\": ' || v_stats.max_salary || ' }, \"top_earners\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || ' {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || ' ] }'; CLOSE v_cursor; FOR dept_rec IN dept_cur LOOP /* 薪资更新处理 */ UPDATE EMPLOYEES SET salary = NVL(salary, 3000) * (1 + p_percent/100) WHERE department_id = dept_rec.department_id; v_rows_updated := v_rows_updated + SQL%ROWCOUNT; /* 预算验证 */ SELECT SUM(salary) INTO v_total_budget FROM EMPLOYEES WHERE department_id = dept_rec.department_id; IF v_total_budget > dept_rec.budget THEN RAISE_APPLICATION_ERROR(-20001, 'Budget exceeded in department ' || dept_rec.department_id); END IF; END LOOP; /* 输出处理结果 */ DBMS_OUTPUT.PUT_LINE('Updated ' || v_rows_updated || ' records, Time ' || SYSDATE); EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\"error\": \"Department not found\"}'; WHEN OTHERS THEN p_result := '{\"error\": \"' || SQLERRM || '\"}'; END; $$\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DO $$ \nDECLARE \n    p_dept_id NUMERIC;\n    p_result TEXT;\n    p_percent NUMERIC;\n    p_min_dept NUMERIC := NULL;\n    p_max_dept NUMERIC := NULL;\n    v_stats RECORD;\n    v_result RECORD;\n    v_cursor CURSOR (dept_id NUMERIC) FOR SELECT employee_id, last_name, salary FROM employees WHERE department_id = dept_id ORDER BY salary DESC LIMIT 5;\n    v_dept_name VARCHAR(50);\n    v_rows_updated INTEGER := 0;\n    v_total_budget NUMERIC := 0;\n    dept_cur CURSOR (min_dept NUMERIC, max_dept NUMERIC) FOR SELECT department_id, budget FROM departments WHERE (department_id >= min_dept OR min_dept IS NULL) AND (department_id <= max_dept OR max_dept IS NULL);\nBEGIN \n    /* 部门验证 */\n    SELECT department_name INTO v_dept_name FROM departments WHERE department_id = p_dept_id;\n    \n    /* 基础统计 */\n    SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM employees WHERE department_id = p_dept_id;\n    \n    /* 构建JSON输出 */\n    p_result := '{\"department\": \"' || v_dept_name || '\", \"total_employees\": ' || v_stats.total_emp || ', \"salary_stats\": { \"average\": ' || v_stats.avg_salary || ', \"max\": ' || v_stats.max_salary || ' }, \"top_earners\": [';\n    OPEN v_cursor(p_dept_id);\n    LOOP\n        FETCH v_cursor INTO v_result;\n        EXIT WHEN NOT FOUND;\n        p_result := p_result || '{\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},';\n    END LOOP;\n    CLOSE v_cursor;\n    p_result := RTRIM(p_result, ',') || ']}';\n    \n    /* 薪资更新处理 */\n    FOR dept_rec IN dept_cur(p_min_dept, p_max_dept) LOOP\n        /* Update salaries */\n        UPDATE employees \n        SET salary = COALESCE(salary, 3000) * (1 + p_percent / 100)\n        WHERE department_id = dept_rec.department_id;\n        GET DIAGNOSTICS v_rows_updated := ROW_COUNT;\n        \n        /* 预算验证 */\n        SELECT SUM(salary) INTO v_total_budget FROM employees WHERE department_id = dept_rec.department_id;\n        IF v_total_budget > dept_rec.budget THEN\n            RAISE EXCEPTION 'Budget exceeded in department %', dept_rec.department_id;\n        END IF;\n    END LOOP;\n    \n    /* 输出处理结果 */\n    RAISE NOTICE 'Updated % records', v_rows_updated;\nEXCEPTION\n    WHEN NO_DATA_FOUND THEN\n        p_result := '{\"error\": \"Department not found\"}';\n    WHEN OTHERS THEN\n        p_result := '{\"error\": \"' || SQLERRM || '\"}';\nEND $$;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "DO $$ \nDECLARE \n    p_dept_id NUMERIC;\n    p_result TEXT;\n    p_percent NUMERIC;\n    p_min_dept NUMERIC DEFAULT NULL;\n    p_max_dept NUMERIC DEFAULT NULL;\n\n    v_stats RECORD;\n    v_result RECORD;\n    v_cursor CURSOR FOR SELECT employee_id, last_name, salary FROM employees WHERE department_id = p_dept_id ORDER BY salary DESC;\n    v_sql TEXT;\n    v_dept_name TEXT;\n    v_rows_updated INT := 0;\n    v_total_budget NUMERIC := 0;\nBEGIN\n    /* 部门验证 */\n    SELECT department_name INTO v_dept_name FROM departments WHERE department_id = p_dept_id;\n\n    /* 基础统计 */\n    SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM employees WHERE department_id = p_dept_id;\n\n    /* 构建JSON输出 */\n    p_result := '{ \"department\": \"' || v_dept_name || '\", \"total_employees\": ' || v_stats.total_emp || ', \"salary_stats\": { \"average\": ' || v_stats.avg_salary || ', \"max\": ' || v_stats.max_salary || ' }, \"top_earners\": [';\n\n    FOR v_result IN v_cursor LOOP\n        p_result := p_result || ' {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},';\n    END LOOP;\n    p_result := RTRIM(p_result, ',') || ' ] }';\n\n    /* 循环处理薪资更新及预算验证 */\n    FOR dept_rec IN SELECT department_id, budget FROM departments WHERE (department_id >= p_min_dept OR p_min_dept IS NULL) AND (department_id <= p_max_dept OR p_max_dept IS NULL) LOOP\n        /* 薪资更新 */\n        UPDATE employees SET salary = COALESCE(salary, 3000) * (1 + p_percent/100) WHERE department_id = dept_rec.department_id;\n        v_rows_updated := v_rows_updated + (SELECT COUNT(*) FROM employees WHERE department_id = dept_rec.department_id);\n\n        /* 预算验证 */\n        SELECT SUM(salary) INTO v_total_budget FROM employees WHERE department_id = dept_rec.department_id;\n        IF v_total_budget > dept_rec.budget THEN \n            RAISE EXCEPTION 'Budget exceeded in department %', dept_rec.department_id;\n        END IF;\n    END LOOP;\n\n    /* 输出处理结果 */\n    RAISE NOTICE 'Updated % records', v_rows_updated;\n\nEXCEPTION \n    WHEN OTHERS THEN\n        p_result := '{\"error\": \"' || SQLERRM || '\"}';\nEND $$;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE FUNCTION check_and_update_salaries(p_dept_id INT, p_percent NUMERIC, p_min_dept INT DEFAULT NULL, p_max_dept INT DEFAULT NULL)\nRETURNS TEXT AS $$\nDECLARE\n    v_stats RECORD;\n    v_result RECORD;\n    v_cursor REFCURSOR;\n    v_sql TEXT;\n    v_dept_name TEXT;\n    v_rows_updated INT := 0;\n    v_total_budget NUMERIC := 0;\n    p_result TEXT := '';\n    dept_rec RECORD;\nBEGIN\n    -- Validate department\n    SELECT department_name INTO v_dept_name FROM departments WHERE department_id = p_dept_id;\n\n    -- Basic statistics\n    SELECT COUNT(*) AS total_emp, AVG(salary) AS avg_salary, MAX(salary) AS max_salary\n    INTO v_stats\n    FROM employees\n    WHERE department_id = p_dept_id;\n\n    -- Dynamic SQL generation\n    v_sql := 'SELECT employee_id, last_name, salary FROM employees WHERE department_id = $1 ORDER BY salary DESC LIMIT 5';\n    OPEN v_cursor FOR EXECUTE v_sql USING p_dept_id;\n\n    -- Build JSON output\n    p_result := '{ \"department\": \"' || v_dept_name || '\", \"total_employees\": ' || v_stats.total_emp || ', \"salary_stats\": { \"average\": ' || v_stats.avg_salary || ', \"max\": ' || v_stats.max_salary || ' }, \"top_earners\": [';\n    LOOP\n        FETCH v_cursor INTO v_result;\n        EXIT WHEN NOT FOUND;\n        p_result := p_result || ' {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},';\n    END LOOP;\n    p_result := regexp_replace(p_result, ',$', '') || ' ] }';\n    CLOSE v_cursor;\n\n    -- Cursor for departments\n    FOR dept_rec IN SELECT department_id, budget FROM departments WHERE (department_id >= COALESCE(p_min_dept, department_id)) AND (department_id <= COALESCE(p_max_dept, department_id)) LOOP\n        -- Salary update handling\n        UPDATE employees SET salary = COALESCE(salary, 3000) * (1 + p_percent / 100) WHERE department_id = dept_rec.department_id;\n        GET DIAGNOSTICS v_rows_updated := ROW_COUNT;\n\n        -- Budget validation\n        SELECT SUM(salary) INTO v_total_budget FROM employees WHERE department_id = dept_rec.department_id;\n        IF v_total_budget > dept_rec.budget THEN\n            RAISE EXCEPTION 'Budget exceeded in department %', dept_rec.department_id;\n        END IF;\n    END LOOP;\n\n    -- Output processing result\n    RAISE NOTICE 'Updated % records, Time %', v_rows_updated, now();\n\n    RETURN p_result;\n\nEXCEPTION\n    WHEN no_data_found THEN\n        RETURN '{\"error\": \"Department not found\"}';\n    WHEN OTHERS THEN\n        RETURN '{\"error\": \"' || SQLERRM || '\"}';\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "7",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"7\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"NOW\", \"CURRENT_TIMESTAMP\", \"ARRAY\", \"CURSOR\", \"CASE\", \"SAVEPOINT\", \"ROLLBACK TO SAVEPOINT\", \"COUNT\", \"array_length\", \"FOR LOOP\", \"GREATEST\", \"current_user\", \"EXCEPTION\", \"SQLERRM\", \"CLOSE\", \"COMMIT\", \"RAISE NOTICE\", \"RAISE EXCEPTION\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE SP_BULK_UPDATE_INVENTORY(p_warehouse_id IN NUMBER, p_adjustment_type IN VARCHAR2, p_adjustment_date IN DATE DEFAULT SYSDATE) AS TYPE t_inventory_rec IS RECORD (product_id NUMBER, current_qty NUMBER, adjustment_qty NUMBER, new_qty NUMBER); TYPE t_inventory_tab IS TABLE OF t_inventory_rec INDEX BY BINARY_INTEGER; v_inventory t_inventory_tab; v_batch_size CONSTANT NUMBER := 1000; v_total_processed NUMBER := 0; v_error_count NUMBER := 0; CURSOR c_inventory IS SELECT product_id, quantity_on_hand, CASE p_adjustment_type WHEN 'RECOUNT' THEN physical_count - quantity_on_hand WHEN 'DAMAGE' THEN -damaged_quantity WHEN 'RETURN' THEN returned_quantity ELSE 0 END AS adjustment_qty FROM inventory_staging WHERE warehouse_id = p_warehouse_id AND status = 'PENDING' ORDER BY product_id; BEGIN SAVEPOINT bulk_update_start; OPEN c_inventory; LOOP FETCH c_inventory BULK COLLECT INTO v_inventory LIMIT v_batch_size; EXIT WHEN v_inventory.COUNT = 0; FOR i IN 1..v_inventory.COUNT LOOP BEGIN MERGE INTO inventory inv USING (SELECT v_inventory(i).product_id AS product_id, p_warehouse_id AS warehouse_id, v_inventory(i).adjustment_qty AS adj_qty FROM dual) src ON (inv.product_id = src.product_id AND inv.warehouse_id = src.warehouse_id) WHEN MATCHED THEN UPDATE SET inv.quantity_on_hand = inv.quantity_on_hand + src.adj_qty, inv.last_adjustment_date = p_adjustment_date, inv.last_adjustment_type = p_adjustment_type WHEN NOT MATCHED THEN INSERT (product_id, warehouse_id, quantity_on_hand, last_adjustment_date, last_adjustment_type) VALUES (src.product_id, src.warehouse_id, GREATEST(0, src.adj_qty), p_adjustment_date, p_adjustment_type); INSERT INTO inventory_audit_log (product_id, warehouse_id, adjustment_date, adjustment_type, old_quantity, adjustment_quantity, new_quantity, created_by) VALUES (v_inventory(i).product_id, p_warehouse_id, p_adjustment_date, p_adjustment_type, v_inventory(i).current_qty, v_inventory(i).adjustment_qty, v_inventory(i).current_qty + v_inventory(i).adjustment_qty, USER); v_total_processed := v_total_processed + 1; EXCEPTION WHEN OTHERS THEN v_error_count := v_error_count + 1; INSERT INTO error_log (error_date, error_message, product_id) VALUES (SYSDATE, 'Inventory update failed: ' || SQLERRM, v_inventory(i).product_id); END; END LOOP; END LOOP; CLOSE c_inventory; UPDATE inventory_staging SET status = 'PROCESSED', processed_date = SYSDATE WHERE warehouse_id = p_warehouse_id AND status = 'PENDING'; COMMIT; DBMS_OUTPUT.PUT_LINE('Bulk inventory update completed. Processed: ' || v_total_processed || ', Errors: ' || v_error_count); EXCEPTION WHEN OTHERS THEN ROLLBACK TO bulk_update_start; RAISE_APPLICATION_ERROR(-20001, 'Bulk inventory update failed: ' || SQLERRM); END SP_BULK_UPDATE_INVENTORY;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE SP_BULK_UPDATE_INVENTORY(p_warehouse_id IN NUMBER, p_adjustment_type IN VARCHAR2, p_adjustment_date IN DATE DEFAULT SYSDATE) AS TYPE t_inventory_rec IS RECORD (product_id NUMBER, current_qty NUMBER, adjustment_qty NUMBER, new_qty NUMBER); TYPE t_inventory_tab IS TABLE OF t_inventory_rec INDEX BY BINARY_INTEGER; v_inventory t_inventory_tab; v_batch_size CONSTANT NUMBER := 1000; v_total_processed NUMBER := 0; v_error_count NUMBER := 0; CURSOR c_inventory IS SELECT product_id, quantity_on_hand, CASE p_adjustment_type WHEN 'RECOUNT' THEN physical_count - quantity_on_hand WHEN 'DAMAGE' THEN -damaged_quantity WHEN 'RETURN' THEN returned_quantity ELSE 0 END AS adjustment_qty FROM inventory_staging WHERE warehouse_id = p_warehouse_id AND status = 'PENDING' ORDER BY product_id; BEGIN SAVEPOINT bulk_update_start; OPEN c_inventory; LOOP FETCH c_inventory BULK COLLECT INTO v_inventory LIMIT v_batch_size; EXIT WHEN v_inventory.COUNT = 0; FOR i IN 1..v_inventory.COUNT LOOP BEGIN MERGE INTO inventory inv USING (SELECT v_inventory(i).product_id AS product_id, p_warehouse_id AS warehouse_id, v_inventory(i).adjustment_qty AS adj_qty FROM dual) src ON (inv.product_id = src.product_id AND inv.warehouse_id = src.warehouse_id) WHEN MATCHED THEN UPDATE SET inv.quantity_on_hand = inv.quantity_on_hand + src.adj_qty, inv.last_adjustment_date = p_adjustment_date, inv.last_adjustment_type = p_adjustment_type WHEN NOT MATCHED THEN INSERT (product_id, warehouse_id, quantity_on_hand, last_adjustment_date, last_adjustment_type) VALUES (src.product_id, src.warehouse_id, GREATEST(0, src.adj_qty), p_adjustment_date, p_adjustment_type); INSERT INTO inventory_audit_log (product_id, warehouse_id, adjustment_date, adjustment_type, old_quantity, adjustment_quantity, new_quantity, created_by) VALUES (v_inventory(i).product_id, p_warehouse_id, p_adjustment_date, p_adjustment_type, v_inventory(i).current_qty, v_inventory(i).adjustment_qty, v_inventory(i).current_qty + v_inventory(i).adjustment_qty, USER); v_total_processed := v_total_processed + 1; EXCEPTION WHEN OTHERS THEN v_error_count := v_error_count + 1; INSERT INTO error_log (error_date, error_message, product_id) VALUES (SYSDATE, 'Inventory update failed: ' || SQLERRM, v_inventory(i).product_id); END; END LOOP; END LOOP; CLOSE c_inventory; UPDATE inventory_staging SET status = 'PROCESSED', processed_date = SYSDATE WHERE warehouse_id = p_warehouse_id AND status = 'PENDING'; COMMIT; DBMS_OUTPUT.PUT_LINE('Bulk inventory update completed. Processed: ' || v_total_processed || ', Errors: ' || v_error_count); EXCEPTION WHEN OTHERS THEN ROLLBACK TO bulk_update_start; RAISE_APPLICATION_ERROR(-20001, 'Bulk inventory update failed: ' || SQLERRM); END SP_BULK_UPDATE_INVENTORY;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION sp_bulk_update_inventory(p_warehouse_id INTEGER, p_adjustment_type TEXT, p_adjustment_date DATE DEFAULT CURRENT_DATE) RETURNS VOID AS $$\nDECLARE\n    TYPE t_inventory_rec IS RECORD (\n        product_id INTEGER,\n        current_qty INTEGER,\n        adjustment_qty INTEGER,\n        new_qty INTEGER\n    );\n    TYPE t_inventory_tab IS TABLE OF t_inventory_rec;\n    v_inventory t_inventory_tab := ARRAY[]::t_inventory_tab;\n    v_batch_size CONSTANT INTEGER := 1000;\n    v_total_processed INTEGER := 0;\n    v_error_count INTEGER := 0;\n    v_cursor CURSOR FOR SELECT product_id, quantity_on_hand,\n        CASE p_adjustment_type\n            WHEN 'RECOUNT' THEN physical_count - quantity_on_hand\n            WHEN 'DAMAGE' THEN -damaged_quantity\n            WHEN 'RETURN' THEN returned_quantity\n            ELSE 0\n        END AS adjustment_qty\n    FROM inventory_staging\n    WHERE warehouse_id = p_warehouse_id AND status = 'PENDING'\n    ORDER BY product_id;\nBEGIN\n    SAVEPOINT bulk_update_start;\n    FOR v_row IN v_cursor LOOP\n        BEGIN\n            WITH src AS (\n                SELECT v_row.product_id AS product_id, p_warehouse_id AS warehouse_id, v_row.adjustment_qty AS adj_qty\n            )\n            INSERT INTO inventory (product_id, warehouse_id, quantity_on_hand, last_adjustment_date, last_adjustment_type)\n            SELECT src.product_id, src.warehouse_id, GREATEST(0, src.adj_qty), p_adjustment_date, p_adjustment_type\n            FROM src\n            ON CONFLICT (product_id, warehouse_id) DO UPDATE\n            SET quantity_on_hand = inventory.quantity_on_hand + EXCLUDED.quantity_on_hand,\n                last_adjustment_date = EXCLUDED.last_adjustment_date,\n                last_adjustment_type = EXCLUDED.last_adjustment_type;\n\n            INSERT INTO inventory_audit_log (product_id, warehouse_id, adjustment_date, adjustment_type, old_quantity, adjustment_quantity, new_quantity, created_by)\n            VALUES (v_row.product_id, p_warehouse_id, p_adjustment_date, p_adjustment_type, v_row.current_qty, v_row.adjustment_qty, v_row.current_qty + v_row.adjustment_qty, CURRENT_USER);\n\n            v_total_processed := v_total_processed + 1;\n        EXCEPTION\n            WHEN OTHERS THEN\n                v_error_count := v_error_count + 1;\n                INSERT INTO error_log (error_date, error_message, product_id)\n                VALUES (CURRENT_DATE, 'Inventory update failed: ' || SQLSTATE || ' - ' || SQLERRM, v_row.product_id);\n        END;\n    END LOOP;\n\n    UPDATE inventory_staging\n    SET status = 'PROCESSED', processed_date = CURRENT_DATE\n    WHERE warehouse_id = p_warehouse_id AND status = 'PENDING';\n\n    COMMIT;\n    RAISE NOTICE 'Bulk inventory update completed. Processed: %, Errors: %', v_total_processed, v_error_count;\nEXCEPTION\n    WHEN OTHERS THEN\n        ROLLBACK TO SAVEPOINT bulk_update_start;\n        RAISE EXCEPTION 'Bulk inventory update failed: %', SQLSTATE || ' - ' || SQLERRM;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE FUNCTION sp_bulk_update_inventory(p_warehouse_id INTEGER, p_adjustment_type TEXT, p_adjustment_date DATE DEFAULT CURRENT_DATE) RETURNS VOID LANGUAGE plpgsql AS $$\nDECLARE\n    v_inventory RECORD[];\n    v_batch_size CONSTANT INTEGER := 1000;\n    v_total_processed INTEGER := 0;\n    v_error_count INTEGER := 0;\n    r_inventory RECORD;\n    bulk_update_start TEXT;\nBEGIN\n    SAVEPOINT bulk_update_start;\n\n    FOR r_inventory IN SELECT product_id, quantity_on_hand, \n                              CASE p_adjustment_type \n                                  WHEN 'RECOUNT' THEN physical_count - quantity_on_hand\n                                  WHEN 'DAMAGE' THEN -damaged_quantity\n                                  WHEN 'RETURN' THEN returned_quantity\n                                  ELSE 0 \n                              END AS adjustment_qty\n                       FROM inventory_staging\n                       WHERE warehouse_id = p_warehouse_id AND status = 'PENDING'\n                       ORDER BY product_id \n    LOOP\n        v_total_processed := v_total_processed + 1;\n        BEGIN\n            UPDATE inventory\n            SET quantity_on_hand = inventory.quantity_on_hand + r_inventory.adjustment_qty,\n                last_adjustment_date = p_adjustment_date,\n                last_adjustment_type = p_adjustment_type\n            WHERE product_id = r_inventory.product_id AND warehouse_id = p_warehouse_id;\n\n            IF NOT FOUND THEN\n                INSERT INTO inventory (product_id, warehouse_id, quantity_on_hand, last_adjustment_date, last_adjustment_type)\n                VALUES (r_inventory.product_id, p_warehouse_id, GREATEST(0, r_inventory.adjustment_qty), p_adjustment_date, p_adjustment_type);\n            END IF;\n\n            INSERT INTO inventory_audit_log (product_id, warehouse_id, adjustment_date, adjustment_type, old_quantity, adjustment_quantity, new_quantity, created_by)\n            VALUES (r_inventory.product_id, p_warehouse_id, p_adjustment_date, p_adjustment_type, \n                    r_inventory.quantity_on_hand, r_inventory.adjustment_qty, \n                    r_inventory.quantity_on_hand + r_inventory.adjustment_qty, CURRENT_USER);\n        EXCEPTION\n            WHEN OTHERS THEN\n                v_error_count := v_error_count + 1;\n                INSERT INTO error_log (error_date, error_message, product_id)\n                VALUES (CURRENT_DATE, 'Inventory update failed: ' || SQLERRM, r_inventory.product_id);\n        END;\n    END LOOP;\n\n    UPDATE inventory_staging \n    SET status = 'PROCESSED', processed_date = CURRENT_DATE\n    WHERE warehouse_id = p_warehouse_id AND status = 'PENDING';\n\n    COMMIT;\n\n    RAISE NOTICE 'Bulk inventory update completed. Processed: %, Errors: %', v_total_processed, v_error_count;\n\nEXCEPTION\n    WHEN OTHERS THEN\n        ROLLBACK TO SAVEPOINT bulk_update_start;\n        RAISE EXCEPTION 'Bulk inventory update failed: %', SQLERRM;\nEND;\n$$;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_BULK_UPDATE_INVENTORY(p_warehouse_id INTEGER, p_adjustment_type TEXT, p_adjustment_date DATE DEFAULT CURRENT_DATE) RETURNS VOID AS $$\nDECLARE\n    TYPE t_inventory_rec IS RECORD (\n        product_id INTEGER,\n        current_qty INTEGER,\n        adjustment_qty INTEGER,\n        new_qty INTEGER\n    );\n    v_inventory t_inventory_rec[];\n    v_batch_size CONSTANT INTEGER := 1000;\n    v_total_processed INTEGER := 0;\n    v_error_count INTEGER := 0;\n    c_inventory CURSOR FOR SELECT product_id, quantity_on_hand, CASE p_adjustment_type WHEN 'RECOUNT' THEN physical_count - quantity_on_hand WHEN 'DAMAGE' THEN -damaged_quantity WHEN 'RETURN' THEN returned_quantity ELSE 0 END AS adjustment_qty FROM inventory_staging WHERE warehouse_id = p_warehouse_id AND status = 'PENDING' ORDER BY product_id;\nBEGIN\n    BEGIN\n        SAVEPOINT bulk_update_start;\n        OPEN c_inventory;\n        LOOP\n            FETCH c_inventory INTO v_inventory;\n            EXIT WHEN NOT FOUND;\n            FOR i IN 1..array_length(v_inventory, 1) LOOP\n                BEGIN\n                    IF EXISTS(SELECT 1 FROM inventory inv WHERE inv.product_id = v_inventory[i].product_id AND inv.warehouse_id = p_warehouse_id) THEN\n                        UPDATE inventory\n                        SET quantity_on_hand = quantity_on_hand + v_inventory[i].adjustment_qty,\n                            last_adjustment_date = p_adjustment_date,\n                            last_adjustment_type = p_adjustment_type\n                        WHERE product_id = v_inventory[i].product_id AND warehouse_id = p_warehouse_id;\n                    ELSE\n                        INSERT INTO inventory (product_id, warehouse_id, quantity_on_hand, last_adjustment_date, last_adjustment_type)\n                        VALUES (v_inventory[i].product_id, p_warehouse_id, GREATEST(0, v_inventory[i].adjustment_qty), p_adjustment_date, p_adjustment_type);\n                    END IF;\n\n                    INSERT INTO inventory_audit_log (product_id, warehouse_id, adjustment_date, adjustment_type, old_quantity, adjustment_quantity, new_quantity, created_by)\n                    VALUES (v_inventory[i].product_id, p_warehouse_id, p_adjustment_date, p_adjustment_type, v_inventory[i].current_qty, v_inventory[i].adjustment_qty, v_inventory[i].current_qty + v_inventory[i].adjustment_qty, current_user);\n\n                    v_total_processed := v_total_processed + 1;\n                EXCEPTION\n                    WHEN OTHERS THEN\n                        v_error_count := v_error_count + 1;\n                        INSERT INTO error_log (error_date, error_message, product_id)\n                        VALUES (CURRENT_DATE, 'Inventory update failed: ' || SQLERRM, v_inventory[i].product_id);\n                END;\n            END LOOP;\n        END LOOP;\n        CLOSE c_inventory;\n\n        UPDATE inventory_staging\n        SET status = 'PROCESSED',\n            processed_date = CURRENT_DATE\n        WHERE warehouse_id = p_warehouse_id AND status = 'PENDING';\n\n        COMMIT;\n        RAISE NOTICE 'Bulk inventory update completed. Processed: % , Errors: %', v_total_processed, v_error_count;\n    EXCEPTION\n        WHEN OTHERS THEN\n            ROLLBACK TO bulk_update_start;\n            RAISE EXCEPTION 'Bulk inventory update failed: %', SQLERRM;\n    END;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "8",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"8\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"TO_DATE\", \"LPAD\", \"DATE_TRUNC\", \"INTERVAL\", \"DATE\", \"NEXTVAL\", \"COALESCE\", \"EXECUTE\", \"NOW\", \"COUNT\", \"COMMIT\", \"ROLLBACK\", \"RAISE NOTICE\", \"RAISE EXCEPTION\", \"SQLERRM\", \"RECORD\", \"ARRAY\", \"varchar\", \"text\", \"numeric\", \"DATE\", \"TIMESTAMP\", \"USING\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE SP_GENERATE_SALES_REPORT(p_year IN NUMBER, p_quarter IN NUMBER, p_sales_rep_id IN NUMBER DEFAULT NULL) AS v_report_id NUMBER; v_total_sales NUMBER := 0; v_total_commission NUMBER := 0; v_report_sql VARCHAR2(4000); TYPE t_sales_summary IS RECORD (sales_rep_id NUMBER, sales_rep_name VARCHAR2(100), total_sales NUMBER, commission_rate NUMBER, commission_amount NUMBER); TYPE t_sales_tab IS TABLE OF t_sales_summary; v_sales_data t_sales_tab; v_start_date DATE; v_end_date DATE; BEGIN v_start_date := TO_DATE(p_year || '-' || LPAD((p_quarter - 1) * 3 + 1, 2, '0') || '-01', 'YYYY-MM-DD'); v_end_date := LAST_DAY(ADD_MONTHS(v_start_date, 2)); SELECT sales_report_seq.NEXTVAL INTO v_report_id FROM dual; v_report_sql := 'SELECT sr.sales_rep_id, sr.sales_rep_name, NVL(SUM(s.sale_amount), 0) as total_sales, sr.commission_rate, NVL(SUM(s.sale_amount), 0) * sr.commission_rate as commission_amount FROM sales_representatives sr LEFT JOIN sales s ON sr.sales_rep_id = s.sales_rep_id AND s.sale_date BETWEEN :1 AND :2 WHERE (:3 IS NULL OR sr.sales_rep_id = :3) GROUP BY sr.sales_rep_id, sr.sales_rep_name, sr.commission_rate ORDER BY total_sales DESC'; EXECUTE IMMEDIATE v_report_sql BULK COLLECT INTO v_sales_data USING v_start_date, v_end_date, p_sales_rep_id, p_sales_rep_id; INSERT INTO sales_report_header (report_id, report_year, report_quarter, created_date, total_reps) VALUES (v_report_id, p_year, p_quarter, SYSDATE, v_sales_data.COUNT); FOR i IN 1..v_sales_data.COUNT LOOP INSERT INTO sales_report_detail (report_id, sales_rep_id, sales_rep_name, total_sales, commission_rate, commission_amount) VALUES (v_report_id, v_sales_data(i).sales_rep_id, v_sales_data(i).sales_rep_name, v_sales_data(i).total_sales, v_sales_data(i).commission_rate, v_sales_data(i).commission_amount); v_total_sales := v_total_sales + v_sales_data(i).total_sales; v_total_commission := v_total_commission + v_sales_data(i).commission_amount; END LOOP; UPDATE sales_report_header SET total_sales = v_total_sales, total_commission = v_total_commission WHERE report_id = v_report_id; COMMIT; DBMS_OUTPUT.PUT_LINE('Sales report generated successfully. Report ID: ' || v_report_id); EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE_APPLICATION_ERROR(-20002, 'Sales report generation failed: ' || SQLERRM); END SP_GENERATE_SALES_REPORT;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE SP_GENERATE_SALES_REPORT(p_year IN NUMBER, p_quarter IN NUMBER, p_sales_rep_id IN NUMBER DEFAULT NULL) AS v_report_id NUMBER; v_total_sales NUMBER := 0; v_total_commission NUMBER := 0; v_report_sql VARCHAR2(4000); TYPE t_sales_summary IS RECORD (sales_rep_id NUMBER, sales_rep_name VARCHAR2(100), total_sales NUMBER, commission_rate NUMBER, commission_amount NUMBER); TYPE t_sales_tab IS TABLE OF t_sales_summary; v_sales_data t_sales_tab; v_start_date DATE; v_end_date DATE; BEGIN v_start_date := TO_DATE(p_year || '-' || LPAD((p_quarter - 1) * 3 + 1, 2, '0') || '-01', 'YYYY-MM-DD'); v_end_date := LAST_DAY(ADD_MONTHS(v_start_date, 2)); SELECT sales_report_seq.NEXTVAL INTO v_report_id FROM dual; v_report_sql := 'SELECT sr.sales_rep_id, sr.sales_rep_name, NVL(SUM(s.sale_amount), 0) as total_sales, sr.commission_rate, NVL(SUM(s.sale_amount), 0) * sr.commission_rate as commission_amount FROM sales_representatives sr LEFT JOIN sales s ON sr.sales_rep_id = s.sales_rep_id AND s.sale_date BETWEEN :1 AND :2 WHERE (:3 IS NULL OR sr.sales_rep_id = :3) GROUP BY sr.sales_rep_id, sr.sales_rep_name, sr.commission_rate ORDER BY total_sales DESC'; EXECUTE IMMEDIATE v_report_sql BULK COLLECT INTO v_sales_data USING v_start_date, v_end_date, p_sales_rep_id, p_sales_rep_id; INSERT INTO sales_report_header (report_id, report_year, report_quarter, created_date, total_reps) VALUES (v_report_id, p_year, p_quarter, SYSDATE, v_sales_data.COUNT); FOR i IN 1..v_sales_data.COUNT LOOP INSERT INTO sales_report_detail (report_id, sales_rep_id, sales_rep_name, total_sales, commission_rate, commission_amount) VALUES (v_report_id, v_sales_data(i).sales_rep_id, v_sales_data(i).sales_rep_name, v_sales_data(i).total_sales, v_sales_data(i).commission_rate, v_sales_data(i).commission_amount); v_total_sales := v_total_sales + v_sales_data(i).total_sales; v_total_commission := v_total_commission + v_sales_data(i).commission_amount; END LOOP; UPDATE sales_report_header SET total_sales = v_total_sales, total_commission = v_total_commission WHERE report_id = v_report_id; COMMIT; DBMS_OUTPUT.PUT_LINE('Sales report generated successfully. Report ID: ' || v_report_id); EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE_APPLICATION_ERROR(-20002, 'Sales report generation failed: ' || SQLERRM); END SP_GENERATE_SALES_REPORT;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DO $$\nDECLARE \n    p_year INTEGER;\n    p_quarter INTEGER;\n    p_sales_rep_id INTEGER DEFAULT NULL;\n    v_report_id BIGINT;\n    v_total_sales NUMERIC := 0;\n    v_total_commission NUMERIC := 0;\n    v_report_sql TEXT;\n    v_sales_data RECORD;\n    v_start_date DATE;\n    v_end_date DATE;\nBEGIN\n    v_start_date := TO_DATE(CAST(p_year AS TEXT) || '-' || LPAD(CAST((p_quarter - 1) * 3 + 1 AS TEXT), 2, '0') || '-01', 'YYYY-MM-DD');\n    v_end_date := DATE_TRUNC('MONTH', v_start_date + INTERVAL '2 MONTH') + INTERVAL '1 MONTH' - INTERVAL '1 DAY';\n    \n    SELECT nextval('sales_report_seq') INTO v_report_id;\n\n    v_report_sql := \n      'SELECT sr.sales_rep_id, sr.sales_rep_name, COALESCE(SUM(s.sale_amount), 0) as total_sales, ' ||\n      'sr.commission_rate, COALESCE(SUM(s.sale_amount), 0) * sr.commission_rate as commission_amount ' ||\n      'FROM sales_representatives sr ' ||\n      'LEFT JOIN sales s ON sr.sales_rep_id = s.sales_rep_id AND s.sale_date BETWEEN $1 AND $2 ' ||\n      'WHERE ($3 IS NULL OR sr.sales_rep_id = $3) ' ||\n      'GROUP BY sr.sales_rep_id, sr.sales_rep_name, sr.commission_rate ' ||\n      'ORDER BY total_sales DESC';\n    \n    FOR v_sales_data IN EXECUTE v_report_sql USING v_start_date, v_end_date, p_sales_rep_id LOOP\n        INSERT INTO sales_report_detail (report_id, sales_rep_id, sales_rep_name, total_sales, commission_rate, commission_amount) \n        VALUES (v_report_id, v_sales_data.sales_rep_id, v_sales_data.sales_rep_name, v_sales_data.total_sales, v_sales_data.commission_rate, v_sales_data.commission_amount);\n\n        v_total_sales := v_total_sales + v_sales_data.total_sales;\n        v_total_commission := v_total_commission + v_sales_data.commission_amount;\n    END LOOP;\n\n    INSERT INTO sales_report_header (report_id, report_year, report_quarter, created_date, total_reps) \n    VALUES (v_report_id, p_year, p_quarter, CURRENT_DATE, (SELECT COUNT(*) FROM (SELECT DISTINCT sales_rep_id FROM sales_representatives) subquery));\n\n    UPDATE sales_report_header \n    SET total_sales = v_total_sales, total_commission = v_total_commission \n    WHERE report_id = v_report_id;\n\n    RAISE NOTICE 'Sales report generated successfully. Report ID: %', v_report_id;\n\n    COMMIT;\nEXCEPTION \n    WHEN OTHERS THEN\n        ROLLBACK;\n        RAISE EXCEPTION 'Sales report generation failed: %', SQLERRM;\nEND $$;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "DO $$ \nDECLARE\n    v_report_id BIGINT;\n    v_total_sales NUMERIC := 0;\n    v_total_commission NUMERIC := 0;\n    v_report_sql TEXT;\n    v_start_date DATE;\n    v_end_date DATE;\n    v_sales_data RECORD;\n    v_sales_cursor REF CURSOR;\nBEGIN\n    v_start_date := TO_DATE(CAST(p_year AS TEXT) || '-' || LPAD(((p_quarter - 1) * 3 + 1)::TEXT, 2, '0') || '-01', 'YYYY-MM-DD');\n    v_end_date := (v_start_date + INTERVAL '2 MONTH')::DATE + INTERVAL '1 MONTH' - INTERVAL '1 DAY';\n    SELECT NEXTVAL('sales_report_seq') INTO v_report_id;\n\n    v_report_sql := 'SELECT sr.sales_rep_id, sr.sales_rep_name, COALESCE(SUM(s.sale_amount), 0) AS total_sales, sr.commission_rate, COALESCE(SUM(s.sale_amount), 0) * sr.commission_rate AS commission_amount '\n                  || 'FROM sales_representatives sr '\n                  || 'LEFT JOIN sales s ON sr.sales_rep_id = s.sales_rep_id AND s.sale_date BETWEEN $1 AND $2 '\n                  || 'WHERE ($3 IS NULL OR sr.sales_rep_id = $3) '\n                  || 'GROUP BY sr.sales_rep_id, sr.sales_rep_name, sr.commission_rate '\n                  || 'ORDER BY total_sales DESC';\n\n    OPEN v_sales_cursor FOR EXECUTE v_report_sql USING v_start_date, v_end_date, p_sales_rep_id;\n\n    INSERT INTO sales_report_header (report_id, report_year, report_quarter, created_date, total_reps)\n    VALUES (v_report_id, p_year, p_quarter, CURRENT_DATE, 0);\n\n    FOR v_sales_data IN v_sales_cursor LOOP\n        INSERT INTO sales_report_detail (report_id, sales_rep_id, sales_rep_name, total_sales, commission_rate, commission_amount)\n        VALUES (v_report_id, v_sales_data.sales_rep_id, v_sales_data.sales_rep_name, v_sales_data.total_sales, v_sales_data.commission_rate, v_sales_data.commission_amount);\n\n        v_total_sales := v_total_sales + v_sales_data.total_sales;\n        v_total_commission := v_total_commission + v_sales_data.commission_amount;\n    END LOOP;\n\n    UPDATE sales_report_header\n    SET total_sales = v_total_sales, \n        total_commission = v_total_commission,\n        total_reps = (SELECT COUNT(*) FROM sales_report_detail WHERE report_id = v_report_id)\n    WHERE report_id = v_report_id;\n\n    COMMIT;\n\n    RAISE NOTICE 'Sales report generated successfully. Report ID: %', v_report_id;\n\nEXCEPTION \nWHEN OTHERS THEN\n    ROLLBACK;\n    RAISE EXCEPTION 'Sales report generation failed: %', SQLERRM;\nEND $$;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "DO $$\nDECLARE\n    v_report_id BIGINT;\n    v_total_sales NUMERIC := 0;\n    v_total_commission NUMERIC := 0;\n    v_start_date DATE;\n    v_end_date DATE;\n    v_sales_data RECORD;\n    v_sales_cursor CURSOR FOR\n        SELECT sr.sales_rep_id, \n               sr.sales_rep_name, \n               COALESCE(SUM(s.sale_amount), 0) AS total_sales, \n               sr.commission_rate, \n               COALESCE(SUM(s.sale_amount), 0) * sr.commission_rate AS commission_amount\n        FROM sales_representatives sr\n        LEFT JOIN sales s \n        ON sr.sales_rep_id = s.sales_rep_id \n           AND s.sale_date BETWEEN v_start_date AND v_end_date\n        WHERE p_sales_rep_id IS NULL OR sr.sales_rep_id = p_sales_rep_id\n        GROUP BY sr.sales_rep_id, sr.sales_rep_name, sr.commission_rate\n        ORDER BY total_sales DESC;\n\nBEGIN\n    v_start_date := TO_DATE(CAST(p_year AS TEXT) || '-' \n                    || LPAD((p_quarter - 1) * 3 + 1::TEXT, 2, '0') || '-01', 'YYYY-MM-DD');\n    v_end_date := DATE_TRUNC('MONTH', v_start_date + INTERVAL '2 MONTH') + INTERVAL '1 MONTH' - INTERVAL '1 DAY';\n\n    SELECT NEXTVAL('sales_report_seq') INTO v_report_id;\n\n    FOR v_sales_data IN v_sales_cursor LOOP\n        INSERT INTO sales_report_detail (report_id, sales_rep_id, sales_rep_name, total_sales, commission_rate, commission_amount)\n        VALUES (v_report_id, v_sales_data.sales_rep_id, v_sales_data.sales_rep_name, v_sales_data.total_sales, \n                v_sales_data.commission_rate, v_sales_data.commission_amount);\n\n        v_total_sales := v_total_sales + v_sales_data.total_sales;\n        v_total_commission := v_total_commission + v_sales_data.commission_amount;\n    END LOOP;\n\n    INSERT INTO sales_report_header (report_id, report_year, report_quarter, created_date, total_reps, total_sales, total_commission)\n    VALUES (v_report_id, p_year, p_quarter, CURRENT_DATE, (SELECT COUNT(*) FROM sales_representatives), \n            v_total_sales, v_total_commission);\n\n    RAISE NOTICE 'Sales report generated successfully. Report ID: %', v_report_id;\n\nEXCEPTION\n    WHEN OTHERS THEN\n        RAISE EXCEPTION 'Sales report generation failed: %', SQLERRM;\nEND $$;"
                    }
                ]
            },
            {
                "case_id": "9",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"9\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"ROW_NUMBER\", \"COALESCE\", \"NOW\", \"TRUNC\", \"string_agg\", \"REFCURSOR\", \"ROWNUM\", \"VARCHAR\", \"text\", \"EXCEPTION\", \"NOT FOUND\", \"RAISE\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE SP_VOP_VESSEL_MANAGE_BK1(V_BUSIMAIN_CODE IN VARCHAR2, V_VES_CALIBRE IN VARCHAR2, V_VESSEL_CODE IN VARCHAR2, V_CALL_SIGN IN VARCHAR2, V_BUSI_MAINBODY IN VARCHAR2, V_BUSI_CALIBRE IN VARCHAR2, V_VESSEL_TYPE_CODE IN VARCHAR2, V_COMPANY_CALIBRE IN VARCHAR2, V_VESMAN_CODE IN VARCHAR2, V_MANAGER_CALIBRE IN VARCHAR2, V_TRADE_TYPE IN VARCHAR2, V_TETIRED_FLAG IN VARCHAR2, V_ACCMAN_CODE IN VARCHAR2, V_ACCOUNT_CALIBRE IN VARCHAR2, V_FEE_TYPE IN VARCHAR2, V_FEE_SUBJECT IN VARCHAR2, V_SAFEMAN_CODE IN VARCHAR2, V_SAFE_CALIBRE IN VARCHAR2, V_CORPORATE_CALIBRE IN VARCHAR2, V_TEST_CALIBRE IN VARCHAR2, V_COSTMAN_CODE IN VARCHAR2, V_COST_CALIBRE IN VARCHAR2, IS_CORSUR OUT SYS_REFCURSOR) IS BEGIN OPEN IS_CORSUR FOR SELECT * FROM( SELECT KK.ROW_NO, KK.VESSEL_CODE, /*船舶代码*/ KK.VESSEL_NAME, /*船舶名称（中文名）*/ KK.VESSEL_NAME_EN, /*船舶名称（英文名）*/ KK.ANOTHER_NAME, /*BMS标准船名 0*/ NVL(S1.OFFICE_NAME,KK.VESMAN_CODE)AS VES_MANAGER, /*船东*/ KK.SHIP_OWNER_FLAG_NAME, /*船舶产权性质 0*/ KK.VESSEL_TYPE, /*船型*/ KK.AREA_NAME, /*航区*/ KK.SHIPYARD, /*建造国家或地区 0*/ KK.VESSEL_NATIONALITY, /*船旗国(地区)*/ KK.TOTAL_LENGTH, /*总长*/ KK.WIDE, /*型宽*/ KK.TYPE_DEEP, /*型深*/ KK.BARE_SPACING_DRINKING, /*吃水 0*/ KK.SHIP_PORT, /*船籍港*/ KK.TONNAGE, /*总吨（吨）*/ KK.MUTETON, /*净吨（吨）*/ KK.CALCULATELIGHTTON, /*轻吨（吨） 0*/ KK.SPEED, /*航速(节)*/ KK.PANAMA_CANAL_TONNAGE, /*总载重量（吨） 0*/ KK.PANAMA_CANAL_NET_TON, /*净载重量（吨） 0*/ KK.HOST_POWER, /*功 率（千瓦）*/ KK.CONSTRUCTION_DATE, /*建造年月*/ KK.CREATE_YEAR, /*船龄(年)*/ KK.OPERATION_DATE, /*接入时间*/ KK.RETIRED_DATE, /*退租/役船时间*/ KK.CALL_SIGN, /*呼号*/ KK.IMO_NO /*IMO编号*/ FROM ( SELECT ROW_NUMBER() OVER(ORDER BY MB.VESSEL_CODE)AS ROW_NO, MB.VESSEL_CODE, MB.VESSEL_NAME, MB.VESSEL_NAME_EN, MB.ANOTHER_NAME, FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'1')AS VESMAN_CODE, NVL(mb.ship_owner_flag,(SELECT c.display_value_cn FROM cdm_codedict c WHERE c.code_type = 'CDM_SHIP_WONER_FLAG' AND c.code_value = MB.ship_owner_flag and rownum = 1))AS SHIP_OWNER_FLAG_NAME, MB.VESSEL_TYPE, NVL(MB.AREA,(SELECT C.DISPLAY_VALUE_CN FROM CDM_CODEDICT C WHERE C.CODE_TYPE = 'CDM_NAVIGATING_ZONE' AND C.CODE_VALUE = MB.AREA))AS AREA_NAME, MB.SHIPYARD, NVL(MB.VESSEL_NATIONALITY,(SELECT COUNTRY_NAME FROM CDM_COUNTRY WHERE COUNTRY_CODE= MB.VESSEL_NATIONALITY))AS VESSEL_NATIONALITY, MB.TOTAL_LENGTH, MB.WIDE, MB.TYPE_DEEP, MB.BARE_SPACING_DRINKING, NVL(MB.SHIP_PORT,(SELECT PORT_NAME from CDM_PORT WHERE PORT_CODE=MB.SHIP_PORT))AS SHIP_PORT, MB.TONNAGE, MB.MUTETON, MB.CALCULATELIGHTTON, MB.SPEED, MB.PANAMA_CANAL_TONNAGE, MB.PANAMA_CANAL_NET_TON, MB.HOST_POWER, MB.CONSTRUCTION_DATE, TRUNC(MONTHS_BETWEEN(SYSDATE, MB.CONSTRUCTION_DATE) / 12)AS CREATE_YEAR, MB.OPERATION_DATE, MB.RETIRED_DATE, MB.CALL_SIGN, MB.IMO_NO FROM VOP_VESSEL MB LEFT JOIN (SELECT LISTAGG((V.TEST_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS TEST_CALIBRE, LISTAGG((V.FEE_TYPE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS FEE_TYPE, LISTAGG((V.FEE_SUBJECT), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS FEE_SUBJECT, LISTAGG((V.CORPORATE_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS CORPORATE_CALIBRE, LISTAGG((V.COMPANY_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS COMPANY_CALIBRE, V.VESSEL_ID FROM VOP_VESSEL_STATISTICS_CALIBRE V GROUP BY V.VESSEL_ID) VV ON MB.VESSEL_ID = VV.VESSEL_ID WHERE (V_BUSIMAIN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'2') = V_BUSIMAIN_CODE) AND (V_VES_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'1') = V_VES_CALIBRE) AND (V_VESSEL_CODE IS NULL OR MB.VESSEL_CODE = V_VESSEL_CODE) AND (V_CALL_SIGN IS NULL OR MB.CALL_SIGN = V_CALL_SIGN) AND (V_BUSI_MAINBODY IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'2') = V_BUSI_MAINBODY) AND (V_BUSI_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'2') = V_BUSI_CALIBRE) AND (V_VESSEL_TYPE_CODE IS NULL OR MB.VESSEL_TYPE_CODE = VESSEL_TYPE_CODE) AND (V_COMPANY_CALIBRE IS NULL OR VV.COMPANY_CALIBRE = V_COMPANY_CALIBRE) AND (V_VESMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'1') = V_VESMAN_CODE) AND (V_MANAGER_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'3') = V_MANAGER_CALIBRE) AND (V_TRADE_TYPE IS NULL OR MB.TRADE_TYPE = V_TRADE_TYPE) AND (V_TETIRED_FLAG IS NULL OR MB.TETIRED_FLAG = V_TETIRED_FLAG) AND (V_ACCMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'4') = V_ACCMAN_CODE) AND (V_ACCOUNT_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'4') = V_ACCOUNT_CALIBRE) AND (V_FEE_TYPE IS NULL OR VV.FEE_TYPE = V_FEE_TYPE) AND (V_FEE_SUBJECT IS NULL OR VV.FEE_SUBJECT = V_FEE_SUBJECT) AND (V_SAFEMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'5') = V_SAFEMAN_CODE) AND (V_SAFE_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'5') = V_SAFE_CALIBRE) AND (V_CORPORATE_CALIBRE IS NULL OR VV.CORPORATE_CALIBRE = V_CORPORATE_CALIBRE) AND (V_TEST_CALIBRE IS NULL OR VV.TEST_CALIBRE = V_TEST_CALIBRE) AND (V_COSTMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'6') = V_COSTMAN_CODE) AND (V_COST_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'6') = V_COST_CALIBRE) )KK LEFT JOIN SYS_OFFICE S1 ON S1.OFFICE_CODE = KK.VESMAN_CODE AND NVL(S1.IS_DELETE, '0') <> '1' )A; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; WHEN OTHERS THEN RAISE; END SP_VOP_VESSEL_MANAGE_BK1; $$\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE SP_VOP_VESSEL_MANAGE_BK1(V_BUSIMAIN_CODE IN VARCHAR2, V_VES_CALIBRE IN VARCHAR2, V_VESSEL_CODE IN VARCHAR2, V_CALL_SIGN IN VARCHAR2, V_BUSI_MAINBODY IN VARCHAR2, V_BUSI_CALIBRE IN VARCHAR2, V_VESSEL_TYPE_CODE IN VARCHAR2, V_COMPANY_CALIBRE IN VARCHAR2, V_VESMAN_CODE IN VARCHAR2, V_MANAGER_CALIBRE IN VARCHAR2, V_TRADE_TYPE IN VARCHAR2, V_TETIRED_FLAG IN VARCHAR2, V_ACCMAN_CODE IN VARCHAR2, V_ACCOUNT_CALIBRE IN VARCHAR2, V_FEE_TYPE IN VARCHAR2, V_FEE_SUBJECT IN VARCHAR2, V_SAFEMAN_CODE IN VARCHAR2, V_SAFE_CALIBRE IN VARCHAR2, V_CORPORATE_CALIBRE IN VARCHAR2, V_TEST_CALIBRE IN VARCHAR2, V_COSTMAN_CODE IN VARCHAR2, V_COST_CALIBRE IN VARCHAR2, IS_CORSUR OUT SYS_REFCURSOR) IS BEGIN OPEN IS_CORSUR FOR SELECT * FROM( SELECT KK.ROW_NO, KK.VESSEL_CODE, /*船舶代码*/ KK.VESSEL_NAME, /*船舶名称（中文名）*/ KK.VESSEL_NAME_EN, /*船舶名称（英文名）*/ KK.ANOTHER_NAME, /*BMS标准船名 0*/ NVL(S1.OFFICE_NAME,KK.VESMAN_CODE)AS VES_MANAGER, /*船东*/ KK.SHIP_OWNER_FLAG_NAME, /*船舶产权性质 0*/ KK.VESSEL_TYPE, /*船型*/ KK.AREA_NAME, /*航区*/ KK.SHIPYARD, /*建造国家或地区 0*/ KK.VESSEL_NATIONALITY, /*船旗国(地区)*/ KK.TOTAL_LENGTH, /*总长*/ KK.WIDE, /*型宽*/ KK.TYPE_DEEP, /*型深*/ KK.BARE_SPACING_DRINKING, /*吃水 0*/ KK.SHIP_PORT, /*船籍港*/ KK.TONNAGE, /*总吨（吨）*/ KK.MUTETON, /*净吨（吨）*/ KK.CALCULATELIGHTTON, /*轻吨（吨） 0*/ KK.SPEED, /*航速(节)*/ KK.PANAMA_CANAL_TONNAGE, /*总载重量（吨） 0*/ KK.PANAMA_CANAL_NET_TON, /*净载重量（吨） 0*/ KK.HOST_POWER, /*功 率（千瓦）*/ KK.CONSTRUCTION_DATE, /*建造年月*/ KK.CREATE_YEAR, /*船龄(年)*/ KK.OPERATION_DATE, /*接入时间*/ KK.RETIRED_DATE, /*退租/役船时间*/ KK.CALL_SIGN, /*呼号*/ KK.IMO_NO /*IMO编号*/ FROM ( SELECT ROW_NUMBER() OVER(ORDER BY MB.VESSEL_CODE)AS ROW_NO, MB.VESSEL_CODE, MB.VESSEL_NAME, MB.VESSEL_NAME_EN, MB.ANOTHER_NAME, FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'1')AS VESMAN_CODE, NVL(mb.ship_owner_flag,(SELECT c.display_value_cn FROM cdm_codedict c WHERE c.code_type = 'CDM_SHIP_WONER_FLAG' AND c.code_value = MB.ship_owner_flag and rownum = 1))AS SHIP_OWNER_FLAG_NAME, MB.VESSEL_TYPE, NVL(MB.AREA,(SELECT C.DISPLAY_VALUE_CN FROM CDM_CODEDICT C WHERE C.CODE_TYPE = 'CDM_NAVIGATING_ZONE' AND C.CODE_VALUE = MB.AREA))AS AREA_NAME, MB.SHIPYARD, NVL(MB.VESSEL_NATIONALITY,(SELECT COUNTRY_NAME FROM CDM_COUNTRY WHERE COUNTRY_CODE= MB.VESSEL_NATIONALITY))AS VESSEL_NATIONALITY, MB.TOTAL_LENGTH, MB.WIDE, MB.TYPE_DEEP, MB.BARE_SPACING_DRINKING, NVL(MB.SHIP_PORT,(SELECT PORT_NAME from CDM_PORT WHERE PORT_CODE=MB.SHIP_PORT))AS SHIP_PORT, MB.TONNAGE, MB.MUTETON, MB.CALCULATELIGHTTON, MB.SPEED, MB.PANAMA_CANAL_TONNAGE, MB.PANAMA_CANAL_NET_TON, MB.HOST_POWER, MB.CONSTRUCTION_DATE, TRUNC(MONTHS_BETWEEN(SYSDATE, MB.CONSTRUCTION_DATE) / 12)AS CREATE_YEAR, MB.OPERATION_DATE, MB.RETIRED_DATE, MB.CALL_SIGN, MB.IMO_NO FROM VOP_VESSEL MB LEFT JOIN (SELECT LISTAGG((V.TEST_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS TEST_CALIBRE, LISTAGG((V.FEE_TYPE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS FEE_TYPE, LISTAGG((V.FEE_SUBJECT), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS FEE_SUBJECT, LISTAGG((V.CORPORATE_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS CORPORATE_CALIBRE, LISTAGG((V.COMPANY_CALIBRE), ',') WITHIN GROUP(ORDER BY V.VESSEL_ID) AS COMPANY_CALIBRE, V.VESSEL_ID FROM VOP_VESSEL_STATISTICS_CALIBRE V GROUP BY V.VESSEL_ID) VV ON MB.VESSEL_ID = VV.VESSEL_ID WHERE (V_BUSIMAIN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'2') = V_BUSIMAIN_CODE) AND (V_VES_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'1') = V_VES_CALIBRE) AND (V_VESSEL_CODE IS NULL OR MB.VESSEL_CODE = V_VESSEL_CODE) AND (V_CALL_SIGN IS NULL OR MB.CALL_SIGN = V_CALL_SIGN) AND (V_BUSI_MAINBODY IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'2') = V_BUSI_MAINBODY) AND (V_BUSI_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'2') = V_BUSI_CALIBRE) AND (V_VESSEL_TYPE_CODE IS NULL OR MB.VESSEL_TYPE_CODE = VESSEL_TYPE_CODE) AND (V_COMPANY_CALIBRE IS NULL OR VV.COMPANY_CALIBRE = V_COMPANY_CALIBRE) AND (V_VESMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'1') = V_VESMAN_CODE) AND (V_MANAGER_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'3') = V_MANAGER_CALIBRE) AND (V_TRADE_TYPE IS NULL OR MB.TRADE_TYPE = V_TRADE_TYPE) AND (V_TETIRED_FLAG IS NULL OR MB.TETIRED_FLAG = V_TETIRED_FLAG) AND (V_ACCMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'4') = V_ACCMAN_CODE) AND (V_ACCOUNT_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'4') = V_ACCOUNT_CALIBRE) AND (V_FEE_TYPE IS NULL OR VV.FEE_TYPE = V_FEE_TYPE) AND (V_FEE_SUBJECT IS NULL OR VV.FEE_SUBJECT = V_FEE_SUBJECT) AND (V_SAFEMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'5') = V_SAFEMAN_CODE) AND (V_SAFE_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'5') = V_SAFE_CALIBRE) AND (V_CORPORATE_CALIBRE IS NULL OR VV.CORPORATE_CALIBRE = V_CORPORATE_CALIBRE) AND (V_TEST_CALIBRE IS NULL OR VV.TEST_CALIBRE = V_TEST_CALIBRE) AND (V_COSTMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID,SYSDATE,'6') = V_COSTMAN_CODE) AND (V_COST_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID,SYSDATE,'6') = V_COST_CALIBRE) )KK LEFT JOIN SYS_OFFICE S1 ON S1.OFFICE_CODE = KK.VESMAN_CODE AND NVL(S1.IS_DELETE, '0') <> '1' )A; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; WHEN OTHERS THEN RAISE; END SP_VOP_VESSEL_MANAGE_BK1; $$\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DO $$\nBEGIN\nCREATE OR REPLACE FUNCTION sp_vop_vessel_manage_bk1(\n    v_busimain_code VARCHAR,\n    v_ves_calibre VARCHAR,\n    v_vessel_code VARCHAR,\n    v_call_sign VARCHAR,\n    v_busi_mainbody VARCHAR,\n    v_busi_calibre VARCHAR,\n    v_vessel_type_code VARCHAR,\n    v_company_calibre VARCHAR,\n    v_vesman_code VARCHAR,\n    v_manager_calibre VARCHAR,\n    v_trade_type VARCHAR,\n    v_tetired_flag VARCHAR,\n    v_accman_code VARCHAR,\n    v_account_calibre VARCHAR,\n    v_fee_type VARCHAR,\n    v_fee_subject VARCHAR,\n    v_safeman_code VARCHAR,\n    v_safe_calibre VARCHAR,\n    v_corporate_calibre VARCHAR,\n    v_test_calibre VARCHAR,\n    v_costman_code VARCHAR,\n    v_cost_calibre VARCHAR\n)\nRETURNS TABLE (\n    row_no INT,\n    vessel_code VARCHAR,\n    vessel_name VARCHAR,\n    vessel_name_en VARCHAR,\n    another_name VARCHAR,\n    ves_manager VARCHAR,\n    ship_owner_flag_name VARCHAR,\n    vessel_type VARCHAR,\n    area_name VARCHAR,\n    shipyard VARCHAR,\n    vessel_nationality VARCHAR,\n    total_length NUMERIC,\n    wide NUMERIC,\n    type_deep NUMERIC,\n    bare_spacing_drinking NUMERIC,\n    ship_port VARCHAR,\n    tonnage NUMERIC,\n    muteton NUMERIC,\n    calculatelightton NUMERIC,\n    speed NUMERIC,\n    panama_canal_tonnage NUMERIC,\n    panama_canal_net_ton NUMERIC,\n    host_power NUMERIC,\n    construction_date DATE,\n    create_year INT,\n    operation_date DATE,\n    retired_date DATE,\n    call_sign VARCHAR,\n    imo_no VARCHAR\n) \nAS $$\nBEGIN\nRETURN QUERY\nSELECT *\nFROM (\n    SELECT kk.row_no, kk.vessel_code, kk.vessel_name, kk.vessel_name_en, kk.another_name,\n           COALESCE(s1.office_name, kk.vesman_code) AS ves_manager, kk.ship_owner_flag_name,\n           kk.vessel_type, kk.area_name, kk.shipyard, kk.vessel_nationality, kk.total_length,\n           kk.wide, kk.type_deep, kk.bare_spacing_drinking, kk.ship_port, kk.tonnage, kk.muteton,\n           kk.calculatelightton, kk.speed, kk.panama_canal_tonnage, kk.panama_canal_net_ton,\n           kk.host_power, kk.construction_date, EXTRACT(YEAR FROM AGE(CURRENT_DATE, kk.construction_date)) AS create_year,\n           kk.operation_date, kk.retired_date, kk.call_sign, kk.imo_no\n    FROM (\n        SELECT ROW_NUMBER() OVER (ORDER BY mb.vessel_code) AS row_no, mb.vessel_code, mb.vessel_name,\n               mb.vessel_name_en, mb.another_name, fn_get_vessel_management(mb.vessel_id, CURRENT_DATE, '1') AS vesman_code,\n               COALESCE(mb.ship_owner_flag,\n                        (SELECT c.display_value_cn\n                         FROM cdm_codedict c\n                         WHERE c.code_type = 'CDM_SHIP_WONER_FLAG' AND c.code_value = mb.ship_owner_flag LIMIT 1)) AS ship_owner_flag_name,\n               mb.vessel_type,\n               COALESCE(mb.area,\n                        (SELECT c.display_value_cn\n                         FROM cdm_codedict c\n                         WHERE c.code_type = 'CDM_NAVIGATING_ZONE' AND c.code_value = mb.area)) AS area_name,\n               mb.shipyard,\n               COALESCE(mb.vessel_nationality,\n                        (SELECT country_name\n                         FROM cdm_country\n                         WHERE country_code = mb.vessel_nationality)) AS vessel_nationality,\n               mb.total_length, mb.wide, mb.type_deep, mb.bare_spacing_drinking,\n               COALESCE(mb.ship_port,\n                        (SELECT port_name\n                         FROM cdm_port\n                         WHERE port_code = mb.ship_port)) AS ship_port,\n               mb.tonnage, mb.muteton, mb.calculatelightton, mb.speed,\n               mb.panama_canal_tonnage, mb.panama_canal_net_ton, mb.host_power,\n               mb.construction_date, mb.operation_date, mb.retired_date, mb.call_sign, mb.imo_no\n        FROM vop_vessel mb\n        LEFT JOIN (\n            SELECT array_agg(v.test_calibre ORDER BY v.vessel_id) AS test_calibre,\n                   array_agg(v.fee_type ORDER BY v.vessel_id) AS fee_type,\n                   array_agg(v.fee_subject ORDER BY v.vessel_id) AS fee_subject,\n                   array_agg(v.corporate_calibre ORDER BY v.vessel_id) AS corporate_calibre,\n                   array_agg(v.company_calibre ORDER BY v.vessel_id) AS company_calibre,\n                   v.vessel_id\n            FROM vop_vessel_statistics_calibre v\n            GROUP BY v.vessel_id\n        ) vv ON mb.vessel_id = vv.vessel_id\n        WHERE (v_busimain_code IS NULL OR fn_get_vessel_management(mb.vessel_id, CURRENT_DATE, '2') = v_busimain_code)\n          AND (v_ves_calibre IS NULL OR fn_get_vessel_mana_calibre(mb.vessel_id, CURRENT_DATE, '1') = v_ves_calibre)\n          AND (v_vessel_code IS NULL OR mb.vessel_code = v_vessel_code)\n          AND (v_call_sign IS NULL OR mb.call_sign = v_call_sign)\n          AND (v_busi_mainbody IS NULL OR fn_get_vessel_management(mb.vessel_id, CURRENT_DATE, '2') = v_busi_mainbody)\n          AND (v_busi_calibre IS NULL OR fn_get_vessel_mana_calibre(mb.vessel_id, CURRENT_DATE, '2') = v_busi_calibre)\n          AND (v_vessel_type_code IS NULL OR mb.vessel_type_code = v_vessel_type_code)\n          AND (v_company_calibre IS NULL OR vv.company_calibre = v_company_calibre)\n          AND (v_vesman_code IS NULL OR fn_get_vessel_management(mb.vessel_id, CURRENT_DATE, '1') = v_vesman_code)\n          AND (v_manager_calibre IS NULL OR fn_get_vessel_mana_calibre(mb.vessel_id, CURRENT_DATE, '3') = v_manager_calibre)\n          AND (v_trade_type IS NULL OR mb.trade_type = v_trade_type)\n          AND (v_tetired_flag IS NULL OR mb.tetired_flag = v_tetired_flag)\n          AND (v_accman_code IS NULL OR fn_get_vessel_management(mb.vessel_id, CURRENT_DATE, '4') = v_accman_code)\n          AND (v_account_calibre IS NULL OR fn_get_vessel_mana_calibre(mb.vessel_id, CURRENT_DATE, '4') = v_account_calibre)\n          AND (v_fee_type IS NULL OR vv.fee_type = v_fee_type)\n          AND (v_fee_subject IS NULL OR vv.fee_subject = v_fee_subject)\n          AND (v_safeman_code IS NULL OR fn_get_vessel_management(mb.vessel_id, CURRENT_DATE, '5') = v_safeman_code)\n          AND (v_safe_calibre IS NULL OR fn_get_vessel_mana_calibre(mb.vessel_id, CURRENT_DATE, '5') = v_safe_calibre)\n          AND (v_corporate_calibre IS NULL OR vv.corporate_calibre = v_corporate_calibre)\n          AND (v_test_calibre IS NULL OR vv.test_calibre = v_test_calibre)\n          AND (v_costman_code IS NULL OR fn_get_vessel_management(mb.vessel_id, CURRENT_DATE, '6') = v_costman_code)\n          AND (v_cost_calibre IS NULL OR fn_get_vessel_mana_calibre(mb.vessel_id, CURRENT_DATE, '6') = v_cost_calibre)\n    ) kk\n    LEFT JOIN sys_office s1 ON s1.office_code = kk.vesman_code AND COALESCE(s1.is_delete, '0') <> '1'\n) a;\nEXCEPTION\n    WHEN NO_DATA_FOUND THEN\n        RETURN;\n    WHEN OTHERS THEN\n        RAISE;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_VOP_VESSEL_MANAGE_BK1(\n    V_BUSIMAIN_CODE VARCHAR,\n    V_VES_CALIBRE VARCHAR,\n    V_VESSEL_CODE VARCHAR,\n    V_CALL_SIGN VARCHAR,\n    V_BUSI_MAINBODY VARCHAR,\n    V_BUSI_CALIBRE VARCHAR,\n    V_VESSEL_TYPE_CODE VARCHAR,\n    V_COMPANY_CALIBRE VARCHAR,\n    V_VESMAN_CODE VARCHAR,\n    V_MANAGER_CALIBRE VARCHAR,\n    V_TRADE_TYPE VARCHAR,\n    V_TETIRED_FLAG VARCHAR,\n    V_ACCMAN_CODE VARCHAR,\n    V_ACCOUNT_CALIBRE VARCHAR,\n    V_FEE_TYPE VARCHAR,\n    V_FEE_SUBJECT VARCHAR,\n    V_SAFEMAN_CODE VARCHAR,\n    V_SAFE_CALIBRE VARCHAR,\n    V_CORPORATE_CALIBRE VARCHAR,\n    V_TEST_CALIBRE VARCHAR,\n    V_COSTMAN_CODE VARCHAR,\n    V_COST_CALIBRE VARCHAR\n) RETURNS refcursor AS $$\nDECLARE\n    IS_CORSUR refcursor;\nBEGIN\n    OPEN IS_CORSUR FOR \n    SELECT * FROM (\n        SELECT\n            KK.ROW_NO,\n            KK.VESSEL_CODE,\n            KK.VESSEL_NAME,\n            KK.VESSEL_NAME_EN,\n            KK.ANOTHER_NAME,\n            COALESCE(S1.OFFICE_NAME, KK.VESMAN_CODE) AS VES_MANAGER,\n            KK.SHIP_OWNER_FLAG_NAME,\n            KK.VESSEL_TYPE,\n            KK.AREA_NAME,\n            KK.SHIPYARD,\n            KK.VESSEL_NATIONALITY,\n            KK.TOTAL_LENGTH,\n            KK.WIDE,\n            KK.TYPE_DEEP,\n            KK.BARE_SPACING_DRINKING,\n            KK.SHIP_PORT,\n            KK.TONNAGE,\n            KK.MUTETON,\n            KK.CALCULATELIGHTTON,\n            KK.SPEED,\n            KK.PANAMA_CANAL_TONNAGE,\n            KK.PANAMA_CANAL_NET_TON,\n            KK.HOST_POWER,\n            KK.CONSTRUCTION_DATE,\n            TRUNC(EXTRACT(YEAR FROM AGE(SYSDATE, KK.CONSTRUCTION_DATE))) AS CREATE_YEAR,\n            KK.OPERATION_DATE,\n            KK.RETIRED_DATE,\n            KK.CALL_SIGN,\n            KK.IMO_NO\n        FROM (\n            SELECT\n                ROW_NUMBER() OVER(ORDER BY MB.VESSEL_CODE) AS ROW_NO,\n                MB.VESSEL_CODE,\n                MB.VESSEL_NAME,\n                MB.VESSEL_NAME_EN,\n                MB.ANOTHER_NAME,\n                FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, NOW(), '1') AS VESMAN_CODE,\n                COALESCE(MB.SHIP_OWNER_FLAG, (\n                    SELECT C.DISPLAY_VALUE_CN\n                    FROM CDM_CODEDICT C\n                    WHERE C.CODE_TYPE = 'CDM_SHIP_WONER_FLAG' \n                    AND C.CODE_VALUE = MB.SHIP_OWNER_FLAG\n                    LIMIT 1\n                )) AS SHIP_OWNER_FLAG_NAME,\n                MB.VESSEL_TYPE,\n                COALESCE(MB.AREA, (\n                    SELECT C.DISPLAY_VALUE_CN\n                    FROM CDM_CODEDICT C\n                    WHERE C.CODE_TYPE = 'CDM_NAVIGATING_ZONE'\n                    AND C.CODE_VALUE = MB.AREA\n                )) AS AREA_NAME,\n                MB.SHIPYARD,\n                COALESCE(MB.VESSEL_NATIONALITY, (\n                    SELECT COUNTRY_NAME\n                    FROM CDM_COUNTRY\n                    WHERE COUNTRY_CODE = MB.VESSEL_NATIONALITY\n                )) AS VESSEL_NATIONALITY,\n                MB.TOTAL_LENGTH,\n                MB.WIDE,\n                MB.TYPE_DEEP,\n                MB.BARE_SPACING_DRINKING,\n                COALESCE(MB.SHIP_PORT, (\n                    SELECT PORT_NAME\n                    FROM CDM_PORT\n                    WHERE PORT_CODE = MB.SHIP_PORT\n                )) AS SHIP_PORT,\n                MB.TONNAGE,\n                MB.MUTETON,\n                MB.CALCULATELIGHTTON,\n                MB.SPEED,\n                MB.PANAMA_CANAL_TONNAGE,\n                MB.PANAMA_CANAL_NET_TON,\n                MB.HOST_POWER,\n                MB.CONSTRUCTION_DATE,\n                MB.OPERATION_DATE,\n                MB.RETIRED_DATE,\n                MB.CALL_SIGN,\n                MB.IMO_NO\n            FROM VOP_VESSEL MB\n            LEFT JOIN (\n                SELECT\n                    STRING_AGG(V.TEST_CALIBRE, ',') AS TEST_CALIBRE,\n                    STRING_AGG(V.FEE_TYPE, ',') AS FEE_TYPE,\n                    STRING_AGG(V.FEE_SUBJECT, ',') AS FEE_SUBJECT,\n                    STRING_AGG(V.CORPORATE_CALIBRE, ',') AS CORPORATE_CALIBRE,\n                    STRING_AGG(V.COMPANY_CALIBRE, ',') AS COMPANY_CALIBRE,\n                    V.VESSEL_ID\n                FROM VOP_VESSEL_STATISTICS_CALIBRE V\n                GROUP BY V.VESSEL_ID\n            ) VV ON MB.VESSEL_ID = VV.VESSEL_ID\n            WHERE (V_BUSIMAIN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, NOW(), '2') = V_BUSIMAIN_CODE)\n            AND (V_VES_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, NOW(), '1') = V_VES_CALIBRE)\n            AND (V_VESSEL_CODE IS NULL OR MB.VESSEL_CODE = V_VESSEL_CODE)\n            AND (V_CALL_SIGN IS NULL OR MB.CALL_SIGN = V_CALL_SIGN)\n            AND (V_BUSI_MAINBODY IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, NOW(), '2') = V_BUSI_MAINBODY)\n            AND (V_BUSI_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, NOW(), '2') = V_BUSI_CALIBRE)\n            AND (V_VESSEL_TYPE_CODE IS NULL OR MB.VESSEL_TYPE_CODE = V_VESSEL_TYPE_CODE)\n            AND (V_COMPANY_CALIBRE IS NULL OR VV.COMPANY_CALIBRE = V_COMPANY_CALIBRE)\n            AND (V_VESMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, NOW(), '1') = V_VESMAN_CODE)\n            AND (V_MANAGER_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, NOW(), '3') = V_MANAGER_CALIBRE)\n            AND (V_TRADE_TYPE IS NULL OR MB.TRADE_TYPE = V_TRADE_TYPE)\n            AND (V_TETIRED_FLAG IS NULL OR MB.TETIRED_FLAG = V_TETIRED_FLAG)\n            AND (V_ACCMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, NOW(), '4') = V_ACCMAN_CODE)\n            AND (V_ACCOUNT_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, NOW(), '4') = V_ACCOUNT_CALIBRE)\n            AND (V_FEE_TYPE IS NULL OR VV.FEE_TYPE = V_FEE_TYPE)\n            AND (V_FEE_SUBJECT IS NULL OR VV.FEE_SUBJECT = V_FEE_SUBJECT)\n            AND (V_SAFEMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, NOW(), '5') = V_SAFEMAN_CODE)\n            AND (V_SAFE_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, NOW(), '5') = V_SAFE_CALIBRE)\n            AND (V_CORPORATE_CALIBRE IS NULL OR VV.CORPORATE_CALIBRE = V_CORPORATE_CALIBRE)\n            AND (V_TEST_CALIBRE IS NULL OR VV.TEST_CALIBRE = V_TEST_CALIBRE)\n            AND (V_COSTMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, NOW(), '6') = V_COSTMAN_CODE)\n            AND (V_COST_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, NOW(), '6') = V_COST_CALIBRE)\n        ) KK\n        LEFT JOIN SYS_OFFICE S1 ON S1.OFFICE_CODE = KK.VESMAN_CODE AND COALESCE(S1.IS_DELETE, '0') <> '1'\n    ) A;\n    RETURN IS_CORSUR;\nEXCEPTION\n    WHEN OTHERS THEN\n        RAISE;\nEND;\n$$ LANGUAGE plpgsql;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "DO $$ \nBEGIN \n    CREATE OR REPLACE FUNCTION SP_VOP_VESSEL_MANAGE_BK1(\n        V_BUSIMAIN_CODE VARCHAR, \n        V_VES_CALIBRE VARCHAR, \n        V_VESSEL_CODE VARCHAR, \n        V_CALL_SIGN VARCHAR, \n        V_BUSI_MAINBODY VARCHAR, \n        V_BUSI_CALIBRE VARCHAR, \n        V_VESSEL_TYPE_CODE VARCHAR, \n        V_COMPANY_CALIBRE VARCHAR, \n        V_VESMAN_CODE VARCHAR, \n        V_MANAGER_CALIBRE VARCHAR, \n        V_TRADE_TYPE VARCHAR, \n        V_TETIRED_FLAG VARCHAR, \n        V_ACCMAN_CODE VARCHAR, \n        V_ACCOUNT_CALIBRE VARCHAR, \n        V_FEE_TYPE VARCHAR, \n        V_FEE_SUBJECT VARCHAR, \n        V_SAFEMAN_CODE VARCHAR, \n        V_SAFE_CALIBRE VARCHAR, \n        V_CORPORATE_CALIBRE VARCHAR, \n        V_TEST_CALIBRE VARCHAR, \n        V_COSTMAN_CODE VARCHAR, \n        V_COST_CALIBRE VARCHAR\n    )\n    RETURNS REFCURSOR AS $$\n    DECLARE\n        IS_CORSUR REFCURSOR;\n    BEGIN\n        OPEN IS_CORSUR FOR \n        SELECT * FROM (\n            SELECT KK.ROW_NO, KK.VESSEL_CODE, KK.VESSEL_NAME, KK.VESSEL_NAME_EN, KK.ANOTHER_NAME, \n            COALESCE(S1.OFFICE_NAME, KK.VESMAN_CODE) AS VES_MANAGER, KK.SHIP_OWNER_FLAG_NAME, KK.VESSEL_TYPE, \n            KK.AREA_NAME, KK.SHIPYARD, KK.VESSEL_NATIONALITY, KK.TOTAL_LENGTH, KK.WIDE, KK.TYPE_DEEP, \n            KK.BARE_SPACING_DRINKING, KK.SHIP_PORT, KK.TONNAGE, KK.MUTETON, KK.CALCULATELIGHTTON, KK.SPEED, \n            KK.PANAMA_CANAL_TONNAGE, KK.PANAMA_CANAL_NET_TON, KK.HOST_POWER, KK.CONSTRUCTION_DATE, KK.CREATE_YEAR, \n            KK.OPERATION_DATE, KK.RETIRED_DATE, KK.CALL_SIGN, KK.IMO_NO\n            FROM (\n                SELECT ROW_NUMBER() OVER(ORDER BY MB.VESSEL_CODE) AS ROW_NO, MB.VESSEL_CODE, MB.VESSEL_NAME, \n                MB.VESSEL_NAME_EN, MB.ANOTHER_NAME, \n                FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_DATE, '1') AS VESMAN_CODE, \n                COALESCE(mb.ship_owner_flag, (SELECT c.display_value_cn FROM cdm_codedict c WHERE c.code_type = 'CDM_SHIP_WONER_FLAG' AND c.code_value = MB.ship_owner_flag LIMIT 1)) AS SHIP_OWNER_FLAG_NAME, \n                MB.VESSEL_TYPE, \n                COALESCE(MB.AREA, (SELECT C.DISPLAY_VALUE_CN FROM CDM_CODEDICT C WHERE C.CODE_TYPE = 'CDM_NAVIGATING_ZONE' AND C.CODE_VALUE = MB.AREA)) AS AREA_NAME, \n                MB.SHIPYARD, \n                COALESCE(MB.VESSEL_NATIONALITY, (SELECT COUNTRY_NAME FROM CDM_COUNTRY WHERE COUNTRY_CODE = MB.VESSEL_NATIONALITY)) AS VESSEL_NATIONALITY, \n                MB.TOTAL_LENGTH, MB.WIDE, MB.TYPE_DEEP, MB.BARE_SPACING_DRINKING, \n                COALESCE(MB.SHIP_PORT, (SELECT PORT_NAME FROM CDM_PORT WHERE PORT_CODE = MB.SHIP_PORT)) AS SHIP_PORT, \n                MB.TONNAGE, MB.MUTETON, MB.CALCULATELIGHTTON, MB.SPEED, MB.PANAMA_CANAL_TONNAGE, MB.PANAMA_CANAL_NET_TON, \n                MB.HOST_POWER, MB.CONSTRUCTION_DATE, \n                TRUNC(DATE_PART('month', AGE(CURRENT_DATE, MB.CONSTRUCTION_DATE)) / 12) AS CREATE_YEAR, \n                MB.OPERATION_DATE, MB.RETIRED_DATE, MB.CALL_SIGN, MB.IMO_NO\n                FROM VOP_VESSEL MB \n                LEFT JOIN (\n                    SELECT STRING_AGG(V.TEST_CALIBRE, ',' ORDER BY V.VESSEL_ID) AS TEST_CALIBRE, \n                    STRING_AGG(V.FEE_TYPE, ',' ORDER BY V.VESSEL_ID) AS FEE_TYPE, \n                    STRING_AGG(V.FEE_SUBJECT, ',' ORDER BY V.VESSEL_ID) AS FEE_SUBJECT, \n                    STRING_AGG(V.CORPORATE_CALIBRE, ',' ORDER BY V.VESSEL_ID) AS CORPORATE_CALIBRE, \n                    STRING_AGG(V.COMPANY_CALIBRE, ',' ORDER BY V.VESSEL_ID) AS COMPANY_CALIBRE, \n                    V.VESSEL_ID \n                    FROM VOP_VESSEL_STATISTICS_CALIBRE V \n                    GROUP BY V.VESSEL_ID\n                ) VV ON MB.VESSEL_ID = VV.VESSEL_ID \n                WHERE \n                (V_BUSIMAIN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_DATE, '2') = V_BUSIMAIN_CODE) AND \n                (V_VES_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, CURRENT_DATE, '1') = V_VES_CALIBRE) AND \n                (V_VESSEL_CODE IS NULL OR MB.VESSEL_CODE = V_VESSEL_CODE) AND \n                (V_CALL_SIGN IS NULL OR MB.CALL_SIGN = V_CALL_SIGN) AND \n                (V_BUSI_MAINBODY IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_DATE, '2') = V_BUSI_MAINBODY) AND \n                (V_BUSI_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, CURRENT_DATE, '2') = V_BUSI_CALIBRE) AND \n                (V_VESSEL_TYPE_CODE IS NULL OR MB.VESSEL_TYPE_CODE = VESSEL_TYPE_CODE) AND \n                (V_COMPANY_CALIBRE IS NULL OR VV.COMPANY_CALIBRE = V_COMPANY_CALIBRE) AND \n                (V_VESMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_DATE, '1') = V_VESMAN_CODE) AND \n                (V_MANAGER_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, CURRENT_DATE, '3') = V_MANAGER_CALIBRE) AND \n                (V_TRADE_TYPE IS NULL OR MB.TRADE_TYPE = V_TRADE_TYPE) AND \n                (V_TETIRED_FLAG IS NULL OR MB.TETIRED_FLAG = V_TETIRED_FLAG) AND \n                (V_ACCMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_DATE, '4') = V_ACCMAN_CODE) AND \n                (V_ACCOUNT_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, CURRENT_DATE, '4') = V_ACCOUNT_CALIBRE) AND \n                (V_FEE_TYPE IS NULL OR VV.FEE_TYPE = V_FEE_TYPE) AND \n                (V_FEE_SUBJECT IS NULL OR VV.FEE_SUBJECT = V_FEE_SUBJECT) AND \n                (V_SAFEMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_DATE, '5') = V_SAFEMAN_CODE) AND \n                (V_SAFE_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, CURRENT_DATE, '5') = V_SAFE_CALIBRE) AND \n                (V_CORPORATE_CALIBRE IS NULL OR VV.CORPORATE_CALIBRE = V_CORPORATE_CALIBRE) AND \n                (V_TEST_CALIBRE IS NULL OR VV.TEST_CALIBRE = V_TEST_CALIBRE) AND \n                (V_COSTMAN_CODE IS NULL OR FN_GET_VESSEL_MANAGEMENT(MB.VESSEL_ID, CURRENT_DATE, '6') = V_COSTMAN_CODE) AND \n                (V_COST_CALIBRE IS NULL OR FN_GET_VESSEL_MANA_CALIBRE(MB.VESSEL_ID, CURRENT_DATE, '6') = V_COST_CALIBRE)\n            ) KK \n            LEFT JOIN SYS_OFFICE S1 ON S1.OFFICE_CODE = KK.VESMAN_CODE AND COALESCE(S1.IS_DELETE, '0') <> '1'\n        ) A;\n        RETURN IS_CORSUR;\n    EXCEPTION\n        WHEN NO_DATA_FOUND THEN RETURN NULL;\n        WHEN OTHERS THEN RAISE;\n    END; \n$$ LANGUAGE plpgsql;\n"
                    }
                ]
            },
            {
                "case_id": "10",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"10\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"GETDATE\", \"DATEADD\", \"INTERVAL\", \"CURRENT_TIMESTAMP\", \"now\", \"convert\", \"MAX\", \"RTRIM\", \"replace\", \"LENGTH\", \"SUM\", \"@@ERROR\", \"RAISERROR\"]}, \"sql\": \"CREATE PROCEDURE [dbo].[RT_Tang_YW_MainC_InitAwb60Finish] AS /* 声明变量 */ DECLARE @Period60 INT /*60天维期*/ DECLARE @Period180 INT /*180天维期*/ DECLARE @Yw_Op_Date datetime /*当前业维日期*/ DECLARE @Yw_Start_Time datetime /*当前业维开始时间*/ DECLARE @tran_error INT /*用于检测是否存在异常*/ DECLARE @AwbYwDate60 datetime /*被业维日期*/ DECLARE @AwbYwDate180 datetime /*被业维日期*/ /*变量赋值*/ SET @Period60 =- 60 SET @Period180 =- 180 SET @Yw_Start_Time = Getdate( ) SET @tran_error = 0 SELECT @Yw_Op_Date = MAX ( Yw_Op_Date ) FROM Tbl_Yw_Log WHERE OPTRESULT = 'RUN' IF @Yw_Op_Date IS NULL BEGIN SELECT @Yw_Op_Date = Getdate( ) END SET @AwbYwDate60 = DateAdd( DAY,@Period60,@Yw_Op_Date ) SET @AwbYwDate180 = DateAdd( DAY,@Period180,@Yw_Op_Date ) /*定义隔离级别为最低*/ SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY DELETE FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix AS TmpFinishFlag FROM Tbl_Cargo WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix FROM Tbl_Awb_Basic WHERE ( Op_Date < CONVERT ( CHAR ( 10 ),@AwbYwDate60, 121 ) AND Op_Date > CONVERT ( CHAR ( 10 ),@AwbYwDate180, 121 ) ) ) AND FinishFlag != 0 /*Finished*/ AND Flight_Dep = Flight_Dest GROUP BY AwbPrefix, AwbNo, AwbPostfix ) /* 所有已完成运单 Finish: 0 Not Finished; <>0: Finished */ /* 1)60<Op_date<180, FinishFlag>0，并且有dep=dest的代提行段完成 */ INSERT INTO Cargo2YWTemp..Tbl_Awb_Basic_Temp ( AwbPrefix, AwbNo, AwbPostfix, YwTreate ) SELECT DISTINCT AwbPrefix, AwbNo, AwbPostfix, 1 FROM ( SELECT AwbPrefix, AwbNo, AwbPostfix, MIN ( FinishFlag ) AS TmpFinishFlag FROM Tbl_Cargo WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix FROM Tbl_Awb_Basic WHERE ( Op_Date < CONVERT ( CHAR ( 10 ),@AwbYwDate60, 121 ) AND Op_Date > CONVERT ( CHAR ( 10 ),@AwbYwDate180, 121 ) ) ) AND FinishFlag != 0 /*Finished*/ AND Flight_Dep = Flight_Dest GROUP BY AwbPrefix, AwbNo, AwbPostfix ) Tbl_Temp WHERE TmpFinishFlag > 0 SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY /*增加运单基本信息的件数*/ UPDATE Cargo2YWTemp..Tbl_Awb_Basic_Temp SET AwbDate = a.Op_Date, AwbDest = SUBSTRING ( a.routing, len( a.routing ) - 2, 3 ), Piece = a.Piece FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp t, Tbl_Awb_Basic a WHERE a.AwbNo= t.AwbNo AND a.AwbPrefix= t.AwbPrefix AND a.AwbPostfix= t.AwbPostfix SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY /*把运单件数相等并已完成的运单的YwTreate设为可以归档(YwTreate=0)*/ UPDATE Cargo2YWTemp..Tbl_Awb_Basic_Temp SET YwTreate = 0 FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp bt, ( SELECT SUM ( Piece ) AS Piece, AwbPrefix, AwbNo, AwbPostfix FROM ( SELECT c.Piece, c.AwbPrefix, c.AwbNo, c.AwbPostfix FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp t JOIN Tbl_Cargo c ON c.Flight_Dep= t.AwbDest AND c.Flight_Dest= t.AwbDest AND c.AwbNo= t.AwbNo AND c.AwbPrefix= t.AwbPrefix AND c.AwbPostfix= t.AwbPostfix ) b GROUP BY AwbPrefix, AwbNo, AwbPostfix ) a WHERE a.AwbNo= bt.AwbNo AND a.AwbPrefix= bt.AwbPrefix AND a.AwbPostfix= bt.AwbPostfix AND bt.Piece= a.Piece SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Cargo_ChargeCorrection_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY DELETE FROM Cargo2YWTemp..Tbl_Cargo_ChargeCorrection_Temp WHERE CCANo IN ( SELECT DISTINCT AwbNo FROM Tbl_Awb_Basic_Temp ) INSERT INTO Cargo2YWTemp..Tbl_Cargo_ChargeCorrection_Temp ( CCAPrefix, CCANo, CCAPostfix ) SELECT DISTINCT CCAPrefix, CCANo, CCAPostfix FROM Tbl_Cargo_ChargeCorrectionDetail a JOIN Cargo2YWTemp..Tbl_Awb_Basic_Temp t ON a.AwbPrefix = t.AwbPrefix AND a.AwbNo = t.AwbNo AND a.AwbPostfix = t.AwbPostfix SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Cargo_ChargeCorrection_Temp', getdate( ) ) RAISERROR ( N'Tbl_Cargo_ChargeCorrection_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE [dbo].[RT_Tang_YW_MainC_InitAwb60Finish] AS /* 声明变量 */ DECLARE @Period60 INT /*60天维期*/ DECLARE @Period180 INT /*180天维期*/ DECLARE @Yw_Op_Date datetime /*当前业维日期*/ DECLARE @Yw_Start_Time datetime /*当前业维开始时间*/ DECLARE @tran_error INT /*用于检测是否存在异常*/ DECLARE @AwbYwDate60 datetime /*被业维日期*/ DECLARE @AwbYwDate180 datetime /*被业维日期*/ /*变量赋值*/ SET @Period60 =- 60 SET @Period180 =- 180 SET @Yw_Start_Time = Getdate( ) SET @tran_error = 0 SELECT @Yw_Op_Date = MAX ( Yw_Op_Date ) FROM Tbl_Yw_Log WHERE OPTRESULT = 'RUN' IF @Yw_Op_Date IS NULL BEGIN SELECT @Yw_Op_Date = Getdate( ) END SET @AwbYwDate60 = DateAdd( DAY,@Period60,@Yw_Op_Date ) SET @AwbYwDate180 = DateAdd( DAY,@Period180,@Yw_Op_Date ) /*定义隔离级别为最低*/ SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY DELETE FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix AS TmpFinishFlag FROM Tbl_Cargo WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix FROM Tbl_Awb_Basic WHERE ( Op_Date < CONVERT ( CHAR ( 10 ),@AwbYwDate60, 121 ) AND Op_Date > CONVERT ( CHAR ( 10 ),@AwbYwDate180, 121 ) ) ) AND FinishFlag != 0 /*Finished*/ AND Flight_Dep = Flight_Dest GROUP BY AwbPrefix, AwbNo, AwbPostfix ) /* 所有已完成运单 Finish: 0 Not Finished; <>0: Finished */ /* 1)60<Op_date<180, FinishFlag>0，并且有dep=dest的代提行段完成 */ INSERT INTO Cargo2YWTemp..Tbl_Awb_Basic_Temp ( AwbPrefix, AwbNo, AwbPostfix, YwTreate ) SELECT DISTINCT AwbPrefix, AwbNo, AwbPostfix, 1 FROM ( SELECT AwbPrefix, AwbNo, AwbPostfix, MIN ( FinishFlag ) AS TmpFinishFlag FROM Tbl_Cargo WHERE AwbPrefix + RTrim( AwbNo ) + AwbPostfix IN ( SELECT AwbPrefix + RTrim( AwbNo ) + AwbPostfix FROM Tbl_Awb_Basic WHERE ( Op_Date < CONVERT ( CHAR ( 10 ),@AwbYwDate60, 121 ) AND Op_Date > CONVERT ( CHAR ( 10 ),@AwbYwDate180, 121 ) ) ) AND FinishFlag != 0 /*Finished*/ AND Flight_Dep = Flight_Dest GROUP BY AwbPrefix, AwbNo, AwbPostfix ) Tbl_Temp WHERE TmpFinishFlag > 0 SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY /*增加运单基本信息的件数*/ UPDATE Cargo2YWTemp..Tbl_Awb_Basic_Temp SET AwbDate = a.Op_Date, AwbDest = SUBSTRING ( a.routing, len( a.routing ) - 2, 3 ), Piece = a.Piece FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp t, Tbl_Awb_Basic a WHERE a.AwbNo= t.AwbNo AND a.AwbPrefix= t.AwbPrefix AND a.AwbPostfix= t.AwbPostfix SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Awb_Basic_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY /*把运单件数相等并已完成的运单的YwTreate设为可以归档(YwTreate=0)*/ UPDATE Cargo2YWTemp..Tbl_Awb_Basic_Temp SET YwTreate = 0 FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp bt, ( SELECT SUM ( Piece ) AS Piece, AwbPrefix, AwbNo, AwbPostfix FROM ( SELECT c.Piece, c.AwbPrefix, c.AwbNo, c.AwbPostfix FROM Cargo2YWTemp..Tbl_Awb_Basic_Temp t JOIN Tbl_Cargo c ON c.Flight_Dep= t.AwbDest AND c.Flight_Dest= t.AwbDest AND c.AwbNo= t.AwbNo AND c.AwbPrefix= t.AwbPrefix AND c.AwbPostfix= t.AwbPostfix ) b GROUP BY AwbPrefix, AwbNo, AwbPostfix ) a WHERE a.AwbNo= bt.AwbNo AND a.AwbPrefix= bt.AwbPrefix AND a.AwbPostfix= bt.AwbPostfix AND bt.Piece= a.Piece SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Awb_Basic_Temp', getdate( ) ) RAISERROR ( N'Tbl_Awb_Basic_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN /*Tbl_Cargo_ChargeCorrection_Temp*/ BEGIN TRAN SET @tran_error = 0 BEGIN TRY DELETE FROM Cargo2YWTemp..Tbl_Cargo_ChargeCorrection_Temp WHERE CCANo IN ( SELECT DISTINCT AwbNo FROM Tbl_Awb_Basic_Temp ) INSERT INTO Cargo2YWTemp..Tbl_Cargo_ChargeCorrection_Temp ( CCAPrefix, CCANo, CCAPostfix ) SELECT DISTINCT CCAPrefix, CCANo, CCAPostfix FROM Tbl_Cargo_ChargeCorrectionDetail a JOIN Cargo2YWTemp..Tbl_Awb_Basic_Temp t ON a.AwbPrefix = t.AwbPrefix AND a.AwbNo = t.AwbNo AND a.AwbPostfix = t.AwbPostfix SET @tran_error = @tran_error + @@error END TRY BEGIN CATCH /*执行出错，回滚事务*/ ROLLBACK TRAN SET @tran_error = @tran_error + 1; /* 记录异常 */ INSERT INTO TBL_SP_ErrLog ( ErrTable, ErrDate ) VALUES ( 'Tbl_Cargo_ChargeCorrection_Temp', getdate( ) ) RAISERROR ( N'Tbl_Cargo_ChargeCorrection_Temp 出现异常', 17, 1 ); END CATCH IF ( @tran_error = 0 ) /*没有异常，提交事务*/ COMMIT TRAN\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE RT_Tang_YW_MainC_InitAwb60Finish() \nLANGUAGE plpgsql AS $$\nDECLARE\n    Period60 INTEGER; --60天维期\n    Period180 INTEGER; --180天维期\n    Yw_Op_Date TIMESTAMP; --当前业维日期\n    Yw_Start_Time TIMESTAMP; --当前业维开始时间\n    tran_error INTEGER; --用于检测是否存在异常\n    AwbYwDate60 TIMESTAMP; --被业维日期\n    AwbYwDate180 TIMESTAMP; --被业维日期\nBEGIN\n    --变量赋值\n    Period60 := -60;\n    Period180 := -180;\n    Yw_Start_Time := NOW();\n    tran_error := 0;\n    SELECT MAX(Yw_Op_Date) INTO Yw_Op_Date FROM Tbl_Yw_Log WHERE OPTRESULT = 'RUN';\n    IF Yw_Op_Date IS NULL THEN\n        SELECT NOW() INTO Yw_Op_Date;\n    END IF;\n    AwbYwDate60 := Yw_Op_Date + INTERVAL '1 day' * Period60;\n    AwbYwDate180 := Yw_Op_Date + INTERVAL '1 day' * Period180;\n\n    --定义隔离级别为最低\n    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\n    --Tbl_Awb_Basic_Temp\n    BEGIN\n        tran_error := 0;\n        BEGIN\n            DELETE FROM Cargo2YWTemp.Tbl_Awb_Basic_Temp\n            WHERE AwbPrefix || TRIM(AwbNo) || AwbPostfix IN (\n                SELECT AwbPrefix || TRIM(AwbNo) || AwbPostfix\n                FROM Tbl_Cargo\n                WHERE AwbPrefix || TRIM(AwbNo) || AwbPostfix IN (\n                    SELECT AwbPrefix || TRIM(AwbNo) || AwbPostfix\n                    FROM Tbl_Awb_Basic\n                    WHERE Op_Date::DATE < AwbYwDate60::DATE AND Op_Date::DATE > AwbYwDate180::DATE\n                )\n                AND FinishFlag != 0\n                AND Flight_Dep = Flight_Dest\n                GROUP BY AwbPrefix, AwbNo, AwbPostfix\n            );\n\n            INSERT INTO Cargo2YWTemp.Tbl_Awb_Basic_Temp (AwbPrefix, AwbNo, AwbPostfix, YwTreate)\n            SELECT DISTINCT AwbPrefix, AwbNo, AwbPostfix, 1\n            FROM (\n                SELECT AwbPrefix, AwbNo, AwbPostfix, MIN(FinishFlag) AS TmpFinishFlag\n                FROM Tbl_Cargo\n                WHERE AwbPrefix || TRIM(AwbNo) || AwbPostfix IN (\n                    SELECT AwbPrefix || TRIM(AwbNo) || AwbPostfix\n                    FROM Tbl_Awb_Basic\n                    WHERE Op_Date::DATE < AwbYwDate60::DATE AND Op_Date::DATE > AwbYwDate180::DATE\n                )\n                AND FinishFlag != 0\n                AND Flight_Dep = Flight_Dest\n                GROUP BY AwbPrefix, AwbNo, AwbPostfix\n            ) AS Tbl_Temp\n            WHERE TmpFinishFlag > 0;\n\n            tran_error := tran_error + 0;\n        EXCEPTION\n            WHEN OTHERS THEN\n                ROLLBACK;\n                tran_error := tran_error + 1;\n                INSERT INTO TBL_SP_ErrLog (ErrTable, ErrDate) VALUES ('Tbl_Awb_Basic_Temp', NOW());\n                RAISE NOTICE 'Tbl_Awb_Basic_Temp 出现异常';\n        END;\n\n        IF tran_error = 0 THEN\n            COMMIT;\n        END IF;\n    END;\n\n    --更新件数\n    BEGIN\n        tran_error := 0;\n        BEGIN\n            UPDATE Cargo2YWTemp.Tbl_Awb_Basic_Temp\n            SET AwbDate = a.Op_Date,\n                AwbDest = SUBSTRING(a.routing, LENGTH(a.routing) - 2, 3),\n                Piece = a.Piece\n            FROM Tbl_Awb_Basic a\n            WHERE a.AwbNo = Cargo2YWTemp.Tbl_Awb_Basic_Temp.AwbNo\n              AND a.AwbPrefix = Cargo2YWTemp.Tbl_Awb_Basic_Temp.AwbPrefix\n              AND a.AwbPostfix = Cargo2YWTemp.Tbl_Awb_Basic_Temp.AwbPostfix;\n\n            tran_error := tran_error + 0;\n        EXCEPTION\n            WHEN OTHERS THEN\n                ROLLBACK;\n                tran_error := tran_error + 1;\n                INSERT INTO TBL_SP_ErrLog (ErrTable, ErrDate) VALUES ('Tbl_Awb_Basic_Temp', NOW());\n                RAISE NOTICE 'Tbl_Awb_Basic_Temp 出现异常';\n        END;\n\n        IF tran_error = 0 THEN\n            COMMIT;\n        END IF;\n    END;\n\n    --运单归档\n    BEGIN\n        tran_error := 0;\n        BEGIN\n            UPDATE Cargo2YWTemp.Tbl_Awb_Basic_Temp\n            SET YwTreate = 0\n            FROM (SELECT SUM(Piece) AS SumPiece, AwbPrefix, AwbNo, AwbPostfix\n                  FROM (SELECT c.Piece, c.AwbPrefix, c.AwbNo, c.AwbPostfix\n                        FROM Cargo2YWTemp.Tbl_Awb_Basic_Temp t\n                        JOIN Tbl_Cargo c\n                        ON c.Flight_Dep = t.AwbDest\n                        AND c.Flight_Dest = t.AwbDest\n                        AND c.AwbNo = t.AwbNo\n                        AND c.AwbPrefix = t.AwbPrefix\n                        AND c.AwbPostfix = t.AwbPostfix) sub\n                  GROUP BY AwbPrefix, AwbNo, AwbPostfix) agg\n            WHERE agg.AwbNo = Cargo2YWTemp.Tbl_Awb_Basic_Temp.AwbNo\n              AND agg.AwbPrefix = Cargo2YWTemp.Tbl_Awb_Basic_Temp.AwbPrefix\n              AND agg.AwbPostfix = Cargo2YWTemp.Tbl_Awb_Basic_Temp.AwbPostfix\n              AND Cargo2YWTemp.Tbl_Awb_Basic_Temp.Piece = agg.SumPiece;\n\n            tran_error := tran_error + 0;\n        EXCEPTION\n            WHEN OTHERS THEN\n                ROLLBACK;\n                tran_error := tran_error + 1;\n                INSERT INTO TBL_SP_ErrLog (ErrTable, ErrDate) VALUES ('Tbl_Awb_Basic_Temp', NOW());\n                RAISE NOTICE 'Tbl_Awb_Basic_Temp 出现异常';\n        END;\n\n        IF tran_error = 0 THEN\n            COMMIT;\n        END IF;\n    END;\n\n    --更新收费修正表\n    BEGIN\n        tran_error := 0;\n        BEGIN\n            DELETE FROM Cargo2YWTemp.Tbl_Cargo_ChargeCorrection_Temp\n            WHERE CCANo IN (\n                SELECT DISTINCT AwbNo FROM Tbl_Awb_Basic_Temp\n            );\n\n            INSERT INTO Cargo2YWTemp.Tbl_Cargo_ChargeCorrection_Temp (CCAPrefix, CCANo, CCAPostfix)\n            SELECT DISTINCT CCAPrefix, CCANo, CCAPostfix\n            FROM Tbl_Cargo_ChargeCorrectionDetail a\n            JOIN Cargo2YWTemp.Tbl_Awb_Basic_Temp t\n            ON a.AwbPrefix = t.AwbPrefix\n            AND a.AwbNo = t.AwbNo\n            AND a.AwbPostfix = t.AwbPostfix;\n\n            tran_error := tran_error + 0;\n        EXCEPTION\n            WHEN OTHERS THEN\n                ROLLBACK;\n                tran_error := tran_error + 1;\n                INSERT INTO TBL_SP_ErrLog (ErrTable, ErrDate) VALUES ('Tbl_Cargo_ChargeCorrection_Temp', NOW());\n                RAISE NOTICE 'Tbl_Cargo_ChargeCorrection_Temp 出现异常';\n        END;\n\n        IF tran_error = 0 THEN\n            COMMIT;\n        END IF;\n    END;\nEND;\n$$;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE PROCEDURE RT_Tang_YW_MainC_InitAwb60Finish()\nAS\nBEGIN\n  -- Declare variables\n  DECLARE Period60 INT DEFAULT -60;\n  DECLARE Period180 INT DEFAULT -180;\n  DECLARE Yw_Op_Date timestamp;\n  DECLARE Yw_Start_Time timestamp DEFAULT now();\n  DECLARE tran_error INT DEFAULT 0;\n  DECLARE AwbYwDate60 timestamp;\n  DECLARE AwbYwDate180 timestamp;\n\n  -- Assign variables\n  SELECT MAX(Yw_Op_Date) INTO Yw_Op_Date\n  FROM Tbl_Yw_Log\n  WHERE OPTRESULT = 'RUN';\n\n  IF Yw_Op_Date IS NULL THEN\n    SELECT now() INTO Yw_Op_Date;\n  END IF;\n\n  SET AwbYwDate60 = Yw_Op_Date + INTERVAL '60 day';\n  SET AwbYwDate180 = Yw_Op_Date + INTERVAL '180 day';\n\n  -- Set isolation level and start transaction\n  SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n  START TRANSACTION;\n\n  BEGIN\n    SET tran_error = 0;\n\n    -- Delete from Tbl_Awb_Basic_Temp\n    BEGIN\n      DELETE FROM Cargo2YWTemp.Tbl_Awb_Basic_Temp\n      WHERE CONCAT(AwbPrefix, TRIM(AwbNo), AwbPostfix) IN (\n        SELECT CONCAT(AwbPrefix, TRIM(AwbNo), AwbPostfix)\n        FROM Tbl_Cargo\n        WHERE CONCAT(AwbPrefix, TRIM(AwbNo), AwbPostfix) IN (\n          SELECT CONCAT(AwbPrefix, TRIM(AwbNo), AwbPostfix)\n          FROM Tbl_Awb_Basic\n          WHERE Op_Date < TO_CHAR(AwbYwDate60, 'YYYY-MM-DD')\n            AND Op_Date > TO_CHAR(AwbYwDate180, 'YYYY-MM-DD')\n        )\n          AND FinishFlag != 0\n          AND Flight_Dep = Flight_Dest\n        GROUP BY AwbPrefix, AwbNo, AwbPostfix\n      );\n\n      -- Insert into Tbl_Awb_Basic_Temp\n      INSERT INTO Cargo2YWTemp.Tbl_Awb_Basic_Temp (AwbPrefix, AwbNo, AwbPostfix, YwTreate)\n      SELECT DISTINCT AwbPrefix, AwbNo, AwbPostfix, 1\n      FROM (\n        SELECT AwbPrefix, AwbNo, AwbPostfix, MIN(FinishFlag) AS TmpFinishFlag\n        FROM Tbl_Cargo\n        WHERE CONCAT(AwbPrefix, TRIM(AwbNo), AwbPostfix) IN (\n          SELECT CONCAT(AwbPrefix, TRIM(AwbNo), AwbPostfix)\n          FROM Tbl_Awb_Basic\n          WHERE Op_Date < TO_CHAR(AwbYwDate60, 'YYYY-MM-DD')\n            AND Op_Date > TO_CHAR(AwbYwDate180, 'YYYY-MM-DD')\n        )\n          AND FinishFlag != 0\n          AND Flight_Dep = Flight_Dest\n        GROUP BY AwbPrefix, AwbNo, AwbPostfix\n      ) Tbl_Temp\n      WHERE TmpFinishFlag > 0;\n\n      tran_error = tran_error + GET_DIAGNOSTICS EXCEPTION_COUNT;\n    EXCEPTION WHEN OTHERS THEN\n      ROLLBACK;\n      tran_error = tran_error + 1;\n      INSERT INTO TBL_SP_ErrLog (ErrTable, ErrDate) VALUES ('Tbl_Awb_Basic_Temp', now());\n      RAISE;\n    END;\n\n    IF tran_error = 0 THEN\n      COMMIT;\n    END IF;\n\n    -- Update Tbl_Awb_Basic_Temp\n    BEGIN\n      UPDATE Cargo2YWTemp.Tbl_Awb_Basic_Temp\n      SET AwbDate = a.Op_Date,\n          AwbDest = SUBSTRING(a.routing FROM LENGTH(a.routing) - 2 FOR 3),\n          Piece = a.Piece\n      FROM Tbl_Awb_Basic a\n      WHERE a.AwbNo = Tbl_Awb_Basic_Temp.AwbNo\n        AND a.AwbPrefix = Tbl_Awb_Basic_Temp.AwbPrefix\n        AND a.AwbPostfix = Tbl_Awb_Basic_Temp.AwbPostfix;\n\n      tran_error = tran_error + GET_DIAGNOSTICS EXCEPTION_COUNT;\n    EXCEPTION WHEN OTHERS THEN\n      ROLLBACK;\n      tran_error = tran_error + 1;\n      INSERT INTO TBL_SP_ErrLog (ErrTable, ErrDate) VALUES ('Tbl_Awb_Basic_Temp', now());\n      RAISE;\n    END;\n\n    IF tran_error = 0 THEN\n      COMMIT;\n    END IF;\n\n    -- Update Tbl_Awb_Basic_Temp (YwTreate)\n    BEGIN\n      UPDATE Cargo2YWTemp.Tbl_Awb_Basic_Temp AS bt\n      SET YwTreate = 0\n      FROM (\n        SELECT SUM(Piece) AS Piece, AwbPrefix, AwbNo, AwbPostfix\n        FROM (\n          SELECT c.Piece, c.AwbPrefix, c.AwbNo, c.AwbPostfix\n          FROM Cargo2YWTemp.Tbl_Awb_Basic_Temp t\n          JOIN Tbl_Cargo c\n          ON c.Flight_Dep = t.AwbDest\n            AND c.Flight_Dest = t.AwbDest\n            AND c.AwbNo = t.AwbNo\n            AND c.AwbPrefix = t.AwbPrefix\n            AND c.AwbPostfix = t.AwbPostfix\n        ) b\n        GROUP BY AwbPrefix, AwbNo, AwbPostfix\n      ) a\n      WHERE a.AwbNo = bt.AwbNo\n        AND a.AwbPrefix = bt.AwbPrefix\n        AND a.AwbPostfix = bt.AwbPostfix\n        AND bt.Piece = a.Piece;\n\n      tran_error = tran_error + GET_DIAGNOSTICS EXCEPTION_COUNT;\n    EXCEPTION WHEN OTHERS THEN\n      ROLLBACK;\n      tran_error = tran_error + 1;\n      INSERT INTO TBL_SP_ErrLog (ErrTable, ErrDate) VALUES ('Tbl_Awb_Basic_Temp', now());\n      RAISE;\n    END;\n\n    IF tran_error = 0 THEN\n      COMMIT;\n    END IF;\n\n    -- Delete and Insert into Tbl_Cargo_ChargeCorrection_Temp\n    BEGIN\n      DELETE FROM Cargo2YWTemp.Tbl_Cargo_ChargeCorrection_Temp\n      WHERE CCANo IN (\n        SELECT DISTINCT AwbNo FROM Tbl_Awb_Basic_Temp\n      );\n\n      INSERT INTO Cargo2YWTemp.Tbl_Cargo_ChargeCorrection_Temp (CCAPrefix, CCANo, CCAPostfix)\n      SELECT DISTINCT CCAPrefix, CCANo, CCAPostfix\n      FROM Tbl_Cargo_ChargeCorrectionDetail a\n      JOIN Cargo2YWTemp.Tbl_Awb_Basic_Temp t\n      ON a.AwbPrefix = t.AwbPrefix\n        AND a.AwbNo = t.AwbNo\n        AND a.AwbPostfix = t.AwbPostfix;\n\n      tran_error = tran_error + GET_DIAGNOSTICS EXCEPTION_COUNT;\n    EXCEPTION WHEN OTHERS THEN\n      ROLLBACK;\n      tran_error = tran_error + 1;\n      INSERT INTO TBL_SP_ErrLog (ErrTable, ErrDate) VALUES ('Tbl_Cargo_ChargeCorrection_Temp', now());\n      RAISE;\n    END;\n\n    IF tran_error = 0 THEN\n      COMMIT;\n    END IF;\n  END;\nEND;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE PROCEDURE RT_Tang_YW_MainC_InitAwb60Finish() \nAS\nBEGIN\n  /* 声明变量 */\n  DECLARE Period60 INT; /* 60天维期 */\n  DECLARE Period180 INT; /* 180天维期 */\n  DECLARE Yw_Op_Date TIMESTAMP; /* 当前业维日期 */\n  DECLARE Yw_Start_Time TIMESTAMP; /* 当前业维开始时间 */\n  DECLARE tran_error INT; /* 用于检测是否存在异常 */\n  DECLARE AwbYwDate60 TIMESTAMP; /* 被业维日期 */\n  DECLARE AwbYwDate180 TIMESTAMP; /* 被业维日期 */\n  \n  /* 变量赋值 */\n  Period60 := -60;\n  Period180 := -180;\n  Yw_Start_Time := CURRENT_TIMESTAMP;\n  tran_error := 0;\n  SELECT MAX(Yw_Op_Date) INTO Yw_Op_Date FROM Tbl_Yw_Log WHERE OPTRESULT = 'RUN';\n  IF Yw_Op_Date IS NULL THEN\n     Yw_Op_Date := CURRENT_TIMESTAMP;\n  END IF;\n  \n  AwbYwDate60 := DATEADD(DAY, Period60, Yw_Op_Date);\n  AwbYwDate180 := DATEADD(DAY, Period180, Yw_Op_Date);\n\n  /* 定义隔离级别为最低 */\n  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\n  /* Tbl_Awb_Basic_Temp */\n  BEGIN\n    tran_error := 0;\n    BEGIN\n      DELETE FROM Cargo2YWTemp.Tbl_Awb_Basic_Temp\n      WHERE AwbPrefix || TRIM(AwbNo) || AwbPostfix IN (\n        SELECT AwbPrefix || TRIM(AwbNo) || AwbPostfix AS TmpFinishFlag\n        FROM Tbl_Cargo\n        WHERE AwbPrefix || TRIM(AwbNo) || AwbPostfix IN (\n          SELECT AwbPrefix || TRIM(AwbNo) || AwbPostfix\n          FROM Tbl_Awb_Basic\n          WHERE Op_Date < TO_CHAR(AwbYwDate60, 'YYYY-MM-DD')\n            AND Op_Date > TO_CHAR(AwbYwDate180, 'YYYY-MM-DD')\n        )\n        AND FinishFlag != 0 /* Finished */\n        AND Flight_Dep = Flight_Dest\n        GROUP BY AwbPrefix, AwbNo, AwbPostfix\n      );\n\n      INSERT INTO Cargo2YWTemp.Tbl_Awb_Basic_Temp (AwbPrefix, AwbNo, AwbPostfix, YwTreate)\n      SELECT DISTINCT AwbPrefix, AwbNo, AwbPostfix, 1\n      FROM (\n        SELECT AwbPrefix, AwbNo, AwbPostfix, MIN(FinishFlag) AS TmpFinishFlag\n        FROM Tbl_Cargo\n        WHERE AwbPrefix || TRIM(AwbNo) || AwbPostfix IN (\n          SELECT AwbPrefix || TRIM(AwbNo) || AwbPostfix\n          FROM Tbl_Awb_Basic\n          WHERE Op_Date < TO_CHAR(AwbYwDate60, 'YYYY-MM-DD')\n            AND Op_Date > TO_CHAR(AwbYwDate180, 'YYYY-MM-DD')\n        )\n        AND FinishFlag != 0 /* Finished */\n        AND Flight_Dep = Flight_Dest\n        GROUP BY AwbPrefix, AwbNo, AwbPostfix\n      ) Tbl_Temp\n      WHERE TmpFinishFlag > 0;\n\n    EXCEPTION WHEN OTHERS THEN\n      RAISE EXCEPTION 'Tbl_Awb_Basic_Temp 出现异常';\n      RETURN;\n    END;\n\n  END;\n\n  BEGIN\n    tran_error := 0;\n    BEGIN\n      UPDATE Cargo2YWTemp.Tbl_Awb_Basic_Temp t\n      SET AwbDate = a.Op_Date,\n          AwbDest = SUBSTR(a.routing, LENGTH(a.routing) - 2, 3),\n          Piece = a.Piece\n      FROM Tbl_Awb_Basic a\n      WHERE a.AwbNo = t.AwbNo\n        AND a.AwbPrefix = t.AwbPrefix\n        AND a.AwbPostfix = t.AwbPostfix;\n\n    EXCEPTION WHEN OTHERS THEN\n      RAISE EXCEPTION 'Tbl_Awb_Basic_Temp 出现异常';\n      RETURN;\n    END;\n\n  END;\n\n  BEGIN\n    tran_error := 0;\n    BEGIN\n      UPDATE Cargo2YWTemp.Tbl_Awb_Basic_Temp bt\n      SET YwTreate = 0\n      FROM (\n        SELECT SUM(Piece) AS Piece, AwbPrefix, AwbNo, AwbPostfix\n        FROM (\n          SELECT c.Piece, c.AwbPrefix, c.AwbNo, c.AwbPostfix\n          FROM Cargo2YWTemp.Tbl_Awb_Basic_Temp t\n          JOIN Tbl_Cargo c\n          ON c.Flight_Dep = t.AwbDest\n            AND c.Flight_Dest = t.AwbDest\n            AND c.AwbNo = t.AwbNo\n            AND c.AwbPrefix = t.AwbPrefix\n            AND c.AwbPostfix = t.AwbPostfix\n        ) b\n        GROUP BY AwbPrefix, AwbNo, AwbPostfix\n      ) a\n      WHERE a.AwbNo = bt.AwbNo\n        AND a.AwbPrefix = bt.AwbPrefix\n        AND a.AwbPostfix = bt.AwbPostfix\n        AND bt.Piece = a.Piece;\n\n    EXCEPTION WHEN OTHERS THEN\n      RAISE EXCEPTION 'Tbl_Awb_Basic_Temp 出现异常';\n      RETURN;\n    END;\n\n  END;\n\n  BEGIN\n    tran_error := 0;\n    BEGIN\n      DELETE FROM Cargo2YWTemp.Tbl_Cargo_ChargeCorrection_Temp\n      WHERE CCANo IN (SELECT DISTINCT AwbNo FROM Tbl_Awb_Basic_Temp);\n\n      INSERT INTO Cargo2YWTemp.Tbl_Cargo_ChargeCorrection_Temp (CCAPrefix, CCANo, CCAPostfix)\n      SELECT DISTINCT CCAPrefix, CCANo, CCAPostfix\n      FROM Tbl_Cargo_ChargeCorrectionDetail a\n      JOIN Cargo2YWTemp.Tbl_Awb_Basic_Temp t\n      ON a.AwbPrefix = t.AwbPrefix\n        AND a.AwbNo = t.AwbNo\n        AND a.AwbPostfix = t.AwbPostfix;\n\n    EXCEPTION WHEN OTHERS THEN\n      RAISE EXCEPTION 'Tbl_Cargo_ChargeCorrection_Temp 出现异常';\n      RETURN;\n    END;\n\n  END;\n\nEND;"
                    }
                ]
            },
            {
                "case_id": "11",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"11\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"datetime\", \"BEGIN\", \"GETDATE\", \"NOW\", \"CURRENT_TIMESTAMP\", \"DECLARE\", \"CURSOR\", \"BEGIN TRY\", \"CURRENT_USER\", \"SESSION_USER\", \"ERROR_MESSAGE\", \"CONCAT\", \"PRINT\", \"CAST\", \"RAISERROR\"]}, \"sql\": \"CREATE PROCEDURE SP_BulkInventoryUpdate @WarehouseID INT, @AdjustmentType NVARCHAR(50), @AdjustmentDate DATETIME = NULL AS BEGIN SET NOCOUNT ON; IF @AdjustmentDate IS NULL SET @AdjustmentDate = GETDATE(); DECLARE @ProductID INT, @CurrentQty INT, @AdjustmentQty INT, @NewQty INT; DECLARE @TotalProcessed INT = 0, @ErrorCount INT = 0; DECLARE @ErrorMessage NVARCHAR(4000); DECLARE inventory_cursor CURSOR FOR SELECT ProductID, QuantityOnHand, CASE @AdjustmentType WHEN 'RECOUNT' THEN PhysicalCount - QuantityOnHand WHEN 'DAMAGE' THEN -DamagedQuantity WHEN 'RETURN' THEN ReturnedQuantity ELSE 0 END AS AdjustmentQty FROM InventoryStaging WHERE WarehouseID = @WarehouseID AND Status = 'PENDING' ORDER BY ProductID; BEGIN TRANSACTION; BEGIN TRY OPEN inventory_cursor; FETCH NEXT FROM inventory_cursor INTO @ProductID, @CurrentQty, @AdjustmentQty; WHILE @@FETCH_STATUS = 0 BEGIN BEGIN TRY SET @NewQty = @CurrentQty + @AdjustmentQty; IF EXISTS (SELECT 1 FROM Inventory WHERE ProductID = @ProductID AND WarehouseID = @WarehouseID) UPDATE Inventory SET QuantityOnHand = @NewQty, LastAdjustmentDate = @AdjustmentDate, LastAdjustmentType = @AdjustmentType WHERE ProductID = @ProductID AND WarehouseID = @WarehouseID; ELSE INSERT INTO Inventory (ProductID, WarehouseID, QuantityOnHand, LastAdjustmentDate, LastAdjustmentType) VALUES (@ProductID, @WarehouseID, CASE WHEN @NewQty < 0 THEN 0 ELSE @NewQty END, @AdjustmentDate, @AdjustmentType); INSERT INTO InventoryAuditLog (ProductID, WarehouseID, AdjustmentDate, AdjustmentType, OldQuantity, AdjustmentQuantity, NewQuantity, CreatedBy) VALUES (@ProductID, @WarehouseID, @AdjustmentDate, @AdjustmentType, @CurrentQty, @AdjustmentQty, @NewQty, SUSER_SNAME()); SET @TotalProcessed = @TotalProcessed + 1; END TRY BEGIN CATCH SET @ErrorCount = @ErrorCount + 1; INSERT INTO ErrorLog (ErrorDate, ErrorMessage, ProductID) VALUES (GETDATE(), 'Inventory update failed: ' + ERROR_MESSAGE(), @ProductID); END CATCH; FETCH NEXT FROM inventory_cursor INTO @ProductID, @CurrentQty, @AdjustmentQty; END; CLOSE inventory_cursor; DEALLOCATE inventory_cursor; UPDATE InventoryStaging SET Status = 'PROCESSED', ProcessedDate = GETDATE() WHERE WarehouseID = @WarehouseID AND Status = 'PENDING'; COMMIT TRANSACTION; PRINT 'Bulk inventory update completed. Processed: ' + CAST(@TotalProcessed AS NVARCHAR(10)) + ', Errors: ' + CAST(@ErrorCount AS NVARCHAR(10)); END TRY BEGIN CATCH SET @ErrorMessage = ERROR_MESSAGE(); ROLLBACK TRANSACTION; IF CURSOR_STATUS('global', 'inventory_cursor') >= 0 BEGIN CLOSE inventory_cursor; DEALLOCATE inventory_cursor; END; RAISERROR('Bulk inventory update failed: %s', 16, 1, @ErrorMessage); END CATCH; END;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE SP_BulkInventoryUpdate @WarehouseID INT, @AdjustmentType NVARCHAR(50), @AdjustmentDate DATETIME = NULL AS BEGIN SET NOCOUNT ON; IF @AdjustmentDate IS NULL SET @AdjustmentDate = GETDATE(); DECLARE @ProductID INT, @CurrentQty INT, @AdjustmentQty INT, @NewQty INT; DECLARE @TotalProcessed INT = 0, @ErrorCount INT = 0; DECLARE @ErrorMessage NVARCHAR(4000); DECLARE inventory_cursor CURSOR FOR SELECT ProductID, QuantityOnHand, CASE @AdjustmentType WHEN 'RECOUNT' THEN PhysicalCount - QuantityOnHand WHEN 'DAMAGE' THEN -DamagedQuantity WHEN 'RETURN' THEN ReturnedQuantity ELSE 0 END AS AdjustmentQty FROM InventoryStaging WHERE WarehouseID = @WarehouseID AND Status = 'PENDING' ORDER BY ProductID; BEGIN TRANSACTION; BEGIN TRY OPEN inventory_cursor; FETCH NEXT FROM inventory_cursor INTO @ProductID, @CurrentQty, @AdjustmentQty; WHILE @@FETCH_STATUS = 0 BEGIN BEGIN TRY SET @NewQty = @CurrentQty + @AdjustmentQty; IF EXISTS (SELECT 1 FROM Inventory WHERE ProductID = @ProductID AND WarehouseID = @WarehouseID) UPDATE Inventory SET QuantityOnHand = @NewQty, LastAdjustmentDate = @AdjustmentDate, LastAdjustmentType = @AdjustmentType WHERE ProductID = @ProductID AND WarehouseID = @WarehouseID; ELSE INSERT INTO Inventory (ProductID, WarehouseID, QuantityOnHand, LastAdjustmentDate, LastAdjustmentType) VALUES (@ProductID, @WarehouseID, CASE WHEN @NewQty < 0 THEN 0 ELSE @NewQty END, @AdjustmentDate, @AdjustmentType); INSERT INTO InventoryAuditLog (ProductID, WarehouseID, AdjustmentDate, AdjustmentType, OldQuantity, AdjustmentQuantity, NewQuantity, CreatedBy) VALUES (@ProductID, @WarehouseID, @AdjustmentDate, @AdjustmentType, @CurrentQty, @AdjustmentQty, @NewQty, SUSER_SNAME()); SET @TotalProcessed = @TotalProcessed + 1; END TRY BEGIN CATCH SET @ErrorCount = @ErrorCount + 1; INSERT INTO ErrorLog (ErrorDate, ErrorMessage, ProductID) VALUES (GETDATE(), 'Inventory update failed: ' + ERROR_MESSAGE(), @ProductID); END CATCH; FETCH NEXT FROM inventory_cursor INTO @ProductID, @CurrentQty, @AdjustmentQty; END; CLOSE inventory_cursor; DEALLOCATE inventory_cursor; UPDATE InventoryStaging SET Status = 'PROCESSED', ProcessedDate = GETDATE() WHERE WarehouseID = @WarehouseID AND Status = 'PENDING'; COMMIT TRANSACTION; PRINT 'Bulk inventory update completed. Processed: ' + CAST(@TotalProcessed AS NVARCHAR(10)) + ', Errors: ' + CAST(@ErrorCount AS NVARCHAR(10)); END TRY BEGIN CATCH SET @ErrorMessage = ERROR_MESSAGE(); ROLLBACK TRANSACTION; IF CURSOR_STATUS('global', 'inventory_cursor') >= 0 BEGIN CLOSE inventory_cursor; DEALLOCATE inventory_cursor; END; RAISERROR('Bulk inventory update failed: %s', 16, 1, @ErrorMessage); END CATCH; END;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_BulkInventoryUpdate (IN WarehouseID INT, IN AdjustmentType VARCHAR(50), IN AdjustmentDate TIMESTAMP DEFAULT NULL) LANGUAGE plpgsql AS $$ \nDECLARE \n  ProductID INT; \n  CurrentQty INT; \n  AdjustmentQty INT; \n  NewQty INT; \n  TotalProcessed INT DEFAULT 0; \n  ErrorCount INT DEFAULT 0; \n  ErrorMessage TEXT; \n  inventory_cursor REFCURSOR; \nBEGIN \n  IF AdjustmentDate IS NULL THEN \n    AdjustmentDate := CURRENT_TIMESTAMP; \n  END IF; \n\n  BEGIN \n    OPEN inventory_cursor FOR \n      SELECT ProductID, QuantityOnHand, \n        CASE AdjustmentType \n          WHEN 'RECOUNT' THEN PhysicalCount - QuantityOnHand \n          WHEN 'DAMAGE' THEN -DamagedQuantity \n          WHEN 'RETURN' THEN ReturnedQuantity \n          ELSE 0 \n        END AS AdjustmentQty \n      FROM InventoryStaging \n      WHERE WarehouseID = WarehouseID AND Status = 'PENDING' \n      ORDER BY ProductID; \n\n    LOOP \n      FETCH inventory_cursor INTO ProductID, CurrentQty, AdjustmentQty; \n      EXIT WHEN NOT FOUND; \n\n      BEGIN \n        NewQty := CurrentQty + AdjustmentQty; \n        IF EXISTS (SELECT 1 FROM Inventory WHERE ProductID = ProductID AND WarehouseID = WarehouseID) THEN \n          UPDATE Inventory \n          SET QuantityOnHand = NewQty, \n              LastAdjustmentDate = AdjustmentDate, \n              LastAdjustmentType = AdjustmentType \n          WHERE ProductID = ProductID AND WarehouseID = WarehouseID; \n        ELSE \n          INSERT INTO Inventory (ProductID, WarehouseID, QuantityOnHand, LastAdjustmentDate, LastAdjustmentType) \n          VALUES (ProductID, WarehouseID, \n                  CASE WHEN NewQty < 0 THEN 0 ELSE NewQty END, \n                  AdjustmentDate, AdjustmentType); \n        END IF; \n\n        INSERT INTO InventoryAuditLog (ProductID, WarehouseID, AdjustmentDate, AdjustmentType, OldQuantity, AdjustmentQuantity, NewQuantity, CreatedBy) \n        VALUES (ProductID, WarehouseID, AdjustmentDate, AdjustmentType, CurrentQty, AdjustmentQty, NewQty, SESSION_USER); \n        TotalProcessed := TotalProcessed + 1; \n      EXCEPTION WHEN OTHERS THEN \n        ErrorCount := ErrorCount + 1; \n        INSERT INTO ErrorLog (ErrorDate, ErrorMessage, ProductID) \n        VALUES (CURRENT_TIMESTAMP, 'Inventory update failed: ' || SQLERRM, ProductID); \n      END; \n    END LOOP; \n\n    UPDATE InventoryStaging \n    SET Status = 'PROCESSED', ProcessedDate = CURRENT_TIMESTAMP \n    WHERE WarehouseID = WarehouseID AND Status = 'PENDING'; \n\n    COMMIT; \n    RAISE NOTICE 'Bulk inventory update completed. Processed: %, Errors: %', TotalProcessed, ErrorCount; \n  EXCEPTION WHEN OTHERS THEN \n    ErrorMessage := SQLERRM; \n    ROLLBACK; \n    RAISE EXCEPTION 'Bulk inventory update failed: %', ErrorMessage; \n  END; \nEND; \n$$;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_BulkInventoryUpdate (WarehouseID INT, AdjustmentType VARCHAR(50), AdjustmentDate TIMESTAMP DEFAULT NULL) IS\n  ProductID INT;\n  CurrentQty INT;\n  AdjustmentQty INT;\n  NewQty INT;\n  TotalProcessed INT := 0;\n  ErrorCount INT := 0;\n  ErrorMessage VARCHAR(4000);\nBEGIN\n  IF AdjustmentDate IS NULL THEN\n    AdjustmentDate := SYSDATE;\n  END IF;\n\n  DECLARE inventory_cursor CURSOR FOR\n    SELECT ProductID, QuantityOnHand, \n           CASE AdjustmentType \n             WHEN 'RECOUNT' THEN PhysicalCount - QuantityOnHand \n             WHEN 'DAMAGE' THEN -DamagedQuantity \n             WHEN 'RETURN' THEN ReturnedQuantity \n             ELSE 0 \n           END AS AdjustmentQty\n    FROM InventoryStaging \n    WHERE WarehouseID = WarehouseID \n      AND Status = 'PENDING' \n    ORDER BY ProductID;\n\n  OPEN inventory_cursor;\n\n  LOOP\n    FETCH inventory_cursor INTO ProductID, CurrentQty, AdjustmentQty;\n\n    EXIT WHEN inventory_cursor%NOTFOUND;\n\n    BEGIN\n      NewQty := CurrentQty + AdjustmentQty;\n\n      IF EXISTS (SELECT 1 FROM Inventory WHERE ProductID = ProductID AND WarehouseID = WarehouseID) THEN\n        UPDATE Inventory \n        SET QuantityOnHand = NewQty, \n            LastAdjustmentDate = AdjustmentDate, \n            LastAdjustmentType = AdjustmentType \n        WHERE ProductID = ProductID \n          AND WarehouseID = WarehouseID;\n      ELSE\n        INSERT INTO Inventory (ProductID, WarehouseID, QuantityOnHand, LastAdjustmentDate, LastAdjustmentType) \n        VALUES (ProductID, WarehouseID, CASE WHEN NewQty < 0 THEN 0 ELSE NewQty END, AdjustmentDate, AdjustmentType);\n      END IF;\n\n      INSERT INTO InventoryAuditLog (ProductID, WarehouseID, AdjustmentDate, AdjustmentType, OldQuantity, AdjustmentQuantity, NewQuantity, CreatedBy) \n      VALUES (ProductID, WarehouseID, AdjustmentDate, AdjustmentType, CurrentQty, AdjustmentQty, NewQty, UTL_INADDR.GET_HOST_NAME);\n\n      TotalProcessed := TotalProcessed + 1;\n\n    EXCEPTION\n      WHEN OTHERS THEN\n        ErrorCount := ErrorCount + 1;\n        INSERT INTO ErrorLog (ErrorDate, ErrorMessage, ProductID) \n        VALUES (SYSDATE, 'Inventory update failed: ' || SQLERRM, ProductID);\n    END;\n  END LOOP;\n\n  CLOSE inventory_cursor;\n\n  UPDATE InventoryStaging \n  SET Status = 'PROCESSED', \n      ProcessedDate = SYSDATE \n  WHERE WarehouseID = WarehouseID \n    AND Status = 'PENDING';\n\n  DBMS_OUTPUT.PUT_LINE('Bulk inventory update completed. Processed: ' || TotalProcessed || ', Errors: ' || ErrorCount);\n  \nEXCEPTION\n  WHEN OTHERS THEN\n    ErrorMessage := SQLERRM;\n    ROLLBACK;\n    IF inventory_cursor%ISOPEN THEN\n      CLOSE inventory_cursor;\n    END IF;\n    RAISE_APPLICATION_ERROR(-20001, 'Bulk inventory update failed: ' || ErrorMessage);\nEND;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_BulkInventoryUpdate(IN WarehouseID INT, IN AdjustmentType NVARCHAR(50), IN AdjustmentDate DATETIME DEFAULT NULL)\nBEGIN\nSET no_count = true;\nIF AdjustmentDate IS NULL THEN \n    SET AdjustmentDate = CURRENT_TIMESTAMP;\nEND IF;\nDECLARE ProductID INT;\nDECLARE CurrentQty INT;\nDECLARE AdjustmentQty INT;\nDECLARE NewQty INT;\nDECLARE TotalProcessed INT DEFAULT 0;\nDECLARE ErrorCount INT DEFAULT 0;\nDECLARE ErrorMessage NVARCHAR(4000);\nDECLARE inventory_cursor CURSOR FOR \n    SELECT ProductID, QuantityOnHand, \n        CASE AdjustmentType \n            WHEN 'RECOUNT' THEN PhysicalCount - QuantityOnHand \n            WHEN 'DAMAGE' THEN -DamagedQuantity \n            WHEN 'RETURN' THEN ReturnedQuantity \n            ELSE 0 \n        END AS AdjustmentQty \n    FROM InventoryStaging \n    WHERE WarehouseID = WarehouseID AND Status = 'PENDING' \n    ORDER BY ProductID;\nSTART TRANSACTION;\nBEGIN\n    OPEN inventory_cursor;\n    FETCH inventory_cursor INTO ProductID, CurrentQty, AdjustmentQty;\n    WHILE ROW_COUNT() > 0 DO\n        BEGIN\n            SET NewQty = CurrentQty + AdjustmentQty;\n            IF EXISTS (SELECT 1 FROM Inventory WHERE ProductID = ProductID AND WarehouseID = WarehouseID) THEN\n                UPDATE Inventory \n                SET QuantityOnHand = NewQty, LastAdjustmentDate = AdjustmentDate, LastAdjustmentType = AdjustmentType \n                WHERE ProductID = ProductID AND WarehouseID = WarehouseID;\n            ELSE \n                INSERT INTO Inventory (ProductID, WarehouseID, QuantityOnHand, LastAdjustmentDate, LastAdjustmentType) \n                VALUES (ProductID, WarehouseID, CASE WHEN NewQty < 0 THEN 0 ELSE NewQty END, AdjustmentDate, AdjustmentType);\n            END IF;\n\n            INSERT INTO InventoryAuditLog (ProductID, WarehouseID, AdjustmentDate, AdjustmentType, OldQuantity, AdjustmentQuantity, NewQuantity, CreatedBy) \n            VALUES (ProductID, WarehouseID, AdjustmentDate, AdjustmentType, CurrentQty, AdjustmentQty, NewQty, SESSION_USER);\n\n            SET TotalProcessed = TotalProcessed + 1;\n\n        EXCEPTION WHEN OTHERS THEN\n            SET ErrorCount = ErrorCount + 1;\n            INSERT INTO ErrorLog (ErrorDate, ErrorMessage, ProductID) \n            VALUES (CURRENT_TIMESTAMP, 'Inventory update failed: ' || SQLERRM, ProductID);\n        END;\n        FETCH inventory_cursor INTO ProductID, CurrentQty, AdjustmentQty;\n    END WHILE;\n    CLOSE inventory_cursor;\n    DEALLOCATE inventory_cursor;\n\n    UPDATE InventoryStaging \n    SET Status = 'PROCESSED', ProcessedDate = CURRENT_TIMESTAMP \n    WHERE WarehouseID = WarehouseID AND Status = 'PENDING';\n\n    COMMIT;\n    RAISE NOTICE 'Bulk inventory update completed. Processed: % , Errors: % ', TotalProcessed, ErrorCount;\n\nEXCEPTION WHEN OTHERS THEN\n    SET ErrorMessage = SQLERRM;\n    ROLLBACK;\n    IF inventory_cursor IS NOT NULL THEN\n        CLOSE inventory_cursor;\n        DEALLOCATE inventory_cursor;\n    END IF;\n    RAISE EXCEPTION 'Bulk inventory update failed: %', ErrorMessage;\nEND;\nEND;"
                    }
                ]
            },
            {
                "case_id": "12",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"12\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"SET NOCOUNT ON\", \"DECLARE\", \"DECIMAL\", \"NUMERIC\", \"CURSOR\", \"ISNULL\", \"COALESCE\", \"SUM\", \"BEGIN TRY\", \"GETDATE\", \"NOW\", \"CURRENT_TIMESTAMP\", \"SCOPE_IDENTITY\", \"OPEN\", \"@@FETCH_STATUS\", \"WHILE\", \"CLOSE\", \"DEALLOCATE\", \"RAISE NOTICE\", \"PRINT\", \"CAST\", \"NVARCHAR2\", \"RAISERROR\", \"ERROR_MESSAGE\", \"RAISE EXCEPTION\", \"BETWEEN\"]}, \"sql\": \"CREATE PROCEDURE SP_ProcessPayroll @PayPeriodStart DATETIME, @PayPeriodEnd DATETIME, @DepartmentID INT = NULL AS BEGIN SET NOCOUNT ON; DECLARE @PayrollID INT; DECLARE @EmployeeID INT, @HourlyRate DECIMAL(10,2), @RegularHours DECIMAL(5,2), @OvertimeHours DECIMAL(5,2); DECLARE @GrossPay DECIMAL(10,2), @TaxDeduction DECIMAL(10,2), @NetPay DECIMAL(10,2); DECLARE @TotalGross DECIMAL(15,2) = 0, @TotalNet DECIMAL(15,2) = 0; DECLARE employee_cursor CURSOR FOR SELECT e.EmployeeID, e.HourlyRate, ISNULL(SUM(CASE WHEN t.Hours <= 8 THEN t.Hours ELSE 8 END), 0) AS RegularHours, ISNULL(SUM(CASE WHEN t.Hours > 8 THEN t.Hours - 8 ELSE 0 END), 0) AS OvertimeHours FROM Employees e LEFT JOIN Timesheet t ON e.EmployeeID = t.EmployeeID AND t.WorkDate BETWEEN @PayPeriodStart AND @PayPeriodEnd WHERE e.Status = 'ACTIVE' AND (@DepartmentID IS NULL OR e.DepartmentID = @DepartmentID) GROUP BY e.EmployeeID, e.HourlyRate ORDER BY e.EmployeeID; BEGIN TRY INSERT INTO PayrollHeader (PayPeriodStart, PayPeriodEnd, DepartmentID, CreatedDate, Status) VALUES (@PayPeriodStart, @PayPeriodEnd, @DepartmentID, GETDATE(), 'PROCESSING'); SET @PayrollID = SCOPE_IDENTITY(); OPEN employee_cursor; FETCH NEXT FROM employee_cursor INTO @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours; WHILE @@FETCH_STATUS = 0 BEGIN SET @GrossPay = (@RegularHours * @HourlyRate) + (@OvertimeHours * @HourlyRate * 1.5); SET @TaxDeduction = @GrossPay * 0.20; -- 20% tax rate SET @NetPay = @GrossPay - @TaxDeduction; INSERT INTO PayrollDetail (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay) VALUES (@PayrollID, @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours, @GrossPay, @TaxDeduction, @NetPay); SET @TotalGross = @TotalGross + @GrossPay; SET @TotalNet = @TotalNet + @NetPay; FETCH NEXT FROM employee_cursor INTO @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours; END; CLOSE employee_cursor; DEALLOCATE employee_cursor; UPDATE PayrollHeader SET TotalGrossPay = @TotalGross, TotalNetPay = @TotalNet, Status = 'COMPLETED', CompletedDate = GETDATE() WHERE PayrollID = @PayrollID; PRINT 'Payroll processing completed. Payroll ID: ' + CAST(@PayrollID AS NVARCHAR(10)); END TRY BEGIN CATCH IF CURSOR_STATUS('global', 'employee_cursor') >= 0 BEGIN CLOSE employee_cursor; DEALLOCATE employee_cursor; END; UPDATE PayrollHeader SET Status = 'FAILED', ErrorMessage = ERROR_MESSAGE() WHERE PayrollID = @PayrollID; RAISERROR('Payroll processing failed: %s', 16, 1, ERROR_MESSAGE()); END CATCH; END;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE SP_ProcessPayroll @PayPeriodStart DATETIME, @PayPeriodEnd DATETIME, @DepartmentID INT = NULL AS BEGIN SET NOCOUNT ON; DECLARE @PayrollID INT; DECLARE @EmployeeID INT, @HourlyRate DECIMAL(10,2), @RegularHours DECIMAL(5,2), @OvertimeHours DECIMAL(5,2); DECLARE @GrossPay DECIMAL(10,2), @TaxDeduction DECIMAL(10,2), @NetPay DECIMAL(10,2); DECLARE @TotalGross DECIMAL(15,2) = 0, @TotalNet DECIMAL(15,2) = 0; DECLARE employee_cursor CURSOR FOR SELECT e.EmployeeID, e.HourlyRate, ISNULL(SUM(CASE WHEN t.Hours <= 8 THEN t.Hours ELSE 8 END), 0) AS RegularHours, ISNULL(SUM(CASE WHEN t.Hours > 8 THEN t.Hours - 8 ELSE 0 END), 0) AS OvertimeHours FROM Employees e LEFT JOIN Timesheet t ON e.EmployeeID = t.EmployeeID AND t.WorkDate BETWEEN @PayPeriodStart AND @PayPeriodEnd WHERE e.Status = 'ACTIVE' AND (@DepartmentID IS NULL OR e.DepartmentID = @DepartmentID) GROUP BY e.EmployeeID, e.HourlyRate ORDER BY e.EmployeeID; BEGIN TRY INSERT INTO PayrollHeader (PayPeriodStart, PayPeriodEnd, DepartmentID, CreatedDate, Status) VALUES (@PayPeriodStart, @PayPeriodEnd, @DepartmentID, GETDATE(), 'PROCESSING'); SET @PayrollID = SCOPE_IDENTITY(); OPEN employee_cursor; FETCH NEXT FROM employee_cursor INTO @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours; WHILE @@FETCH_STATUS = 0 BEGIN SET @GrossPay = (@RegularHours * @HourlyRate) + (@OvertimeHours * @HourlyRate * 1.5); SET @TaxDeduction = @GrossPay * 0.20; -- 20% tax rate SET @NetPay = @GrossPay - @TaxDeduction; INSERT INTO PayrollDetail (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay) VALUES (@PayrollID, @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours, @GrossPay, @TaxDeduction, @NetPay); SET @TotalGross = @TotalGross + @GrossPay; SET @TotalNet = @TotalNet + @NetPay; FETCH NEXT FROM employee_cursor INTO @EmployeeID, @HourlyRate, @RegularHours, @OvertimeHours; END; CLOSE employee_cursor; DEALLOCATE employee_cursor; UPDATE PayrollHeader SET TotalGrossPay = @TotalGross, TotalNetPay = @TotalNet, Status = 'COMPLETED', CompletedDate = GETDATE() WHERE PayrollID = @PayrollID; PRINT 'Payroll processing completed. Payroll ID: ' + CAST(@PayrollID AS NVARCHAR(10)); END TRY BEGIN CATCH IF CURSOR_STATUS('global', 'employee_cursor') >= 0 BEGIN CLOSE employee_cursor; DEALLOCATE employee_cursor; END; UPDATE PayrollHeader SET Status = 'FAILED', ErrorMessage = ERROR_MESSAGE() WHERE PayrollID = @PayrollID; RAISERROR('Payroll processing failed: %s', 16, 1, ERROR_MESSAGE()); END CATCH; END;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_ProcessPayroll(IN PayPeriodStart TIMESTAMP, IN PayPeriodEnd TIMESTAMP, IN DepartmentID INT DEFAULT NULL) LANGUAGE plpgsql AS $$\nDECLARE\n    PayrollID INT;\n    EmployeeID INT;\n    HourlyRate NUMERIC(10,2);\n    RegularHours NUMERIC(5,2);\n    OvertimeHours NUMERIC(5,2);\n    GrossPay NUMERIC(10,2);\n    TaxDeduction NUMERIC(10,2);\n    NetPay NUMERIC(10,2);\n    TotalGross NUMERIC(15,2) DEFAULT 0;\n    TotalNet NUMERIC(15,2) DEFAULT 0;\n    employee_cursor REFCURSOR;\nBEGIN\n    BEGIN\n        INSERT INTO PayrollHeader (PayPeriodStart, PayPeriodEnd, DepartmentID, CreatedDate, Status)\n        VALUES (PayPeriodStart, PayPeriodEnd, DepartmentID, CURRENT_TIMESTAMP, 'PROCESSING')\n        RETURNING PayrollID INTO PayrollID;\n\n        OPEN employee_cursor FOR \n        SELECT e.EmployeeID, e.HourlyRate,\n            COALESCE(SUM(CASE WHEN t.Hours <= 8 THEN t.Hours ELSE 8 END), 0) AS RegularHours,\n            COALESCE(SUM(CASE WHEN t.Hours > 8 THEN t.Hours - 8 ELSE 0 END), 0) AS OvertimeHours\n        FROM Employees e\n        LEFT JOIN Timesheet t ON e.EmployeeID = t.EmployeeID AND t.WorkDate BETWEEN PayPeriodStart AND PayPeriodEnd\n        WHERE e.Status = 'ACTIVE' AND (DepartmentID IS NULL OR e.DepartmentID = DepartmentID)\n        GROUP BY e.EmployeeID, e.HourlyRate\n        ORDER BY e.EmployeeID;\n\n        LOOP\n            FETCH employee_cursor INTO EmployeeID, HourlyRate, RegularHours, OvertimeHours;\n            EXIT WHEN NOT FOUND;\n\n            GrossPay := (RegularHours * HourlyRate) + (OvertimeHours * HourlyRate * 1.5);\n            TaxDeduction := GrossPay * 0.20; -- 20% tax rate\n            NetPay := GrossPay - TaxDeduction;\n\n            INSERT INTO PayrollDetail (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay)\n            VALUES (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay);\n\n            TotalGross := TotalGross + GrossPay;\n            TotalNet := TotalNet + NetPay;\n        END LOOP;\n\n        CLOSE employee_cursor;\n\n        UPDATE PayrollHeader\n        SET TotalGrossPay = TotalGross, TotalNetPay = TotalNet, Status = 'COMPLETED', CompletedDate = CURRENT_TIMESTAMP\n        WHERE PayrollID = PayrollID;\n\n        RAISE NOTICE 'Payroll processing completed. Payroll ID: %', PayrollID;\n    EXCEPTION WHEN OTHERS THEN\n        IF employee_cursor IS NOT NULL THEN\n            CLOSE employee_cursor;\n        END IF;\n\n        UPDATE PayrollHeader\n        SET Status = 'FAILED', ErrorMessage = SQLERRM\n        WHERE PayrollID = PayrollID;\n\n        RAISE EXCEPTION 'Payroll processing failed: %', SQLERRM;\n    END;\nEND;\n$$;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_ProcessPayroll (IN PayPeriodStart TIMESTAMP, IN PayPeriodEnd TIMESTAMP, IN DepartmentID INT DEFAULT NULL) LANGUAGE plpgsql AS $$\nDECLARE\n    PayrollID INT;\n    EmployeeID INT;\n    HourlyRate NUMERIC(10,2);\n    RegularHours NUMERIC(5,2);\n    OvertimeHours NUMERIC(5,2);\n    GrossPay NUMERIC(10,2);\n    TaxDeduction NUMERIC(10,2);\n    NetPay NUMERIC(10,2);\n    TotalGross NUMERIC(15,2) := 0;\n    TotalNet NUMERIC(15,2) := 0;\n    employee_cursor REFCURSOR;\nBEGIN\n    BEGIN\n        INSERT INTO PayrollHeader (PayPeriodStart, PayPeriodEnd, DepartmentID, CreatedDate, Status)\n        VALUES (PayPeriodStart, PayPeriodEnd, DepartmentID, CURRENT_TIMESTAMP, 'PROCESSING')\n        RETURNING PayrollID INTO PayrollID;\n\n        OPEN employee_cursor FOR\n        SELECT e.EmployeeID, e.HourlyRate,\n               COALESCE(SUM(CASE WHEN t.Hours <= 8 THEN t.Hours ELSE 8 END), 0) AS RegularHours,\n               COALESCE(SUM(CASE WHEN t.Hours > 8 THEN t.Hours - 8 ELSE 0 END), 0) AS OvertimeHours\n        FROM Employees e\n        LEFT JOIN Timesheet t ON e.EmployeeID = t.EmployeeID AND t.WorkDate BETWEEN PayPeriodStart AND PayPeriodEnd\n        WHERE e.Status = 'ACTIVE' AND (DepartmentID IS NULL OR e.DepartmentID = DepartmentID)\n        GROUP BY e.EmployeeID, e.HourlyRate\n        ORDER BY e.EmployeeID;\n\n        LOOP\n            FETCH employee_cursor INTO EmployeeID, HourlyRate, RegularHours, OvertimeHours;\n            EXIT WHEN NOT FOUND;\n\n            GrossPay := (RegularHours * HourlyRate) + (OvertimeHours * HourlyRate * 1.5);\n            TaxDeduction := GrossPay * 0.20; -- 20% tax rate\n            NetPay := GrossPay - TaxDeduction;\n\n            INSERT INTO PayrollDetail (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay)\n            VALUES (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay);\n\n            TotalGross := TotalGross + GrossPay;\n            TotalNet := TotalNet + NetPay;\n        END LOOP;\n        CLOSE employee_cursor;\n\n        UPDATE PayrollHeader\n        SET TotalGrossPay = TotalGross, TotalNetPay = TotalNet, Status = 'COMPLETED', CompletedDate = CURRENT_TIMESTAMP\n        WHERE PayrollID = PayrollID;\n\n        RAISE NOTICE 'Payroll processing completed. Payroll ID: %', PayrollID;\n\n    EXCEPTION\n        WHEN OTHERS THEN\n            IF employee_cursor IS NOT NULL THEN\n                CLOSE employee_cursor;\n            END IF;\n\n            UPDATE PayrollHeader\n            SET Status = 'FAILED', ErrorMessage = SQLERRM\n            WHERE PayrollID = PayrollID;\n\n            RAISE EXCEPTION 'Payroll processing failed: %', SQLERRM;\n    END;\nEND;\n$$;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_ProcessPayroll(IN PayPeriodStart TIMESTAMP, IN PayPeriodEnd TIMESTAMP, IN DepartmentID INT DEFAULT NULL) LANGUAGE plpgsql AS $$\nDECLARE\n    PayrollID INT;\n    EmployeeID INT;\n    HourlyRate NUMERIC(10,2);\n    RegularHours NUMERIC(5,2);\n    OvertimeHours NUMERIC(5,2);\n    GrossPay NUMERIC(10,2);\n    TaxDeduction NUMERIC(10,2);\n    NetPay NUMERIC(10,2);\n    TotalGross NUMERIC(15,2) DEFAULT 0;\n    TotalNet NUMERIC(15,2) DEFAULT 0;\n    employee_cursor REFCURSOR;\nBEGIN\n    BEGIN\n        INSERT INTO PayrollHeader (PayPeriodStart, PayPeriodEnd, DepartmentID, CreatedDate, Status)\n        VALUES (PayPeriodStart, PayPeriodEnd, DepartmentID, CURRENT_TIMESTAMP, 'PROCESSING')\n        RETURNING PayrollID INTO PayrollID;\n\n        OPEN employee_cursor FOR\n        SELECT e.EmployeeID, e.HourlyRate,\n               COALESCE(SUM(CASE WHEN t.Hours <= 8 THEN t.Hours ELSE 8 END), 0) AS RegularHours,\n               COALESCE(SUM(CASE WHEN t.Hours > 8 THEN t.Hours - 8 ELSE 0 END), 0) AS OvertimeHours\n        FROM Employees e\n        LEFT JOIN Timesheet t ON e.EmployeeID = t.EmployeeID AND t.WorkDate BETWEEN PayPeriodStart AND PayPeriodEnd\n        WHERE e.Status = 'ACTIVE' AND (DepartmentID IS NULL OR e.DepartmentID = DepartmentID)\n        GROUP BY e.EmployeeID, e.HourlyRate\n        ORDER BY e.EmployeeID;\n\n        LOOP\n            FETCH employee_cursor INTO EmployeeID, HourlyRate, RegularHours, OvertimeHours;\n            EXIT WHEN NOT FOUND;\n\n            GrossPay := (RegularHours * HourlyRate) + (OvertimeHours * HourlyRate * 1.5);\n            TaxDeduction := GrossPay * 0.20; -- 20% tax rate\n            NetPay := GrossPay - TaxDeduction;\n\n            INSERT INTO PayrollDetail (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay)\n            VALUES (PayrollID, EmployeeID, HourlyRate, RegularHours, OvertimeHours, GrossPay, TaxDeduction, NetPay);\n\n            TotalGross := TotalGross + GrossPay;\n            TotalNet := TotalNet + NetPay;\n        END LOOP;\n\n        CLOSE employee_cursor;\n\n        UPDATE PayrollHeader\n        SET TotalGrossPay = TotalGross, TotalNetPay = TotalNet, Status = 'COMPLETED', CompletedDate = CURRENT_TIMESTAMP\n        WHERE PayrollID = PayrollID;\n\n        RAISE NOTICE 'Payroll processing completed. Payroll ID: %', PayrollID;\n    EXCEPTION WHEN OTHERS THEN\n        IF employee_cursor IS NOT NULL THEN\n            CLOSE employee_cursor;\n        END IF;\n\n        UPDATE PayrollHeader\n        SET Status = 'FAILED', ErrorMessage = SQLERRM\n        WHERE PayrollID = PayrollID;\n\n        RAISE EXCEPTION 'Payroll processing failed: %', SQLERRM;\n    END;\nEND;\n$$;"
                    }
                ]
            },
            {
                "case_id": "13",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"13\", \"difficulty_level\": \"1\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"GETDATE\", \"DATEADD\", \"INTERVAL\", \"CURRENT_TIMESTAMP\", \"now\", \"CONVERT\", \"CAST\", \"PRINT\", \"@@ERROR\", \"RAISERROR\"]}, \"sql\": \"CREATE PROCEDURE [dbo].[sp_YwA_DistillUllageReportDataAll] \\nAS\\n/*==============================================================*/\\n/*在A库中抽取前七天报表数据到临时表中( 未定在B中抽取还是在A中抽取*/\\n/* 该存储过程有连接到业维库的用户名密码，修改处 6 处 \\t\\t       */\\n/*==============================================================*/\\n/* 修改出港舱单的日期为出港航班日期*/\\ndeclare @sFdate1 AS varchar(20) \\ndeclare @sFdate2 AS varchar(20) \\ndeclare @Yw_Op_Date datetime  --当前业维日期\\ndeclare @YwUser varchar(10)\\ndeclare @StartTime datetime\\ndeclare @EndTime datetime\\ndeclare @iden int \\n\\n\\n\\t-- 删除日期重复数据\\n\\tSET ANSI_NULLS ON\\n\\tSET ANSI_WARNINGS ON\\n\\tSET XACT_ABORT ON\\n\\n\\t--定义隔离级别为最低\\n\\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED\\n\\t\\n\\tSet @StartTime =Getdate() --Cast('2007-03-14' As dateTime) -- ----Cast('2007-02-6' As dateTime)   --- --Cast('2004-08-14' As dateTime) --Getdate() -- --Getdate() --\\n\\tSet @YwUser ='YWUSER'\\n\\tSet @Yw_Op_Date = Null\\n\\n\\tSelect @Yw_Op_Date = @StartTime\\n\\n\\tPrint '新建开始抽取日期'\\n\\tEXEC sp_YwA_InsLog @Yw_Op_Date,@StartTime,NULL,0,'REPORTRUN','sp_YwA_DistillUllageReportDataAll--在A库中抽取前七天报表数据到临时表'\\n\\n\\tSet @sFdate1 = Convert(varchar(10),DateAdd(day,-1,@Yw_Op_Date),121) + '  23:59:59 '\\n\\tSet @sFdate2 = Convert(varchar(10),DateAdd(day,-7,@Yw_Op_Date),121) + '  00:00:00 '\\n\\n\\t-- 步骤开始\\n\\tSet @iden = @@IDENTITY\\n\\n\\tPrint '业维日期：'+ CONVERT(CHAR(10),@Yw_Op_Date,121)\\n\\tPrint '最早日期：' + @sFdate1\\n\\tPrint '最晚日期：' + @sFdate2\\n\\n\\tPrint '删除临时表记录'\\n\\n\\n\\n\\n\\n\\t--开始操作\\n\\t--Begin Transaction TransHandle\\n\\n\\t--删除动态航班数据 \\n\\t--Delete From OPENDATASOURCE(\\n\\t--'SQLOLEDB_NO';Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=00.00.00.30\\\\CARGOYWDB,1433').CARGO2.DBO.TBL_Flight\\n\\tDelete From [00.00.00.30].CARGO2.DBO.TBL_Flight\\n\\tWhere FlightDate>=@sFdate2 and FlightDate<=@sFdate1\\n\\t--Where  Op_Date>=@sFdate2 AND Op_Date<=@sFdate1\\n             If @@error<>0 \\n\\tBegin\\n\\t\\tGoto ErrorHandler\\n\\tEnd\\n\\n\\t--插入动态航班数据\\n\\tINSERT [00.00.00.30].CARGO2.DBO.TBL_Flight\\n\\t(FlightNo,FlightDate,Flight_Dep,Flight_Dest,Manifest_ID,Flight_Dep_Time,Flight_Dest_Time,Flight_Dep_ActTime,Flight_Dest_ActTime,\\n\\tActype,AcNo,ControlFlag,FlightFlag,Flight_Dep_ID,Flight_Dest_ID,Area,FlightArea,MaxActypeLoad,\\n\\tMaxBookingWeight,MaxLoadedWeight,MaxLoadedVolume,ControlWeight,ControlVolume,InnerWeight,InnerVolume,FreeWeight,FreeVolume,\\n\\tMultiSegmentFlag,YwComRun,UpdateFlag,MaxBookingVolume,Delay_ID,Service_Type,Leg_Status,SocExisted,SocSame,YW_OP_TIME,YW_OWNER)\\n\\tSelect FlightNo,FlightDate,Flight_Dep,Flight_Dest,Manifest_ID,Flight_Dep_Time,Flight_Dest_Time,Flight_Dep_ActTime,Flight_Dest_ActTime,\\n\\tActype,AcNo,ControlFlag,FlightFlag,Flight_Dep_ID,Flight_Dest_ID,Area,FlightArea,MaxActypeLoad,\\n\\tMaxBookingWeight,MaxLoadedWeight,MaxLoadedVolume,ControlWeight,ControlVolume,InnerWeight,InnerVolume,FreeWeight,FreeVolume,\\n\\tMultiSegmentFlag,YwComRun,UpdateFlag,MaxBookingVolume,Delay_ID,Service_Type,Leg_Status,SocExisted,SocSame,GetDate(),'A'\\n\\tFrom CARGO2.DBO.TBL_Flight\\n\\twhere flightdate>=@sFdate2 AND flightdate<=@sFdate1\\n\\n--执行虚耗捕捉的存储过程\\n\\n\\texec TangForUllageArrCapture\\n\\n\\n\\t--删除虚耗数据\\n\\t--Delete From OPENDATASOURCE(\\n\\t--'SQLOLEDB_NO';Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=00.00.00.30\\\\CARGOYWDB,1433').CARGO2.DBO.tbl_YW_ullage\\n\\tDelete From [00.00.00.30].CARGO2.DBO.tbl_YW_ullage\\n\\tWhere FlightDate>=@sFdate2 and FlightDate<=@sFdate1\\n\\t--Where  Op_Date>=@sFdate2 AND Op_Date<=@sFdate1\\n             If @@error<>0 \\n\\tBegin\\n\\t\\tGoto ErrorHandler\\n\\tEnd\\n\\n\\t--插 入虚耗数据\\n\\tINSERT [00.00.00.30].CARGO2.DBO.tbl_YW_ullage\\n\\t(OLDWEIGHT,OLDVOLUME,\\n\\t\\tFlightNo,FlightDate,Flight_Dep,Flight_Dest,RESER,AWBCITY,Goods,\\n\\t\\tOP_ID,\\n\\t\\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OP_DATE,\\n\\t\\tOLDBOOKWEIGHT,OLDBOOKVOLUME,NEWBOOKWEIGHT,\\n\\t\\tNEWBOOKVOLUME,NEWWEIGHT,NEWVOLUME)\\n\\tSelect OLDWEIGHT,OLDVOLUME,\\n\\t\\tFlightNo,FlightDate,Flight_Dep,Flight_Dest,RESER,AWBCITY,Goods,\\n\\t\\tOP_ID,\\n\\t\\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OP_DATE,\\n\\t\\tOLDBOOKWEIGHT,OLDBOOKVOLUME,NEWBOOKWEIGHT,\\n\\t\\tNEWBOOKVOLUME,NEWWEIGHT,NEWVOLUME\\n\\tFrom CARGO2.DBO.tbl_ullage\\n\\twhere flightdate>=@sFdate2 AND flightdate<=@sFdate1\\n\\n\\n\\t--删除到货虚耗数据\\n\\t--Delete From OPENDATASOURCE(\\n\\t--'SQLOLEDB_NO';Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=00.00.00.19\\\\CARGOYWDB,1433').CARGO2.DBO.TBL_YW_ULLAGE_ARR\\n\\t--Where  OpDate>=@sFdate2 AND OpDate<=@sFdate1\\n             --If @@error<>0 \\n\\t--Begin\\n\\t--\\tGoto ErrorHandler\\n\\t--End\\n\\t--现在修改新的到货虚耗删除，使用航班日期\\n\\t--Delete From OPENDATASOURCE(\\n\\t--'SQLOLEDB_NO';Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=00.00.00.30\\\\CARGOYWDB,1433').CARGO2.DBO.TBL_YW_ULLAGE_ARR\\n\\tDelete From [00.00.00.30].CARGO2.DBO.TBL_YW_ULLAGE_ARR\\n\\tWhere  FlightDate>=@sFdate2 AND FlightDate<=@sFdate1\\n             If @@error<>0 \\n\\tBegin\\n\\t\\tGoto ErrorHandler\\n\\tEnd\\n/*\\n\\t--插入到货虚耗数据\\n\\tINSERT [00.00.00.19].CARGO2.DBO.TBL_YW_ULLAGE_ARR\\n\\t(FlightNo,FlightDate,Flight_Dep,Flight_Dest,AgentCode,Goods,\\n\\t\\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OpDate,BookWeight,ActDepWeight,DrawbackWeight,\\n\\t\\tActDepBookWeight)\\n\\tSelect FlightNo,FlightDate,Flight_Dep,Flight_Dest,AgentCode,Goods,\\n\\t\\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OpDate,BookWeight,ActDepWeight,DrawbackWeight,\\n\\t\\tActDepBookWeight\\n\\tFrom CARGO2.DBO.tbl_ullage_arr\\n\\tWhere  OpDate>=@sFdate2 AND OpDate<=@sFdate1\\n*/\\n\\t-- 航班事务结束操作\\n\\t--Commit Transaction TransHandle\\n\\nSucHandler:\\n\\t-- 步骤完成\\n\\tUPDATE TBL_YW_LOG SET [ENDTIME]=GETDATE(),[OPTResult]='REPORTSUC'\\n\\tWHERE LOG_ID =@iden\\n\\tReturn\\nErrorHandler:\\n\\t-- 步骤错误\\n\\tPrint '操作事务回滚'\\n\\t--Rollback Transaction TransHandle\\n\\n\\tUPDATE TBL_YW_LOG SET [ENDTIME]=GETDATE(),[OPTResult]='REPORTERR'\\n\\tWHERE LOG_ID =@iden\\n\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE [dbo].[sp_YwA_DistillUllageReportDataAll] \nAS\n/*==============================================================*/\n/*在A库中抽取前七天报表数据到临时表中( 未定在B中抽取还是在A中抽取*/\n/* 该存储过程有连接到业维库的用户名密码，修改处 6 处 \t\t       */\n/*==============================================================*/\n/* 修改出港舱单的日期为出港航班日期*/\ndeclare @sFdate1 AS varchar(20) \ndeclare @sFdate2 AS varchar(20) \ndeclare @Yw_Op_Date datetime  --当前业维日期\ndeclare @YwUser varchar(10)\ndeclare @StartTime datetime\ndeclare @EndTime datetime\ndeclare @iden int \n\n\n\t-- 删除日期重复数据\n\tSET ANSI_NULLS ON\n\tSET ANSI_WARNINGS ON\n\tSET XACT_ABORT ON\n\n\t--定义隔离级别为最低\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED\n\t\n\tSet @StartTime =Getdate() --Cast('2007-03-14' As dateTime) -- ----Cast('2007-02-6' As dateTime)   --- --Cast('2004-08-14' As dateTime) --Getdate() -- --Getdate() --\n\tSet @YwUser ='YWUSER'\n\tSet @Yw_Op_Date = Null\n\n\tSelect @Yw_Op_Date = @StartTime\n\n\tPrint '新建开始抽取日期'\n\tEXEC sp_YwA_InsLog @Yw_Op_Date,@StartTime,NULL,0,'REPORTRUN','sp_YwA_DistillUllageReportDataAll--在A库中抽取前七天报表数据到临时表'\n\n\tSet @sFdate1 = Convert(varchar(10),DateAdd(day,-1,@Yw_Op_Date),121) + '  23:59:59 '\n\tSet @sFdate2 = Convert(varchar(10),DateAdd(day,-7,@Yw_Op_Date),121) + '  00:00:00 '\n\n\t-- 步骤开始\n\tSet @iden = @@IDENTITY\n\n\tPrint '业维日期：'+ CONVERT(CHAR(10),@Yw_Op_Date,121)\n\tPrint '最早日期：' + @sFdate1\n\tPrint '最晚日期：' + @sFdate2\n\n\tPrint '删除临时表记录'\n\n\n\n\n\n\t--开始操作\n\t--Begin Transaction TransHandle\n\n\t--删除动态航班数据 \n\t--Delete From OPENDATASOURCE(\n\t--'SQLOLEDB_NO';Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=00.00.00.30\\CARGOYWDB,1433').CARGO2.DBO.TBL_Flight\n\tDelete From [00.00.00.30].CARGO2.DBO.TBL_Flight\n\tWhere FlightDate>=@sFdate2 and FlightDate<=@sFdate1\n\t--Where  Op_Date>=@sFdate2 AND Op_Date<=@sFdate1\n             If @@error<>0 \n\tBegin\n\t\tGoto ErrorHandler\n\tEnd\n\n\t--插入动态航班数据\n\tINSERT [00.00.00.30].CARGO2.DBO.TBL_Flight\n\t(FlightNo,FlightDate,Flight_Dep,Flight_Dest,Manifest_ID,Flight_Dep_Time,Flight_Dest_Time,Flight_Dep_ActTime,Flight_Dest_ActTime,\n\tActype,AcNo,ControlFlag,FlightFlag,Flight_Dep_ID,Flight_Dest_ID,Area,FlightArea,MaxActypeLoad,\n\tMaxBookingWeight,MaxLoadedWeight,MaxLoadedVolume,ControlWeight,ControlVolume,InnerWeight,InnerVolume,FreeWeight,FreeVolume,\n\tMultiSegmentFlag,YwComRun,UpdateFlag,MaxBookingVolume,Delay_ID,Service_Type,Leg_Status,SocExisted,SocSame,YW_OP_TIME,YW_OWNER)\n\tSelect FlightNo,FlightDate,Flight_Dep,Flight_Dest,Manifest_ID,Flight_Dep_Time,Flight_Dest_Time,Flight_Dep_ActTime,Flight_Dest_ActTime,\n\tActype,AcNo,ControlFlag,FlightFlag,Flight_Dep_ID,Flight_Dest_ID,Area,FlightArea,MaxActypeLoad,\n\tMaxBookingWeight,MaxLoadedWeight,MaxLoadedVolume,ControlWeight,ControlVolume,InnerWeight,InnerVolume,FreeWeight,FreeVolume,\n\tMultiSegmentFlag,YwComRun,UpdateFlag,MaxBookingVolume,Delay_ID,Service_Type,Leg_Status,SocExisted,SocSame,GetDate(),'A'\n\tFrom CARGO2.DBO.TBL_Flight\n\twhere flightdate>=@sFdate2 AND flightdate<=@sFdate1\n\n--执行虚耗捕捉的存储过程\n\n\texec TangForUllageArrCapture\n\n\n\t--删除虚耗数据\n\t--Delete From OPENDATASOURCE(\n\t--'SQLOLEDB_NO';Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=00.00.00.30\\CARGOYWDB,1433').CARGO2.DBO.tbl_YW_ullage\n\tDelete From [00.00.00.30].CARGO2.DBO.tbl_YW_ullage\n\tWhere FlightDate>=@sFdate2 and FlightDate<=@sFdate1\n\t--Where  Op_Date>=@sFdate2 AND Op_Date<=@sFdate1\n             If @@error<>0 \n\tBegin\n\t\tGoto ErrorHandler\n\tEnd\n\n\t--插 入虚耗数据\n\tINSERT [00.00.00.30].CARGO2.DBO.tbl_YW_ullage\n\t(OLDWEIGHT,OLDVOLUME,\n\t\tFlightNo,FlightDate,Flight_Dep,Flight_Dest,RESER,AWBCITY,Goods,\n\t\tOP_ID,\n\t\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OP_DATE,\n\t\tOLDBOOKWEIGHT,OLDBOOKVOLUME,NEWBOOKWEIGHT,\n\t\tNEWBOOKVOLUME,NEWWEIGHT,NEWVOLUME)\n\tSelect OLDWEIGHT,OLDVOLUME,\n\t\tFlightNo,FlightDate,Flight_Dep,Flight_Dest,RESER,AWBCITY,Goods,\n\t\tOP_ID,\n\t\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OP_DATE,\n\t\tOLDBOOKWEIGHT,OLDBOOKVOLUME,NEWBOOKWEIGHT,\n\t\tNEWBOOKVOLUME,NEWWEIGHT,NEWVOLUME\n\tFrom CARGO2.DBO.tbl_ullage\n\twhere flightdate>=@sFdate2 AND flightdate<=@sFdate1\n\n\n\t--删除到货虚耗数据\n\t--Delete From OPENDATASOURCE(\n\t--'SQLOLEDB_NO';Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=00.00.00.19\\CARGOYWDB,1433').CARGO2.DBO.TBL_YW_ULLAGE_ARR\n\t--Where  OpDate>=@sFdate2 AND OpDate<=@sFdate1\n             --If @@error<>0 \n\t--Begin\n\t--\tGoto ErrorHandler\n\t--End\n\t--现在修改新的到货虚耗删除，使用航班日期\n\t--Delete From OPENDATASOURCE(\n\t--'SQLOLEDB_NO';Persist Security Info=True;User ID=yw2sa;Initial Catalog=cargo2;Data Source=00.00.00.30\\CARGOYWDB,1433').CARGO2.DBO.TBL_YW_ULLAGE_ARR\n\tDelete From [00.00.00.30].CARGO2.DBO.TBL_YW_ULLAGE_ARR\n\tWhere  FlightDate>=@sFdate2 AND FlightDate<=@sFdate1\n             If @@error<>0 \n\tBegin\n\t\tGoto ErrorHandler\n\tEnd\n/*\n\t--插入到货虚耗数据\n\tINSERT [00.00.00.19].CARGO2.DBO.TBL_YW_ULLAGE_ARR\n\t(FlightNo,FlightDate,Flight_Dep,Flight_Dest,AgentCode,Goods,\n\t\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OpDate,BookWeight,ActDepWeight,DrawbackWeight,\n\t\tActDepBookWeight)\n\tSelect FlightNo,FlightDate,Flight_Dep,Flight_Dest,AgentCode,Goods,\n\t\tBook_Id,AwbPrefix,AwbNo,AwbPostFix,OpDate,BookWeight,ActDepWeight,DrawbackWeight,\n\t\tActDepBookWeight\n\tFrom CARGO2.DBO.tbl_ullage_arr\n\tWhere  OpDate>=@sFdate2 AND OpDate<=@sFdate1\n*/\n\t-- 航班事务结束操作\n\t--Commit Transaction TransHandle\n\nSucHandler:\n\t-- 步骤完成\n\tUPDATE TBL_YW_LOG SET [ENDTIME]=GETDATE(),[OPTResult]='REPORTSUC'\n\tWHERE LOG_ID =@iden\n\tReturn\nErrorHandler:\n\t-- 步骤错误\n\tPrint '操作事务回滚'\n\t--Rollback Transaction TransHandle\n\n\tUPDATE TBL_YW_LOG SET [ENDTIME]=GETDATE(),[OPTResult]='REPORTERR'\n\tWHERE LOG_ID =@iden\n\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE sp_YwA_DistillUllageReportDataAll() \nAS \nBEGIN\n    DECLARE sFdate1 VARCHAR(20);\n    DECLARE sFdate2 VARCHAR(20);\n    DECLARE Yw_Op_Date TIMESTAMP;\n    DECLARE YwUser VARCHAR(10);\n    DECLARE StartTime TIMESTAMP;\n    DECLARE EndTime TIMESTAMP;\n    DECLARE iden INT;\n\n    -- 删除日期重复数据\n    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\n    SET StartTime = CURRENT_TIMESTAMP;\n    SET YwUser = 'YWUSER';\n    SET Yw_Op_Date = NULL;\n\n    SELECT CURRENT_TIMESTAMP INTO Yw_Op_Date;\n\n    RAISE NOTICE '新建开始抽取日期';\n    CALL sp_YwA_InsLog(Yw_Op_Date, StartTime, NULL, 0, 'REPORTRUN', 'sp_YwA_DistillUllageReportDataAll--在A库中抽取前七天报表数据到临时表');\n\n    SET sFdate1 = TO_CHAR(Yw_Op_Date - INTERVAL '1 DAY', 'YYYY-MM-DD') || '  23:59:59';\n    SET sFdate2 = TO_CHAR(Yw_Op_Date - INTERVAL '7 DAY', 'YYYY-MM-DD') || '  00:00:00';\n\n    -- 步骤开始\n    SELECT NEXTVAL('seq_identity') INTO iden;\n\n    RAISE NOTICE '业维日期：%最早日期：%最晚日期：%', TO_CHAR(Yw_Op_Date, 'YYYY-MM-DD'), sFdate1, sFdate2;\n    RAISE NOTICE '删除临时表记录';\n\n    -- 开始操作\n    -- 删除动态航班数据\n    DELETE FROM CARGO2.DBO.TBL_Flight\n    WHERE FlightDate >= sFdate2 AND FlightDate <= sFdate1;\n\n    IF NOT FOUND THEN\n        GOTO ErrorHandler;\n    END IF;\n\n    -- 插入动态航班数据\n    INSERT INTO CARGO2.DBO.TBL_Flight\n    (FlightNo, FlightDate, Flight_Dep, Flight_Dest, Manifest_ID, Flight_Dep_Time, Flight_Dest_Time, Flight_Dep_ActTime, Flight_Dest_ActTime, \n     Actype, AcNo, ControlFlag, FlightFlag, Flight_Dep_ID, Flight_Dest_ID, Area, FlightArea, MaxActypeLoad, MaxBookingWeight, MaxLoadedWeight, \n     MaxLoadedVolume, ControlWeight, ControlVolume, InnerWeight, InnerVolume, FreeWeight, FreeVolume, MultiSegmentFlag, YwComRun, UpdateFlag, \n     MaxBookingVolume, Delay_ID, Service_Type, Leg_Status, SocExisted, SocSame, YW_OP_TIME, YW_OWNER)\n    SELECT FlightNo, FlightDate, Flight_Dep, Flight_Dest, Manifest_ID, Flight_Dep_Time, Flight_Dest_Time, Flight_Dep_ActTime, Flight_Dest_ActTime, \n           Actype, AcNo, ControlFlag, FlightFlag, Flight_Dep_ID, Flight_Dest_ID, Area, FlightArea, MaxActypeLoad, MaxBookingWeight, MaxLoadedWeight, \n           MaxLoadedVolume, ControlWeight, ControlVolume, InnerWeight, InnerVolume, FreeWeight, FreeVolume, MultiSegmentFlag, YwComRun, UpdateFlag, \n           MaxBookingVolume, Delay_ID, Service_Type, Leg_Status, SocExisted, SocSame, CURRENT_TIMESTAMP, 'A'\n    FROM CARGO2.DBO.TBL_Flight\n    WHERE FlightDate >= sFdate2 AND FlightDate <= sFdate1;\n\n    -- 执行虚耗捕捉的存储过程\n    CALL TangForUllageArrCapture();\n\n    -- 删除虚耗数据\n    DELETE FROM CARGO2.DBO.tbl_YW_ullage\n    WHERE FlightDate >= sFdate2 AND FlightDate <= sFdate1;\n\n    IF NOT FOUND THEN\n        GOTO ErrorHandler;\n    END IF;\n\n    -- 插入虚耗数据\n    INSERT INTO CARGO2.DBO.tbl_YW_ullage\n    (OLDWEIGHT, OLDVOLUME, FlightNo, FlightDate, Flight_Dep, Flight_Dest, RESER, AWBCITY, Goods, OP_ID, Book_Id, AwbPrefix, AwbNo, AwbPostFix, OP_DATE, \n     OLDBOOKWEIGHT, OLDBOOKVOLUME, NEWBOOKWEIGHT, NEWBOOKVOLUME, NEWWEIGHT, NEWVOLUME)\n    SELECT OLDWEIGHT, OLDVOLUME, FlightNo, FlightDate, Flight_Dep, Flight_Dest, RESER, AWBCITY, Goods, OP_ID, Book_Id, AwbPrefix, AwbNo, AwbPostFix, \n           OP_DATE, OLDBOOKWEIGHT, OLDBOOKVOLUME, NEWBOOKWEIGHT, NEWBOOKVOLUME, NEWWEIGHT, NEWVOLUME\n    FROM CARGO2.DBO.tbl_ullage\n    WHERE FlightDate >= sFdate2 AND FlightDate <= sFdate1;\n\n    -- 删除到货虚耗数据\n    DELETE FROM CARGO2.DBO.TBL_YW_ULLAGE_ARR\n    WHERE FlightDate >= sFdate2 AND FlightDate <= sFdate1;\n\n    IF NOT FOUND THEN\n        GOTO ErrorHandler;\n    END IF;\n\nSucHandler:\n    -- 步骤完成\n    UPDATE TBL_YW_LOG SET ENDTIME = CURRENT_TIMESTAMP, OPTResult = 'REPORTSUC'\n    WHERE LOG_ID = iden;\n    RETURN;\n\nErrorHandler:\n    -- 步骤错误\n    RAISE NOTICE '操作事务回滚';\n    -- 回滚事务逻辑代码（GaussDB不支持显式事务回滚处理中直接 GOTO，一般依赖触发逻辑中实现事务管理）\n\n    UPDATE TBL_YW_LOG SET ENDTIME = CURRENT_TIMESTAMP, OPTResult = 'REPORTERR'\n    WHERE LOG_ID = iden;\nEND;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE PROCEDURE sp_YwA_DistillUllageReportDataAll() \nLANGUAGE plpgsql\nAS $$\nDECLARE \n    sFdate1 VARCHAR(20);\n    sFdate2 VARCHAR(20);\n    Yw_Op_Date TIMESTAMP;\n    YwUser VARCHAR(10);\n    StartTime TIMESTAMP;\n    EndTime TIMESTAMP;\n    iden INT;\nBEGIN\n    -- 删除日期重复数据\n    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\n    StartTime := now();\n    YwUser := 'YWUSER';\n    Yw_Op_Date := NULL;\n\n    SELECT StartTime INTO Yw_Op_Date;\n\n    RAISE NOTICE '新建开始抽取日期';\n    PERFORM sp_YwA_InsLog(Yw_Op_Date, StartTime, NULL, 0, 'REPORTRUN', 'sp_YwA_DistillUllageReportDataAll--在A库中抽取前七天报表数据到临时表');\n\n    sFdate1 := TO_CHAR((Yw_Op_Date - INTERVAL '1 DAY'), 'YYYY-MM-DD') || '  23:59:59 ';\n    sFdate2 := TO_CHAR((Yw_Op_Date - INTERVAL '7 DAY'), 'YYYY-MM-DD') || '  00:00:00 ';\n\n    RAISE NOTICE '业维日期：% 最早日期：% 最晚日期：%', TO_CHAR(Yw_Op_Date, 'YYYY-MM-DD'), sFdate1, sFdate2;\n\n    RAISE NOTICE '删除临时表记录';\n\n    -- 删除动态航班数据 \n    DELETE FROM CARGO2.DBO.TBL_Flight\n    WHERE FlightDate >= sFdate2::TIMESTAMP AND FlightDate <= sFdate1::TIMESTAMP;\n\n    IF NOT FOUND THEN\n        RAISE EXCEPTION 'Error occurred deleting dynamic flight data';\n    END IF;\n\n    -- 插入动态航班数据\n    INSERT INTO CARGO2.DBO.TBL_Flight (FlightNo, FlightDate, Flight_Dep, Flight_Dest, Manifest_ID, Flight_Dep_Time, Flight_Dest_Time, Flight_Dep_ActTime, Flight_Dest_ActTime, Actype, AcNo, ControlFlag, FlightFlag, Flight_Dep_ID, Flight_Dest_ID, Area, FlightArea, MaxActypeLoad, MaxBookingWeight, MaxLoadedWeight, MaxLoadedVolume, ControlWeight, ControlVolume, InnerWeight, InnerVolume, FreeWeight, FreeVolume, MultiSegmentFlag, YwComRun, UpdateFlag, MaxBookingVolume, Delay_ID, Service_Type, Leg_Status, SocExisted, SocSame, YW_OP_TIME, YW_OWNER)\n    SELECT FlightNo, FlightDate, Flight_Dep, Flight_Dest, Manifest_ID, Flight_Dep_Time, Flight_Dest_Time, Flight_Dep_ActTime, Flight_Dest_ActTime, Actype, AcNo, ControlFlag, FlightFlag, Flight_Dep_ID, Flight_Dest_ID, Area, FlightArea, MaxActypeLoad, MaxBookingWeight, MaxLoadedWeight, MaxLoadedVolume, ControlWeight, ControlVolume, InnerWeight, InnerVolume, FreeWeight, FreeVolume, MultiSegmentFlag, YwComRun, UpdateFlag, MaxBookingVolume, Delay_ID, Service_Type, Leg_Status, SocExisted, SocSame, now(), 'A'\n    FROM CARGO2.DBO.TBL_Flight\n    WHERE FlightDate >= sFdate2::TIMESTAMP AND FlightDate <= sFdate1::TIMESTAMP;\n\n    -- 执行虚耗捕捉的存储过程\n    PERFORM TangForUllageArrCapture();\n\n    -- 删除虚耗数据\n    DELETE FROM CARGO2.DBO.tbl_YW_ullage\n    WHERE FlightDate >= sFdate2::TIMESTAMP AND FlightDate <= sFdate1::TIMESTAMP;\n\n    IF NOT FOUND THEN\n        RAISE EXCEPTION 'Error occurred deleting ullage data';\n    END IF;\n\n    -- 插入虚耗数据\n    INSERT INTO CARGO2.DBO.tbl_YW_ullage (OLDWEIGHT, OLDVOLUME, FlightNo, FlightDate, Flight_Dep, Flight_Dest, RESER, AWBCITY, Goods, OP_ID, Book_Id, AwbPrefix, AwbNo, AwbPostFix, OP_DATE, OLDBOOKWEIGHT, OLDBOOKVOLUME, NEWBOOKWEIGHT, NEWBOOKVOLUME, NEWWEIGHT, NEWVOLUME)\n    SELECT OLDWEIGHT, OLDVOLUME, FlightNo, FlightDate, Flight_Dep, Flight_Dest, RESER, AWBCITY, Goods, OP_ID, Book_Id, AwbPrefix, AwbNo, AwbPostFix, OP_DATE, OLDBOOKWEIGHT, OLDBOOKVOLUME, NEWBOOKWEIGHT, NEWBOOKVOLUME, NEWWEIGHT, NEWVOLUME\n    FROM CARGO2.DBO.tbl_ullage\n    WHERE FlightDate >= sFdate2::TIMESTAMP AND FlightDate <= sFdate1::TIMESTAMP;\n\n    -- 删除到货虚耗数据\n    DELETE FROM CARGO2.DBO.TBL_YW_ULLAGE_ARR\n    WHERE FlightDate >= sFdate2::TIMESTAMP AND FlightDate <= sFdate1::TIMESTAMP;\n\n    IF NOT FOUND THEN\n        RAISE EXCEPTION 'Error occurred deleting arrival ullage data';\n    END IF;\n\nSucHandler:\n    -- 步骤完成\n    UPDATE TBL_YW_LOG SET ENDTIME = now(), OPTResult = 'REPORTSUC'\n    WHERE LOG_ID = iden;\n\n    RETURN;\n\nErrorHandler:\n    -- 步骤错误\n    RAISE NOTICE '操作事务回滚';\n    UPDATE TBL_YW_LOG SET ENDTIME = now(), OPTResult = 'REPORTERR'\n    WHERE LOG_ID = iden;\nEND;\n$$;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE PROCEDURE sp_YwA_DistillUllageReportDataAll()\nBEGIN\nDECLARE sFdate1 VARCHAR(20);\nDECLARE sFdate2 VARCHAR(20);\nDECLARE Yw_Op_Date TIMESTAMP;\nDECLARE YwUser VARCHAR(10);\nDECLARE StartTime TIMESTAMP;\nDECLARE EndTime TIMESTAMP;\nDECLARE iden INT;\n\nSET StartTime = NOW();\nSET YwUser = 'YWUSER';\nSET Yw_Op_Date = NULL;\n\nSELECT StartTime INTO Yw_Op_Date;\n\nSELECT CONCAT(DATE_FORMAT(DATE_SUB(Yw_Op_Date, INTERVAL 1 DAY), '%Y-%m-%d'), ' 23:59:59') INTO sFdate1;\nSELECT CONCAT(DATE_FORMAT(DATE_SUB(Yw_Op_Date, INTERVAL 7 DAY), '%Y-%m-%d'), ' 00:00:00') INTO sFdate2;\n\nSELECT LAST_INSERT_ID() INTO iden;\n\nDELETE FROM `00.00.00.30`.CARGO2.TBL_Flight\nWHERE FlightDate >= sFdate2 AND FlightDate <= sFdate1;\nIF NOT FOUND THEN\n    GOTO ErrorHandler;\nEND IF;\n\nINSERT INTO `00.00.00.30`.CARGO2.TBL_Flight\n(FlightNo, FlightDate, Flight_Dep, Flight_Dest, Manifest_ID, Flight_Dep_Time, Flight_Dest_Time, Flight_Dep_ActTime, Flight_Dest_ActTime,\nActype, AcNo, ControlFlag, FlightFlag, Flight_Dep_ID, Flight_Dest_ID, Area, FlightArea, MaxActypeLoad,\nMaxBookingWeight, MaxLoadedWeight, MaxLoadedVolume, ControlWeight, ControlVolume, InnerWeight, InnerVolume, FreeWeight, FreeVolume,\nMultiSegmentFlag, YwComRun, UpdateFlag, MaxBookingVolume, Delay_ID, Service_Type, Leg_Status, SocExisted, SocSame, YW_OP_TIME, YW_OWNER)\nSELECT FlightNo, FlightDate, Flight_Dep, Flight_Dest, Manifest_ID, Flight_Dep_Time, Flight_Dest_Time, Flight_Dep_ActTime, Flight_Dest_ActTime,\nActype, AcNo, ControlFlag, FlightFlag, Flight_Dep_ID, Flight_Dest_ID, Area, FlightArea, MaxActypeLoad,\nMaxBookingWeight, MaxLoadedWeight, MaxLoadedVolume, ControlWeight, ControlVolume, InnerWeight, InnerVolume, FreeWeight, FreeVolume,\nMultiSegmentFlag, YwComRun, UpdateFlag, MaxBookingVolume, Delay_ID, Service_Type, Leg_Status, SocExisted, SocSame, NOW(), 'A'\nFROM CARGO2.TBL_Flight\nWHERE FlightDate >= sFdate2 AND FlightDate <= sFdate1;\n\nCALL TangForUllageArrCapture();\n\nDELETE FROM `00.00.00.30`.CARGO2.tbl_YW_ullage\nWHERE FlightDate >= sFdate2 AND FlightDate <= sFdate1;\nIF NOT FOUND THEN\n    GOTO ErrorHandler;\nEND IF;\n\nINSERT INTO `00.00.00.30`.CARGO2.tbl_YW_ullage\n(OLDWEIGHT, OLDVOLUME, FlightNo, FlightDate, Flight_Dep, Flight_Dest, RESER, AWBCITY, Goods,\nOP_ID, Book_Id, AwbPrefix, AwbNo, AwbPostFix, OP_DATE,\nOLDBOOKWEIGHT, OLDBOOKVOLUME, NEWBOOKWEIGHT,\nNEWBOOKVOLUME, NEWWEIGHT, NEWVOLUME)\nSELECT OLDWEIGHT, OLDVOLUME, FlightNo, FlightDate, Flight_Dep, Flight_Dest, RESER, AWBCITY, Goods,\nOP_ID, Book_Id, AwbPrefix, AwbNo, AwbPostFix, OP_DATE,\nOLDBOOKWEIGHT, OLDBOOKVOLUME, NEWBOOKWEIGHT,\nNEWBOOKVOLUME, NEWWEIGHT, NEWVOLUME\nFROM CARGO2.tbl_ullage\nWHERE FlightDate >= sFdate2 AND FlightDate <= sFdate1;\n\nDELETE FROM `00.00.00.30`.CARGO2.TBL_YW_ULLAGE_ARR\nWHERE FlightDate >= sFdate2 AND FlightDate <= sFdate1;\nIF NOT FOUND THEN\n    GOTO ErrorHandler;\nEND IF;\n\nUPDATE TBL_YW_LOG SET ENDTIME = NOW(), OPTResult = 'REPORTSUC'\nWHERE LOG_ID = iden;\n\nRETURN;\n\nErrorHandler:\nROLLBACK;\n\nUPDATE TBL_YW_LOG SET ENDTIME = NOW(), OPTResult = 'REPORTERR'\nWHERE LOG_ID = iden;\n\nEND;"
                    }
                ]
            },
            {
                "case_id": "14",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"14\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"SET NOCOUNT ON\", \"DECLARE\", \"NVARCHAR2\", \"INT\", \"BEGIN TRY\", \"GETDATE\", \"NOW\", \"CURRENT_TIMESTAMP\", \"SCOPE_IDENTITY\", \"EXEC\", \"@@ROWCOUNT\", \"WHILE\", \"CAST\", \"TOP\", \"PRINT\", \"RAISERROR\", \"ERROR_MESSAGE\", \"RAISE EXCEPTION\", \"BREAK\", \"COUNT\", \"OUTPUT\", \"MAX\"]}, \"sql\": \"CREATE PROCEDURE SP_DataMigration @SourceTable NVARCHAR(128), @TargetTable NVARCHAR(128), @BatchSize INT = 10000 AS BEGIN SET NOCOUNT ON; DECLARE @SQL NVARCHAR(MAX); DECLARE @SourceCount INT, @TargetCount INT, @BatchCount INT = 0; DECLARE @MigrationID INT; DECLARE @ErrorMessage NVARCHAR(4000); BEGIN TRY INSERT INTO MigrationLog (SourceTable, TargetTable, StartTime, Status) VALUES (@SourceTable, @TargetTable, GETDATE(), 'RUNNING'); SET @MigrationID = SCOPE_IDENTITY(); SET @SQL = 'SELECT @Count = COUNT(*) FROM ' + @SourceTable; EXEC sp_executesql @SQL, N'@Count INT OUTPUT', @Count = @SourceCount OUTPUT; UPDATE MigrationLog SET SourceCount = @SourceCount WHERE MigrationID = @MigrationID; SET @SQL = 'DELETE FROM ' + @TargetTable; EXEC sp_executesql @SQL; WHILE @BatchCount < @SourceCount BEGIN SET @SQL = 'INSERT INTO ' + @TargetTable + ' SELECT TOP ' + CAST(@BatchSize AS NVARCHAR(10)) + ' * FROM ' + @SourceTable + ' WHERE NOT EXISTS (SELECT 1 FROM ' + @TargetTable + ' t WHERE t.ID = ' + @SourceTable + '.ID)'; EXEC sp_executesql @SQL; IF @@ROWCOUNT = 0 BREAK; SET @BatchCount = @BatchCount + @@ROWCOUNT; END; SET @SQL = 'SELECT @Count = COUNT(*) FROM ' + @TargetTable; EXEC sp_executesql @SQL, N'@Count INT OUTPUT', @Count = @TargetCount OUTPUT; UPDATE MigrationLog SET EndTime = GETDATE(), TargetCount = @TargetCount, Status = CASE WHEN @SourceCount = @TargetCount THEN 'SUCCESS' ELSE 'WARNING' END WHERE MigrationID = @MigrationID; PRINT 'Migration completed for ' + @SourceTable + '. Source: ' + CAST(@SourceCount AS NVARCHAR(10)) + ', Target: ' + CAST(@TargetCount AS NVARCHAR(10)); END TRY BEGIN CATCH SET @ErrorMessage = ERROR_MESSAGE(); UPDATE MigrationLog SET EndTime = GETDATE(), Status = 'FAILED', ErrorMessage = @ErrorMessage WHERE MigrationID = @MigrationID; RAISERROR('Data migration failed: %s', 16, 1, @ErrorMessage); END CATCH; END;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE SP_DataMigration @SourceTable NVARCHAR(128), @TargetTable NVARCHAR(128), @BatchSize INT = 10000 AS BEGIN SET NOCOUNT ON; DECLARE @SQL NVARCHAR(MAX); DECLARE @SourceCount INT, @TargetCount INT, @BatchCount INT = 0; DECLARE @MigrationID INT; DECLARE @ErrorMessage NVARCHAR(4000); BEGIN TRY INSERT INTO MigrationLog (SourceTable, TargetTable, StartTime, Status) VALUES (@SourceTable, @TargetTable, GETDATE(), 'RUNNING'); SET @MigrationID = SCOPE_IDENTITY(); SET @SQL = 'SELECT @Count = COUNT(*) FROM ' + @SourceTable; EXEC sp_executesql @SQL, N'@Count INT OUTPUT', @Count = @SourceCount OUTPUT; UPDATE MigrationLog SET SourceCount = @SourceCount WHERE MigrationID = @MigrationID; SET @SQL = 'DELETE FROM ' + @TargetTable; EXEC sp_executesql @SQL; WHILE @BatchCount < @SourceCount BEGIN SET @SQL = 'INSERT INTO ' + @TargetTable + ' SELECT TOP ' + CAST(@BatchSize AS NVARCHAR(10)) + ' * FROM ' + @SourceTable + ' WHERE NOT EXISTS (SELECT 1 FROM ' + @TargetTable + ' t WHERE t.ID = ' + @SourceTable + '.ID)'; EXEC sp_executesql @SQL; IF @@ROWCOUNT = 0 BREAK; SET @BatchCount = @BatchCount + @@ROWCOUNT; END; SET @SQL = 'SELECT @Count = COUNT(*) FROM ' + @TargetTable; EXEC sp_executesql @SQL, N'@Count INT OUTPUT', @Count = @TargetCount OUTPUT; UPDATE MigrationLog SET EndTime = GETDATE(), TargetCount = @TargetCount, Status = CASE WHEN @SourceCount = @TargetCount THEN 'SUCCESS' ELSE 'WARNING' END WHERE MigrationID = @MigrationID; PRINT 'Migration completed for ' + @SourceTable + '. Source: ' + CAST(@SourceCount AS NVARCHAR(10)) + ', Target: ' + CAST(@TargetCount AS NVARCHAR(10)); END TRY BEGIN CATCH SET @ErrorMessage = ERROR_MESSAGE(); UPDATE MigrationLog SET EndTime = GETDATE(), Status = 'FAILED', ErrorMessage = @ErrorMessage WHERE MigrationID = @MigrationID; RAISERROR('Data migration failed: %s', 16, 1, @ErrorMessage); END CATCH; END;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_DataMigration(IN SourceTable VARCHAR(128), IN TargetTable VARCHAR(128), IN BatchSize INT DEFAULT 10000) LANGUAGE plpgsql AS $$\nDECLARE\n    SQL TEXT;\n    SourceCount INT;\n    TargetCount INT;\n    BatchCount INT DEFAULT 0;\n    MigrationID INT;\n    ErrorMessage TEXT;\nBEGIN\n    INSERT INTO MigrationLog (SourceTable, TargetTable, StartTime, Status)\n    VALUES (SourceTable, TargetTable, CURRENT_TIMESTAMP, 'RUNNING');\n    \n    SELECT CURRVAL('MigrationLog_MigrationID_seq') INTO MigrationID;\n    \n    SQL := 'SELECT COUNT(*) FROM ' || SourceTable;\n    EXECUTE SQL INTO SourceCount;\n    \n    UPDATE MigrationLog SET SourceCount = SourceCount WHERE MigrationID = MigrationID;\n    \n    SQL := 'DELETE FROM ' || TargetTable;\n    EXECUTE SQL;\n    \n    WHILE BatchCount < SourceCount LOOP\n        SQL := 'INSERT INTO ' || TargetTable || \n               ' SELECT * FROM ' || SourceTable || \n               ' WHERE NOT EXISTS (SELECT 1 FROM ' || TargetTable || \n               ' t WHERE t.ID = ' || SourceTable || '.ID) LIMIT ' || BatchSize;\n               \n        EXECUTE SQL;\n        \n        GET DIAGNOSTICS BatchCount = ROW_COUNT;\n        \n        IF BatchCount = 0 THEN\n            EXIT;\n        END IF;\n        \n        BatchCount := BatchCount + BatchCount;\n    END LOOP;\n    \n    SQL := 'SELECT COUNT(*) FROM ' || TargetTable;\n    EXECUTE SQL INTO TargetCount;\n    \n    UPDATE MigrationLog \n    SET EndTime = CURRENT_TIMESTAMP, \n        TargetCount = TargetCount, \n        Status = CASE WHEN SourceCount = TargetCount THEN 'SUCCESS' ELSE 'WARNING' END \n    WHERE MigrationID = MigrationID;\n    \n    RAISE NOTICE 'Migration completed for %. Source: %, Target: %', SourceTable, SourceCount, TargetCount;\nEXCEPTION\n    WHEN OTHERS THEN\n        GET STACKED DIAGNOSTICS ErrorMessage = MESSAGE_TEXT;\n        UPDATE MigrationLog \n        SET EndTime = CURRENT_TIMESTAMP, \n            Status = 'FAILED', \n            ErrorMessage = ErrorMessage \n        WHERE MigrationID = MigrationID;\n        RAISE EXCEPTION 'Data migration failed: %', ErrorMessage;\nEND;\n$$;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE PROCEDURE sp_datamigration (in SourceTable VARCHAR(128), in TargetTable VARCHAR(128), in BatchSize INT DEFAULT 10000)\nLANGUAGE plpgsql\nAS $$\nDECLARE\n    SQLCmd TEXT;\n    SourceCount INT;\n    TargetCount INT;\n    BatchCount INT DEFAULT 0;\n    MigrationID BIGINT;\n    ErrorMessage TEXT;\nBEGIN\n    INSERT INTO MigrationLog (SourceTable, TargetTable, StartTime, Status) \n    VALUES (SourceTable, TargetTable, NOW(), 'RUNNING') \n    RETURNING MigrationID INTO MigrationID;\n\n    SQLCmd := format('SELECT COUNT(*) INTO SourceCount FROM %I', SourceTable);\n    EXECUTE SQLCmd;\n\n    UPDATE MigrationLog SET SourceCount = SourceCount WHERE MigrationID = MigrationID;\n\n    SQLCmd := format('DELETE FROM %I', TargetTable);\n    EXECUTE SQLCmd;\n\n    WHILE BatchCount < SourceCount LOOP\n        SQLCmd := format('INSERT INTO %I SELECT * FROM %I WHERE NOT EXISTS (SELECT 1 FROM %I t WHERE t.ID = %I.ID) LIMIT %s', \n                         TargetTable, SourceTable, TargetTable, SourceTable, BatchSize::TEXT);\n        EXECUTE SQLCmd;\n\n        GET DIAGNOSTICS TargetCount = ROW_COUNT;\n        IF TargetCount = 0 THEN\n            EXIT;\n        END IF;\n\n        BatchCount := BatchCount + TargetCount;\n    END LOOP;\n\n    SQLCmd := format('SELECT COUNT(*) INTO TargetCount FROM %I', TargetTable);\n    EXECUTE SQLCmd;\n\n    UPDATE MigrationLog \n    SET EndTime = NOW(), \n        TargetCount = TargetCount, \n        Status = CASE WHEN SourceCount = TargetCount THEN 'SUCCESS' ELSE 'WARNING' END \n    WHERE MigrationID = MigrationID;\n\n    RAISE NOTICE 'Migration completed for %. Source: %, Target: %', SourceTable, SourceCount, TargetCount;\n\nEXCEPTION\n    WHEN OTHERS THEN\n        GET STACKED DIAGNOSTICS ErrorMessage = MESSAGE_TEXT;\n        UPDATE MigrationLog \n        SET EndTime = NOW(), \n            Status = 'FAILED', \n            ErrorMessage = ErrorMessage \n        WHERE MigrationID = MigrationID;\n        RAISE EXCEPTION 'Data migration failed: %', ErrorMessage;\nEND;\n$$;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_DataMigration(SourceTable VARCHAR(128), TargetTable VARCHAR(128), BatchSize INT DEFAULT 10000) LANGUAGE plpgsql AS $$ BEGIN DECLARE SourceCount INT; DECLARE TargetCount INT; DECLARE BatchCount INT DEFAULT 0; DECLARE MigrationID INT; DECLARE ErrorMessage TEXT; BEGIN INSERT INTO MigrationLog (SourceTable, TargetTable, StartTime, Status) VALUES (SourceTable, TargetTable, CURRENT_TIMESTAMP, 'RUNNING'); SELECT CURRVAL(pg_get_serial_sequence('MigrationLog', 'MigrationID')) INTO MigrationID; EXECUTE format('SELECT COUNT(*) FROM %I', SourceTable) INTO SourceCount; UPDATE MigrationLog SET SourceCount = SourceCount WHERE MigrationID = MigrationID; EXECUTE format('DELETE FROM %I', TargetTable); WHILE BatchCount < SourceCount LOOP EXECUTE format('INSERT INTO %I SELECT * FROM %I WHERE NOT EXISTS (SELECT 1 FROM %I t WHERE t.ID = %I.ID) LIMIT %s', TargetTable, SourceTable, TargetTable, SourceTable, BatchSize); GET DIAGNOSTICS TargetCount = ROW_COUNT; IF TargetCount = 0 THEN EXIT; END IF; BatchCount := BatchCount + TargetCount; END LOOP; EXECUTE format('SELECT COUNT(*) FROM %I', TargetTable) INTO TargetCount; UPDATE MigrationLog SET EndTime = CURRENT_TIMESTAMP, TargetCount = TargetCount, Status = CASE WHEN SourceCount = TargetCount THEN 'SUCCESS' ELSE 'WARNING' END WHERE MigrationID = MigrationID; RAISE NOTICE 'Migration completed for %. Source: %, Target: %', SourceTable, SourceCount, TargetCount; EXCEPTION WHEN OTHERS THEN GET STACKED DIAGNOSTICS ErrorMessage = MESSAGE_TEXT; UPDATE MigrationLog SET EndTime = CURRENT_TIMESTAMP, Status = 'FAILED', ErrorMessage = ErrorMessage WHERE MigrationID = MigrationID; RAISE EXCEPTION 'Data migration failed: %', ErrorMessage; END; END; $$;"
                    }
                ]
            },
            {
                "case_id": "15",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"15\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"SET NOCOUNT ON\", \"GETDATE\", \"NOW\", \"CURRENT_TIMESTAMP\", \"DECLARE\", \"NVARCHAR2\", \"CURSOR\", \"BEGIN TRY\", \"RAISERROR\", \"COUNT\", \"CAST\", \"OPEN\", \"FETCH NEXT\", \"@@FETCH_STATUS\", \"WHILE\", \"current_user\", \"session_user\", \"RAISERROR\", \"ERROR_MESSAGE\", \"RAISE EXCEPTION\", \"CLOSE\", \"DEALLOCATE\", \"PRINT\", \"INT\"]}, \"sql\": \"CREATE PROCEDURE SP_UpdateProductCategories @OldCategoryID INT, @NewCategoryID INT, @EffectiveDate DATETIME = NULL AS BEGIN SET NOCOUNT ON; IF @EffectiveDate IS NULL SET @EffectiveDate = GETDATE(); DECLARE @ProductCount INT, @UpdatedCount INT = 0; DECLARE @ProductID INT, @ProductName NVARCHAR(100); DECLARE product_cursor CURSOR FOR SELECT ProductID, ProductName FROM Products WHERE CategoryID = @OldCategoryID AND Status = 'ACTIVE'; BEGIN TRY IF @OldCategoryID = @NewCategoryID RAISERROR('Old and new category IDs cannot be the same', 16, 1); SELECT @ProductCount = COUNT(*) FROM Products WHERE CategoryID = @OldCategoryID AND Status = 'ACTIVE'; IF @ProductCount = 0 BEGIN PRINT 'No active products found in category ' + CAST(@OldCategoryID AS NVARCHAR(10)); RETURN; END; OPEN product_cursor; FETCH NEXT FROM product_cursor INTO @ProductID, @ProductName; WHILE @@FETCH_STATUS = 0 BEGIN BEGIN TRY INSERT INTO ProductCategoryHistory (ProductID, OldCategoryID, NewCategoryID, ChangeDate, ChangedBy) VALUES (@ProductID, @OldCategoryID, @NewCategoryID, @EffectiveDate, SUSER_SNAME()); UPDATE Products SET CategoryID = @NewCategoryID, LastModifiedDate = @EffectiveDate, LastModifiedBy = SUSER_SNAME() WHERE ProductID = @ProductID; SET @UpdatedCount = @UpdatedCount + 1; END TRY BEGIN CATCH INSERT INTO CategoryUpdateErrors (ProductID, ErrorMessage, ErrorDate) VALUES (@ProductID, ERROR_MESSAGE(), GETDATE()); END CATCH; FETCH NEXT FROM product_cursor INTO @ProductID, @ProductName; END; CLOSE product_cursor; DEALLOCATE product_cursor; UPDATE ProductCategories SET LastUpdateDate = @EffectiveDate WHERE CategoryID IN (@OldCategoryID, @NewCategoryID); PRINT 'Category update completed. ' + CAST(@UpdatedCount AS NVARCHAR(10)) + ' products updated out of ' + CAST(@ProductCount AS NVARCHAR(10)) + ' total.'; END TRY BEGIN CATCH IF CURSOR_STATUS('global', 'product_cursor') >= 0 BEGIN CLOSE product_cursor; DEALLOCATE product_cursor; END; RAISERROR('Category update failed: %s', 16, 1, ERROR_MESSAGE()); END CATCH; END;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE SP_UpdateProductCategories @OldCategoryID INT, @NewCategoryID INT, @EffectiveDate DATETIME = NULL AS BEGIN SET NOCOUNT ON; IF @EffectiveDate IS NULL SET @EffectiveDate = GETDATE(); DECLARE @ProductCount INT, @UpdatedCount INT = 0; DECLARE @ProductID INT, @ProductName NVARCHAR(100); DECLARE product_cursor CURSOR FOR SELECT ProductID, ProductName FROM Products WHERE CategoryID = @OldCategoryID AND Status = 'ACTIVE'; BEGIN TRY IF @OldCategoryID = @NewCategoryID RAISERROR('Old and new category IDs cannot be the same', 16, 1); SELECT @ProductCount = COUNT(*) FROM Products WHERE CategoryID = @OldCategoryID AND Status = 'ACTIVE'; IF @ProductCount = 0 BEGIN PRINT 'No active products found in category ' + CAST(@OldCategoryID AS NVARCHAR(10)); RETURN; END; OPEN product_cursor; FETCH NEXT FROM product_cursor INTO @ProductID, @ProductName; WHILE @@FETCH_STATUS = 0 BEGIN BEGIN TRY INSERT INTO ProductCategoryHistory (ProductID, OldCategoryID, NewCategoryID, ChangeDate, ChangedBy) VALUES (@ProductID, @OldCategoryID, @NewCategoryID, @EffectiveDate, SUSER_SNAME()); UPDATE Products SET CategoryID = @NewCategoryID, LastModifiedDate = @EffectiveDate, LastModifiedBy = SUSER_SNAME() WHERE ProductID = @ProductID; SET @UpdatedCount = @UpdatedCount + 1; END TRY BEGIN CATCH INSERT INTO CategoryUpdateErrors (ProductID, ErrorMessage, ErrorDate) VALUES (@ProductID, ERROR_MESSAGE(), GETDATE()); END CATCH; FETCH NEXT FROM product_cursor INTO @ProductID, @ProductName; END; CLOSE product_cursor; DEALLOCATE product_cursor; UPDATE ProductCategories SET LastUpdateDate = @EffectiveDate WHERE CategoryID IN (@OldCategoryID, @NewCategoryID); PRINT 'Category update completed. ' + CAST(@UpdatedCount AS NVARCHAR(10)) + ' products updated out of ' + CAST(@ProductCount AS NVARCHAR(10)) + ' total.'; END TRY BEGIN CATCH IF CURSOR_STATUS('global', 'product_cursor') >= 0 BEGIN CLOSE product_cursor; DEALLOCATE product_cursor; END; RAISERROR('Category update failed: %s', 16, 1, ERROR_MESSAGE()); END CATCH; END;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_UpdateProductCategories (OldCategoryID INT, NewCategoryID INT, EffectiveDate TIMESTAMP DEFAULT NULL) LANGUAGE plpgsql AS $$ BEGIN IF EffectiveDate IS NULL THEN EffectiveDate := LOCALTIMESTAMP; END IF; DECLARE ProductCount INT; UpdatedCount INT := 0; ProductID INT; ProductName VARCHAR(100); product_cursor REFCURSOR; BEGIN IF OldCategoryID = NewCategoryID THEN RAISE EXCEPTION 'Old and new category IDs cannot be the same'; END IF; SELECT COUNT(*) INTO ProductCount FROM Products WHERE CategoryID = OldCategoryID AND Status = 'ACTIVE'; IF ProductCount = 0 THEN RAISE NOTICE 'No active products found in category %', OldCategoryID; RETURN; END IF; OPEN product_cursor FOR SELECT ProductID, ProductName FROM Products WHERE CategoryID = OldCategoryID AND Status = 'ACTIVE'; FETCH product_cursor INTO ProductID, ProductName; WHILE FOUND LOOP BEGIN INSERT INTO ProductCategoryHistory (ProductID, OldCategoryID, NewCategoryID, ChangeDate, ChangedBy) VALUES (ProductID, OldCategoryID, NewCategoryID, EffectiveDate, SESSION_USER); UPDATE Products SET CategoryID = NewCategoryID, LastModifiedDate = EffectiveDate, LastModifiedBy = SESSION_USER WHERE ProductID = ProductID; UpdatedCount := UpdatedCount + 1; EXCEPTION WHEN OTHERS THEN INSERT INTO CategoryUpdateErrors (ProductID, ErrorMessage, ErrorDate) VALUES (ProductID, SQLERRM, LOCALTIMESTAMP); END; FETCH product_cursor INTO ProductID, ProductName; END LOOP; CLOSE product_cursor; UPDATE ProductCategories SET LastUpdateDate = EffectiveDate WHERE CategoryID IN (OldCategoryID, NewCategoryID); RAISE NOTICE 'Category update completed. % products updated out of % total.', UpdatedCount, ProductCount; END; EXCEPTION WHEN OTHERS THEN IF product_cursor IS NOT NULL THEN CLOSE product_cursor; END IF; RAISE EXCEPTION 'Category update failed: %', SQLERRM; END; $$;"
                    },
                    {
                        "case_evaluation_count": 2,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_UpdateProductCategories(IN OldCategoryID INT, IN NewCategoryID INT, IN EffectiveDate TIMESTAMP DEFAULT NULL)\nAS\nBEGIN\n    DECLARE ProductCount INT;\n    DECLARE UpdatedCount INT DEFAULT 0;\n    DECLARE ProductID INT;\n    DECLARE ProductName VARCHAR(100);\n    DECLARE ProductCursor CURSOR FOR\n        SELECT ProductID, ProductName\n        FROM Products\n        WHERE CategoryID = OldCategoryID AND Status = 'ACTIVE';\n    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION\n    BEGIN\n        ROLLBACK;\n        RAISE NOTICE 'Category update failed: %', SQLERRM;\n    END;\n\n    START TRANSACTION;\n\n    IF EffectiveDate IS NULL THEN\n        SELECT NOW() INTO EffectiveDate;\n    END IF;\n\n    IF OldCategoryID = NewCategoryID THEN\n        RAISE NOTICE 'Old and new category IDs cannot be the same';\n        ROLLBACK;\n        RETURN;\n    END IF;\n\n    SELECT COUNT(*) INTO ProductCount\n    FROM Products\n    WHERE CategoryID = OldCategoryID AND Status = 'ACTIVE';\n\n    IF ProductCount = 0 THEN\n        RAISE NOTICE 'No active products found in category %', OldCategoryID;\n        ROLLBACK;\n        RETURN;\n    END IF;\n\n    OPEN ProductCursor;\n\n    FETCH ProductCursor INTO ProductID, ProductName;\n\n    WHILE FOUND LOOP\n        BEGIN\n            INSERT INTO ProductCategoryHistory (ProductID, OldCategoryID, NewCategoryID, ChangeDate, ChangedBy)\n            VALUES (ProductID, OldCategoryID, NewCategoryID, EffectiveDate, SESSION_USER);\n\n            UPDATE Products\n            SET CategoryID = NewCategoryID,\n                LastModifiedDate = EffectiveDate,\n                LastModifiedBy = SESSION_USER\n            WHERE ProductID = ProductID;\n\n            UpdatedCount := UpdatedCount + 1;\n        EXCEPTION\n            WHEN OTHERS THEN\n                INSERT INTO CategoryUpdateErrors (ProductID, ErrorMessage, ErrorDate)\n                VALUES (ProductID, SQLERRM, NOW());\n        END;\n\n        FETCH ProductCursor INTO ProductID, ProductName;\n    END LOOP;\n\n    CLOSE ProductCursor;\n\n    UPDATE ProductCategories\n    SET LastUpdateDate = EffectiveDate\n    WHERE CategoryID IN (OldCategoryID, NewCategoryID);\n\n    RAISE NOTICE 'Category update completed. % products updated out of % total.', UpdatedCount, ProductCount;\n\n    COMMIT;\nEND;"
                    },
                    {
                        "case_evaluation_count": 3,
                        "model_answer": "CREATE OR REPLACE PROCEDURE SP_UpdateProductCategories (IN OldCategoryID INT, IN NewCategoryID INT, IN EffectiveDate TIMESTAMP DEFAULT NULL) LANGUAGE plpgsql AS $$ DECLARE ProductCount INT; UpdatedCount INT := 0; ProductID INT; ProductName VARCHAR(100); CURSOR product_cursor FOR SELECT ProductID, ProductName FROM Products WHERE CategoryID = OldCategoryID AND Status = 'ACTIVE'; BEGIN IF EffectiveDate IS NULL THEN EffectiveDate := NOW(); END IF; IF OldCategoryID = NewCategoryID THEN RAISE EXCEPTION 'Old and new category IDs cannot be the same'; END IF; SELECT COUNT(*) INTO ProductCount FROM Products WHERE CategoryID = OldCategoryID AND Status = 'ACTIVE'; IF ProductCount = 0 THEN RAISE NOTICE 'No active products found in category %', OldCategoryID; RETURN; END IF; FOR product_cursor IN OPEN product_cursor LOOP BEGIN INSERT INTO ProductCategoryHistory (ProductID, OldCategoryID, NewCategoryID, ChangeDate, ChangedBy) VALUES (ProductID, OldCategoryID, NewCategoryID, EffectiveDate, SESSION_USER); UPDATE Products SET CategoryID = NewCategoryID, LastModifiedDate = EffectiveDate, LastModifiedBy = SESSION_USER WHERE ProductID = ProductID; UpdatedCount := UpdatedCount + 1; EXCEPTION WHEN OTHERS THEN INSERT INTO CategoryUpdateErrors (ProductID, ErrorMessage, ErrorDate) VALUES (ProductID, SQLERRM, NOW()); END; END LOOP; UPDATE ProductCategories SET LastUpdateDate = EffectiveDate WHERE CategoryID IN (OldCategoryID, NewCategoryID); RAISE NOTICE 'Category update completed. % products updated out of % total.', UpdatedCount, ProductCount; END; $$; "
                    }
                ]
            }
        ]
    },
    {
        "indicator_name": "China-made_database.jsonl",
        "indicator_weight": 3,
        "evaluation_type": "hybrid",
        "case_pass_count": 13,
        "case_wrong_count": 6,
        "correct_rate": 0.68,
        "case_datas": [
            {
                "case_id": "1",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"1\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"COUNT\", \"AVG\", \"MAX\", \"LOOP\", \"%NOTFOUND\", \"RTRIM\", \"EXCEPTION\", \"SQLERRM\", \"NUMBER\", \"CLOB\", \"SYS_REFCURSOR\", \"ROWNUM\", \"OUT\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE GETEMPLOYEESTATS(p_dept_id IN NUMBER, p_result OUT CLOB) IS TYPE stats_rec IS RECORD (total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER, active_projects NUMBER); TYPE p_result_rec IS RECORD (employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2)); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); BEGIN SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; SELECT COUNT(*) INTO v_stats.active_projects FROM PROJECTS WHERE department_id = p_dept_id AND status = 'ACTIVE'; v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; p_result := '{  \\\"department\\\": \\\"' || v_dept_name || '\\\",  \\\"total_employees\\\": ' || v_stats.total_emp || ',  \\\"salary_stats\\\": {    \\\"average\\\": ' || v_stats.avg_salary || ',    \\\"max\\\": ' || v_stats.max_salary || '  },  \\\"active_projects\\\": ' || v_stats.active_projects || ',  \\\"top_earners\\\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || '    {\\\"id\\\": ' || v_result.employee_id || ', \\\"name\\\": \\\"' || v_result.last_name || '\\\", \\\"salary\\\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || '  ]}'; CLOSE v_cursor; EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\\\"error\\\": \\\"Department not found\\\"}'; WHEN OTHERS THEN p_result := '{\\\"error\\\": \\\"' || SQLERRM || '\\\"}'; END;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE GETEMPLOYEESTATS(p_dept_id IN NUMBER, p_result OUT CLOB) IS TYPE stats_rec IS RECORD (total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER, active_projects NUMBER); TYPE p_result_rec IS RECORD (employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2)); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); BEGIN SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; SELECT COUNT(*) INTO v_stats.active_projects FROM PROJECTS WHERE department_id = p_dept_id AND status = 'ACTIVE'; v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; p_result := '{  \"department\": \"' || v_dept_name || '\",  \"total_employees\": ' || v_stats.total_emp || ',  \"salary_stats\": {    \"average\": ' || v_stats.avg_salary || ',    \"max\": ' || v_stats.max_salary || '  },  \"active_projects\": ' || v_stats.active_projects || ',  \"top_earners\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || '    {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || '  ]}'; CLOSE v_cursor; EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\"error\": \"Department not found\"}'; WHEN OTHERS THEN p_result := '{\"error\": \"' || SQLERRM || '\"}'; END;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE GETEMPLOYEESTATS(p_dept_id IN NUMBER, p_result OUT CLOB) IS TYPE stats_rec IS RECORD (total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER, active_projects NUMBER); TYPE p_result_rec IS RECORD (employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2)); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); BEGIN SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; SELECT COUNT(*) INTO v_stats.active_projects FROM PROJECTS WHERE department_id = p_dept_id AND status = 'ACTIVE'; v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; p_result := '{  \"department\": \"' || v_dept_name || '\",  \"total_employees\": ' || v_stats.total_emp || ',  \"salary_stats\": {    \"average\": ' || v_stats.avg_salary || ',    \"max\": ' || v_stats.max_salary || '  },  \"active_projects\": ' || v_stats.active_projects || ',  \"top_earners\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || '    {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || '  ]}'; CLOSE v_cursor; EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\"error\": \"Department not found\"}'; WHEN OTHERS THEN p_result := '{\"error\": \"' || SQLERRM || '\"}'; END;"
                    }
                ]
            },
            {
                "case_id": "2",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"2\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": []}, \"sql\": \"CREATE TABLE t1 (c1 NUMBER, c2 VARCHAR2(100), c3 DATE);\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE TABLE t1 (c1 NUMBER, c2 VARCHAR2(100), c3 DATE);\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TABLE t1 (c1 NUMBER, c2 VARCHAR2(100), c3 DATE);"
                    }
                ]
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"TO_DATE\"]}, \"sql\": \"INSERT INTO t1 VALUES (1, 'Hello OceanBase', TO_DATE('2025-01-01', 'yyyy-mm-dd'));\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nINSERT INTO t1 VALUES (1, 'Hello OceanBase', TO_DATE('2025-01-01', 'yyyy-mm-dd'));\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "INSERT INTO t1 VALUES (1, 'Hello OceanBase', TO_DATE('2025-01-01', 'yyyy-mm-dd'));"
                    }
                ]
            },
            {
                "case_id": "4",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"4\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"NVL\"]}, \"sql\": \"SELECT c1, NVL(c2, 'is null') FROM t1;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT c1, NVL(c2, 'is null') FROM t1;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT c1, NVL(c2, 'is null') FROM t1;"
                    }
                ]
            },
            {
                "case_id": "5",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"5\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CREATE USER\"]}, \"sql\": \"CREATE USER ob_user IDENTIFIED BY \\\"Password123\\\";\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE USER ob_user IDENTIFIED BY \"Password123\";\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE USER ob_user IDENTIFIED BY Password123;"
                    }
                ]
            },
            {
                "case_id": "6",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"6\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"RANK\"]}, \"sql\": \"SELECT ename, sal, RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) FROM emp;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT ename, sal, RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) FROM emp;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT ename, sal, RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) FROM emp;"
                    }
                ]
            },
            {
                "case_id": "7",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"7\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": []}, \"sql\": \"CREATE OR REPLACE PROCEDURE p_test (p_id IN NUMBER, p_name OUT VARCHAR2) AS BEGIN SELECT ename INTO p_name FROM emp WHERE empno = p_id; END;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE p_test (p_id IN NUMBER, p_name OUT VARCHAR2) AS BEGIN SELECT ename INTO p_name FROM emp WHERE empno = p_id; END;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_test (p_id IN NUMBER, p_name OUT VARCHAR2) AS BEGIN SELECT ename INTO p_name FROM emp WHERE empno = p_id; END;"
                    }
                ]
            },
            {
                "case_id": "8",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"8\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"MINUS\"]}, \"sql\": \"SELECT employee_id, start_date, end_date, job_id FROM job_history MINUS SELECT employee_id, hire_date, NULL, job_id FROM employees;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT employee_id, start_date, end_date, job_id FROM job_history MINUS SELECT employee_id, hire_date, NULL, job_id FROM employees;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT employee_id, start_date, end_date, job_id FROM job_history \nWHERE (employee_id, start_date, end_date, job_id) NOT IN \n(SELECT employee_id, hire_date, NULL, job_id FROM employees);"
                    }
                ]
            },
            {
                "case_id": "9",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"9\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": []}, \"sql\": \"CREATE PUBLIC SYNONYM emp_synonym FOR scott.emp;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PUBLIC SYNONYM emp_synonym FOR scott.emp;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE SYNONYM emp_synonym FOR scott.emp;"
                    }
                ]
            },
            {
                "case_id": "10",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"10\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"INDEX\"]}, \"sql\": \"SELECT /*+ INDEX(employees emp_department_ix) */ * FROM employees WHERE department_id = 10;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT /*+ INDEX(employees emp_department_ix) */ * FROM employees WHERE department_id = 10;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT /*+ INDEX(employees emp_department_ix) */ * FROM employees WHERE department_id = 10;"
                    }
                ]
            },
            {
                "case_id": "11",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"11\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"DBMS_OUTPUT.PUT_LINE\"]}, \"sql\": \"DECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM user_tables WHERE table_name = 'EMP'; DBMS_OUTPUT.PUT_LINE('Count is: ' || v_count); END;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM user_tables WHERE table_name = 'EMP'; DBMS_OUTPUT.PUT_LINE('Count is: ' || v_count); END;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DECLARE v_count NUMBER; BEGIN SELECT COUNT(*) INTO v_count FROM user_tables WHERE table_name = 'EMP'; DBMS_OUTPUT.PUT_LINE('Count is: ' || v_count); END;"
                    }
                ]
            },
            {
                "case_id": "12",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"12\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"LISTAGG\"]}, \"sql\": \"SELECT listagg(ename, ';') WITHIN GROUP (ORDER BY hiredate) FROM emp WHERE deptno = 30;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT listagg(ename, ';') WITHIN GROUP (ORDER BY hiredate) FROM emp WHERE deptno = 30;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT listagg(ename, ';') WITHIN GROUP (ORDER BY hiredate) FROM emp WHERE deptno = 30;"
                    }
                ]
            },
            {
                "case_id": "13",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"13\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"LPAD\"]}, \"sql\": \"SELECT LPAD(' ', 2 * (LEVEL - 1)) || ename FROM emp START WITH mgr IS NULL CONNECT BY PRIOR empno = mgr;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT LPAD(' ', 2 * (LEVEL - 1)) || ename FROM emp START WITH mgr IS NULL CONNECT BY PRIOR empno = mgr;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT RPAD(' ', 2 * (LEVEL - 1)) || ename FROM emp START WITH mgr IS NULL CONNECT BY PRIOR empno = mgr;"
                    }
                ]
            },
            {
                "case_id": "14",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"14\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"AUTONOMOUS_TRANSACTION\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE autonomous_proc IS PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO audit_log (log_msg) VALUES ('An autonomous action occurred'); COMMIT; END;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE autonomous_proc IS PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO audit_log (log_msg) VALUES ('An autonomous action occurred'); COMMIT; END;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE autonomous_proc IS PRAGMA AUTONOMOUS_TRANSACTION; BEGIN EXECUTE IMMEDIATE 'INSERT INTO audit_log (log_msg) VALUES (''An autonomous action occurred'')'; COMMIT; END;"
                    }
                ]
            },
            {
                "case_id": "15",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"15\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CREATE PARTITION TABLE\", \"TO_DATE\"]}, \"sql\": \"CREATE TABLE range_partitioned_sales (sale_id NUMBER, sale_date DATE) PARTITION BY RANGE (sale_date) (PARTITION p1 VALUES LESS THAN (TO_DATE('2024-01-01','YYYY-MM-DD')), PARTITION p2 VALUES LESS THAN (MAXVALUE));\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE TABLE range_partitioned_sales (sale_id NUMBER, sale_date DATE) PARTITION BY RANGE (sale_date) (PARTITION p1 VALUES LESS THAN (TO_DATE('2024-01-01','YYYY-MM-DD')), PARTITION p2 VALUES LESS THAN (MAXVALUE));\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TABLE range_partitioned_sales (sale_id NUMBER, sale_date DATE) PARTITION BY RANGE (sale_date) (PARTITION p1 VALUES LESS THAN (TO_DATE('2024-01-01','YYYY-MM-DD')), PARTITION p2 VALUES LESS THAN MAXVALUE);"
                    }
                ]
            },
            {
                "case_id": "16",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"16\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CREATE PACKAGE\"]}, \"sql\": \"CREATE OR REPLACE PACKAGE BODY emp_mgmt AS PROCEDURE hire(p_name VARCHAR2) IS BEGIN INSERT INTO emp(ename) VALUES(p_name); END; FUNCTION get_count RETURN NUMBER IS v_cnt NUMBER; BEGIN SELECT COUNT(*) INTO v_cnt FROM emp; RETURN v_cnt; END; END emp_mgmt;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PACKAGE BODY emp_mgmt AS PROCEDURE hire(p_name VARCHAR2) IS BEGIN INSERT INTO emp(ename) VALUES(p_name); END; FUNCTION get_count RETURN NUMBER IS v_cnt NUMBER; BEGIN SELECT COUNT(*) INTO v_cnt FROM emp; RETURN v_cnt; END; END emp_mgmt;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PACKAGE BODY emp_mgmt AS PROCEDURE hire(p_name VARCHAR2) IS BEGIN INSERT INTO emp(ename) VALUES(p_name); END; FUNCTION get_count RETURN NUMBER IS v_cnt NUMBER; BEGIN SELECT COUNT(*) INTO v_cnt FROM emp; RETURN v_cnt; END; END; /"
                    }
                ]
            },
            {
                "case_id": "17",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"17\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": []}, \"sql\": \"CREATE MATERIALIZED VIEW mv_emp_summary BUILD IMMEDIATE REFRESH COMPLETE ON DEMAND AS SELECT deptno, COUNT(*) as emp_count FROM emp GROUP BY deptno;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE MATERIALIZED VIEW mv_emp_summary BUILD IMMEDIATE REFRESH COMPLETE ON DEMAND AS SELECT deptno, COUNT(*) as emp_count FROM emp GROUP BY deptno;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE MATERIALIZED VIEW mv_emp_summary BUILD IMMEDIATE REFRESH COMPLETE ON DEMAND AS SELECT deptno, COUNT(*) emp_count FROM emp GROUP BY deptno;"
                    }
                ]
            },
            {
                "case_id": "18",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"18\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CAST\"]}, \"sql\": \"SELECT CAST(MULTISET(SELECT ename FROM emp WHERE deptno = d.deptno) AS SYS.ODCIVARCHAR2LIST) as employees FROM dept d;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT CAST(MULTISET(SELECT ename FROM emp WHERE deptno = d.deptno) AS SYS.ODCIVARCHAR2LIST) as employees FROM dept d;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT CAST(COLLECT(ename) AS SYS.ODCIVARCHAR2LIST) AS employees FROM emp WHERE deptno IN (SELECT deptno FROM dept);"
                    }
                ]
            },
            {
                "case_id": "19",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"19\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"LOCK TABLE\"]}, \"sql\": \"LOCK TABLE emp IN EXCLUSIVE MODE NOWAIT;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nLOCK TABLE emp IN EXCLUSIVE MODE NOWAIT;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "LOCK TABLE emp IN EXCLUSIVE MODE NOWAIT;"
                    }
                ]
            }
        ]
    },
    {
        "indicator_name": "logical_equivalence.jsonl",
        "indicator_weight": 4,
        "evaluation_type": "hybrid",
        "case_pass_count": 11,
        "case_wrong_count": 7,
        "correct_rate": 0.61,
        "case_datas": [
            {
                "case_id": "1",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"1\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"\"]}, \"sql\": \"SELECT e.ename, d.dname, e.sal FROM emp e, dept d WHERE e.deptno = d.deptno(+) AND e.sal > 2000;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT e.ename, d.dname, e.sal FROM emp e, dept d WHERE e.deptno = d.deptno(+) AND e.sal > 2000;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT e.ename, d.dname, e.sal FROM emp e LEFT JOIN dept d ON e.deptno = d.deptno WHERE e.sal > 2000;"
                    }
                ]
            },
            {
                "case_id": "2",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"2\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"BEGIN\", \"TRUNCATE TABLE\", \"WITH(NOLOCK)\", \"coalesce\", \"CURSOR\", \"syscolumns\", \"DECLARE @variable\", \"REPLACE\", \"CONCAT\", \"EXEC\"]}, \"sql\": \"CREATE proc [dbo].[p_job_create_bond_info_all] as begin truncate table tmp_bond_info_all_20010; insert into tmp_bond_info_all_20010(f_val,def_id,id) select field_value,FIELD_DEFINITION_ID,t2.ID from T_OBJECT_FIELD_DATA t1 with(nolock),T_PJ_Bond_Info t2 with(nolock) where t1.OBJECT_NO = 20010 and t1.FIELD_VALUE is not null and t1.parent_id=t2.APPLY_ID ; truncate table tmp_bond_info_all_20020; insert into tmp_bond_info_all_20020(f_val,def_id,id) select field_value,FIELD_DEFINITION_ID,t2.id as bondId from T_OBJECT_FIELD_DATA t1 with(nolock),T_PJ_Bond_Info t2 with(nolock) where t1.OBJECT_NO = 20020 and t1.FIELD_VALUE is not null and t1.PARENT_ID=t2.TEMP_BONDID; truncate table t_pj_bond_info_all; insert into t_pj_bond_info_all(id,temp_bondid,apply_id) select t1.ID,t1.TEMP_BONDID,t1.APPLY_ID from T_PJ_Bond_Info t1 with(nolock) where 1=1; declare c_names cursor for select name from syscolumns where id=object_id('t_pj_bond_info_all') and name like 'def%'; declare @colname varchar(100),@sql varchar(2000) open c_names while 1=1 begin fetch next from c_names into @colname if @@FETCH_STATUS<>0 break; select @sql = 'update a set a.'+@colname+'=b.f_val from t_pj_bond_info_all a,tmp_bond_info_all_20020 b where a.id=b.id and b.def_id=' + replace(@colname,'def_',''); exec( @sql ); select @sql = 'update a set a.'+@colname+'=b.f_val from t_pj_bond_info_all a,tmp_bond_info_all_20010 b where a.id=b.id and a.'+@colname+' is null and b.def_id=' + replace(@colname,'def_',''); exec( @sql ); end close c_names deallocate c_names end\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE proc [dbo].[p_job_create_bond_info_all] as begin truncate table tmp_bond_info_all_20010; insert into tmp_bond_info_all_20010(f_val,def_id,id) select field_value,FIELD_DEFINITION_ID,t2.ID from T_OBJECT_FIELD_DATA t1 with(nolock),T_PJ_Bond_Info t2 with(nolock) where t1.OBJECT_NO = 20010 and t1.FIELD_VALUE is not null and t1.parent_id=t2.APPLY_ID ; truncate table tmp_bond_info_all_20020; insert into tmp_bond_info_all_20020(f_val,def_id,id) select field_value,FIELD_DEFINITION_ID,t2.id as bondId from T_OBJECT_FIELD_DATA t1 with(nolock),T_PJ_Bond_Info t2 with(nolock) where t1.OBJECT_NO = 20020 and t1.FIELD_VALUE is not null and t1.PARENT_ID=t2.TEMP_BONDID; truncate table t_pj_bond_info_all; insert into t_pj_bond_info_all(id,temp_bondid,apply_id) select t1.ID,t1.TEMP_BONDID,t1.APPLY_ID from T_PJ_Bond_Info t1 with(nolock) where 1=1; declare c_names cursor for select name from syscolumns where id=object_id('t_pj_bond_info_all') and name like 'def%'; declare @colname varchar(100),@sql varchar(2000) open c_names while 1=1 begin fetch next from c_names into @colname if @@FETCH_STATUS<>0 break; select @sql = 'update a set a.'+@colname+'=b.f_val from t_pj_bond_info_all a,tmp_bond_info_all_20020 b where a.id=b.id and b.def_id=' + replace(@colname,'def_',''); exec( @sql ); select @sql = 'update a set a.'+@colname+'=b.f_val from t_pj_bond_info_all a,tmp_bond_info_all_20010 b where a.id=b.id and a.'+@colname+' is null and b.def_id=' + replace(@colname,'def_',''); exec( @sql ); end close c_names deallocate c_names end\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE p_job_create_bond_info_all IS BEGIN EXECUTE IMMEDIATE 'TRUNCATE TABLE tmp_bond_info_all_20010'; EXECUTE IMMEDIATE 'INSERT INTO tmp_bond_info_all_20010(f_val, def_id, id) SELECT field_value, FIELD_DEFINITION_ID, t2.ID FROM T_OBJECT_FIELD_DATA t1, T_PJ_Bond_Info t2 WHERE t1.OBJECT_NO = 20010 AND t1.FIELD_VALUE IS NOT NULL AND t1.PARENT_ID = t2.APPLY_ID'; EXECUTE IMMEDIATE 'TRUNCATE TABLE tmp_bond_info_all_20020'; EXECUTE IMMEDIATE 'INSERT INTO tmp_bond_info_all_20020(f_val, def_id, id) SELECT field_value, FIELD_DEFINITION_ID, t2.id AS bondId FROM T_OBJECT_FIELD_DATA t1, T_PJ_Bond_Info t2 WHERE t1.OBJECT_NO = 20020 AND t1.FIELD_VALUE IS NOT NULL AND t1.PARENT_ID = t2.TEMP_BONDID'; EXECUTE IMMEDIATE 'TRUNCATE TABLE t_pj_bond_info_all'; EXECUTE IMMEDIATE 'INSERT INTO t_pj_bond_info_all(id, temp_bondid, apply_id) SELECT t1.ID, t1.TEMP_BONDID, t1.APPLY_ID FROM T_PJ_Bond_Info t1'; FOR c_names IN (SELECT column_name AS name FROM information_schema.columns WHERE table_name = 't_pj_bond_info_all' AND column_name LIKE 'def%') LOOP EXECUTE IMMEDIATE 'UPDATE t_pj_bond_info_all a SET a.' || c_names.name || ' = b.f_val FROM tmp_bond_info_all_20020 b WHERE a.id = b.id AND b.def_id = ' || REGEXP_REPLACE(c_names.name, 'def_', ''); EXECUTE IMMEDIATE 'UPDATE t_pj_bond_info_all a SET a.' || c_names.name || ' = b.f_val FROM tmp_bond_info_all_20010 b WHERE a.id = b.id AND a.' || c_names.name || ' IS NULL AND b.def_id = ' || REGEXP_REPLACE(c_names.name, 'def_', ''); END LOOP; END;"
                    }
                ]
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"NVL\", \"NVL2\"]}, \"sql\": \"UPDATE products SET price = price * 0.9 WHERE category_id = 101 AND NVL(stock_quantity, 0) > 0;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nUPDATE products SET price = price * 0.9 WHERE category_id = 101 AND NVL(stock_quantity, 0) > 0;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "UPDATE products SET price = price * 0.9 WHERE category_id = 101 AND COALESCE(stock_quantity, 0) > 0;"
                    }
                ]
            },
            {
                "case_id": "4",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"4\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"TRUNC\", \"date_trunc\", \"TO_DATE\"]}, \"sql\": \"SELECT user_id, last_login_time FROM user_accounts WHERE TRUNC(last_login_time) = TO_DATE('2025-06-25', 'YYYY-MM-DD');\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT user_id, last_login_time FROM user_accounts WHERE TRUNC(last_login_time) = TO_DATE('2025-06-25', 'YYYY-MM-DD');\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT user_id, last_login_time FROM user_accounts WHERE DATE(last_login_time) = DATE '2025-06-25';"
                    }
                ]
            },
            {
                "case_id": "5",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"5\", \"difficulty_level\": \"1\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"ISNULL\", \"COALESCE\"]}, \"sql\": \"SELECT ProductID, Name, ISNULL(Color, 'N/A') AS ProductColor FROM Production.Product;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT ProductID, Name, ISNULL(Color, 'N/A') AS ProductColor FROM Production.Product;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT ProductID, Name, NVL(Color, 'N/A') AS ProductColor FROM Production.Product;"
                    }
                ]
            },
            {
                "case_id": "6",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"6\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"DENSE_RANK\"]}, \"sql\": \"SELECT ename, sal, DENSE_RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) as rnk FROM emp;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT ename, sal, DENSE_RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) as rnk FROM emp;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT ename, sal, DENSE_RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) as rnk FROM emp;"
                    }
                ]
            },
            {
                "case_id": "7",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"7\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"SUM\", \"EXTRACT\"]}, \"sql\": \"WITH Sales_CTE AS (SELECT SalesPersonID, SUM(TotalDue) AS TotalSales, YEAR(OrderDate) AS SalesYear FROM Sales.SalesOrderHeader GROUP BY SalesPersonID, YEAR(OrderDate)) SELECT * FROM Sales_CTE WHERE TotalSales > 100000;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nWITH Sales_CTE AS (SELECT SalesPersonID, SUM(TotalDue) AS TotalSales, YEAR(OrderDate) AS SalesYear FROM Sales.SalesOrderHeader GROUP BY SalesPersonID, YEAR(OrderDate)) SELECT * FROM Sales_CTE WHERE TotalSales > 100000;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "WITH Sales_CTE AS (SELECT SalesPersonID, SUM(TotalDue) AS TotalSales, EXTRACT(YEAR FROM OrderDate) AS SalesYear FROM Sales.SalesOrderHeader GROUP BY SalesPersonID, EXTRACT(YEAR FROM OrderDate)) SELECT * FROM Sales_CTE WHERE TotalSales > 100000;"
                    }
                ]
            },
            {
                "case_id": "8",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"8\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"ROW_NUMBER\"]}, \"sql\": \"SELECT employee_id, last_name, salary FROM (SELECT employee_id, last_name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) as rn FROM employees) WHERE rn <= 5;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT employee_id, last_name, salary FROM (SELECT employee_id, last_name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) as rn FROM employees) WHERE rn <= 5;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT employee_id, last_name, salary FROM (SELECT employee_id, last_name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) rn FROM employees) WHERE rn <= 5;"
                    }
                ]
            },
            {
                "case_id": "9",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"9\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"varchar\", \"EXECUTE\", \"BEGIN\", \"COMMIT\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE bulk_delete_by_ids(p_id_list IN VARCHAR2) IS v_sql VARCHAR2(1000); BEGIN v_sql := 'DELETE FROM logs WHERE log_id IN (' || p_id_list || ')'; EXECUTE IMMEDIATE v_sql; COMMIT; END;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE bulk_delete_by_ids(p_id_list IN VARCHAR2) IS v_sql VARCHAR2(1000); BEGIN v_sql := 'DELETE FROM logs WHERE log_id IN (' || p_id_list || ')'; EXECUTE IMMEDIATE v_sql; COMMIT; END;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION bulk_delete_by_ids(p_id_list TEXT) RETURNS VOID AS $$ BEGIN EXECUTE 'DELETE FROM logs WHERE log_id IN (' || p_id_list || ')'; COMMIT; END; $$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "10",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"10\", \"difficulty_level\": \"1\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"\"]}, \"sql\": \"SELECT p.Name AS ProductName, v.Name AS VendorName FROM Purchasing.ProductVendor pv JOIN Production.Product p ON pv.ProductID = p.BusinessEntityID JOIN Purchasing.Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE pv.AverageLeadTime > 10;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT p.Name AS ProductName, v.Name AS VendorName FROM Purchasing.ProductVendor pv JOIN Production.Product p ON pv.ProductID = p.BusinessEntityID JOIN Purchasing.Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE pv.AverageLeadTime > 10;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT p.Name AS ProductName, v.Name AS VendorName FROM Purchasing.ProductVendor pv JOIN Production.Product p ON pv.ProductID = p.ProductID JOIN Purchasing.Vendor v ON pv.BusinessEntityID = v.VendorID WHERE pv.AverageLeadTime > 10;"
                    }
                ]
            },
            {
                "case_id": "11",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"11\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"MIN\"]}, \"sql\": \"DELETE FROM job_history WHERE (employee_id, start_date) IN (SELECT employee_id, MIN(start_date) FROM job_history GROUP BY employee_id HAVING COUNT(*) > 1);\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELETE FROM job_history WHERE (employee_id, start_date) IN (SELECT employee_id, MIN(start_date) FROM job_history GROUP BY employee_id HAVING COUNT(*) > 1);\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DELETE FROM job_history WHERE (employee_id, start_date) IN (SELECT employee_id, MIN(start_date) FROM job_history GROUP BY employee_id HAVING COUNT(*) > 1);"
                    }
                ]
            },
            {
                "case_id": "12",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"12\", \"difficulty_level\": \"1\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"LIKE\"]}, \"sql\": \"UPDATE Production.Product SET ListPrice = ListPrice * 1.10 WHERE ProductSubcategoryID IN (SELECT ProductSubcategoryID FROM Production.ProductSubcategory WHERE Name LIKE 'Mountain%');\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nUPDATE Production.Product SET ListPrice = ListPrice * 1.10 WHERE ProductSubcategoryID IN (SELECT ProductSubcategoryID FROM Production.ProductSubcategory WHERE Name LIKE 'Mountain%');\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "UPDATE Production.Product SET ListPrice = ListPrice * 1.10 WHERE ProductSubcategoryID IN (SELECT ProductSubcategoryID FROM Production.ProductSubcategory WHERE Name LIKE 'Mountain%');"
                    }
                ]
            },
            {
                "case_id": "13",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"13\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"LPAD\", \"concat\", \"CONNECT BY\", \"row_number\", \"LEVEL\", \"PRIOR\"]}, \"sql\": \"SELECT LEVEL, LPAD(' ', 2 * (LEVEL - 1)) || ename as name, empno, mgr FROM emp START WITH mgr IS NULL CONNECT BY PRIOR empno = mgr;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT LEVEL, LPAD(' ', 2 * (LEVEL - 1)) || ename as name, empno, mgr FROM emp START WITH mgr IS NULL CONNECT BY PRIOR empno = mgr;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "WITH RECURSIVE emp_hierarchy AS (\n  SELECT 1 AS LEVEL, ename, empno, mgr, LPAD(' ', 0) || ename AS name\n  FROM emp\n  WHERE mgr IS NULL\n  UNION ALL\n  SELECT eh.LEVEL + 1 AS LEVEL, e.ename, e.empno, e.mgr, LPAD(' ', 2 * eh.LEVEL) || e.ename AS name\n  FROM emp e\n  INNER JOIN emp_hierarchy eh ON eh.empno = e.mgr\n)\nSELECT LEVEL, name, empno, mgr FROM emp_hierarchy;"
                    }
                ]
            },
            {
                "case_id": "14",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"14\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"DATE\", \"BEGIN\", \"CONCAT\", \"COMMIT\", \"GET DIAGNOSTICS\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE archive_old_records(p_archive_date IN DATE) IS v_deleted_rows NUMBER; BEGIN DELETE FROM active_data WHERE record_date < p_archive_date RETURNING record_id, record_data INTO (SELECT record_id, record_data FROM DUAL); -- Simplified for example, real logic would bulk insert. INSERT INTO archive_table (record_id, record_data) SELECT record_id, record_data FROM active_data WHERE record_date < p_archive_date; GET DIAGNOSTICS v_deleted_rows = ROW_COUNT; INSERT INTO audit_log (log_message) VALUES (v_deleted_rows || ' rows archived.'); COMMIT; END;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE archive_old_records(p_archive_date IN DATE) IS v_deleted_rows NUMBER; BEGIN DELETE FROM active_data WHERE record_date < p_archive_date RETURNING record_id, record_data INTO (SELECT record_id, record_data FROM DUAL); -- Simplified for example, real logic would bulk insert. INSERT INTO archive_table (record_id, record_data) SELECT record_id, record_data FROM active_data WHERE record_date < p_archive_date; GET DIAGNOSTICS v_deleted_rows = ROW_COUNT; INSERT INTO audit_log (log_message) VALUES (v_deleted_rows || ' rows archived.'); COMMIT; END;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION archive_old_records(p_archive_date DATE) RETURNS VOID AS $$\nDECLARE\n    v_deleted_rows INTEGER;\nBEGIN\n    WITH deleted_rows AS (\n        DELETE FROM active_data\n        WHERE record_date < p_archive_date\n        RETURNING record_id, record_data\n    )\n    INSERT INTO archive_table (record_id, record_data)\n    SELECT record_id, record_data FROM deleted_rows;\n\n    GET DIAGNOSTICS v_deleted_rows = ROW_COUNT;\n\n    INSERT INTO audit_log (log_message) VALUES (v_deleted_rows || ' rows archived.');\n\n    COMMIT;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "15",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"15\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"pivot_func\", \"AVG\"]}, \"sql\": \"SELECT [1] AS AvgCost_DTM_1, [2] AS AvgCost_DTM_2, [3] AS AvgCost_DTM_3, [4] AS AvgCost_DTM_4 FROM (SELECT DaysToManufacture, StandardCost FROM Production.Product WHERE DaysToManufacture > 0) AS src PIVOT (AVG(StandardCost) FOR DaysToManufacture IN ([1], [2], [3], [4])) AS PivotTable;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT [1] AS AvgCost_DTM_1, [2] AS AvgCost_DTM_2, [3] AS AvgCost_DTM_3, [4] AS AvgCost_DTM_4 FROM (SELECT DaysToManufacture, StandardCost FROM Production.Product WHERE DaysToManufacture > 0) AS src PIVOT (AVG(StandardCost) FOR DaysToManufacture IN ([1], [2], [3], [4])) AS PivotTable;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT 1 AS AvgCost_DTM_1, 2 AS AvgCost_DTM_2, 3 AS AvgCost_DTM_3, 4 AS AvgCost_DTM_4 FROM (SELECT DaysToManufacture, StandardCost FROM Production.Product WHERE DaysToManufacture > 0) PIVOT (AVG(StandardCost) FOR DaysToManufacture IN (1, 2, 3, 4)) PivotTable;"
                    }
                ]
            },
            {
                "case_id": "16",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"16\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"max\"]}, \"sql\": \"SELECT dep_name, (SELECT MAX(salary) FROM emps e WHERE e.dep_id = d.dep_id) AS max_salary FROM departments d WHERE 3 <= (SELECT COUNT(*) FROM emps e2 WHERE e2.dep_id = d.dep_id);\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT dep_name, (SELECT MAX(salary) FROM emps e WHERE e.dep_id = d.dep_id) AS max_salary FROM departments d WHERE 3 <= (SELECT COUNT(*) FROM emps e2 WHERE e2.dep_id = d.dep_id);\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT dep_name, (SELECT MAX(salary) FROM emps e WHERE e.dep_id = d.dep_id) AS max_salary FROM departments d WHERE 3 <= (SELECT COUNT(*) FROM emps e2 WHERE e2.dep_id = d.dep_id);"
                    }
                ]
            },
            {
                "case_id": "17",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"17\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CROSS APPLY\", \"SELECT\"]}, \"sql\": \"SELECT c.CustomerID, c.PersonID, p.FirstName, p.LastName FROM Sales.Customer c CROSS APPLY (SELECT * FROM Person.Person p WHERE p.BusinessEntityID = c.PersonID AND p.EmailPromotion = 1) AS p;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT c.CustomerID, c.PersonID, p.FirstName, p.LastName FROM Sales.Customer c CROSS APPLY (SELECT * FROM Person.Person p WHERE p.BusinessEntityID = c.PersonID AND p.EmailPromotion = 1) AS p;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT c.CustomerID, c.PersonID, p.FirstName, p.LastName FROM Sales.Customer c, LATERAL (SELECT * FROM Person.Person p WHERE p.BusinessEntityID = c.PersonID AND p.EmailPromotion = 1) p;"
                    }
                ]
            },
            {
                "case_id": "18",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"18\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"numeric\", \"integer\", \"RECORD\", \"CREATE TYPE\", \"BEGIN\", \"DO\", \"avg\", \"max\", \"ROWNUM\", \"OPEN FOR\", \"FETCH\", \"NOT FOUND\", \"CONCAT\", \"rtrim\", \"CLOSE\", \"EXCEPTION\", \"SQLERRM\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE GETEMPLOYEESTATS(p_dept_id IN NUMBER, p_result OUT CLOB) IS TYPE stats_rec IS RECORD (total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER, active_projects NUMBER); TYPE p_result_rec IS RECORD (employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2)); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); BEGIN SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; SELECT COUNT(*) INTO v_stats.active_projects FROM PROJECTS WHERE department_id = p_dept_id AND status = 'ACTIVE'; v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; p_result := '{  \\\"department\\\": \\\"' || v_dept_name || '\\\",  \\\"total_employees\\\": ' || v_stats.total_emp || ',  \\\"salary_stats\\\": {    \\\"average\\\": ' || v_stats.avg_salary || ',    \\\"max\\\": ' || v_stats.max_salary || '  },  \\\"active_projects\\\": ' || v_stats.active_projects || ',  \\\"top_earners\\\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || '    {\\\"id\\\": ' || v_result.employee_id || ', \\\"name\\\": \\\"' || v_result.last_name || '\\\", \\\"salary\\\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || '  ]}'; CLOSE v_cursor; EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\\\"error\\\": \\\"Department not found\\\"}'; WHEN OTHERS THEN p_result := '{\\\"error\\\": \\\"' || SQLERRM || '\\\"}'; END;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE GETEMPLOYEESTATS(p_dept_id IN NUMBER, p_result OUT CLOB) IS TYPE stats_rec IS RECORD (total_emp NUMBER, avg_salary NUMBER, max_salary NUMBER, active_projects NUMBER); TYPE p_result_rec IS RECORD (employee_id NUMBER, last_name VARCHAR2(50), salary NUMBER(8,2)); v_stats stats_rec; v_result p_result_rec; v_cursor SYS_REFCURSOR; v_sql VARCHAR2(1000); v_dept_name VARCHAR2(50); BEGIN SELECT department_name INTO v_dept_name FROM DEPARTMENTS WHERE department_id = p_dept_id; SELECT COUNT(*), AVG(salary), MAX(salary) INTO v_stats.total_emp, v_stats.avg_salary, v_stats.max_salary FROM EMPLOYEES WHERE department_id = p_dept_id; SELECT COUNT(*) INTO v_stats.active_projects FROM PROJECTS WHERE department_id = p_dept_id AND status = 'ACTIVE'; v_sql := 'SELECT * FROM (SELECT employee_id, last_name, salary FROM employees WHERE department_id = :1 ORDER BY salary DESC) WHERE ROWNUM <= 5'; OPEN v_cursor FOR v_sql USING p_dept_id; p_result := '{  \"department\": \"' || v_dept_name || '\",  \"total_employees\": ' || v_stats.total_emp || ',  \"salary_stats\": {    \"average\": ' || v_stats.avg_salary || ',    \"max\": ' || v_stats.max_salary || '  },  \"active_projects\": ' || v_stats.active_projects || ',  \"top_earners\": ['; LOOP FETCH v_cursor INTO v_result; EXIT WHEN v_cursor%NOTFOUND; p_result := p_result || '    {\"id\": ' || v_result.employee_id || ', \"name\": \"' || v_result.last_name || '\", \"salary\": ' || v_result.salary || '},'; END LOOP; p_result := RTRIM(p_result, ',') || '  ]}'; CLOSE v_cursor; EXCEPTION WHEN NO_DATA_FOUND THEN p_result := '{\"error\": \"Department not found\"}'; WHEN OTHERS THEN p_result := '{\"error\": \"' || SQLERRM || '\"}'; END;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION getemployeestats(p_dept_id INTEGER) RETURNS TEXT LANGUAGE plpgsql AS $$\nDECLARE\n    v_stats RECORD;\n    v_result RECORD;\n    v_sql TEXT;\n    v_dept_name TEXT;\n    p_result TEXT := '';\nBEGIN\n    SELECT department_name INTO v_dept_name FROM departments WHERE department_id = p_dept_id;\n\n    SELECT COUNT(*) AS total_emp, AVG(salary) AS avg_salary, MAX(salary) AS max_salary INTO v_stats\n    FROM employees WHERE department_id = p_dept_id;\n\n    SELECT COUNT(*) INTO v_stats.active_projects\n    FROM projects WHERE department_id = p_dept_id AND status = 'ACTIVE';\n\n    v_sql := 'SELECT employee_id, last_name, salary FROM employees WHERE department_id = $1 ORDER BY salary DESC LIMIT 5';\n    FOR v_result IN EXECUTE v_sql USING p_dept_id LOOP\n        p_result := p_result || format(\n            '{\"id\": %s, \"name\": \"%s\", \"salary\": %s},',\n            v_result.employee_id,\n            v_result.last_name,\n            v_result.salary\n        );\n    END LOOP;\n\n    p_result := format(\n        '{  \"department\": \"%s\",  \"total_employees\": %s,  \"salary_stats\": {    \"average\": %s,    \"max\": %s  },  \"active_projects\": %s,  \"top_earners\": [%s]}',\n        v_dept_name,\n        v_stats.total_emp,\n        coalesce(v_stats.avg_salary, 'null'),\n        coalesce(v_stats.max_salary, 'null'),\n        v_stats.active_projects,\n        RTRIM(p_result, ',')\n    );\n\n    RETURN p_result;\n\nEXCEPTION\n    WHEN OTHERS THEN\n        RETURN format('{\"error\": \"%s\"}', sqlerrm);\nEND;\n$$;"
                    }
                ]
            }
        ]
    },
    {
        "indicator_name": "syntax_error_detection.jsonl",
        "indicator_weight": 2,
        "evaluation_type": "hybrid",
        "case_pass_count": 12,
        "case_wrong_count": 8,
        "correct_rate": 0.6,
        "case_datas": [
            {
                "case_id": "1",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"1\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"NUMERIC\", \"INTEGER\", \"VARCHAR\", \"DATE\", \"NOW\", \"CURRENT_TIMESTAMP\"]}, \"sql\": \"CREATE TABLE employees (employee_id NUMBER(6) NOT NULL, first_name VARCHAR2(20), hire_date DATE DEFAULT SYSDATE);\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE TABLE employees (employee_id NUMBER(6) NOT NULL, first_name VARCHAR2(20), hire_date DATE DEFAULT SYSDATE);\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TABLE employees (employee_id NUMERIC(6) NOT NULL, first_name VARCHAR(20), hire_date DATE DEFAULT CURRENT_DATE);"
                    }
                ]
            },
            {
                "case_id": "2",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"2\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"INTEGER\", \"SET NOCOUNT ON\", \"@@TRANCOUNT\", \"RAISERROR\", \"BEGIN\", \"DATEADD\", \"NOW\", \"current_timestamp\", \"INTERVAL\", \"@@ROWCOUNT\", \"NUMERIC\", \"CURSOR\", \"BEGIN TRY\", \"ERROR_MESSAGE\", \"CAST\", \"CONCAT\"]}, \"sql\": \"CREATE PROCEDURE usp_UpdateOrderStatus @CustomerID INT, @OldStatus VARCHAR(20), @NewStatus VARCHAR(20), @RowsUpdated INT OUTPUT, @ErrorMessage VARCHAR(200) OUTPUT AS BEGIN SET NOCOUNT ON; DECLARE @OrderCount INT, @TranCount INT = @@TRANCOUNT; IF @OldStatus = @NewStatus BEGIN SET @ErrorMessage = '新旧状态不能相同'; RETURN 400; END BEGIN TRY IF @TranCount = 0 BEGIN TRANSACTION; UPDATE Orders SET Status = @NewStatus, LastUpdated = GETDATE() WHERE CustomerID = @CustomerID AND Status = @OldStatus AND OrderDate > DATEADD(month, -3, GETDATE()); SET @RowsUpdated = @@ROWCOUNT; IF @RowsUpdated = 0 BEGIN SET @ErrorMessage = '未找到符合条件的订单'; RETURN 404; END INSERT INTO OrderLog (OrderID, OldStatus, NewStatus, ChangeDate) SELECT OrderID, @OldStatus, @NewStatus, GETDATE() FROM Orders WHERE CustomerID = @CustomerID AND Status = @NewStatus; DECLARE @ProcessingFee DECIMAL(10,2) = 0; DECLARE fee_cursor CURSOR FOR SELECT Fee FROM OrderDetails WHERE OrderID IN (SELECT OrderID FROM Orders WHERE CustomerID = @CustomerID AND Status = @NewStatus); OPEN fee_cursor; FETCH NEXT FROM fee_cursor INTO @ProcessingFee; WHILE @@FETCH_STATUS = 0 BEGIN SET @ProcessingFee = @ProcessingFee * 0.95; FETCH NEXT FROM fee_cursor INTO @ProcessingFee; END CLOSE fee_cursor; DEALLOCATE fee_cursor; IF @TranCount = 0 COMMIT TRANSACTION; SET @ErrorMessage = '更新成功'; RETURN 200; END TRY BEGIN CATCH IF @TranCount = 0 AND @@TRANCOUNT > 0 ROLLBACK TRANSACTION; SET @ErrorMessage = ERROR_MESSAGE() + ' (Line:' + CAST(ERROR_LINE() AS VARCHAR) + ')'; RETURN 500; END CATCH END\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE usp_UpdateOrderStatus @CustomerID INT, @OldStatus VARCHAR(20), @NewStatus VARCHAR(20), @RowsUpdated INT OUTPUT, @ErrorMessage VARCHAR(200) OUTPUT AS BEGIN SET NOCOUNT ON; DECLARE @OrderCount INT, @TranCount INT = @@TRANCOUNT; IF @OldStatus = @NewStatus BEGIN SET @ErrorMessage = '新旧状态不能相同'; RETURN 400; END BEGIN TRY IF @TranCount = 0 BEGIN TRANSACTION; UPDATE Orders SET Status = @NewStatus, LastUpdated = GETDATE() WHERE CustomerID = @CustomerID AND Status = @OldStatus AND OrderDate > DATEADD(month, -3, GETDATE()); SET @RowsUpdated = @@ROWCOUNT; IF @RowsUpdated = 0 BEGIN SET @ErrorMessage = '未找到符合条件的订单'; RETURN 404; END INSERT INTO OrderLog (OrderID, OldStatus, NewStatus, ChangeDate) SELECT OrderID, @OldStatus, @NewStatus, GETDATE() FROM Orders WHERE CustomerID = @CustomerID AND Status = @NewStatus; DECLARE @ProcessingFee DECIMAL(10,2) = 0; DECLARE fee_cursor CURSOR FOR SELECT Fee FROM OrderDetails WHERE OrderID IN (SELECT OrderID FROM Orders WHERE CustomerID = @CustomerID AND Status = @NewStatus); OPEN fee_cursor; FETCH NEXT FROM fee_cursor INTO @ProcessingFee; WHILE @@FETCH_STATUS = 0 BEGIN SET @ProcessingFee = @ProcessingFee * 0.95; FETCH NEXT FROM fee_cursor INTO @ProcessingFee; END CLOSE fee_cursor; DEALLOCATE fee_cursor; IF @TranCount = 0 COMMIT TRANSACTION; SET @ErrorMessage = '更新成功'; RETURN 200; END TRY BEGIN CATCH IF @TranCount = 0 AND @@TRANCOUNT > 0 ROLLBACK TRANSACTION; SET @ErrorMessage = ERROR_MESSAGE() + ' (Line:' + CAST(ERROR_LINE() AS VARCHAR) + ')'; RETURN 500; END CATCH END\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE usp_UpdateOrderStatus (IN CustomerID INT, IN OldStatus VARCHAR(20), IN NewStatus VARCHAR(20), OUT RowsUpdated INT, OUT ErrorMessage VARCHAR(200)) \nLANGUAGE plpgsql AS $$\nDECLARE\n    OrderCount INT;\n    TranCount INT = TXID_CURRENT();\n    ProcessingFee NUMERIC(10,2) = 0;\n    fee_cursor REFCURSOR;\nBEGIN\n    IF OldStatus = NewStatus THEN\n        ErrorMessage := '新旧状态不能相同';\n        RETURN 400;\n    END IF;\n\n    BEGIN\n        IF pg_try_advisory_xact_lock(TranCount) THEN\n            BEGIN\n                UPDATE Orders \n                SET Status = NewStatus, LastUpdated = CURRENT_TIMESTAMP \n                WHERE CustomerID = CustomerID \n                AND Status = OldStatus \n                AND OrderDate > (CURRENT_DATE - INTERVAL '3 months');\n                \n                GET DIAGNOSTICS RowsUpdated = ROW_COUNT;\n                \n                IF RowsUpdated = 0 THEN\n                    ErrorMessage := '未找到符合条件的订单';\n                    RETURN 404;\n                END IF;\n\n                INSERT INTO OrderLog (OrderID, OldStatus, NewStatus, ChangeDate)\n                SELECT OrderID, OldStatus, NewStatus, CURRENT_TIMESTAMP \n                FROM Orders \n                WHERE CustomerID = CustomerID \n                AND Status = NewStatus;\n\n                OPEN fee_cursor FOR SELECT Fee FROM OrderDetails \n                WHERE OrderID IN (SELECT OrderID FROM Orders WHERE CustomerID = CustomerID AND Status = NewStatus);\n\n                LOOP\n                    FETCH fee_cursor INTO ProcessingFee;\n                    EXIT WHEN NOT FOUND;\n                    ProcessingFee := ProcessingFee * 0.95;\n                END LOOP;\n                \n                CLOSE fee_cursor;\n\n                COMMIT;\n                ErrorMessage := '更新成功';\n                RETURN 200;\n            EXCEPTION WHEN OTHERS THEN\n                IF TXID_CURRENT() IS NOT NULL THEN\n                    ROLLBACK;\n                END IF;\n                ErrorMessage := SQLERRM || ' (Line:' || PG_CONTEXT || ')';\n                RETURN 500;\n            END;\n        END IF;\n    END;\n\nEND;\n$$;"
                    }
                ]
            },
            {
                "case_id": "3",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"3\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CREATE SEQUENCE\"]}, \"sql\": \"CREATE SEQUENCE emp_seq START WITH 1000 INCREMENT BY 1 CACHE 20;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE SEQUENCE emp_seq START WITH 1000 INCREMENT BY 1 CACHE 20;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE SEQUENCE emp_seq START WITH 1000 INCREMENT BY 1 CACHE 20;"
                    }
                ]
            },
            {
                "case_id": "4",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"4\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"PROCEDURE\", \"VARCHAR\", \"BEGIN\", \"OPEN FOR\", \"uuid\", \"CONCAT\", \"random\", \"NVL\", \"COALESCE\", \"count\", \"NOW\", \"CURRENT_TIMESTAMP\", \"DO\"]}, \"sql\": \"DELIMITER $$ CREATE OR REPLACE PROCEDURE \\\"SP_KSH_PERSON_DESC\\\" (V_USER_ID IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR SELECT SYS_GUID() AS UUID, v0.usr_name AS user_name, v0.dept_name, v0.position_describe AS post_name, NVL(v1.ves_cnt,0) AS ves_cnt, NVL(v1.jw_num,0) AS jw_num, NVL(v1.hw_num,0) AS hw_num FROM (SELECT su.usr_id, su.usr_name, so.office_name || so2.office_name AS dept_name, su.position_describe FROM sys_user su LEFT JOIN sys_office so ON su.department_id = so.office_id LEFT JOIN sys_office so2 ON su.dept = so2.office_code WHERE su.usr_id = V_USER_ID) v0 LEFT JOIN (SELECT COUNT(um.vessel_code) AS ves_cnt, COUNT(DISTINCT fn_get_vessel_manager_bc(um.VESSEL_CODE, SYSDATE, '1')) AS jw_num, COUNT(DISTINCT fn_get_vessel_manager_bc(um.VESSEL_CODE, SYSDATE, '2')) AS hw_num FROM ksh_user_manage_ship um WHERE um.user_id = V_USER_ID) v1 ON 1=1; END SP_KSH_PERSON_DESC; $$\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDELIMITER $$ CREATE OR REPLACE PROCEDURE \"SP_KSH_PERSON_DESC\" (V_USER_ID IN VARCHAR2, OUTCURSOR OUT SYS_REFCURSOR) IS BEGIN OPEN OUTCURSOR FOR SELECT SYS_GUID() AS UUID, v0.usr_name AS user_name, v0.dept_name, v0.position_describe AS post_name, NVL(v1.ves_cnt,0) AS ves_cnt, NVL(v1.jw_num,0) AS jw_num, NVL(v1.hw_num,0) AS hw_num FROM (SELECT su.usr_id, su.usr_name, so.office_name || so2.office_name AS dept_name, su.position_describe FROM sys_user su LEFT JOIN sys_office so ON su.department_id = so.office_id LEFT JOIN sys_office so2 ON su.dept = so2.office_code WHERE su.usr_id = V_USER_ID) v0 LEFT JOIN (SELECT COUNT(um.vessel_code) AS ves_cnt, COUNT(DISTINCT fn_get_vessel_manager_bc(um.VESSEL_CODE, SYSDATE, '1')) AS jw_num, COUNT(DISTINCT fn_get_vessel_manager_bc(um.VESSEL_CODE, SYSDATE, '2')) AS hw_num FROM ksh_user_manage_ship um WHERE um.user_id = V_USER_ID) v1 ON 1=1; END SP_KSH_PERSON_DESC; $$\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION SP_KSH_PERSON_DESC(V_USER_ID VARCHAR, OUTCURSOR OUT REFCURSOR) RETURNS void AS $$\nBEGIN\n    OPEN OUTCURSOR FOR\n        SELECT uuid_generate_v4() AS UUID, \n               v0.usr_name AS user_name, \n               v0.dept_name, \n               v0.position_describe AS post_name, \n               COALESCE(v1.ves_cnt, 0) AS ves_cnt, \n               COALESCE(v1.jw_num, 0) AS jw_num, \n               COALESCE(v1.hw_num, 0) AS hw_num\n        FROM (\n            SELECT su.usr_id, \n                   su.usr_name, \n                   so.office_name || so2.office_name AS dept_name, \n                   su.position_describe\n            FROM sys_user su\n            LEFT JOIN sys_office so ON su.department_id = so.office_id\n            LEFT JOIN sys_office so2 ON su.dept = so2.office_code\n            WHERE su.usr_id = V_USER_ID\n        ) v0\n        LEFT JOIN (\n            SELECT COUNT(um.vessel_code) AS ves_cnt, \n                   COUNT(DISTINCT fn_get_vessel_manager_bc(um.VESSEL_CODE, NOW(), '1')) AS jw_num, \n                   COUNT(DISTINCT fn_get_vessel_manager_bc(um.VESSEL_CODE, NOW(), '2')) AS hw_num\n            FROM ksh_user_manage_ship um\n            WHERE um.user_id = V_USER_ID\n        ) v1 ON 1=1;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "5",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"5\", \"difficulty_level\": \"1\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"PG_TABLES\", \"INTEGER\", \"nvarchar\"]}, \"sql\": \"IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Logs') CREATE TABLE Logs (LogID int, LogMessage nvarchar(max));\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nIF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Logs') CREATE TABLE Logs (LogID int, LogMessage nvarchar(max));\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DO $$  \nBEGIN  \n  IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'logs') THEN  \n    CREATE TABLE Logs (LogID int, LogMessage text);  \n  END IF;  \nEND;  \n$$;  "
                    }
                ]
            },
            {
                "case_id": "6",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"6\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"WITH READ ONLY\"]}, \"sql\": \"CREATE OR REPLACE VIEW v_emp_dept AS SELECT e.ename, d.dname FROM emp e JOIN dept d ON e.deptno = d.deptno WITH READ ONLY;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE VIEW v_emp_dept AS SELECT e.ename, d.dname FROM emp e JOIN dept d ON e.deptno = d.deptno WITH READ ONLY;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE VIEW v_emp_dept AS SELECT e.ename, d.dname FROM emp e JOIN dept d ON e.deptno = d.deptno;"
                    }
                ]
            },
            {
                "case_id": "7",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"7\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"CHAR\", \"BEGIN\"]}, \"sql\": \"CREATE PROCEDURE sp_GetCustomerOrders @CustomerID nchar(5) AS BEGIN SELECT * FROM Orders WHERE CustomerID = @CustomerID; END;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE sp_GetCustomerOrders @CustomerID nchar(5) AS BEGIN SELECT * FROM Orders WHERE CustomerID = @CustomerID; END;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE sp_GetCustomerOrders(IN CustomerID nchar(5)) LANGUAGE plpgsql AS $$ BEGIN SELECT * FROM Orders WHERE CustomerID = CustomerID; END; $$;"
                    }
                ]
            },
            {
                "case_id": "8",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"8\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CREATE INDEX\", \"LOWER\"]}, \"sql\": \"CREATE INDEX idx_emp_name ON emp(LOWER(ename));\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE INDEX idx_emp_name ON emp(LOWER(ename));\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE INDEX idx_emp_name ON emp(NLSSORT(LOWER(ename), 'NLS_SORT = BINARY'));"
                    }
                ]
            },
            {
                "case_id": "9",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"9\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"CREATE TRIGGER\", \"FOR EACH ROW\", \"BEGIN\"]}, \"sql\": \"CREATE OR REPLACE TRIGGER trg_audit_emp_sal BEFORE UPDATE OF sal ON emp FOR EACH ROW BEGIN INSERT INTO emp_audit(emp_id, old_sal, new_sal) VALUES (:OLD.empno, :OLD.sal, :NEW.sal); END;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE TRIGGER trg_audit_emp_sal BEFORE UPDATE OF sal ON emp FOR EACH ROW BEGIN INSERT INTO emp_audit(emp_id, old_sal, new_sal) VALUES (:OLD.empno, :OLD.sal, :NEW.sal); END;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION trg_audit_emp_sal_func() RETURNS TRIGGER AS $$\nBEGIN\n    INSERT INTO emp_audit(emp_id, old_sal, new_sal) VALUES (OLD.empno, OLD.sal, NEW.sal);\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER trg_audit_emp_sal\nBEFORE UPDATE OF sal ON emp\nFOR EACH ROW\nEXECUTE FUNCTION trg_audit_emp_sal_func();"
                    }
                ]
            },
            {
                "case_id": "10",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"10\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CURSOR\", \"DECLARE CURSOR\", \"VARCHAR\"]}, \"sql\": \"DECLARE @MyCursor CURSOR; DECLARE @LastName varchar(50); SET @MyCursor = CURSOR FOR SELECT LastName FROM Person.Person; OPEN @MyCursor; FETCH NEXT FROM @MyCursor INTO @LastName; CLOSE @MyCursor; DEALLOCATE @MyCursor;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDECLARE @MyCursor CURSOR; DECLARE @LastName varchar(50); SET @MyCursor = CURSOR FOR SELECT LastName FROM Person.Person; OPEN @MyCursor; FETCH NEXT FROM @MyCursor INTO @LastName; CLOSE @MyCursor; DEALLOCATE @MyCursor;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DO $$\nDECLARE\n    LastName VARCHAR(50);\n    MyCursor CURSOR FOR SELECT LastName FROM Person.Person;\nBEGIN\n    OPEN MyCursor;\n    FETCH MyCursor INTO LastName;\n    CLOSE MyCursor;\nEND $$;"
                    }
                ]
            },
            {
                "case_id": "11",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"11\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"ALTER TABLE ADD CONSTRAINT\"]}, \"sql\": \"ALTER TABLE sales ADD CONSTRAINT sales_time_fk FOREIGN KEY (time_id) REFERENCES times(time_id) ENABLE NOVALIDATE;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nALTER TABLE sales ADD CONSTRAINT sales_time_fk FOREIGN KEY (time_id) REFERENCES times(time_id) ENABLE NOVALIDATE;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "ALTER TABLE sales ADD CONSTRAINT sales_time_fk FOREIGN KEY (time_id) REFERENCES times(time_id) ENABLE;"
                    }
                ]
            },
            {
                "case_id": "12",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"12\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE TYPE\", \"nvarchar\", \"coalesce\"]}, \"sql\": \"CREATE TYPE [dbo].[AccountNumber] FROM [nvarchar](15) NOT NULL;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE TYPE [dbo].[AccountNumber] FROM [nvarchar](15) NOT NULL;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE TYPE AccountNumber AS VARCHAR(15);"
                    }
                ]
            },
            {
                "case_id": "13",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"13\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"CREATE SCHEMA\", \"PROCEDURE\", \"VARCHAR\", \"NUMERIC\", \"INTEGER\"]}, \"sql\": \"CREATE OR REPLACE PACKAGE emp_actions AS PROCEDURE hire_employee(p_name VARCHAR2, p_job VARCHAR2); FUNCTION get_salary(p_emp_id NUMBER) RETURN NUMBER; END emp_actions;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PACKAGE emp_actions AS PROCEDURE hire_employee(p_name VARCHAR2, p_job VARCHAR2); FUNCTION get_salary(p_emp_id NUMBER) RETURN NUMBER; END emp_actions;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE FUNCTION hire_employee(p_name VARCHAR, p_job VARCHAR) RETURNS VOID AS $$ BEGIN -- Function body END; $$ LANGUAGE plpgsql;\n\nCREATE OR REPLACE FUNCTION get_salary(p_emp_id NUMERIC) RETURNS NUMERIC AS $$ BEGIN -- Function body END; $$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "14",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"14\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"CREATE FUNCTION\", \"INTEGER\", \"BEGIN\", \"SET NOCOUNT ON\", \"BEGIN TRY\"]}, \"sql\": \"CREATE PROCEDURE [HumanResources].[uspUpdateEmployeePersonalInfo] @BusinessEntityID [int], @NationalIDNumber [nvarchar](15), @BirthDate [datetime] AS BEGIN SET NOCOUNT ON; BEGIN TRY UPDATE [HumanResources].[Employee] SET [NationalIDNumber] = @NationalIDNumber, [BirthDate] = @BirthDate WHERE [BusinessEntityID] = @BusinessEntityID; END TRY BEGIN CATCH EXECUTE [dbo].[uspLogError]; END CATCH; END;\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PROCEDURE [HumanResources].[uspUpdateEmployeePersonalInfo] @BusinessEntityID [int], @NationalIDNumber [nvarchar](15), @BirthDate [datetime] AS BEGIN SET NOCOUNT ON; BEGIN TRY UPDATE [HumanResources].[Employee] SET [NationalIDNumber] = @NationalIDNumber, [BirthDate] = @BirthDate WHERE [BusinessEntityID] = @BusinessEntityID; END TRY BEGIN CATCH EXECUTE [dbo].[uspLogError]; END CATCH; END;\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE HumanResources.uspUpdateEmployeePersonalInfo (BusinessEntityID int, NationalIDNumber nvarchar(15), BirthDate timestamp) AS BEGIN BEGIN TRY UPDATE HumanResources.Employee SET NationalIDNumber = NationalIDNumber, BirthDate = BirthDate WHERE BusinessEntityID = BusinessEntityID; EXCEPTION WHEN OTHERS THEN CALL dbo.uspLogError(); END; END;"
                    }
                ]
            },
            {
                "case_id": "15",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"15\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"CREATE PROCEDURE\", \"PRAGMA AUTONOMOUS_TRANSACTION\", \"BEGIN\", \"SYSDATE\", \"COMMIT\"]}, \"sql\": \"CREATE OR REPLACE PROCEDURE process_orders IS PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO order_logs (log_date, log_msg) VALUES (SYSDATE, 'Processing started'); DELETE FROM new_orders; COMMIT; END;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE OR REPLACE PROCEDURE process_orders IS PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO order_logs (log_date, log_msg) VALUES (SYSDATE, 'Processing started'); DELETE FROM new_orders; COMMIT; END;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE OR REPLACE PROCEDURE process_orders IS PRAGMA AUTONOMOUS_TRANSACTION; BEGIN INSERT INTO order_logs (log_date, log_msg) VALUES (SYSDATE, 'Processing started'); DELETE FROM new_orders; COMMIT; END; "
                    }
                ]
            },
            {
                "case_id": "16",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"16\", \"difficulty_level\": \"2\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"DECLARE\", \"CURSOR\", \"BEGIN\", \"DO\"]}, \"sql\": \"DECLARE TYPE emp_cur_type IS REF CURSOR; v_cur emp_cur_type; BEGIN OPEN v_cur FOR SELECT * FROM emp; END;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nDECLARE TYPE emp_cur_type IS REF CURSOR; v_cur emp_cur_type; BEGIN OPEN v_cur FOR SELECT * FROM emp; END;\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "DO $$ \nDECLARE\n    v_cur REFCURSOR;\nBEGIN\n    OPEN v_cur FOR SELECT * FROM emp;\nEND;\n$$ LANGUAGE plpgsql;"
                    }
                ]
            },
            {
                "case_id": "17",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"17\", \"difficulty_level\": \"3\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"XML\", \"xmlelement\", \"json_build_object\", \"xmlagg\"]}, \"sql\": \"SELECT OrderID, CustomerID, OrderDate FROM Orders FOR XML PATH('Order'), ROOT('Orders');\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT OrderID, CustomerID, OrderDate FROM Orders FOR XML PATH('Order'), ROOT('Orders');\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT xmlserialize(document xmlelement(name \"Orders\", xmlagg(xmlelement(name \"Order\", xmlforest(OrderID, CustomerID, OrderDate))))) FROM Orders;"
                    }
                ]
            },
            {
                "case_id": "18",
                "case_weight": 1,
                "case_content": "{\"case_id\": \"18\", \"difficulty_level\": \"1\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"Postgresql-9.2\", \"key_info\": {\"sys_func\": [\"SET\", \"SET SESSION AUTHORIZATION\", \"NLS_DATE_FORMAT\", \"to_char\", \"DateStyle\"]}, \"sql\": \"ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to Postgresql-9.2 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';\n\nTranslated SQL (Postgresql-9.2):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SET datestyle = 'ISO, MDY';"
                    }
                ]
            },
            {
                "case_id": "19",
                "case_weight": 3,
                "case_content": "{\"case_id\": \"19\", \"difficulty_level\": \"3\", \"source_dialect\": \"ORACLE\", \"target_dialect\": \"OceanBase的Oracle模式-4.2.5\", \"key_info\": {\"sys_func\": [\"Hint\", \"并行执行 Hint\"]}, \"sql\": \"SELECT /*+ FULL(e) PARALLEL(e, 4) */ e.ename, d.dname FROM emp e, dept d WHERE e.deptno = d.deptno;\"}",
                "case_eval_result": "Pass",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from ORACLE syntax to OceanBase的Oracle模式-4.2.5 syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nSELECT /*+ FULL(e) PARALLEL(e, 4) */ e.ename, d.dname FROM emp e, dept d WHERE e.deptno = d.deptno;\n\nTranslated SQL (OceanBase的Oracle模式-4.2.5):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "SELECT /*+ FULL(e) PARALLEL(e 4) */ e.ename, d.dname FROM emp e, dept d WHERE e.deptno = d.deptno;"
                    }
                ]
            },
            {
                "case_id": "20",
                "case_weight": 2,
                "case_content": "{\"case_id\": \"20\", \"difficulty_level\": \"2\", \"source_dialect\": \"SQLServer\", \"target_dialect\": \"GaussDB-v2.0_3.x\", \"key_info\": {\"sys_func\": [\"CREATE TABLE PARTITION\", \"INTEGER\"]}, \"sql\": \"CREATE PARTITION FUNCTION myRangePF1 (int) AS RANGE LEFT FOR VALUES (1, 100, 1000);\"}",
                "case_eval_result": "Fail",
                "mode_question": "You are an expert in SQL dialect translation.\nPlease convert the following SQL statement from SQLServer syntax to GaussDB-v2.0_3.x syntax.\nReturn **only** the translated SQL statement(**no extra text**, **no markdown fences**, **no comments**, **need directly executable sql**), with no additional commentary or text.\n\nSource SQL:\nCREATE PARTITION FUNCTION myRangePF1 (int) AS RANGE LEFT FOR VALUES (1, 100, 1000);\n\nTranslated SQL (GaussDB-v2.0_3.x):\n",
                "model_answers": [
                    {
                        "case_evaluation_count": 1,
                        "model_answer": "CREATE PARTITION TABLE myRangePF1 (column_name int) PARTITION BY RANGE(column_name) (PARTITION p1 VALUES LESS THAN (1), PARTITION p2 VALUES LESS THAN (100), PARTITION p3 VALUES LESS THAN (1000), PARTITION p4 VALUES LESS THAN (MAXVALUE));"
                    }
                ]
            }
        ]
    }
]